cscope 15 C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad"               0001093169
	@C:\skuksenk\_Quadro\ARM\prj\MyLibs\MyLib.c

1 
	~"MyLib.h
"

5 
öt16_t
 
	$m≠
(
öt16_t
 
x
, i¡16_à
ö_mö
, i¡16_à
ö_max
, i¡16_à
out_mö
, i¡16_à
out_max
)

7  (
x
 - 
ö_mö
Ë* (
out_max
 - 
out_mö
Ë/ (
ö_max
 - in_min) + out_min;

8 
	}
}

10 
uöt32_t
 
	$GëNextI¡FromSåög
 (** 
curs‹
, 
dividî
)

12 
vÆ
 [20];

13 
uöt8_t
 
cmdPoöãr
 = 0;

14 
vÆ
[0] = 0;

17 **
curs‹
)

19 i‡(**
curs‹
 !
dividî
)

21 
vÆ
[
cmdPoöãr
++] = **
curs‹
;

22 (*
curs‹
)++;

26 (*
curs‹
)++;

27 
vÆ
[
cmdPoöãr
] = 0;

29  
	`©oi
(
vÆ
);

32 
vÆ
[
cmdPoöãr
] = 0;

33  
	`©oi
(
vÆ
);

34 
	}
}

37 
	$ªvî£
(
s
[])

39 
i
, 
j
;

40 
c
;

41 
i
 = 0, 
j
 = 
	`°æí
(
s
)-1; i<j; i++, j--)

43 
c
 = 
s
[
i
];

44 
s
[
i
] = s[
j
];

45 
s
[
j
] = 
c
;

47 
	}
}

49 
	$ôﬂ
(
n
, 
s
[], *
Àn
)

51 
i
, 
sign
;

52 i‡((
sign
 = 
n
) < 0)

53 
n
 = -n;

54 
i
 = 0;

57 
s
[
i
++] = 
n
 % 10 + '0';

58 } (
n
 /= 10) > 0);

59 i‡(
sign
 < 0)

60 
s
[
i
++] = '-';

61 
s
[
i
] = '\0';

62 
	`ªvî£
(
s
);

63 *
Àn
 = 
i
;

64 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\MyLibs\MyLib.h

1 #i‚de‡
Mylib_h


2 
	#Mylib_h


	)

4 
	~<°dio.h
>

5 
	~<°rög.h
>

6 
	~<°dlib.h
>

7 #ifde‡
STM32F105RB


8 
	~"°m32f105xc.h
"

10 
	~"°m32f10x.h
"

12 
öt16_t
 
m≠
(öt16_à
x
, i¡16_à
ö_mö
, i¡16_à
ö_max
, i¡16_à
out_mö
, i¡16_à
out_max
);

13 
uöt32_t
 
GëNextI¡FromSåög
 (** 
curs‹
, 
dividî
);

14 
ôﬂ
(
n
, 
s
[], *
Àn
);

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\GUI\inc\GUI.h

1 #i‚de‡
GUI_H_INCLUDED


2 
	#GUI_H_INCLUDED


	)

5 
	~"GlobÆObje˘s.h
"

6 
	~"Buâ⁄s.h
"

7 
	~"LCD.h
"

8 
	~<MyLib.h
>

9 
	~"FªeRTOS.h
"

10 
	~"queue.h
"

11 
	~"èsk.h
"

13 
	#EVENT_QUEUE_LEN
 10

	)

15 
	#NO_EVENT
 0

	)

16 
	#FORM_INIT_EVENT
 1

	)

17 
	#KEY_DOWN_EVENT
 2

	)

18 
	#KEY_UP_EVENT
 3

	)

19 
	#KEY_ESC_EVENT
 4

	)

20 
	#KEY_ENTER_EVENT
 5

	)

21 
	#STICK_UP_EVENT
 6

	)

22 
	#STICK_DOWN_EVENT
 7

	)

23 
	#KEY_LEFT_EVENT
 8

	)

24 
	#KEY_RIGHT_EVENT
 9

	)

26 
	#ENCODER_UP_EVENT
 10

	)

27 
	#ENCODER_DOWN_EVENT
 11

	)

28 
	#ENCODER_CLICK_EVENT
 12

	)

29 
	#ENCODER_LONGCLICK_EVENT
 13

	)

31 
	#RIGHT_X
 0

	)

32 
	#RIGHT_Y
 1

	)

33 
	#LEFT_X
 2

	)

34 
	#LEFT_Y
 3

	)

37 #i‚de‡
LCDTask_PRIORITY


38 
	#LCDTask_PRIORITY
 ( 
tskIDLE_PRIORITY
 + 0 )

	)

40 #i‚de‡
Buâ⁄sEvítTask_PRIORITY


41 
	#Buâ⁄sEvítTask_PRIORITY
 ( 
tskIDLE_PRIORITY
 + 0 )

	)

45 (*
	tFORMFUNC
)(
	tuöt8_t
 
	tevít
);

46 
FORMFUNC
 
CuºítF‹mProc
;

47 
uöt8_t
 
La°Evít
;

49 c⁄° 
chName
 [
ADC_CHANNELS
][13];

52 
	`Buâ⁄sEvítTask
 ( *
pvP¨amëîs
 );

53 
	`GUI_Task
 ( *
pvP¨amëîs
 );

54 
	`GUI_öô
();

57 
	#DATA_COL_X_POS
 78

	)

58 
	#HEADER_Y_POS
 121

	)

59 
	#DATA_Y_POS
 111

	)

60 
	#VALUE_INCREMENT
 10

	)

61 
	#CHANNELS_PARAM_PAGES
 6

	)

62 
	#DEADZONES_VALUE_INCREMENT
 1

	)

63 
	#TRANSFORM_VALUE_INCREMENT
 1

	)

64 
	#SCALE_VALUE_INCREMENT
 10

	)

65 
	#INCREMENTATION_MULTIPLIER
 10

	)

67 
	`CÆibøti⁄_∑øms_f‹m
 (
uöt8_t
 
evít
);

71 
	`Save_∑ømëîs_f‹m
 (
uöt8_t
 
evít
);

74 
	`Re£t_∑ømëîs_f‹m
 (
uöt8_t
 
evít
);

77 
	`ADC_ˇlibøti⁄_f‹m
 (
uöt8_t
 
evít
);

80 
	`ADC_f‹m
 (
uöt8_t
 
evít
);

83 
	`Trimmî_f‹m
 (
uöt8_t
 
evít
);

86 
	`Buâ⁄s_M≠pög_f‹m
 (
uöt8_t
 
evít
);

89 
	`LCD_∑ømëîs_f‹m
 (
uöt8_t
 
evít
);

92 
	#MAX_MENU_ROWS
 10

	)

93 
	#MENU_X_POS
 115

	)

94 
	#MENU_Y_POS
 1

	)

95 
	`Míu_F‹m
 (
uöt8_t
 
evít
);

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\GUI\src\ADC_calibration_form.c

1 
	~"GUI.h
"

2 
	~"ADC.h
"

4 
uöt8_t
 
	gSège
 = 0;

6 
	$CÆibøãPro˚ss
 ()

8 
Sège
)

11 
	`LCDSëRe˘
(0, 0, 131, 131, 
FILL
, 
BLACK
);

12 
	`LCDPutSåROM
("MovêgimbÆ†to", 121, 1, 
SMALL
, 
GREEN
, 
BLACK
);

13 
	`LCDPutSåROM
("√uåÆÖosôi⁄", 111, 1, 
SMALL
, 
GREEN
, 
BLACK
);

14 
	`LCDPutSåROM
("Pªs†ENTER", 101, 1, 
SMALL
, 
GREEN
, 
BLACK
);

15 
	`LCDPutSåROM
("f‹Çexà°ï", 91, 1, 
SMALL
, 
GREEN
, 
BLACK
);

16 
	`LCDPutSåROM
("ESCÅÿexô", 81, 1, 
SMALL
, 
GREEN
, 
BLACK
);

17 
Sège
++;

21 
	`ADC_GëZîoLevñ
();

23 
	`LCDSëRe˘
(0, 0, 131, 131, 
FILL
, 
BLACK
);

24 
	`LCDPutSåROM
("MovêgimbÆ†to", 121, 1, 
SMALL
, 
GREEN
, 
BLACK
);

25 
	`LCDPutSåROM
("möánd maxÖos", 111, 1, 
SMALL
, 
GREEN
, 
BLACK
);

26 
	`LCDPutSåROM
("Pªs†ENTER", 101, 1, 
SMALL
, 
GREEN
, 
BLACK
);

27 
	`LCDPutSåROM
("f‹Çexà°ï", 91, 1, 
SMALL
, 
GREEN
, 
BLACK
);

28 
	`LCDPutSåROM
("ESCÅÿexô", 81, 1, 
SMALL
, 
GREEN
, 
BLACK
);

29 
	`LCDFlushTxBuf„r
();

31 
i
=0;i<
ADC_CHANNELS
;i++)

33 
P¨amëîs
.
ADC_P¨ams
.
CÆibøti⁄
 [0][
i
] = 0x7FFF;

34 
P¨amëîs
.
ADC_P¨ams
.
CÆibøti⁄
 [2][
i
] = -0x7FFF;

36 
	`ADC_SèπCÆibøti⁄
();

37 
Sège
++;

40 
	`ADC_St›CÆibøti⁄
();

42 
	`LCDSëRe˘
(0, 0, 131, 131, 
FILL
, 
BLACK
);

43 
	`LCDPutSåROM
("CÆibøti⁄", 121, 1, 
SMALL
, 
GREEN
, 
BLACK
);

44 
	`LCDPutSåROM
("com∂ëed!", 111, 1, 
SMALL
, 
GREEN
, 
BLACK
);

45 
	`LCDPutSåROM
("Pªs†ENTER", 101, 1, 
SMALL
, 
GREEN
, 
BLACK
);

46 
	`LCDPutSåROM
("tÿexô", 91, 1, 
SMALL
, 
GREEN
, 
BLACK
);

47 
	`LCDFlushTxBuf„r
();

48 
Sège
++;

51 
CuºítF‹mProc
 = 
Míu_F‹m
;

52 
	`CuºítF‹mProc
(
FORM_INIT_EVENT
);

58 
	}
}

60 
	$ADC_ˇlibøti⁄_f‹m
 (
uöt8_t
 
evít
)

62 
evít
)

64 
NO_EVENT
:

67 
ENCODER_CLICK_EVENT
:

68 
	`CÆibøãPro˚ss
();

70 
KEY_DOWN_EVENT
:

72 
KEY_UP_EVENT
:

74 
KEY_ENTER_EVENT
:

75 
	`CÆibøãPro˚ss
();

77 
KEY_ESC_EVENT
:

78 
CuºítF‹mProc
 = 
Míu_F‹m
;

79 
	`CuºítF‹mProc
(
FORM_INIT_EVENT
);

81 
FORM_INIT_EVENT
:

83 
	`LCDSëRe˘
(0, 0, 131, 131, 
FILL
, 
BLACK
);

85 
	`LCDPutSåROM
("GimbÆ cÆibøti⁄", 121, 1, 
SMALL
, 
GREEN
, 
BLACK
);

86 
	`LCDPutSåROM
("ENTERÅÿ°¨t", 111, 1, 
SMALL
, 
GREEN
, 
BLACK
);

87 
	`LCDPutSåROM
("ESCÅÿexô", 101, 1, 
SMALL
, 
GREEN
, 
BLACK
);

88 
	`LCDFlushTxBuf„r
();

89 
Sège
 = 0;

95 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\GUI\src\ADC_data_form.c

1 
	~"GUI.h
"

2 
	~"ADC.h
"

3 
	~<MyLib.h
>

13 
	$ADC_f‹m
 (
uöt8_t
 
evít
)

15 
°r
[33];

16 
°ri
[21];

17 
Àn
;

18 
evít
)

20 
NO_EVENT
:

22 
i
 = 0;i<
ADC_CHANNELS
;i++)

24 
	`mem£t
(
°r
+12, 32, 9);

25 
	`ôﬂ
 (
ADC_d©a
[
i
], 
°ri
, &
Àn
 );

26 
	`mem˝y
(
°r
,
chName
[
i
],12);

27 
	`mem˝y
(
°r
+(16-
Àn
),
°ri
,len);

29 
	`ôﬂ
 (
ADC_d©a_ˇlibøãd
[
i
], 
°ri
, &
Àn
 );

30 
	`mem˝y
(
°r
+(21-
Àn
),
°ri
,len+1);

32 
	`LCDPutSå
 (
°r
, 121 - 
i
*10, 1, 
SMALL
, 
GREEN
, 
BLACK
);

38 
i
 = 0;i<16;i++)

40 i‡(
Buâ⁄s
&(1<<
i
)Ë
°r
[i] = '1';

41 
°r
[
i
] = '0';

43 
°r
[16] = 0;

44 
	`LCDPutSå
 (
°r
, 11, 1, 
SMALL
, 
GREEN
, 
BLACK
);

47 
i
 = 16;i<
BUTTONS_COUNT
;i++)

49 i‡(
Buâ⁄s
&(1<<
i
)Ë
°r
[i-16] = '1';

50 
°r
[
i
-16] = '0';

52 
°r
[32] = 0;

53 
	`LCDPutSå
 (
°r
, 1, 1, 
SMALL
, 
GREEN
, 
BLACK
);

65 
	`LCDFlushTxBuf„r
();

70 
KEY_DOWN_EVENT
:

72 
KEY_UP_EVENT
:

74 
KEY_ENTER_EVENT
:

76 
KEY_ESC_EVENT
:

77 
CuºítF‹mProc
 = 
Míu_F‹m
;

78 
	`CuºítF‹mProc
(
FORM_INIT_EVENT
);

80 
FORM_INIT_EVENT
:

82 
	`LCDSëRe˘
(0, 0, 131, 131, 
FILL
, 
BLACK
);

86 
	`mem£t
(
°r
, 32, 10);

89 
	`LCDFlushTxBuf„r
();

95 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\GUI\src\Buttons_Mapping.c

1 
	~"GUI.h
"

2 
	~<MyLib.h
>

4 
	g°r
[23];

5 
	g°ri
[4];

6 
	gÀn
;

7 
uöt8_t
 
	gbm_edôMode
 = 0;

8 
uöt8_t
 
	gbm_Curs‹Pos
 = 0;

10 
uöt8_t
 
	$bm_Rïœ˚
 (
uöt8_t
 
‰om
, uöt8_à
to
)

12 
i
=0;i<32;i++)

14 i‡(
P¨amëîs
.
Buâ⁄sM≠pög
 [
i
] =
‰om
)

16 
P¨amëîs
.
Buâ⁄sM≠pög
 [
i
] = 
to
;

17  
i
;

21 
	}
}

23 
uöt8_t
 
	$bm_Dëe˘
 ()

25 
i
=0;i<25;i++)

27 i‡(
Buâ⁄s
 & (1<<
i
))  i;

30 
	}
}

32 
	$bm_PrötVÆue
 (
uöt8_t
 
ödex
, uöt8_à
curs‹
)

34 
uöt8_t
 
x
;

35 
uöt8_t
 
y
;

37 
y
 = 
ödex
 / 8;

38 
x
 = 
ödex
 - 
y
*8;

40 
	`mem£t
(
°r
, 32, 22);

41 
	`ôﬂ
 (
P¨amëîs
.
Buâ⁄sM≠pög
 [
ödex
], 
°ri
, &
Àn
 );

43 
	`mem˝y
(
°r
+(4-
Àn
),
°ri
,len+1);

45 i‡(
curs‹
Ë
	`LCDPutSå
 (
°r
, 111 - 
x
*10, 6+
y
*24, 
SMALL
, 
BLACK
, 
bm_edôMode
 ? 
GREEN
 : 
RED
);

46 
	`LCDPutSå
 (
°r
, 111 - 
x
*10, 6+
y
*24, 
SMALL
, 
GREEN
, 
BLACK
);

49 
	}
}

51 
	$Buâ⁄s_M≠pög_f‹m
 (
uöt8_t
 
evít
)

53 
evít
)

55 
NO_EVENT
:

56 i‡(
bm_edôMode
)

58 
uöt8_t
 
bd
 = 
	`bm_Dëe˘
();

59 i‡(
bd
 != 255)

62 
uöt8_t
 
Ω
 = 
	`bm_Rïœ˚
(
bd
,
P¨amëîs
.
Buâ⁄sM≠pög
 [
bm_Curs‹Pos
]);

63 
P¨amëîs
.
Buâ⁄sM≠pög
 [
bm_Curs‹Pos
] = 
bd
;

65 
bm_edôMode
 = 0;

66 
	`bm_PrötVÆue
 (
bm_Curs‹Pos
,1);

67 i‡(
Ω
 !=255Ë
	`bm_PrötVÆue
 (rp,0);

71 
KEY_DOWN_EVENT
:

72 i‡(!
bm_edôMode
)

74 i‡(
bm_Curs‹Pos
 < 31)

76 
bm_Curs‹Pos
++;

77 
	`bm_PrötVÆue
 (
bm_Curs‹Pos
,1);

78 
	`bm_PrötVÆue
 (
bm_Curs‹Pos
-1,0);

82 
bm_Curs‹Pos
 = 0;

83 
	`bm_PrötVÆue
 (
bm_Curs‹Pos
,1);

84 
	`bm_PrötVÆue
 (31,0);

88 
KEY_UP_EVENT
:

89 i‡(!
bm_edôMode
)

91 i‡(
bm_Curs‹Pos
 > 0)

93 
bm_Curs‹Pos
--;

94 
	`bm_PrötVÆue
 (
bm_Curs‹Pos
,1);

95 
	`bm_PrötVÆue
 (
bm_Curs‹Pos
+1,0);

99 
bm_Curs‹Pos
 = 31;

100 
	`bm_PrötVÆue
 (
bm_Curs‹Pos
,1);

101 
	`bm_PrötVÆue
 (0,0);

105 
KEY_ENTER_EVENT
:

106 
bm_edôMode
++;

107 
bm_edôMode
 &=1;

108 
	`bm_PrötVÆue
 (
bm_Curs‹Pos
,1);

110 
KEY_ESC_EVENT
:

111 
CuºítF‹mProc
 = 
Míu_F‹m
;

112 
	`CuºítF‹mProc
(
FORM_INIT_EVENT
);

114 
FORM_INIT_EVENT
:

116 
	`LCDSëRe˘
(0, 0, 131, 131, 
FILL
, 
BLACK
);

117 
	`LCDPutSåROM
("Buâ⁄†m≠pög", 121, 1, 
SMALL
, 
GREEN
, 
BLACK
);

118 
bm_Curs‹Pos
 = 0;

119 
	`bm_PrötVÆue
 (
bm_Curs‹Pos
,1);

120 
i
=1;i<32;i++)

122 
	`bm_PrötVÆue
 (
i
,0);

138 
	`LCDFlushTxBuf„r
();

143 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\GUI\src\Calibration_Params_Form.c

1 
	~"GUI.h
"

2 
	~<MyLib.h
>

6 
öt8_t
 
	g˝fPosX
 = 0;

7 
öt8_t
 
	g˝fPage
 = 0;

8 
uöt8_t
 
	gedôMode
 = 0;

10 c⁄° 
	g∑geName
 [
CHANNELS_PARAM_PAGES
][7] = {" min \0",

17 
	$Ch™geVÆue
 (
öt8_t
 
dúe˘i⁄
, 
uöt8_t
 
mu…
)

19 i‡(
˝fPage
 =3Ë
P¨amëîs
.
ADC_P¨ams
.
DódZ⁄e
[
˝fPosX
]+=
DEADZONES_VALUE_INCREMENT
*
dúe˘i⁄
*
mu…
;

20 i‡(
˝fPage
 =4Ë
P¨amëîs
.
ADC_P¨ams
.
Tønsf‹m
[
˝fPosX
]+=
TRANSFORM_VALUE_INCREMENT
*
dúe˘i⁄
;

21 i‡(
˝fPage
 =5Ë
P¨amëîs
.
ADC_P¨ams
.
SˇÀFa˘‹
[
˝fPosX
]+=
SCALE_VALUE_INCREMENT
*
dúe˘i⁄
*
mu…
;

22 
P¨amëîs
.
ADC_P¨ams
.
CÆibøti⁄
[
˝fPage
][
˝fPosX
]+=
VALUE_INCREMENT
*
dúe˘i⁄
*
mu…
;

23 
	}
}

25 
	$PrötD©a
 (
uöt8_t
 
∑ge
, uöt8_à
löe
, uöt8_à
curs‹
)

27 
°r
[6];

28 
°ri
[6];

29 
Àn
;

31 
	`mem£t
(
°r
, 32, 6);

32 i‡(
˝fPage
 =3Ë
	`ôﬂ
 (
P¨amëîs
.
ADC_P¨ams
.
DódZ⁄e
[
löe
], 
°ri
, &
Àn
 );

33 i‡(
˝fPage
 =4Ë
	`ôﬂ
 (
P¨amëîs
.
ADC_P¨ams
.
Tønsf‹m
[
löe
], 
°ri
, &
Àn
 );

34 i‡(
˝fPage
 =5Ë
	`ôﬂ
 (
P¨amëîs
.
ADC_P¨ams
.
SˇÀFa˘‹
[
löe
], 
°ri
, &
Àn
 );

35 
	`ôﬂ
 (
P¨amëîs
.
ADC_P¨ams
.
CÆibøti⁄
[
∑ge
][
löe
], 
°ri
, &
Àn
 );

36 
	`mem˝y
(
°r
+(6-
Àn
),
°ri
,len+1);

38 i‡(
curs‹
Ë
	`LCDPutSå
 (
°r
, 
DATA_Y_POS
 - 
löe
*10, 
DATA_COL_X_POS
, 
SMALL
, 
BLACK
, 
edôMode
 ? 
GREEN
 : 
RED
 );

39 
	`LCDPutSå
 (
°r
, 
DATA_Y_POS
 - 
löe
*10, 
DATA_COL_X_POS
, 
SMALL
, 
GREEN
, 
BLACK
);

40 
	}
}

42 
	$PrötPage
 (
uöt8_t
 
∑ge
)

44 
	`LCDPutSåROM
 (
∑geName
[
∑ge
], 
HEADER_Y_POS
, 72, 
SMALL
, 
GREEN
, 
BLACK
);

45 
i
 = 0;i<
ADC_CHANNELS
;i++)

47 i‡(
i
==
˝fPosX
Ë
	`PrötD©a
 (
∑ge
,i,1);

48 
	`PrötD©a
 (
∑ge
,
i
,0);

50 
	}
}

52 
	$CÆibøti⁄_∑øms_f‹m
 (
uöt8_t
 
evít
)

54 
evít
)

56 
NO_EVENT
:

59 
KEY_DOWN_EVENT
:

60 i‡(
edôMode
)

62 
	`Ch™geVÆue
 (-1, 1);

63 
	`PrötD©a
 (
˝fPage
,
˝fPosX
,1);

67 
˝fPosX
++;

68 i‡(
˝fPosX
>=
ADC_CHANNELS
)

70 
˝fPage
++;

71 i‡(
˝fPage
 =
CHANNELS_PARAM_PAGES
) cpfPage = 0;

72 
˝fPosX
 = 0;

73 
	`PrötPage
 (
˝fPage
);

77 
	`PrötD©a
 (
˝fPage
,
˝fPosX
,1);

78 
	`PrötD©a
 (
˝fPage
,
˝fPosX
-1,0);

81 
	`LCDFlushTxBuf„r
();

83 
KEY_UP_EVENT
:

84 i‡(
edôMode
)

86 
	`Ch™geVÆue
 (1, 1);

87 
	`PrötD©a
 (
˝fPage
,
˝fPosX
,1);

91 
˝fPosX
--;

92 i‡(
˝fPosX
<0)

94 
˝fPage
--;

95 i‡(
˝fPage
 =-1Ë˝fPagê
CHANNELS_PARAM_PAGES
 - 1;

96 
˝fPosX
 = 
ADC_CHANNELS
-1;

97 
	`PrötPage
 (
˝fPage
);

101 
	`PrötD©a
 (
˝fPage
,
˝fPosX
,1);

102 
	`PrötD©a
 (
˝fPage
,
˝fPosX
+1,0);

105 
	`LCDFlushTxBuf„r
();

107 
KEY_RIGHT_EVENT
:

108 i‡(
edôMode
)

110 
	`Ch™geVÆue
 (1, 
INCREMENTATION_MULTIPLIER
);

111 
	`PrötD©a
 (
˝fPage
,
˝fPosX
,1);

116 
˝fPage
++;

117 i‡(
˝fPage
 ==
CHANNELS_PARAM_PAGES
) cpfPage = 0;

118 
˝fPosX
 = 0;

119 
	`PrötPage
 (
˝fPage
);

122 
KEY_LEFT_EVENT
:

123 i‡(
edôMode
)

125 
	`Ch™geVÆue
 (-1, 
INCREMENTATION_MULTIPLIER
);

126 
	`PrötD©a
 (
˝fPage
,
˝fPosX
,1);

131 
˝fPage
--;

132 i‡(
˝fPage
 =-1Ë˝fPagê
CHANNELS_PARAM_PAGES
 - 1;

133 
˝fPosX
 = 
ADC_CHANNELS
-1;

134 
	`PrötPage
 (
˝fPage
);

137 
KEY_ENTER_EVENT
:

138 
edôMode
++;

139 
edôMode
 &=1;

140 
	`PrötD©a
 (
˝fPage
,
˝fPosX
,1);

142 
KEY_ESC_EVENT
:

143 
CuºítF‹mProc
 = 
Míu_F‹m
;

144 
	`CuºítF‹mProc
(
FORM_INIT_EVENT
);

146 
FORM_INIT_EVENT
:

148 
	`LCDSëRe˘
(0, 0, 131, 131, 
FILL
, 
BLACK
);

149 
	`LCDPutSåROM
 ("Ch.Çame", 
HEADER_Y_POS
, 1, 
SMALL
, 
GREEN
, 
BLACK
);

150 
i
 = 0;i<
ADC_CHANNELS
;i++)

152 
	`LCDPutSåROM
 (
chName
[
i
], 
DATA_Y_POS
 - i*10, 1, 
SMALL
, 
GREEN
, 
BLACK
);

154 
	`PrötPage
 (0);

158 
	`LCDFlushTxBuf„r
();

163 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\GUI\src\GUI.c

1 
	~"GUI.h
"

6 
FORMFUNC
 
	gCuºítF‹mProc
;

7 
uöt8_t
 
	gLa°Evít
 = 0;

9 
uöt32_t
 
	gBuâ⁄sOld
 = 0;

10 
uöt32_t
 
	gBuâ⁄sCur
 = 0;

12 
xQueueH™dÀ
 
	gevít_queue
;

14 c⁄° 
	gchName
 [
ADC_CHANNELS
][13] = {"Right X(X) =\0","Right Y(Y) =\0","Left Y(Z) =\0","Left X(RX)=\0","Right V(RY)=\0","Left V(RZ)=\0","X =\0","X =\0","{} =\0","{} =\0"};

16 
	$Buâ⁄sEvítTask
 ( *
pvP¨amëîs
 )

20 
Buâ⁄sOld
 &~ (
ENCODER_UP_MASK
 | 
ENCODER_DOWN_MASK
);

21 
Buâ⁄sCur
 = 
Buâ⁄s
 & (~
Buâ⁄sOld
);

22 
Buâ⁄s
 &~
ENCODER_RESETALL_MASK
;

34 
Buâ⁄sCur
)

62 
ENCODER_BUTTON_MASK
:

63 
La°Evít
 = 
KEY_ENTER_EVENT
;

64 
	`xQueueSídToBack
 (
evít_queue
, &
La°Evít
, 0);

66 
ENCODER_LONGBTN_MASK
:

67 
La°Evít
 = 
KEY_ESC_EVENT
;

68 
	`xQueueSídToBack
 (
evít_queue
, &
La°Evít
, 0);

70 
ENCODER_UP_MASK
:

71 
La°Evít
 = 
KEY_UP_EVENT
;

72 
	`xQueueSídToBack
 (
evít_queue
, &
La°Evít
, 0);

74 
ENCODER_DOWN_MASK
:

75 
La°Evít
 = 
KEY_DOWN_EVENT
;

76 
	`xQueueSídToBack
 (
evít_queue
, &
La°Evít
, 0);

95 
Buâ⁄sOld
 = 
Buâ⁄s
;

96 
	`vTaskDñay
–10 / 
p‹tTICK_RATE_MS
 );

100 
	}
}

104 
	$GUI_Task
 ( *
pvP¨amëîs
 )

107 
	`LCDInô
(
P¨amëîs
.
LCD_S¸ìnRŸ©i⁄
, P¨amëîs.
LCD_MADCTL
);

108 
	`LCDSëRe˘
(0, 0, 131, 131, 
FILL
, 
BLACK
);

110 
CuºítF‹mProc
 = 
Míu_F‹m
;

111 
	`CuºítF‹mProc
(
FORM_INIT_EVENT
);

113 
uöt8_t
 
CuºEvít
;

114 
Ba£Ty≥_t
 
GëEvítResu…
;

117 
GëEvítResu…
 = 
	`xQueueRe˚ive
 (
evít_queue
, &
CuºEvít
, 100 / 
p‹tTICK_RATE_MS
);

118 i‡(
GëEvítResu…
 =
pdTRUE
Ë
	`CuºítF‹mProc
(
CuºEvít
);

119 
	`CuºítF‹mProc
(
NO_EVENT
);

125 
	}
}

128 
	$GUI_öô
()

130 
evít_queue
 = 
	`xQueueCª©e
 (
EVENT_QUEUE_LEN
,(
La°Evít
));

131 
	`xTaskCª©e
–
GUI_Task
,"GUI_Task", 
c⁄figMINIMAL_STACK_SIZE
, 
NULL
, 
LCDTask_PRIORITY
, NULL );

132 
	`xTaskCª©e
–
Buâ⁄sEvítTask
,"Buâ⁄sEvítTask", 
c⁄figMINIMAL_STACK_SIZE
, 
NULL
, 
Buâ⁄sEvítTask_PRIORITY
, NULL );

133 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\GUI\src\LCD_params.c

1 
	~"GUI.h
"

3 
	#LEFT_INDENT
 3

	)

4 
	#TOP_LINE
 101

	)

6 
	glcdpf_Curs‹Pos_Y
= 0;

7 
uöt8_t
 
	glcdpf_EdôMode
 = 0;

9 
	$DøwHódîs
 ()

11 
uöt8_t
 
löe
 = 
TOP_LINE
;

12 
	`LCDPutSåROM
("LCDÖ¨amëîs", 121, 
LEFT_INDENT
, 
SMALL
, 
GREEN
, 
BLACK
);

13 
	`LCDPutSåROM
("Brighäess", 
löe
, 
LEFT_INDENT
, 
SMALL
, 
GREEN
, 
BLACK
);

14 
löe
 -= 10;

15 
	`LCDPutSåROM
("RGB", 
löe
, 
LEFT_INDENT
, 
SMALL
, 
GREEN
, 
BLACK
);

16 
löe
 -= 10;

17 
	`LCDPutSåROM
("LAOÅ›ÅÿbŸtom", 
löe
, 
LEFT_INDENT
, 
SMALL
, 
GREEN
, 
BLACK
);

18 
löe
 -= 10;

19 
	`LCDPutSåROM
("WrôêY dúe˘i⁄", 
löe
, 
LEFT_INDENT
, 
SMALL
, 
GREEN
, 
BLACK
);

20 
löe
 -= 10;

21 
	`LCDPutSåROM
("Múr‹ X", 
löe
, 
LEFT_INDENT
, 
SMALL
, 
GREEN
, 
BLACK
);

22 
löe
 -= 10;

23 
	`LCDPutSåROM
("Múr‹ Y", 
löe
, 
LEFT_INDENT
, 
SMALL
, 
GREEN
, 
BLACK
);

24 
löe
 -= 10;

25 
	`LCDPutSåROM
("So·w¨êrŸ©e", 
löe
, 
LEFT_INDENT
, 
SMALL
, 
GREEN
, 
BLACK
);

26 
	}
}

27 
	$DøwVÆue
 (
uöt8_t
 
löe
, uöt8_à
curs‹
)

29 
°r
[4];

30 
°ri
[4];

31 
Àn
;

32 i‡(!
löe
)

34 
	`mem£t
(
°r
, 32, 4);

35 
	`ôﬂ
 (
P¨amëîs
.
LCD_Brô√ss
, 
°ri
, &
Àn
);

36 
	`mem˝y
(
°r
,
°ri
,
Àn
+1);

37 i‡(
curs‹
Ë
	`LCDPutSå
 (
°r
, 
TOP_LINE
 - 
löe
*10, 
LEFT_INDENT
 + 108, 
SMALL
, 
BLACK
, 
lcdpf_EdôMode
 ? 
GREEN
 : 
RED
);

38 
	`LCDPutSå
 (
°r
, 
TOP_LINE
 - 
löe
*10, 
LEFT_INDENT
 + 108, 
SMALL
, 
GREEN
, 
BLACK
);

42 i‡((
löe
 =6Ë&& (
P¨amëîs
.
LCD_S¸ìnRŸ©i⁄
 == 1))

44 i‡(
curs‹
Ë
	`LCDPutSåROM
("ON ", 
TOP_LINE
 - 
löe
*10, 
LEFT_INDENT
 + 108, 
SMALL
, 
BLACK
, 
lcdpf_EdôMode
 ? 
GREEN
 : 
RED
);

45 
	`LCDPutSåROM
("ON ", 
TOP_LINE
 - 
löe
*10, 
LEFT_INDENT
 + 108, 
SMALL
, 
GREEN
, 
BLACK
);

47 i‡((
löe
 =6Ë&& (
P¨amëîs
.
LCD_S¸ìnRŸ©i⁄
 == 0))

49 i‡(
curs‹
Ë
	`LCDPutSåROM
("OFF", 
TOP_LINE
 - 
löe
*10, 
LEFT_INDENT
 + 108, 
SMALL
, 
BLACK
, 
lcdpf_EdôMode
 ? 
GREEN
 : 
RED
);

50 
	`LCDPutSåROM
("OFF", 
TOP_LINE
 - 
löe
*10, 
LEFT_INDENT
 + 108, 
SMALL
, 
GREEN
, 
BLACK
);

52 i‡(
P¨amëîs
.
LCD_MADCTL
 & (4<<
löe
))

54 i‡(
curs‹
Ë
	`LCDPutSåROM
("ON ", 
TOP_LINE
 - 
löe
*10, 
LEFT_INDENT
 + 108, 
SMALL
, 
BLACK
, 
lcdpf_EdôMode
 ? 
GREEN
 : 
RED
);

55 
	`LCDPutSåROM
("ON ", 
TOP_LINE
 - 
löe
*10, 
LEFT_INDENT
 + 108, 
SMALL
, 
GREEN
, 
BLACK
);

59 i‡(
curs‹
Ë
	`LCDPutSåROM
("OFF", 
TOP_LINE
 - 
löe
*10, 
LEFT_INDENT
 + 108, 
SMALL
, 
BLACK
, 
lcdpf_EdôMode
 ? 
GREEN
 : 
RED
);

60 
	`LCDPutSåROM
("OFF", 
TOP_LINE
 - 
löe
*10, 
LEFT_INDENT
 + 108, 
SMALL
, 
GREEN
, 
BLACK
);

63 
	}
}

65 
	$DøwAŒVÆues
 ()

67 
i
 = 0; i < 7;i++)

69 i‡(
i
==
lcdpf_Curs‹Pos_Y
Ë
	`DøwVÆue
(i,1);

70 
	`DøwVÆue
(
i
,0);

72 
	}
}

74 
	$LCD_∑ømëîs_f‹m
 (
uöt8_t
 
evít
)

76 
evít
)

78 
NO_EVENT
:

81 
KEY_DOWN_EVENT
:

82 i‡(
lcdpf_EdôMode
)

84 i‡(
P¨amëîs
.
LCD_Brô√ss
 < 255)

86 
P¨amëîs
.
LCD_Brô√ss
++;

87 
	`DøwVÆue
(
lcdpf_Curs‹Pos_Y
,1);

92 
	`DøwVÆue
(
lcdpf_Curs‹Pos_Y
,0);

93 
lcdpf_Curs‹Pos_Y
++;

94 i‡(
lcdpf_Curs‹Pos_Y
 > 6)Ücdpf_CursorPos_Y = 0;

95 
	`DøwVÆue
(
lcdpf_Curs‹Pos_Y
,1);

98 
KEY_UP_EVENT
:

99 i‡(
lcdpf_EdôMode
)

101 i‡(
P¨amëîs
.
LCD_Brô√ss
 > 0)

103 
P¨amëîs
.
LCD_Brô√ss
--;

104 
	`DøwVÆue
(
lcdpf_Curs‹Pos_Y
,1);

109 
	`DøwVÆue
(
lcdpf_Curs‹Pos_Y
,0);

110 
lcdpf_Curs‹Pos_Y
--;

111 i‡(
lcdpf_Curs‹Pos_Y
 < 0)Ücdpf_CursorPos_Y = 6;

112 
	`DøwVÆue
(
lcdpf_Curs‹Pos_Y
,1);

115 
KEY_ENTER_EVENT
:

116 i‡(
lcdpf_Curs‹Pos_Y
 == 6)

118 
P¨amëîs
.
LCD_S¸ìnRŸ©i⁄
 ^= 1;

119 
	`LCDSëRŸ©i⁄
(
P¨amëîs
.
LCD_S¸ìnRŸ©i⁄
);

120 
	`LCDSëRe˘
(0, 0, 131, 131, 
FILL
, 
BLACK
);

121 
	`DøwHódîs
 ();

122 
	`DøwAŒVÆues
 ();

124 i‡(
lcdpf_Curs‹Pos_Y
)

126 
P¨amëîs
.
LCD_MADCTL
 ^4<<
lcdpf_Curs‹Pos_Y
;

127 
	`LCDSëMADCTL
 (
P¨amëîs
.
LCD_MADCTL
);

128 
	`LCDSëRe˘
(0, 0, 131, 131, 
FILL
, 
BLACK
);

129 
	`DøwHódîs
 ();

130 
	`DøwAŒVÆues
 ();

134 i‡(
lcdpf_EdôMode
)Ücdpf_EditMode = 0;

135 
lcdpf_EdôMode
 = 1;

136 
	`DøwVÆue
(
lcdpf_Curs‹Pos_Y
,1);

140 
KEY_ESC_EVENT
:

141 
CuºítF‹mProc
 = 
Míu_F‹m
;

142 
	`CuºítF‹mProc
(
FORM_INIT_EVENT
);

144 
FORM_INIT_EVENT
:

146 
	`LCDSëRe˘
(0, 0, 131, 131, 
FILL
, 
BLACK
);

147 
	`DøwHódîs
 ();

148 
	`DøwAŒVÆues
 ();

149 
	`LCDFlushTxBuf„r
();

154 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\GUI\src\Menu_form.c

1 
	~"GUI.h
"

7 
	gSñe˘edMíu
 = 1;

9 c⁄° 
	sMíuSåu˘uª


10 { c⁄° *
	mãxt
;

11 
uöt8_t
 
	msubmíu
;

12 
uöt8_t
 
	mup
;

13 
uöt8_t
 
	mdown
;

14 
uöt8_t
 
	míãr
;

15 –*
	mÂ
 )–
uöt8_t
 
	mevít
 );

17 }
	tMíuE¡ry
;

20 c⁄° 
	gmíu_000
[] = " [Main Screen]";

21 c⁄° 
	gmíu_001
[] = " Settings";

22 c⁄° 
	gmíu_002
[] = " PID values";

23 c⁄° 
	gmíu_003
[] = " Options3";

24 c⁄° 
	gmíu_004
[] = " ADC values";

25 c⁄° 
	gmíu_005
[] = " ADC calibration";

26 c⁄° 
	gmíu_006
[] = " Options6";

27 c⁄° 
	gmíu_007
[] = " Options7";

28 c⁄° 
	gmíu_008
[] = " Trimmer";

29 c⁄° 
	gmíu_009
[] = " Options9";

30 c⁄° 
	gmíu_010
[] = "Ñeturn";

32 c⁄° 
	gmíu_100
[] = " [Header1]";

33 c⁄° 
	gmíu_101
[] = " LCDÖarameters";

34 c⁄° 
	gmíu_102
[] = " Option102";

35 c⁄° 
	gmíu_103
[] = " Ch.params values";

36 c⁄° 
	gmíu_104
[] = " Butons mapping";

37 c⁄° 
	gmíu_105
[] = " Option105";

38 c⁄° 
	gmíu_106
[] = " ResetÖarameters";

39 c⁄° 
	gmíu_107
[] = " SaveÖarameters";

40 c⁄° 
	gmíu_108
[] = "Ñeturn";

42 c⁄° 
	gmíu_200
[] = " [Header2]";

43 c⁄° 
	gmíu_201
[] = " Option201";

44 c⁄° 
	gmíu_202
[] = " Option202";

45 c⁄° 
	gmíu_203
[] = " Option203";

46 c⁄° 
	gmíu_204
[] = " Option204";

47 c⁄° 
	gmíu_205
[] = " Option205";

48 c⁄° 
	gmíu_206
[] = " Option206";

49 c⁄° 
	gmíu_207
[] = " Option207";

50 c⁄° 
	gmíu_208
[] = "Ñeturn";

52 c⁄° 
	gmíu_300
[] = " [Header3]";

53 c⁄° 
	gmíu_301
[] = " Option301";

54 c⁄° 
	gmíu_302
[] = " Option302";

55 c⁄° 
	gmíu_303
[] = " Option303";

56 c⁄° 
	gmíu_304
[] = " Option304";

57 c⁄° 
	gmíu_305
[] = "Ñeturn";

60 
MíuE¡ry
 
	gmíu
[] =

62 {
míu_000
, 1, 0, 0, 0, 0},

63 {
míu_001
, 1, 1, 2, 12, 0},

64 {
míu_002
, 1, 1, 3, 21, 0},

65 {
míu_003
, 1, 2, 4, 30, 0},

66 {
míu_004
, 1, 3, 5, 4, 
ADC_f‹m
},

67 {
míu_005
, 1, 4, 6, 5, 
ADC_ˇlibøti⁄_f‹m
},

68 {
míu_006
, 1, 5, 7, 6, 0},

69 {
míu_007
, 1, 6, 8, 7, 0},

70 {
míu_008
, 1, 7, 9, 8, 
Trimmî_f‹m
},

71 {
míu_009
, 1, 8, 10, 9, 0},

72 {
míu_010
, 1, 9, 10, 1, 0},

74 {
míu_100
, 2, 0, 0, 0, 0},

75 {
míu_101
, 2, 12, 13, 12, 
LCD_∑ømëîs_f‹m
},

76 {
míu_102
, 2, 12, 14, 13, 0},

77 {
míu_103
, 2, 13, 15, 14, 
CÆibøti⁄_∑øms_f‹m
},

78 {
míu_104
, 2, 14, 16, 15, 
Buâ⁄s_M≠pög_f‹m
},

79 {
míu_105
, 2, 15, 17, 16, 0},

80 {
míu_106
, 2, 16, 18, 17, 
Re£t_∑ømëîs_f‹m
},

81 {
míu_107
, 2, 17, 19, 18, 
Save_∑ømëîs_f‹m
},

82 {
míu_108
, 2, 18, 19, 1, 0},

84 {
míu_200
, 3, 0, 0, 0, 0},

85 {
míu_201
, 3, 21, 22, 21, 0},

86 {
míu_202
, 3, 21, 23, 22, 0},

87 {
míu_203
, 3, 22, 24, 23, 0},

88 {
míu_204
, 3, 23, 25, 24, 0},

89 {
míu_205
, 3, 24, 26, 25, 0},

90 {
míu_206
, 3, 25, 27, 26, 0},

91 {
míu_207
, 3, 26, 28, 27, 0},

92 {
míu_208
, 3, 27, 28, 2, 0},

94 {
míu_300
, 4, 0, 0, 0, 0},

95 {
míu_301
, 4, 30, 31, 30, 0},

96 {
míu_302
, 4, 30, 32, 31, 0},

97 {
míu_303
, 4, 31, 33, 32, 0},

98 {
míu_304
, 4, 32, 34, 33, 0},

99 {
míu_305
, 4, 33, 34, 3, 0}

102 c⁄° 
uöt8_t
 
	gLa°MíuIãm
 = 34;

107 
	$DøwMíu
 (
uöt8_t
 
f
, uöt8_à
t
)

109 
uöt8_t
 
pos
 = 0;

111 
	`LCDSëRe˘
(0, 0, 
MENU_X_POS
+8, 131, 
FILL
, 
BLACK
);

112 
f
 <
t
)

114 i‡(
f
==
Sñe˘edMíu
Ë
	`LCDPutSåROM
(
míu
[f].
ãxt
, 
MENU_X_POS
-8*
pos
, 
MENU_Y_POS
, 
SMALL
, 
BLACK
, 
RED
);

115 
	`LCDPutSåROM
(
míu
[
f
].
ãxt
, 
MENU_X_POS
-8*
pos
, 
MENU_Y_POS
, 
SMALL
, 
WHITE
, 
BLACK
);

116 
f
++;

117 
pos
++;

119 
	`LCDFlushTxBuf„r
();

120 
	}
}

122 
	$CÆcFromTûl
 (
uöt8_t
 * 
‰om
, uöt8_à* 
tûl
)

124 
uöt8_t
 
submíu
 = 
míu
[
Sñe˘edMíu
].submenu;

125 *
‰om
 = 
Sñe˘edMíu
;

126 (
míu
[*
‰om
-1].
submíu
 == submenu) && (--(*from) > 0));

127 
Sñe˘edMíu
 - *
‰om
 > 
MAX_MENU_ROWS
) *from += MAX_MENU_ROWS;

129 (
míu
[*
tûl
+1].
submíu
 =submíuË&& (*tû»< *
‰om
 + 
MAX_MENU_ROWS
Ë&& (++(*tûl)<
La°MíuIãm
));

130 
	}
}

133 
	$Míu_F‹m
 (
uöt8_t
 
evít
)

135 
uöt8_t
 
‰om
 = 
Sñe˘edMíu
;

136 
uöt8_t
 
tûl
 = 
Sñe˘edMíu
;

139 
uöt8_t
 
La°Sñe˘ed
 = 
Sñe˘edMíu
;

141 
evít
)

143 
NO_EVENT
:

145 
FORM_INIT_EVENT
:

147 
	`LCDSëRe˘
(0, 0, 131, 131, 
FILL
, 
BLACK
);

150 
	`CÆcFromTûl
 (&
‰om
, &
tûl
);

151 
	`DøwMíu
 (
‰om
,
tûl
);

162 
KEY_DOWN_EVENT
:

163 
Sñe˘edMíu
 = 
míu
[Sñe˘edMíu].
down
;

165 
‰om
 = 
Sñe˘edMíu
;

166 
	`CÆcFromTûl
 (&
‰om
, &
tûl
);

168 i‡(
Sñe˘edMíu
!=
‰om
)

170 
	`LCDPutSåROM
(
míu
[
La°Sñe˘ed
].
ãxt
, 
MENU_X_POS
-8*(La°Sñe˘ed-
‰om
), 
MENU_Y_POS
, 
SMALL
, 
WHITE
, 
BLACK
);

171 
	`LCDPutSåROM
(
míu
[
Sñe˘edMíu
].
ãxt
, 
MENU_X_POS
-8*(Sñe˘edMíu-
‰om
), 
MENU_Y_POS
, 
SMALL
, 
BLACK
, 
RED
);

172 
	`LCDFlushTxBuf„r
();

176 
	`DøwMíu
 (
‰om
,
tûl
);

180 
KEY_UP_EVENT
:

181 
Sñe˘edMíu
 = 
míu
[Sñe˘edMíu].
up
;

182 
	`CÆcFromTûl
 (&
‰om
, &
tûl
);

183 i‡(
Sñe˘edMíu
 !
tûl
)

185 
	`LCDPutSåROM
(
míu
[
La°Sñe˘ed
].
ãxt
, 
MENU_X_POS
-8*(La°Sñe˘ed-
‰om
), 
MENU_Y_POS
, 
SMALL
, 
WHITE
, 
BLACK
);

186 
	`LCDPutSåROM
(
míu
[
Sñe˘edMíu
].
ãxt
, 
MENU_X_POS
-8*(Sñe˘edMíu-
‰om
), 
MENU_Y_POS
, 
SMALL
, 
BLACK
, 
RED
);

187 
	`LCDFlushTxBuf„r
();

191 
	`DøwMíu
 (
‰om
,
tûl
);

195 
KEY_ENTER_EVENT
:

197 i‡(
míu
[
Sñe˘edMíu
].
Â
 !
NULL
)

199 
Sñe˘edMíu
 = 
míu
[Sñe˘edMíu].
íãr
;

200 
CuºítF‹mProc
 = 
míu
[
Sñe˘edMíu
].
Â
;

201 
	`CuºítF‹mProc
(
FORM_INIT_EVENT
);

205 
Sñe˘edMíu
 = 
míu
[Sñe˘edMíu].
íãr
;

206 
‰om
=
tûl
=
Sñe˘edMíu
;

207 
	`CÆcFromTûl
 (&
‰om
, &
tûl
);

208 
	`DøwMíu
 (
‰om
,
tûl
);

212 
KEY_ESC_EVENT
:

213 
	`CÆcFromTûl
 (&
‰om
, &
tûl
);

214 
Sñe˘edMíu
 = 
míu
[
tûl
].
íãr
;

215 
‰om
=
tûl
=
Sñe˘edMíu
;

216 
	`CÆcFromTûl
 (&
‰om
, &
tûl
);

217 
	`DøwMíu
 (
‰om
,
tûl
);

224 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\GUI\src\Reset_Parameters_Form.c

1 
	~"GUI.h
"

2 
	~"Êash.h
"

3 
	~"ADC.h
"

5 
	$Re£t_∑ømëîs_f‹m
 (
uöt8_t
 
evít
)

7 
evít
)

9 
NO_EVENT
:

12 
KEY_DOWN_EVENT
:

14 
KEY_UP_EVENT
:

16 
KEY_ENTER_EVENT
:

20 
P¨amëîs
.
LCD_Brô√ss
 = 
MAX_LCD_BRITNESS
;

21 
P¨amëîs
.
LCD_MADCTL
 = 
MADCTL_DEFAULT
;

22 
P¨amëîs
.
LCD_S¸ìnRŸ©i⁄
 = 0;

23 
	`ADC_SëDeÁu…P¨amëîs
 (&
P¨amëîs
.
ADC_P¨ams
);

25 
uöt8_t
 
i
=0;i<8;i++)

27 
P¨amëîs
.
Ch™√ls_M≠pög
[
i
] = i;

29 
uöt8_t
 
i
=0;i<32;i++)

31 
P¨amëîs
.
Buâ⁄sM≠pög
 [
i
] = i;

34 
SaveP¨amëîsAddr
 = (*Ë
LAST_PAGE
;

36 
	`Êash_îa£_∑ge
(
SaveP¨amëîsAddr
);

37 
	`WrôeFœsh
(&
P¨amëîs
, 
SaveP¨amëîsAddr
,  (Parameters));

40 
CuºítF‹mProc
 = 
Míu_F‹m
;

41 
	`CuºítF‹mProc
(
FORM_INIT_EVENT
);

43 
KEY_ESC_EVENT
:

44 
CuºítF‹mProc
 = 
Míu_F‹m
;

45 
	`CuºítF‹mProc
(
FORM_INIT_EVENT
);

47 
FORM_INIT_EVENT
:

49 
	`LCDSëRe˘
(0, 0, 131, 131, 
FILL
, 
BLACK
);

50 
	`LCDPutSåROM
("Re£à∑ømëîs?", 121, 1, 
SMALL
, 
GREEN
, 
BLACK
);

51 
	`LCDPutSåROM
("ENTERÅÿª£t", 111, 1, 
SMALL
, 
GREEN
, 
BLACK
);

52 
	`LCDPutSåROM
("ESCÅÿexô", 101, 1, 
SMALL
, 
GREEN
, 
BLACK
);

53 
	`LCDFlushTxBuf„r
();

58 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\GUI\src\Save_parameters_form.c

1 
	~"GUI.h
"

2 
	~"Êash.h
"

4 
	$Save_∑ømëîs_f‹m
 (
uöt8_t
 
evít
)

6 
evít
)

8 
NO_EVENT
:

11 
KEY_DOWN_EVENT
:

13 
KEY_UP_EVENT
:

15 
KEY_ENTER_EVENT
:

16 
SaveP¨amëîsAddr
 = 
	`FödNextAddr
( (
P¨amëîs
));

17 
	`WrôeFœsh
(&
P¨amëîs
, 
SaveP¨amëîsAddr
,  (Parameters));

19 
CuºítF‹mProc
 = 
Míu_F‹m
;

20 
	`CuºítF‹mProc
(
FORM_INIT_EVENT
);

22 
KEY_ESC_EVENT
:

23 
CuºítF‹mProc
 = 
Míu_F‹m
;

24 
	`CuºítF‹mProc
(
FORM_INIT_EVENT
);

26 
FORM_INIT_EVENT
:

28 
	`LCDSëRe˘
(0, 0, 131, 131, 
FILL
, 
BLACK
);

29 
	`LCDPutSåROM
("Savê∑ømëîs?", 121, 1, 
SMALL
, 
GREEN
, 
BLACK
);

30 
	`LCDPutSåROM
("ENTERÅÿßve", 111, 1, 
SMALL
, 
GREEN
, 
BLACK
);

31 
	`LCDPutSåROM
("ESCÅÿexô", 101, 1, 
SMALL
, 
GREEN
, 
BLACK
);

32 
	`LCDFlushTxBuf„r
();

37 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\GUI\src\Trimmer_form.c

1 
	~"GUI.h
"

2 
	~<MyLib.h
>

4 
	#X_STICK
 0

	)

5 
	#Y_STICK
 1

	)

7 
	#X_DIRECTION
 0

	)

8 
	#Y_DIRECTION
 1

	)

10 
uöt8_t
 
	g°ick
 = 0;

11 
öt16_t
 
	gxCÆibøãd
 = 70;

12 
öt16_t
 
	gyCÆibøãd
 = 70;

14 
öt16_t
 
	$Tr_CÆibøã
 (
öt16_t
 
vÆ
, 
uöt8_t
 
ödex
)

16 
öt16_t
 
sˇÀdVÆ
 = 0;

17 
sˇÀdVÆ
 = 
vÆ
;

18 i‡(
sˇÀdVÆ
 > 0)

20 
sˇÀdVÆ
 = 
	`m≠
 (sˇÀdVÆ,0,
P¨amëîs
.
ADC_P¨ams
.
SˇÀFa˘‹
[
ödex
],0,59);

21 i‡(
sˇÀdVÆ
 > 59) scaledVal = 59;

26 
sˇÀdVÆ
 = 
	`m≠
 (sˇÀdVÆ,-
P¨amëîs
.
ADC_P¨ams
.
SˇÀFa˘‹
[
ödex
],0,-59,0);

27 i‡(
sˇÀdVÆ
 < -59) scaledVal = -59;

30  
sˇÀdVÆ
;

31 
	}
}

33 
	$Upd©eS¸ìn
 (
uöt8_t
 
ödex
, uöt8_à
dúe˘i⁄
)

35 
°r
[6];

36 
Àn
;

39 
	`ôﬂ
(
P¨amëîs
.
ADC_P¨ams
.
Trimmîs
[
ödex
],
°r
,&
Àn
);

40 
°r
[5] = 0;

41 i‡(
Àn
 < 5)

43 
Àn
--;

44 
i
 = 4;i>=0;i--)

46 i‡(
Àn
>=0Ë
°r
[
i
] = str[len--];

47 
°r
[
i
] = ' ';

51 i‡(
dúe˘i⁄
 =
X_DIRECTION
)

53 
	`LCDSëRe˘
(2,
xCÆibøãd
-1,9,xCÆibøãd+1,1,
BLACK
);

54 
xCÆibøãd
 = 70 + 
	`Tr_CÆibøã
(
P¨amëîs
.
ADC_P¨ams
.
Trimmîs
[
ödex
],index);

55 
	`LCDSëRe˘
(2,
xCÆibøãd
-1,9,xCÆibøãd+1,1,
GREEN
);

56 
	`LCDPutSå
(
°r
,25,90,
LARGE
,
GREEN
,
BLACK
);

58 i‡(
dúe˘i⁄
 =
Y_DIRECTION
)

60 
	`LCDSëRe˘
(
yCÆibøãd
-1,2,yCÆibøãd+1,9,1,
BLACK
);

61 
yCÆibøãd
 = 70 + 
	`Tr_CÆibøã
(
P¨amëîs
.
ADC_P¨ams
.
Trimmîs
[
ödex
],index);

62 
	`LCDSëRe˘
(
yCÆibøãd
-1,2,yCÆibøãd+1,9,1,
GREEN
);

63 
	`LCDPutSå
(
°r
,106,15,
LARGE
,
GREEN
,
BLACK
);

65 
	`LCDFlushTxBuf„r
();

66 
	}
}

69 
	$Trimmî_f‹m
 (
uöt8_t
 
evít
)

73 
evít
)

75 
NO_EVENT
:

78 
KEY_LEFT_EVENT
:

80 
KEY_RIGHT_EVENT
:

82 
KEY_DOWN_EVENT
:

83 i‡(
°ick
==
Y_STICK
)

85 
P¨amëîs
.
ADC_P¨ams
.
Trimmîs
[
RIGHT_Y
]-=10;

86 
	`Upd©eS¸ìn
 (
RIGHT_Y
,
Y_DIRECTION
);

90 
P¨amëîs
.
ADC_P¨ams
.
Trimmîs
[
RIGHT_X
] +=10;

91 
	`Upd©eS¸ìn
 (
RIGHT_X
,
X_DIRECTION
);

94 
KEY_UP_EVENT
:

95 i‡(
°ick
 =
Y_STICK
)

97 
P¨amëîs
.
ADC_P¨ams
.
Trimmîs
[
RIGHT_Y
]+=10;

98 
	`Upd©eS¸ìn
 (
RIGHT_Y
,
Y_DIRECTION
);

102 
P¨amëîs
.
ADC_P¨ams
.
Trimmîs
[
RIGHT_X
] -=10;

103 
	`Upd©eS¸ìn
 (
RIGHT_X
,
X_DIRECTION
);

107 
KEY_ENTER_EVENT
:

108 
°ick
++;

109 
°ick
 &=1;

111 i‡(
°ick
 =
X_STICK
)

113 
	`LCDPutSåROM
 ("Trim X", 121, 20, 
SMALL
, 
GREEN
, 
BLACK
);

114 
	`Upd©eS¸ìn
 (
RIGHT_X
,
X_DIRECTION
);

118 
	`LCDPutSåROM
 ("Trim Y ", 121, 20, 
SMALL
, 
GREEN
, 
BLACK
);

119 
	`Upd©eS¸ìn
 (
RIGHT_Y
,
Y_DIRECTION
);

123 
KEY_ESC_EVENT
:

124 
CuºítF‹mProc
 = 
Míu_F‹m
;

125 
	`CuºítF‹mProc
(
FORM_INIT_EVENT
);

127 
FORM_INIT_EVENT
:

129 
	`LCDSëRe˘
(0, 0, 131, 131, 
FILL
, 
BLACK
);

130 
	`LCDPutSåROM
 ("Trim X", 121, 20, 
SMALL
, 
GREEN
, 
BLACK
);

131 
	`LCDSëRe˘
(1,10,10,130,0,
GREEN
);

132 
	`LCDSëRe˘
(10,1,130,10,0,
GREEN
);

134 
	`LCDSëLöe
(10,70,20,70,
GREEN
);

135 
	`LCDSëLöe
(70,10,70,20,
GREEN
);

136 
	`LCDFlushTxBuf„r
();

138 
	`Upd©eS¸ìn
 (
RIGHT_X
,
X_DIRECTION
);

139 
	`Upd©eS¸ìn
 (
RIGHT_Y
,
Y_DIRECTION
);

142 
°ick
 = 0;

147 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Inc\Legacy\stm32_hal_legacy.h

40 #i‚de‡
__STM32_HAL_LEGACY


41 
	#__STM32_HAL_LEGACY


	)

43 #ifde‡
__˝lu•lus


54 
	#AES_FLAG_RDERR
 
CRYP_FLAG_RDERR


	)

55 
	#AES_FLAG_WRERR
 
CRYP_FLAG_WRERR


	)

56 
	#AES_CLEARFLAG_CCF
 
CRYP_CLEARFLAG_CCF


	)

57 
	#AES_CLEARFLAG_RDERR
 
CRYP_CLEARFLAG_RDERR


	)

58 
	#AES_CLEARFLAG_WRERR
 
CRYP_CLEARFLAG_WRERR


	)

67 
	#ADC_RESOLUTION12b
 
ADC_RESOLUTION_12B


	)

68 
	#ADC_RESOLUTION10b
 
ADC_RESOLUTION_10B


	)

69 
	#ADC_RESOLUTION8b
 
ADC_RESOLUTION_8B


	)

70 
	#ADC_RESOLUTION6b
 
ADC_RESOLUTION_6B


	)

71 
	#OVR_DATA_OVERWRITTEN
 
ADC_OVR_DATA_OVERWRITTEN


	)

72 
	#OVR_DATA_PRESERVED
 
ADC_OVR_DATA_PRESERVED


	)

73 
	#EOC_SINGLE_CONV
 
ADC_EOC_SINGLE_CONV


	)

74 
	#EOC_SEQ_CONV
 
ADC_EOC_SEQ_CONV


	)

75 
	#EOC_SINGLE_SEQ_CONV
 
ADC_EOC_SINGLE_SEQ_CONV


	)

76 
	#REGULAR_GROUP
 
ADC_REGULAR_GROUP


	)

77 
	#INJECTED_GROUP
 
ADC_INJECTED_GROUP


	)

78 
	#REGULAR_INJECTED_GROUP
 
ADC_REGULAR_INJECTED_GROUP


	)

79 
	#AWD_EVENT
 
ADC_AWD_EVENT


	)

80 
	#AWD1_EVENT
 
ADC_AWD1_EVENT


	)

81 
	#AWD2_EVENT
 
ADC_AWD2_EVENT


	)

82 
	#AWD3_EVENT
 
ADC_AWD3_EVENT


	)

83 
	#OVR_EVENT
 
ADC_OVR_EVENT


	)

84 
	#JQOVF_EVENT
 
ADC_JQOVF_EVENT


	)

85 
	#ALL_CHANNELS
 
ADC_ALL_CHANNELS


	)

86 
	#REGULAR_CHANNELS
 
ADC_REGULAR_CHANNELS


	)

87 
	#INJECTED_CHANNELS
 
ADC_INJECTED_CHANNELS


	)

88 
	#SYSCFG_FLAG_SENSOR_ADC
 
ADC_FLAG_SENSOR


	)

89 
	#SYSCFG_FLAG_VREF_ADC
 
ADC_FLAG_VREFINT


	)

90 
	#ADC_CLOCKPRESCALER_PCLK_DIV1
 
ADC_CLOCK_SYNC_PCLK_DIV1


	)

91 
	#ADC_CLOCKPRESCALER_PCLK_DIV2
 
ADC_CLOCK_SYNC_PCLK_DIV2


	)

92 
	#ADC_CLOCKPRESCALER_PCLK_DIV4
 
ADC_CLOCK_SYNC_PCLK_DIV4


	)

93 
	#ADC_CLOCKPRESCALER_PCLK_DIV6
 
ADC_CLOCK_SYNC_PCLK_DIV6


	)

94 
	#ADC_CLOCKPRESCALER_PCLK_DIV8
 
ADC_CLOCK_SYNC_PCLK_DIV8


	)

95 
	#ADC_EXTERNALTRIG0_T6_TRGO
 
ADC_EXTERNALTRIGCONV_T6_TRGO


	)

96 
	#ADC_EXTERNALTRIG1_T21_CC2
 
ADC_EXTERNALTRIGCONV_T21_CC2


	)

97 
	#ADC_EXTERNALTRIG2_T2_TRGO
 
ADC_EXTERNALTRIGCONV_T2_TRGO


	)

98 
	#ADC_EXTERNALTRIG3_T2_CC4
 
ADC_EXTERNALTRIGCONV_T2_CC4


	)

99 
	#ADC_EXTERNALTRIG4_T22_TRGO
 
ADC_EXTERNALTRIGCONV_T22_TRGO


	)

100 
	#ADC_EXTERNALTRIG7_EXT_IT11
 
ADC_EXTERNALTRIGCONV_EXT_IT11


	)

101 
	#ADC_CLOCK_ASYNC
 
ADC_CLOCK_ASYNC_DIV1


	)

102 
	#ADC_EXTERNALTRIG_EDGE_NONE
 
ADC_EXTERNALTRIGCONVEDGE_NONE


	)

103 
	#ADC_EXTERNALTRIG_EDGE_RISING
 
ADC_EXTERNALTRIGCONVEDGE_RISING


	)

104 
	#ADC_EXTERNALTRIG_EDGE_FALLING
 
ADC_EXTERNALTRIGCONVEDGE_FALLING


	)

105 
	#ADC_EXTERNALTRIG_EDGE_RISINGFALLING
 
ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING


	)

106 
	#ADC_SAMPLETIME_2CYCLE_5
 
ADC_SAMPLETIME_2CYCLES_5


	)

108 
	#HAL_ADC_STATE_BUSY_REG
 
HAL_ADC_STATE_REG_BUSY


	)

109 
	#HAL_ADC_STATE_BUSY_INJ
 
HAL_ADC_STATE_INJ_BUSY


	)

110 
	#HAL_ADC_STATE_EOC_REG
 
HAL_ADC_STATE_REG_EOC


	)

111 
	#HAL_ADC_STATE_EOC_INJ
 
HAL_ADC_STATE_INJ_EOC


	)

112 
	#HAL_ADC_STATE_ERROR
 
HAL_ADC_STATE_ERROR_INTERNAL


	)

113 
	#HAL_ADC_STATE_BUSY
 
HAL_ADC_STATE_BUSY_INTERNAL


	)

114 
	#HAL_ADC_STATE_AWD
 
HAL_ADC_STATE_AWD1


	)

123 
	#__HAL_CEC_GET_IT
 
__HAL_CEC_GET_FLAG


	)

133 
	#COMP_WINDOWMODE_DISABLED
 
COMP_WINDOWMODE_DISABLE


	)

134 
	#COMP_WINDOWMODE_ENABLED
 
COMP_WINDOWMODE_ENABLE


	)

135 
	#COMP_EXTI_LINE_COMP1_EVENT
 
COMP_EXTI_LINE_COMP1


	)

136 
	#COMP_EXTI_LINE_COMP2_EVENT
 
COMP_EXTI_LINE_COMP2


	)

137 
	#COMP_EXTI_LINE_COMP3_EVENT
 
COMP_EXTI_LINE_COMP3


	)

138 
	#COMP_EXTI_LINE_COMP4_EVENT
 
COMP_EXTI_LINE_COMP4


	)

139 
	#COMP_EXTI_LINE_COMP5_EVENT
 
COMP_EXTI_LINE_COMP5


	)

140 
	#COMP_EXTI_LINE_COMP6_EVENT
 
COMP_EXTI_LINE_COMP6


	)

141 
	#COMP_EXTI_LINE_COMP7_EVENT
 
COMP_EXTI_LINE_COMP7


	)

142 
	#COMP_OUTPUT_COMP6TIM2OCREFCLR
 
COMP_OUTPUT_COMP6_TIM2OCREFCLR


	)

143 #i‡
deföed
(
STM32F373xC
Ë|| deföed(
STM32F378xx
)

144 
	#COMP_OUTPUT_TIM3IC1
 
COMP_OUTPUT_COMP1_TIM3IC1


	)

145 
	#COMP_OUTPUT_TIM3OCREFCLR
 
COMP_OUTPUT_COMP1_TIM3OCREFCLR


	)

154 
	#__HAL_CORTEX_SYSTICKCLK_CONFIG
 
HAL_SYSTICK_CLKSour˚C⁄fig


	)

163 
	#CRC_OUTPUTDATA_INVERSION_DISABLED
 
CRC_OUTPUTDATA_INVERSION_DISABLE


	)

164 
	#CRC_OUTPUTDATA_INVERSION_ENABLED
 
CRC_OUTPUTDATA_INVERSION_ENABLE


	)

174 
	#DAC1_CHANNEL_1
 
DAC_CHANNEL_1


	)

175 
	#DAC1_CHANNEL_2
 
DAC_CHANNEL_2


	)

176 
	#DAC2_CHANNEL_1
 
DAC_CHANNEL_1


	)

177 
	#DAC_WAVE_NONE
 ((
uöt32_t
)0x00000000U)

	)

178 
	#DAC_WAVE_NOISE
 ((
uöt32_t
)
DAC_CR_WAVE1_0
)

	)

179 
	#DAC_WAVE_TRIANGLE
 ((
uöt32_t
)
DAC_CR_WAVE1_1
)

	)

180 
	#DAC_WAVEGENERATION_NONE
 
DAC_WAVE_NONE


	)

181 
	#DAC_WAVEGENERATION_NOISE
 
DAC_WAVE_NOISE


	)

182 
	#DAC_WAVEGENERATION_TRIANGLE
 
DAC_WAVE_TRIANGLE


	)

191 
	#HAL_REMAPDMA_ADC_DMA_CH2
 
DMA_REMAP_ADC_DMA_CH2


	)

192 
	#HAL_REMAPDMA_USART1_TX_DMA_CH4
 
DMA_REMAP_USART1_TX_DMA_CH4


	)

193 
	#HAL_REMAPDMA_USART1_RX_DMA_CH5
 
DMA_REMAP_USART1_RX_DMA_CH5


	)

194 
	#HAL_REMAPDMA_TIM16_DMA_CH4
 
DMA_REMAP_TIM16_DMA_CH4


	)

195 
	#HAL_REMAPDMA_TIM17_DMA_CH2
 
DMA_REMAP_TIM17_DMA_CH2


	)

196 
	#HAL_REMAPDMA_USART3_DMA_CH32
 
DMA_REMAP_USART3_DMA_CH32


	)

197 
	#HAL_REMAPDMA_TIM16_DMA_CH6
 
DMA_REMAP_TIM16_DMA_CH6


	)

198 
	#HAL_REMAPDMA_TIM17_DMA_CH7
 
DMA_REMAP_TIM17_DMA_CH7


	)

199 
	#HAL_REMAPDMA_SPI2_DMA_CH67
 
DMA_REMAP_SPI2_DMA_CH67


	)

200 
	#HAL_REMAPDMA_USART2_DMA_CH67
 
DMA_REMAP_USART2_DMA_CH67


	)

201 
	#HAL_REMAPDMA_USART3_DMA_CH32
 
DMA_REMAP_USART3_DMA_CH32


	)

202 
	#HAL_REMAPDMA_I2C1_DMA_CH76
 
DMA_REMAP_I2C1_DMA_CH76


	)

203 
	#HAL_REMAPDMA_TIM1_DMA_CH6
 
DMA_REMAP_TIM1_DMA_CH6


	)

204 
	#HAL_REMAPDMA_TIM2_DMA_CH7
 
DMA_REMAP_TIM2_DMA_CH7


	)

205 
	#HAL_REMAPDMA_TIM3_DMA_CH6
 
DMA_REMAP_TIM3_DMA_CH6


	)

207 
	#IS_HAL_REMAPDMA
 
IS_DMA_REMAP


	)

208 
	#__HAL_REMAPDMA_CHANNEL_ENABLE
 
__HAL_DMA_REMAP_CHANNEL_ENABLE


	)

209 
	#__HAL_REMAPDMA_CHANNEL_DISABLE
 
__HAL_DMA_REMAP_CHANNEL_DISABLE


	)

221 
	#TYPEPROGRAM_BYTE
 
FLASH_TYPEPROGRAM_BYTE


	)

222 
	#TYPEPROGRAM_HALFWORD
 
FLASH_TYPEPROGRAM_HALFWORD


	)

223 
	#TYPEPROGRAM_WORD
 
FLASH_TYPEPROGRAM_WORD


	)

224 
	#TYPEPROGRAM_DOUBLEWORD
 
FLASH_TYPEPROGRAM_DOUBLEWORD


	)

225 
	#TYPEERASE_SECTORS
 
FLASH_TYPEERASE_SECTORS


	)

226 
	#TYPEERASE_PAGES
 
FLASH_TYPEERASE_PAGES


	)

227 
	#TYPEERASE_PAGEERASE
 
FLASH_TYPEERASE_PAGES


	)

228 
	#TYPEERASE_MASSERASE
 
FLASH_TYPEERASE_MASSERASE


	)

229 
	#WRPSTATE_DISABLE
 
OB_WRPSTATE_DISABLE


	)

230 
	#WRPSTATE_ENABLE
 
OB_WRPSTATE_ENABLE


	)

231 
	#HAL_FLASH_TIMEOUT_VALUE
 
FLASH_TIMEOUT_VALUE


	)

232 
	#OBEX_PCROP
 
OPTIONBYTE_PCROP


	)

233 
	#OBEX_BOOTCONFIG
 
OPTIONBYTE_BOOTCONFIG


	)

234 
	#PCROPSTATE_DISABLE
 
OB_PCROP_STATE_DISABLE


	)

235 
	#PCROPSTATE_ENABLE
 
OB_PCROP_STATE_ENABLE


	)

236 
	#TYPEERASEDATA_BYTE
 
FLASH_TYPEERASEDATA_BYTE


	)

237 
	#TYPEERASEDATA_HALFWORD
 
FLASH_TYPEERASEDATA_HALFWORD


	)

238 
	#TYPEERASEDATA_WORD
 
FLASH_TYPEERASEDATA_WORD


	)

239 
	#TYPEPROGRAMDATA_BYTE
 
FLASH_TYPEPROGRAMDATA_BYTE


	)

240 
	#TYPEPROGRAMDATA_HALFWORD
 
FLASH_TYPEPROGRAMDATA_HALFWORD


	)

241 
	#TYPEPROGRAMDATA_WORD
 
FLASH_TYPEPROGRAMDATA_WORD


	)

242 
	#TYPEPROGRAMDATA_FASTBYTE
 
FLASH_TYPEPROGRAMDATA_FASTBYTE


	)

243 
	#TYPEPROGRAMDATA_FASTHALFWORD
 
FLASH_TYPEPROGRAMDATA_FASTHALFWORD


	)

244 
	#TYPEPROGRAMDATA_FASTWORD
 
FLASH_TYPEPROGRAMDATA_FASTWORD


	)

245 
	#PAGESIZE
 
FLASH_PAGE_SIZE


	)

246 
	#TYPEPROGRAM_FASTBYTE
 
FLASH_TYPEPROGRAM_BYTE


	)

247 
	#TYPEPROGRAM_FASTHALFWORD
 
FLASH_TYPEPROGRAM_HALFWORD


	)

248 
	#TYPEPROGRAM_FASTWORD
 
FLASH_TYPEPROGRAM_WORD


	)

249 
	#VOLTAGE_RANGE_1
 
FLASH_VOLTAGE_RANGE_1


	)

250 
	#VOLTAGE_RANGE_2
 
FLASH_VOLTAGE_RANGE_2


	)

251 
	#VOLTAGE_RANGE_3
 
FLASH_VOLTAGE_RANGE_3


	)

252 
	#VOLTAGE_RANGE_4
 
FLASH_VOLTAGE_RANGE_4


	)

253 
	#TYPEPROGRAM_FAST
 
FLASH_TYPEPROGRAM_FAST


	)

254 
	#TYPEPROGRAM_FAST_AND_LAST
 
FLASH_TYPEPROGRAM_FAST_AND_LAST


	)

255 
	#WRPAREA_BANK1_AREAA
 
OB_WRPAREA_BANK1_AREAA


	)

256 
	#WRPAREA_BANK1_AREAB
 
OB_WRPAREA_BANK1_AREAB


	)

257 
	#WRPAREA_BANK2_AREAA
 
OB_WRPAREA_BANK2_AREAA


	)

258 
	#WRPAREA_BANK2_AREAB
 
OB_WRPAREA_BANK2_AREAB


	)

259 
	#IWDG_STDBY_FREEZE
 
OB_IWDG_STDBY_FREEZE


	)

260 
	#IWDG_STDBY_ACTIVE
 
OB_IWDG_STDBY_RUN


	)

261 
	#IWDG_STOP_FREEZE
 
OB_IWDG_STOP_FREEZE


	)

262 
	#IWDG_STOP_ACTIVE
 
OB_IWDG_STOP_RUN


	)

263 
	#FLASH_ERROR_NONE
 
HAL_FLASH_ERROR_NONE


	)

264 
	#FLASH_ERROR_RD
 
HAL_FLASH_ERROR_RD


	)

265 
	#FLASH_ERROR_PG
 
HAL_FLASH_ERROR_PROG


	)

266 
	#FLASH_ERROR_PGP
 
HAL_FLASH_ERROR_PGS


	)

267 
	#FLASH_ERROR_WRP
 
HAL_FLASH_ERROR_WRP


	)

268 
	#FLASH_ERROR_OPTV
 
HAL_FLASH_ERROR_OPTV


	)

269 
	#FLASH_ERROR_OPTVUSR
 
HAL_FLASH_ERROR_OPTVUSR


	)

270 
	#FLASH_ERROR_PROG
 
HAL_FLASH_ERROR_PROG


	)

271 
	#FLASH_ERROR_OP
 
HAL_FLASH_ERROR_OPERATION


	)

272 
	#FLASH_ERROR_PGA
 
HAL_FLASH_ERROR_PGA


	)

273 
	#FLASH_ERROR_SIZE
 
HAL_FLASH_ERROR_SIZE


	)

274 
	#FLASH_ERROR_SIZ
 
HAL_FLASH_ERROR_SIZE


	)

275 
	#FLASH_ERROR_PGS
 
HAL_FLASH_ERROR_PGS


	)

276 
	#FLASH_ERROR_MIS
 
HAL_FLASH_ERROR_MIS


	)

277 
	#FLASH_ERROR_FAST
 
HAL_FLASH_ERROR_FAST


	)

278 
	#FLASH_ERROR_FWWERR
 
HAL_FLASH_ERROR_FWWERR


	)

279 
	#FLASH_ERROR_NOTZERO
 
HAL_FLASH_ERROR_NOTZERO


	)

280 
	#FLASH_ERROR_OPERATION
 
HAL_FLASH_ERROR_OPERATION


	)

281 
	#FLASH_ERROR_ERS
 
HAL_FLASH_ERROR_ERS


	)

282 
	#OB_WDG_SW
 
OB_IWDG_SW


	)

283 
	#OB_WDG_HW
 
OB_IWDG_HW


	)

284 
	#OB_SDADC12_VDD_MONITOR_SET
 
OB_SDACD_VDD_MONITOR_SET


	)

285 
	#OB_SDADC12_VDD_MONITOR_RESET
 
OB_SDACD_VDD_MONITOR_RESET


	)

286 
	#OB_RAM_PARITY_CHECK_SET
 
OB_SRAM_PARITY_SET


	)

287 
	#OB_RAM_PARITY_CHECK_RESET
 
OB_SRAM_PARITY_RESET


	)

288 
	#IS_OB_SDADC12_VDD_MONITOR
 
IS_OB_SDACD_VDD_MONITOR


	)

289 
	#OB_RDP_LEVEL0
 
OB_RDP_LEVEL_0


	)

290 
	#OB_RDP_LEVEL1
 
OB_RDP_LEVEL_1


	)

291 
	#OB_RDP_LEVEL2
 
OB_RDP_LEVEL_2


	)

300 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PA9
 
I2C_FASTMODEPLUS_PA9


	)

301 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PA10
 
I2C_FASTMODEPLUS_PA10


	)

302 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PB6
 
I2C_FASTMODEPLUS_PB6


	)

303 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PB7
 
I2C_FASTMODEPLUS_PB7


	)

304 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PB8
 
I2C_FASTMODEPLUS_PB8


	)

305 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PB9
 
I2C_FASTMODEPLUS_PB9


	)

306 
	#HAL_SYSCFG_FASTMODEPLUS_I2C1
 
I2C_FASTMODEPLUS_I2C1


	)

307 
	#HAL_SYSCFG_FASTMODEPLUS_I2C2
 
I2C_FASTMODEPLUS_I2C2


	)

308 
	#HAL_SYSCFG_FASTMODEPLUS_I2C3
 
I2C_FASTMODEPLUS_I2C3


	)

317 #i‡
deföed
(
STM32L4
Ë|| deföed(
STM32F7
)

318 
	#FMC_NAND_PCC_WAIT_FEATURE_DISABLE
 
FMC_NAND_WAIT_FEATURE_DISABLE


	)

319 
	#FMC_NAND_PCC_WAIT_FEATURE_ENABLE
 
FMC_NAND_WAIT_FEATURE_ENABLE


	)

320 
	#FMC_NAND_PCC_MEM_BUS_WIDTH_8
 
FMC_NAND_MEM_BUS_WIDTH_8


	)

321 
	#FMC_NAND_PCC_MEM_BUS_WIDTH_16
 
FMC_NAND_MEM_BUS_WIDTH_16


	)

323 
	#FMC_NAND_WAIT_FEATURE_DISABLE
 
FMC_NAND_PCC_WAIT_FEATURE_DISABLE


	)

324 
	#FMC_NAND_WAIT_FEATURE_ENABLE
 
FMC_NAND_PCC_WAIT_FEATURE_ENABLE


	)

325 
	#FMC_NAND_MEM_BUS_WIDTH_8
 
FMC_NAND_PCC_MEM_BUS_WIDTH_8


	)

326 
	#FMC_NAND_MEM_BUS_WIDTH_16
 
FMC_NAND_PCC_MEM_BUS_WIDTH_16


	)

336 
	#FSMC_NORSRAM_TYPEDEF
 
FSMC_NORSRAM_Ty≥Def


	)

337 
	#FSMC_NORSRAM_EXTENDED_TYPEDEF
 
FSMC_NORSRAM_EXTENDED_Ty≥Def


	)

345 
	#GET_GPIO_SOURCE
 
GPIO_GET_INDEX


	)

346 
	#GET_GPIO_INDEX
 
GPIO_GET_INDEX


	)

348 #i‡
deföed
(
STM32F4
)

349 
	#GPIO_AF12_SDMMC
 
GPIO_AF12_SDIO


	)

350 
	#GPIO_AF12_SDMMC1
 
GPIO_AF12_SDIO


	)

353 #i‡
deföed
(
STM32F7
)

354 
	#GPIO_AF12_SDIO
 
GPIO_AF12_SDMMC1


	)

355 
	#GPIO_AF12_SDMMC
 
GPIO_AF12_SDMMC1


	)

358 #i‡
deföed
(
STM32L4
)

359 
	#GPIO_AF12_SDIO
 
GPIO_AF12_SDMMC1


	)

360 
	#GPIO_AF12_SDMMC
 
GPIO_AF12_SDMMC1


	)

363 
	#GPIO_AF0_LPTIM
 
GPIO_AF0_LPTIM1


	)

364 
	#GPIO_AF1_LPTIM
 
GPIO_AF1_LPTIM1


	)

365 
	#GPIO_AF2_LPTIM
 
GPIO_AF2_LPTIM1


	)

367 #i‡
deföed
(
STM32L0
Ë|| deföed(
STM32L4
Ë|| deföed(
STM32F4
Ë|| deföed(
STM32F2
Ë|| deföed(
STM32F7
)

368 
	#GPIO_SPEED_LOW
 
GPIO_SPEED_FREQ_LOW


	)

369 
	#GPIO_SPEED_MEDIUM
 
GPIO_SPEED_FREQ_MEDIUM


	)

370 
	#GPIO_SPEED_FAST
 
GPIO_SPEED_FREQ_HIGH


	)

371 
	#GPIO_SPEED_HIGH
 
GPIO_SPEED_FREQ_VERY_HIGH


	)

374 #i‡
deföed
(
STM32L1
)

375 
	#GPIO_SPEED_VERY_LOW
 
GPIO_SPEED_FREQ_LOW


	)

376 
	#GPIO_SPEED_LOW
 
GPIO_SPEED_FREQ_MEDIUM


	)

377 
	#GPIO_SPEED_MEDIUM
 
GPIO_SPEED_FREQ_HIGH


	)

378 
	#GPIO_SPEED_HIGH
 
GPIO_SPEED_FREQ_VERY_HIGH


	)

381 #i‡
deföed
(
STM32F0
Ë|| deföed(
STM32F3
Ë|| deföed(
STM32F1
)

382 
	#GPIO_SPEED_LOW
 
GPIO_SPEED_FREQ_LOW


	)

383 
	#GPIO_SPEED_MEDIUM
 
GPIO_SPEED_FREQ_MEDIUM


	)

384 
	#GPIO_SPEED_HIGH
 
GPIO_SPEED_FREQ_HIGH


	)

394 
	#HRTIM_TIMDELAYEDPROTECTION_DISABLED
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED


	)

395 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT1_EEV68
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT1_EEV6


	)

396 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT2_EEV68
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT2_EEV6


	)

397 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDBOTH_EEV68
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDBOTH_EEV6


	)

398 
	#HRTIM_TIMDELAYEDPROTECTION_BALANCED_EEV68
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6


	)

399 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT1_DEEV79
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT1_DEEV7


	)

400 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT2_DEEV79
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT2_DEEV7


	)

401 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDBOTH_EEV79
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDBOTH_EEV7


	)

402 
	#HRTIM_TIMDELAYEDPROTECTION_BALANCED_EEV79
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7


	)

404 
	#__HAL_HRTIM_SëCou¡î
 
__HAL_HRTIM_SETCOUNTER


	)

405 
	#__HAL_HRTIM_GëCou¡î
 
__HAL_HRTIM_GETCOUNTER


	)

406 
	#__HAL_HRTIM_SëPîiod
 
__HAL_HRTIM_SETPERIOD


	)

407 
	#__HAL_HRTIM_GëPîiod
 
__HAL_HRTIM_GETPERIOD


	)

408 
	#__HAL_HRTIM_SëClockPªsˇÀr
 
__HAL_HRTIM_SETCLOCKPRESCALER


	)

409 
	#__HAL_HRTIM_GëClockPªsˇÀr
 
__HAL_HRTIM_GETCLOCKPRESCALER


	)

410 
	#__HAL_HRTIM_SëCom∑ª
 
__HAL_HRTIM_SETCOMPARE


	)

411 
	#__HAL_HRTIM_GëCom∑ª
 
__HAL_HRTIM_GETCOMPARE


	)

419 
	#I2C_DUALADDRESS_DISABLED
 
I2C_DUALADDRESS_DISABLE


	)

420 
	#I2C_DUALADDRESS_ENABLED
 
I2C_DUALADDRESS_ENABLE


	)

421 
	#I2C_GENERALCALL_DISABLED
 
I2C_GENERALCALL_DISABLE


	)

422 
	#I2C_GENERALCALL_ENABLED
 
I2C_GENERALCALL_ENABLE


	)

423 
	#I2C_NOSTRETCH_DISABLED
 
I2C_NOSTRETCH_DISABLE


	)

424 
	#I2C_NOSTRETCH_ENABLED
 
I2C_NOSTRETCH_ENABLE


	)

425 
	#I2C_ANALOGFILTER_ENABLED
 
I2C_ANALOGFILTER_ENABLE


	)

426 
	#I2C_ANALOGFILTER_DISABLED
 
I2C_ANALOGFILTER_DISABLE


	)

427 
	#HAL_I2C_STATE_MEM_BUSY_TX
 
HAL_I2C_STATE_BUSY_TX


	)

428 
	#HAL_I2C_STATE_MEM_BUSY_RX
 
HAL_I2C_STATE_BUSY_RX


	)

436 
	#IRDA_ONE_BIT_SAMPLE_DISABLED
 
IRDA_ONE_BIT_SAMPLE_DISABLE


	)

437 
	#IRDA_ONE_BIT_SAMPLE_ENABLED
 
IRDA_ONE_BIT_SAMPLE_ENABLE


	)

446 
	#KR_KEY_RELOAD
 
IWDG_KEY_RELOAD


	)

447 
	#KR_KEY_ENABLE
 
IWDG_KEY_ENABLE


	)

448 
	#KR_KEY_EWA
 
IWDG_KEY_WRITE_ACCESS_ENABLE


	)

449 
	#KR_KEY_DWA
 
IWDG_KEY_WRITE_ACCESS_DISABLE


	)

458 
	#LPTIM_CLOCKSAMPLETIME_DIRECTTRANSISTION
 
LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION


	)

459 
	#LPTIM_CLOCKSAMPLETIME_2TRANSISTIONS
 
LPTIM_CLOCKSAMPLETIME_2TRANSITIONS


	)

460 
	#LPTIM_CLOCKSAMPLETIME_4TRANSISTIONS
 
LPTIM_CLOCKSAMPLETIME_4TRANSITIONS


	)

461 
	#LPTIM_CLOCKSAMPLETIME_8TRANSISTIONS
 
LPTIM_CLOCKSAMPLETIME_8TRANSITIONS


	)

463 
	#LPTIM_CLOCKPOLARITY_RISINGEDGE
 
LPTIM_CLOCKPOLARITY_RISING


	)

464 
	#LPTIM_CLOCKPOLARITY_FALLINGEDGE
 
LPTIM_CLOCKPOLARITY_FALLING


	)

465 
	#LPTIM_CLOCKPOLARITY_BOTHEDGES
 
LPTIM_CLOCKPOLARITY_RISING_FALLING


	)

467 
	#LPTIM_TRIGSAMPLETIME_DIRECTTRANSISTION
 
LPTIM_TRIGSAMPLETIME_DIRECTTRANSITION


	)

468 
	#LPTIM_TRIGSAMPLETIME_2TRANSISTIONS
 
LPTIM_TRIGSAMPLETIME_2TRANSITIONS


	)

469 
	#LPTIM_TRIGSAMPLETIME_4TRANSISTIONS
 
LPTIM_TRIGSAMPLETIME_4TRANSITIONS


	)

470 
	#LPTIM_TRIGSAMPLETIME_8TRANSISTIONS
 
LPTIM_TRIGSAMPLETIME_8TRANSITIONS


	)

474 
	#LPTIM_TRIGSAMPLETIME_2TRANSITION
 
LPTIM_TRIGSAMPLETIME_2TRANSITIONS


	)

475 
	#LPTIM_TRIGSAMPLETIME_4TRANSITION
 
LPTIM_TRIGSAMPLETIME_4TRANSITIONS


	)

476 
	#LPTIM_TRIGSAMPLETIME_8TRANSITION
 
LPTIM_TRIGSAMPLETIME_8TRANSITIONS


	)

485 
	#NAND_AddªssTy≥def
 
NAND_AddªssTy≥Def


	)

487 
	#__ARRAY_ADDRESS
 
ARRAY_ADDRESS


	)

488 
	#__ADDR_1°_CYCLE
 
ADDR_1ST_CYCLE


	)

489 
	#__ADDR_2nd_CYCLE
 
ADDR_2ND_CYCLE


	)

490 
	#__ADDR_3rd_CYCLE
 
ADDR_3RD_CYCLE


	)

491 
	#__ADDR_4th_CYCLE
 
ADDR_4TH_CYCLE


	)

499 
	#NOR_SètusTy≥def
 
HAL_NOR_SètusTy≥Def


	)

500 
	#NOR_SUCCESS
 
HAL_NOR_STATUS_SUCCESS


	)

501 
	#NOR_ONGOING
 
HAL_NOR_STATUS_ONGOING


	)

502 
	#NOR_ERROR
 
HAL_NOR_STATUS_ERROR


	)

503 
	#NOR_TIMEOUT
 
HAL_NOR_STATUS_TIMEOUT


	)

505 
	#__NOR_WRITE
 
NOR_WRITE


	)

506 
	#__NOR_ADDR_SHIFT
 
NOR_ADDR_SHIFT


	)

515 
	#OPAMP_NONINVERTINGINPUT_VP0
 
OPAMP_NONINVERTINGINPUT_IO0


	)

516 
	#OPAMP_NONINVERTINGINPUT_VP1
 
OPAMP_NONINVERTINGINPUT_IO1


	)

517 
	#OPAMP_NONINVERTINGINPUT_VP2
 
OPAMP_NONINVERTINGINPUT_IO2


	)

518 
	#OPAMP_NONINVERTINGINPUT_VP3
 
OPAMP_NONINVERTINGINPUT_IO3


	)

520 
	#OPAMP_SEC_NONINVERTINGINPUT_VP0
 
OPAMP_SEC_NONINVERTINGINPUT_IO0


	)

521 
	#OPAMP_SEC_NONINVERTINGINPUT_VP1
 
OPAMP_SEC_NONINVERTINGINPUT_IO1


	)

522 
	#OPAMP_SEC_NONINVERTINGINPUT_VP2
 
OPAMP_SEC_NONINVERTINGINPUT_IO2


	)

523 
	#OPAMP_SEC_NONINVERTINGINPUT_VP3
 
OPAMP_SEC_NONINVERTINGINPUT_IO3


	)

525 
	#OPAMP_INVERTINGINPUT_VM0
 
OPAMP_INVERTINGINPUT_IO0


	)

526 
	#OPAMP_INVERTINGINPUT_VM1
 
OPAMP_INVERTINGINPUT_IO1


	)

528 
	#IOPAMP_INVERTINGINPUT_VM0
 
OPAMP_INVERTINGINPUT_IO0


	)

529 
	#IOPAMP_INVERTINGINPUT_VM1
 
OPAMP_INVERTINGINPUT_IO1


	)

531 
	#OPAMP_SEC_INVERTINGINPUT_VM0
 
OPAMP_SEC_INVERTINGINPUT_IO0


	)

532 
	#OPAMP_SEC_INVERTINGINPUT_VM1
 
OPAMP_SEC_INVERTINGINPUT_IO1


	)

534 
	#OPAMP_INVERTINGINPUT_VINM
 
OPAMP_SEC_INVERTINGINPUT_IO1


	)

536 
	#OPAMP_PGACONNECT_NO
 
OPAMP_PGA_CONNECT_INVERTINGINPUT_NO


	)

537 
	#OPAMP_PGACONNECT_VM0
 
OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0


	)

538 
	#OPAMP_PGACONNECT_VM1
 
OPAMP_PGA_CONNECT_INVERTINGINPUT_IO1


	)

547 
	#I2S_STANDARD_PHILLIPS
 
I2S_STANDARD_PHILIPS


	)

557 
	#CF_DATA
 
ATA_DATA


	)

558 
	#CF_SECTOR_COUNT
 
ATA_SECTOR_COUNT


	)

559 
	#CF_SECTOR_NUMBER
 
ATA_SECTOR_NUMBER


	)

560 
	#CF_CYLINDER_LOW
 
ATA_CYLINDER_LOW


	)

561 
	#CF_CYLINDER_HIGH
 
ATA_CYLINDER_HIGH


	)

562 
	#CF_CARD_HEAD
 
ATA_CARD_HEAD


	)

563 
	#CF_STATUS_CMD
 
ATA_STATUS_CMD


	)

564 
	#CF_STATUS_CMD_ALTERNATE
 
ATA_STATUS_CMD_ALTERNATE


	)

565 
	#CF_COMMON_DATA_AREA
 
ATA_COMMON_DATA_AREA


	)

568 
	#CF_READ_SECTOR_CMD
 
ATA_READ_SECTOR_CMD


	)

569 
	#CF_WRITE_SECTOR_CMD
 
ATA_WRITE_SECTOR_CMD


	)

570 
	#CF_ERASE_SECTOR_CMD
 
ATA_ERASE_SECTOR_CMD


	)

571 
	#CF_IDENTIFY_CMD
 
ATA_IDENTIFY_CMD


	)

573 
	#PCCARD_SètusTy≥def
 
HAL_PCCARD_SètusTy≥Def


	)

574 
	#PCCARD_SUCCESS
 
HAL_PCCARD_STATUS_SUCCESS


	)

575 
	#PCCARD_ONGOING
 
HAL_PCCARD_STATUS_ONGOING


	)

576 
	#PCCARD_ERROR
 
HAL_PCCARD_STATUS_ERROR


	)

577 
	#PCCARD_TIMEOUT
 
HAL_PCCARD_STATUS_TIMEOUT


	)

586 
	#FORMAT_BIN
 
RTC_FORMAT_BIN


	)

587 
	#FORMAT_BCD
 
RTC_FORMAT_BCD


	)

589 
	#RTC_ALARMSUBSECONDMASK_N⁄e
 
RTC_ALARMSUBSECONDMASK_NONE


	)

590 
	#RTC_TAMPERERASEBACKUP_ENABLED
 
RTC_TAMPER_ERASE_BACKUP_ENABLE


	)

591 
	#RTC_TAMPERERASEBACKUP_DISABLED
 
RTC_TAMPER_ERASE_BACKUP_DISABLE


	)

592 
	#RTC_TAMPERMASK_FLAG_DISABLED
 
RTC_TAMPERMASK_FLAG_DISABLE


	)

593 
	#RTC_TAMPERMASK_FLAG_ENABLED
 
RTC_TAMPERMASK_FLAG_ENABLE


	)

595 
	#RTC_MASKTAMPERFLAG_DISABLED
 
RTC_TAMPERMASK_FLAG_DISABLE


	)

596 
	#RTC_MASKTAMPERFLAG_ENABLED
 
RTC_TAMPERMASK_FLAG_ENABLE


	)

597 
	#RTC_TAMPERERASEBACKUP_ENABLED
 
RTC_TAMPER_ERASE_BACKUP_ENABLE


	)

598 
	#RTC_TAMPERERASEBACKUP_DISABLED
 
RTC_TAMPER_ERASE_BACKUP_DISABLE


	)

599 
	#RTC_MASKTAMPERFLAG_DISABLED
 
RTC_TAMPERMASK_FLAG_DISABLE


	)

600 
	#RTC_MASKTAMPERFLAG_ENABLED
 
RTC_TAMPERMASK_FLAG_ENABLE


	)

601 
	#RTC_TAMPER1_2_INTERRUPT
 
RTC_ALL_TAMPER_INTERRUPT


	)

602 
	#RTC_TAMPER1_2_3_INTERRUPT
 
RTC_ALL_TAMPER_INTERRUPT


	)

604 
	#RTC_TIMESTAMPPIN_PC13
 
RTC_TIMESTAMPPIN_DEFAULT


	)

605 
	#RTC_TIMESTAMPPIN_PA0
 
RTC_TIMESTAMPPIN_POS1


	)

606 
	#RTC_TIMESTAMPPIN_PI8
 
RTC_TIMESTAMPPIN_POS1


	)

607 
	#RTC_TIMESTAMPPIN_PC1
 
RTC_TIMESTAMPPIN_POS2


	)

609 
	#RTC_OUTPUT_REMAP_PC13
 
RTC_OUTPUT_REMAP_NONE


	)

610 
	#RTC_OUTPUT_REMAP_PB14
 
RTC_OUTPUT_REMAP_POS1


	)

611 
	#RTC_OUTPUT_REMAP_PB2
 
RTC_OUTPUT_REMAP_POS1


	)

613 
	#RTC_TAMPERPIN_PC13
 
RTC_TAMPERPIN_DEFAULT


	)

614 
	#RTC_TAMPERPIN_PA0
 
RTC_TAMPERPIN_POS1


	)

615 
	#RTC_TAMPERPIN_PI8
 
RTC_TAMPERPIN_POS1


	)

625 
	#SMARTCARD_NACK_ENABLED
 
SMARTCARD_NACK_ENABLE


	)

626 
	#SMARTCARD_NACK_DISABLED
 
SMARTCARD_NACK_DISABLE


	)

628 
	#SMARTCARD_ONEBIT_SAMPLING_DISABLED
 
SMARTCARD_ONE_BIT_SAMPLE_DISABLE


	)

629 
	#SMARTCARD_ONEBIT_SAMPLING_ENABLED
 
SMARTCARD_ONE_BIT_SAMPLE_ENABLE


	)

630 
	#SMARTCARD_ONEBIT_SAMPLING_DISABLE
 
SMARTCARD_ONE_BIT_SAMPLE_DISABLE


	)

631 
	#SMARTCARD_ONEBIT_SAMPLING_ENABLE
 
SMARTCARD_ONE_BIT_SAMPLE_ENABLE


	)

633 
	#SMARTCARD_TIMEOUT_DISABLED
 
SMARTCARD_TIMEOUT_DISABLE


	)

634 
	#SMARTCARD_TIMEOUT_ENABLED
 
SMARTCARD_TIMEOUT_ENABLE


	)

636 
	#SMARTCARD_LASTBIT_DISABLED
 
SMARTCARD_LASTBIT_DISABLE


	)

637 
	#SMARTCARD_LASTBIT_ENABLED
 
SMARTCARD_LASTBIT_ENABLE


	)

646 
	#SMBUS_DUALADDRESS_DISABLED
 
SMBUS_DUALADDRESS_DISABLE


	)

647 
	#SMBUS_DUALADDRESS_ENABLED
 
SMBUS_DUALADDRESS_ENABLE


	)

648 
	#SMBUS_GENERALCALL_DISABLED
 
SMBUS_GENERALCALL_DISABLE


	)

649 
	#SMBUS_GENERALCALL_ENABLED
 
SMBUS_GENERALCALL_ENABLE


	)

650 
	#SMBUS_NOSTRETCH_DISABLED
 
SMBUS_NOSTRETCH_DISABLE


	)

651 
	#SMBUS_NOSTRETCH_ENABLED
 
SMBUS_NOSTRETCH_ENABLE


	)

652 
	#SMBUS_ANALOGFILTER_ENABLED
 
SMBUS_ANALOGFILTER_ENABLE


	)

653 
	#SMBUS_ANALOGFILTER_DISABLED
 
SMBUS_ANALOGFILTER_DISABLE


	)

654 
	#SMBUS_PEC_DISABLED
 
SMBUS_PEC_DISABLE


	)

655 
	#SMBUS_PEC_ENABLED
 
SMBUS_PEC_ENABLE


	)

656 
	#HAL_SMBUS_STATE_SLAVE_LISTEN
 
HAL_SMBUS_STATE_LISTEN


	)

664 
	#SPI_TIMODE_DISABLED
 
SPI_TIMODE_DISABLE


	)

665 
	#SPI_TIMODE_ENABLED
 
SPI_TIMODE_ENABLE


	)

667 
	#SPI_CRCCALCULATION_DISABLED
 
SPI_CRCCALCULATION_DISABLE


	)

668 
	#SPI_CRCCALCULATION_ENABLED
 
SPI_CRCCALCULATION_ENABLE


	)

670 
	#SPI_NSS_PULSE_DISABLED
 
SPI_NSS_PULSE_DISABLE


	)

671 
	#SPI_NSS_PULSE_ENABLED
 
SPI_NSS_PULSE_ENABLE


	)

680 
	#CCER_CCxE_MASK
 
TIM_CCER_CCxE_MASK


	)

681 
	#CCER_CCxNE_MASK
 
TIM_CCER_CCxNE_MASK


	)

683 
	#TIM_DMABa£_CR1
 
TIM_DMABASE_CR1


	)

684 
	#TIM_DMABa£_CR2
 
TIM_DMABASE_CR2


	)

685 
	#TIM_DMABa£_SMCR
 
TIM_DMABASE_SMCR


	)

686 
	#TIM_DMABa£_DIER
 
TIM_DMABASE_DIER


	)

687 
	#TIM_DMABa£_SR
 
TIM_DMABASE_SR


	)

688 
	#TIM_DMABa£_EGR
 
TIM_DMABASE_EGR


	)

689 
	#TIM_DMABa£_CCMR1
 
TIM_DMABASE_CCMR1


	)

690 
	#TIM_DMABa£_CCMR2
 
TIM_DMABASE_CCMR2


	)

691 
	#TIM_DMABa£_CCER
 
TIM_DMABASE_CCER


	)

692 
	#TIM_DMABa£_CNT
 
TIM_DMABASE_CNT


	)

693 
	#TIM_DMABa£_PSC
 
TIM_DMABASE_PSC


	)

694 
	#TIM_DMABa£_ARR
 
TIM_DMABASE_ARR


	)

695 
	#TIM_DMABa£_RCR
 
TIM_DMABASE_RCR


	)

696 
	#TIM_DMABa£_CCR1
 
TIM_DMABASE_CCR1


	)

697 
	#TIM_DMABa£_CCR2
 
TIM_DMABASE_CCR2


	)

698 
	#TIM_DMABa£_CCR3
 
TIM_DMABASE_CCR3


	)

699 
	#TIM_DMABa£_CCR4
 
TIM_DMABASE_CCR4


	)

700 
	#TIM_DMABa£_BDTR
 
TIM_DMABASE_BDTR


	)

701 
	#TIM_DMABa£_DCR
 
TIM_DMABASE_DCR


	)

702 
	#TIM_DMABa£_DMAR
 
TIM_DMABASE_DMAR


	)

703 
	#TIM_DMABa£_OR1
 
TIM_DMABASE_OR1


	)

704 
	#TIM_DMABa£_CCMR3
 
TIM_DMABASE_CCMR3


	)

705 
	#TIM_DMABa£_CCR5
 
TIM_DMABASE_CCR5


	)

706 
	#TIM_DMABa£_CCR6
 
TIM_DMABASE_CCR6


	)

707 
	#TIM_DMABa£_OR2
 
TIM_DMABASE_OR2


	)

708 
	#TIM_DMABa£_OR3
 
TIM_DMABASE_OR3


	)

709 
	#TIM_DMABa£_OR
 
TIM_DMABASE_OR


	)

711 
	#TIM_EvítSour˚_Upd©e
 
TIM_EVENTSOURCE_UPDATE


	)

712 
	#TIM_EvítSour˚_CC1
 
TIM_EVENTSOURCE_CC1


	)

713 
	#TIM_EvítSour˚_CC2
 
TIM_EVENTSOURCE_CC2


	)

714 
	#TIM_EvítSour˚_CC3
 
TIM_EVENTSOURCE_CC3


	)

715 
	#TIM_EvítSour˚_CC4
 
TIM_EVENTSOURCE_CC4


	)

716 
	#TIM_EvítSour˚_COM
 
TIM_EVENTSOURCE_COM


	)

717 
	#TIM_EvítSour˚_Triggî
 
TIM_EVENTSOURCE_TRIGGER


	)

718 
	#TIM_EvítSour˚_Bªak
 
TIM_EVENTSOURCE_BREAK


	)

719 
	#TIM_EvítSour˚_Bªak2
 
TIM_EVENTSOURCE_BREAK2


	)

721 
	#TIM_DMABur°Lígth_1Tøns„r
 
TIM_DMABURSTLENGTH_1TRANSFER


	)

722 
	#TIM_DMABur°Lígth_2Tøns„rs
 
TIM_DMABURSTLENGTH_2TRANSFERS


	)

723 
	#TIM_DMABur°Lígth_3Tøns„rs
 
TIM_DMABURSTLENGTH_3TRANSFERS


	)

724 
	#TIM_DMABur°Lígth_4Tøns„rs
 
TIM_DMABURSTLENGTH_4TRANSFERS


	)

725 
	#TIM_DMABur°Lígth_5Tøns„rs
 
TIM_DMABURSTLENGTH_5TRANSFERS


	)

726 
	#TIM_DMABur°Lígth_6Tøns„rs
 
TIM_DMABURSTLENGTH_6TRANSFERS


	)

727 
	#TIM_DMABur°Lígth_7Tøns„rs
 
TIM_DMABURSTLENGTH_7TRANSFERS


	)

728 
	#TIM_DMABur°Lígth_8Tøns„rs
 
TIM_DMABURSTLENGTH_8TRANSFERS


	)

729 
	#TIM_DMABur°Lígth_9Tøns„rs
 
TIM_DMABURSTLENGTH_9TRANSFERS


	)

730 
	#TIM_DMABur°Lígth_10Tøns„rs
 
TIM_DMABURSTLENGTH_10TRANSFERS


	)

731 
	#TIM_DMABur°Lígth_11Tøns„rs
 
TIM_DMABURSTLENGTH_11TRANSFERS


	)

732 
	#TIM_DMABur°Lígth_12Tøns„rs
 
TIM_DMABURSTLENGTH_12TRANSFERS


	)

733 
	#TIM_DMABur°Lígth_13Tøns„rs
 
TIM_DMABURSTLENGTH_13TRANSFERS


	)

734 
	#TIM_DMABur°Lígth_14Tøns„rs
 
TIM_DMABURSTLENGTH_14TRANSFERS


	)

735 
	#TIM_DMABur°Lígth_15Tøns„rs
 
TIM_DMABURSTLENGTH_15TRANSFERS


	)

736 
	#TIM_DMABur°Lígth_16Tøns„rs
 
TIM_DMABURSTLENGTH_16TRANSFERS


	)

737 
	#TIM_DMABur°Lígth_17Tøns„rs
 
TIM_DMABURSTLENGTH_17TRANSFERS


	)

738 
	#TIM_DMABur°Lígth_18Tøns„rs
 
TIM_DMABURSTLENGTH_18TRANSFERS


	)

747 
	#TSC_SYNC_POL_FALL
 
TSC_SYNC_POLARITY_FALLING


	)

748 
	#TSC_SYNC_POL_RISE_HIGH
 
TSC_SYNC_POLARITY_RISING


	)

756 
	#UART_ONEBIT_SAMPLING_DISABLED
 
UART_ONE_BIT_SAMPLE_DISABLE


	)

757 
	#UART_ONEBIT_SAMPLING_ENABLED
 
UART_ONE_BIT_SAMPLE_ENABLE


	)

758 
	#UART_ONE_BIT_SAMPLE_DISABLED
 
UART_ONE_BIT_SAMPLE_DISABLE


	)

759 
	#UART_ONE_BIT_SAMPLE_ENABLED
 
UART_ONE_BIT_SAMPLE_ENABLE


	)

761 
	#__HAL_UART_ONEBIT_ENABLE
 
__HAL_UART_ONE_BIT_SAMPLE_ENABLE


	)

762 
	#__HAL_UART_ONEBIT_DISABLE
 
__HAL_UART_ONE_BIT_SAMPLE_DISABLE


	)

764 
	#__DIV_SAMPLING16
 
UART_DIV_SAMPLING16


	)

765 
	#__DIVMANT_SAMPLING16
 
UART_DIVMANT_SAMPLING16


	)

766 
	#__DIVFRAQ_SAMPLING16
 
UART_DIVFRAQ_SAMPLING16


	)

767 
	#__UART_BRR_SAMPLING16
 
UART_BRR_SAMPLING16


	)

769 
	#__DIV_SAMPLING8
 
UART_DIV_SAMPLING8


	)

770 
	#__DIVMANT_SAMPLING8
 
UART_DIVMANT_SAMPLING8


	)

771 
	#__DIVFRAQ_SAMPLING8
 
UART_DIVFRAQ_SAMPLING8


	)

772 
	#__UART_BRR_SAMPLING8
 
UART_BRR_SAMPLING8


	)

774 
	#UART_WAKEUPMETHODE_IDLELINE
 
UART_WAKEUPMETHOD_IDLELINE


	)

775 
	#UART_WAKEUPMETHODE_ADDRESSMARK
 
UART_WAKEUPMETHOD_ADDRESSMARK


	)

786 
	#USART_CLOCK_DISABLED
 
USART_CLOCK_DISABLE


	)

787 
	#USART_CLOCK_ENABLED
 
USART_CLOCK_ENABLE


	)

789 
	#USARTNACK_ENABLED
 
USART_NACK_ENABLE


	)

790 
	#USARTNACK_DISABLED
 
USART_NACK_DISABLE


	)

798 
	#CFR_BASE
 
WWDG_CFR_BASE


	)

807 
	#CAN_FûãrFIFO0
 
CAN_FILTER_FIFO0


	)

808 
	#CAN_FûãrFIFO1
 
CAN_FILTER_FIFO1


	)

809 
	#CAN_IT_RQCP0
 
CAN_IT_TME


	)

810 
	#CAN_IT_RQCP1
 
CAN_IT_TME


	)

811 
	#CAN_IT_RQCP2
 
CAN_IT_TME


	)

812 
	#INAK_TIMEOUT
 
CAN_TIMEOUT_VALUE


	)

813 
	#SLAK_TIMEOUT
 
CAN_TIMEOUT_VALUE


	)

814 
	#CAN_TXSTATUS_FAILED
 ((
uöt8_t
)0x00U)

	)

815 
	#CAN_TXSTATUS_OK
 ((
uöt8_t
)0x01U)

	)

816 
	#CAN_TXSTATUS_PENDING
 ((
uöt8_t
)0x02U)

	)

826 
	#VLAN_TAG
 
ETH_VLAN_TAG


	)

827 
	#MIN_ETH_PAYLOAD
 
ETH_MIN_ETH_PAYLOAD


	)

828 
	#MAX_ETH_PAYLOAD
 
ETH_MAX_ETH_PAYLOAD


	)

829 
	#JUMBO_FRAME_PAYLOAD
 
ETH_JUMBO_FRAME_PAYLOAD


	)

830 
	#MACMIIAR_CR_MASK
 
ETH_MACMIIAR_CR_MASK


	)

831 
	#MACCR_CLEAR_MASK
 
ETH_MACCR_CLEAR_MASK


	)

832 
	#MACFCR_CLEAR_MASK
 
ETH_MACFCR_CLEAR_MASK


	)

833 
	#DMAOMR_CLEAR_MASK
 
ETH_DMAOMR_CLEAR_MASK


	)

835 
	#ETH_MMCCR
 ((
uöt32_t
)0x00000100U)

	)

836 
	#ETH_MMCRIR
 ((
uöt32_t
)0x00000104U)

	)

837 
	#ETH_MMCTIR
 ((
uöt32_t
)0x00000108U)

	)

838 
	#ETH_MMCRIMR
 ((
uöt32_t
)0x0000010CU)

	)

839 
	#ETH_MMCTIMR
 ((
uöt32_t
)0x00000110U)

	)

840 
	#ETH_MMCTGFSCCR
 ((
uöt32_t
)0x0000014CU)

	)

841 
	#ETH_MMCTGFMSCCR
 ((
uöt32_t
)0x00000150U)

	)

842 
	#ETH_MMCTGFCR
 ((
uöt32_t
)0x00000168U)

	)

843 
	#ETH_MMCRFCECR
 ((
uöt32_t
)0x00000194U)

	)

844 
	#ETH_MMCRFAECR
 ((
uöt32_t
)0x00000198U)

	)

845 
	#ETH_MMCRGUFCR
 ((
uöt32_t
)0x000001C4U)

	)

864 
	#HAL_CRYP_Compuèti⁄C∂tCÆlback
 
HAL_CRYPEx_Compuèti⁄C∂tCÆlback


	)

872 
	#HAL_HASH_STATETy≥Def
 
HAL_HASH_SèãTy≥Def


	)

873 
	#HAL_HASHPha£Ty≥Def
 
HAL_HASH_Pha£Ty≥Def


	)

874 
	#HAL_HMAC_MD5_Föish
 
HAL_HASH_MD5_Föish


	)

875 
	#HAL_HMAC_SHA1_Föish
 
HAL_HASH_SHA1_Föish


	)

876 
	#HAL_HMAC_SHA224_Föish
 
HAL_HASH_SHA224_Föish


	)

877 
	#HAL_HMAC_SHA256_Föish
 
HAL_HASH_SHA256_Föish


	)

881 
	#HASH_AlgoSñe˘i⁄_SHA1
 
HASH_ALGOSELECTION_SHA1


	)

882 
	#HASH_AlgoSñe˘i⁄_SHA224
 
HASH_ALGOSELECTION_SHA224


	)

883 
	#HASH_AlgoSñe˘i⁄_SHA256
 
HASH_ALGOSELECTION_SHA256


	)

884 
	#HASH_AlgoSñe˘i⁄_MD5
 
HASH_ALGOSELECTION_MD5


	)

886 
	#HASH_AlgoMode_HASH
 
HASH_ALGOMODE_HASH


	)

887 
	#HASH_AlgoMode_HMAC
 
HASH_ALGOMODE_HMAC


	)

889 
	#HASH_HMACKeyTy≥_Sh‹tKey
 
HASH_HMAC_KEYTYPE_SHORTKEY


	)

890 
	#HASH_HMACKeyTy≥_L⁄gKey
 
HASH_HMAC_KEYTYPE_LONGKEY


	)

898 
	#HAL_E«bÀDBGSÀïMode
 
HAL_DBGMCU_E«bÀDBGSÀïMode


	)

899 
	#HAL_DißbÀDBGSÀïMode
 
HAL_DBGMCU_DißbÀDBGSÀïMode


	)

900 
	#HAL_E«bÀDBGSt›Mode
 
HAL_DBGMCU_E«bÀDBGSt›Mode


	)

901 
	#HAL_DißbÀDBGSt›Mode
 
HAL_DBGMCU_DißbÀDBGSt›Mode


	)

902 
	#HAL_E«bÀDBGSèndbyMode
 
HAL_DBGMCU_E«bÀDBGSèndbyMode


	)

903 
	#HAL_DißbÀDBGSèndbyMode
 
HAL_DBGMCU_DißbÀDBGSèndbyMode


	)

904 
	#HAL_DBG_LowPowîC⁄fig
(
Pîùh
, 
cmd
Ë(((cmd)==
ENABLE
)? 
	`HAL_DBGMCU_DBG_E«bÀLowPowîC⁄fig
(PîùhË: 
	`HAL_DBGMCU_DBG_DißbÀLowPowîC⁄fig
(Pîùh))

	)

905 
	#HAL_VREFINT_OuçutSñe˘
 
HAL_SYSCFG_VREFINT_OuçutSñe˘


	)

906 
	#HAL_Lock_Cmd
(
cmd
Ë(((cmd)==
ENABLE
Ë? 
	`HAL_SYSCFG_E«bÀ_Lock_VREFINT
(Ë: 
	`HAL_SYSCFG_DißbÀ_Lock_VREFINT
())

	)

907 
	#HAL_VREFINT_Cmd
(
cmd
Ë(((cmd)==
ENABLE
)? 
	`HAL_SYSCFG_E«bÀVREFINT
(Ë: 
	`HAL_SYSCFG_DißbÀVREFINT
())

	)

908 
	#HAL_ADC_E«bÀBuf„r_Cmd
(
cmd
Ë(((cmd)==
ENABLE
Ë? 
	`HAL_ADCEx_E«bÀVREFINT
(Ë: 
	`HAL_ADCEx_DißbÀVREFINT
())

	)

909 
	#HAL_ADC_E«bÀBuf„rSís‹_Cmd
(
cmd
Ë(((cmd)==
ENABLE
Ë? 
	`HAL_ADCEx_E«bÀVREFINTTempSís‹
(Ë: 
	`HAL_ADCEx_DißbÀVREFINTTempSís‹
())

	)

917 
	#FLASH_HÆfPageProgøm
 
HAL_FLASHEx_HÆfPageProgøm


	)

918 
	#FLASH_E«bÀRunPowîDown
 
HAL_FLASHEx_E«bÀRunPowîDown


	)

919 
	#FLASH_DißbÀRunPowîDown
 
HAL_FLASHEx_DißbÀRunPowîDown


	)

920 
	#HAL_DATA_EEPROMEx_U∆ock
 
HAL_FLASHEx_DATAEEPROM_U∆ock


	)

921 
	#HAL_DATA_EEPROMEx_Lock
 
HAL_FLASHEx_DATAEEPROM_Lock


	)

922 
	#HAL_DATA_EEPROMEx_Eø£
 
HAL_FLASHEx_DATAEEPROM_Eø£


	)

923 
	#HAL_DATA_EEPROMEx_Progøm
 
HAL_FLASHEx_DATAEEPROM_Progøm


	)

932 
	#HAL_I2CEx_A«logFûãr_C⁄fig
 
HAL_I2CEx_C⁄figA«logFûãr


	)

933 
	#HAL_I2CEx_DigôÆFûãr_C⁄fig
 
HAL_I2CEx_C⁄figDigôÆFûãr


	)

935 
	#HAL_I2CFa°ModePlusC⁄fig
(
SYSCFG_I2CFa°ModePlus
, 
cmd
Ë(((cmd)==
ENABLE
)? 
	`HAL_I2CEx_E«bÀFa°ModePlus
(SYSCFG_I2CFa°ModePlus): 
	`HAL_I2CEx_DißbÀFa°ModePlus
(SYSCFG_I2CFa°ModePlus))

	)

943 
	#HAL_PWR_PVDC⁄fig
 
HAL_PWR_C⁄figPVD


	)

944 
	#HAL_PWR_DißbÀBkUpReg
 
HAL_PWREx_DißbÀBkUpReg


	)

945 
	#HAL_PWR_DißbÀFœshPowîDown
 
HAL_PWREx_DißbÀFœshPowîDown


	)

946 
	#HAL_PWR_DißbÀVddio2M⁄ô‹
 
HAL_PWREx_DißbÀVddio2M⁄ô‹


	)

947 
	#HAL_PWR_E«bÀBkUpReg
 
HAL_PWREx_E«bÀBkUpReg


	)

948 
	#HAL_PWR_E«bÀFœshPowîDown
 
HAL_PWREx_E«bÀFœshPowîDown


	)

949 
	#HAL_PWR_E«bÀVddio2M⁄ô‹
 
HAL_PWREx_E«bÀVddio2M⁄ô‹


	)

950 
	#HAL_PWR_PVD_PVM_IRQH™dÀr
 
HAL_PWREx_PVD_PVM_IRQH™dÀr


	)

951 
	#HAL_PWR_PVDLevñC⁄fig
 
HAL_PWR_C⁄figPVD


	)

952 
	#HAL_PWR_Vddio2M⁄ô‹_IRQH™dÀr
 
HAL_PWREx_Vddio2M⁄ô‹_IRQH™dÀr


	)

953 
	#HAL_PWR_Vddio2M⁄ô‹CÆlback
 
HAL_PWREx_Vddio2M⁄ô‹CÆlback


	)

954 
	#HAL_PWREx_A˘iv©eOvîDrive
 
HAL_PWREx_E«bÀOvîDrive


	)

955 
	#HAL_PWREx_Dó˘iv©eOvîDrive
 
HAL_PWREx_DißbÀOvîDrive


	)

956 
	#HAL_PWREx_DißbÀSDADCA«log
 
HAL_PWREx_DißbÀSDADC


	)

957 
	#HAL_PWREx_E«bÀSDADCA«log
 
HAL_PWREx_E«bÀSDADC


	)

958 
	#HAL_PWREx_PVMC⁄fig
 
HAL_PWREx_C⁄figPVM


	)

960 
	#PWR_MODE_NORMAL
 
PWR_PVD_MODE_NORMAL


	)

961 
	#PWR_MODE_IT_RISING
 
PWR_PVD_MODE_IT_RISING


	)

962 
	#PWR_MODE_IT_FALLING
 
PWR_PVD_MODE_IT_FALLING


	)

963 
	#PWR_MODE_IT_RISING_FALLING
 
PWR_PVD_MODE_IT_RISING_FALLING


	)

964 
	#PWR_MODE_EVENT_RISING
 
PWR_PVD_MODE_EVENT_RISING


	)

965 
	#PWR_MODE_EVENT_FALLING
 
PWR_PVD_MODE_EVENT_FALLING


	)

966 
	#PWR_MODE_EVENT_RISING_FALLING
 
PWR_PVD_MODE_EVENT_RISING_FALLING


	)

968 
	#CR_OFFSET_BB
 
PWR_CR_OFFSET_BB


	)

969 
	#CSR_OFFSET_BB
 
PWR_CSR_OFFSET_BB


	)

971 
	#DBP_BôNumbî
 
DBP_BIT_NUMBER


	)

972 
	#PVDE_BôNumbî
 
PVDE_BIT_NUMBER


	)

973 
	#PMODE_BôNumbî
 
PMODE_BIT_NUMBER


	)

974 
	#EWUP_BôNumbî
 
EWUP_BIT_NUMBER


	)

975 
	#FPDS_BôNumbî
 
FPDS_BIT_NUMBER


	)

976 
	#ODEN_BôNumbî
 
ODEN_BIT_NUMBER


	)

977 
	#ODSWEN_BôNumbî
 
ODSWEN_BIT_NUMBER


	)

978 
	#MRLVDS_BôNumbî
 
MRLVDS_BIT_NUMBER


	)

979 
	#LPLVDS_BôNumbî
 
LPLVDS_BIT_NUMBER


	)

980 
	#BRE_BôNumbî
 
BRE_BIT_NUMBER


	)

982 
	#PWR_MODE_EVT
 
PWR_PVD_MODE_NORMAL


	)

991 
	#HAL_SMBUS_Sœve_Li°í_IT
 
HAL_SMBUS_E«bÀLi°í_IT


	)

992 
	#HAL_SMBUS_SœveAddrCÆlback
 
HAL_SMBUS_AddrCÆlback


	)

993 
	#HAL_SMBUS_SœveLi°íC∂tCÆlback
 
HAL_SMBUS_Li°íC∂tCÆlback


	)

1001 
	#HAL_SPI_FlushRxFifo
 
HAL_SPIEx_FlushRxFifo


	)

1009 
	#HAL_TIM_DMADñayPul£C∂t
 
TIM_DMADñayPul£C∂t


	)

1010 
	#HAL_TIM_DMAEº‹
 
TIM_DMAEº‹


	)

1011 
	#HAL_TIM_DMAC≠tuªC∂t
 
TIM_DMAC≠tuªC∂t


	)

1012 
	#HAL_TIMEx_DMACommuèti⁄C∂t
 
TIMEx_DMACommuèti⁄C∂t


	)

1020 
	#HAL_UART_WakeupCÆlback
 
HAL_UARTEx_WakeupCÆlback


	)

1028 
	#HAL_LTDC_LöeEvíCÆlback
 
HAL_LTDC_LöeEvítCÆlback


	)

1047 
	#AES_IT_CC
 
CRYP_IT_CC


	)

1048 
	#AES_IT_ERR
 
CRYP_IT_ERR


	)

1049 
	#AES_FLAG_CCF
 
CRYP_FLAG_CCF


	)

1057 
	#__HAL_GET_BOOT_MODE
 
__HAL_SYSCFG_GET_BOOT_MODE


	)

1058 
	#__HAL_REMAPMEMORY_FLASH
 
__HAL_SYSCFG_REMAPMEMORY_FLASH


	)

1059 
	#__HAL_REMAPMEMORY_SYSTEMFLASH
 
__HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH


	)

1060 
	#__HAL_REMAPMEMORY_SRAM
 
__HAL_SYSCFG_REMAPMEMORY_SRAM


	)

1061 
	#__HAL_REMAPMEMORY_FMC
 
__HAL_SYSCFG_REMAPMEMORY_FMC


	)

1062 
	#__HAL_REMAPMEMORY_FMC_SDRAM
 
__HAL_SYSCFG_REMAPMEMORY_FMC_SDRAM


	)

1063 
	#__HAL_REMAPMEMORY_FSMC
 
__HAL_SYSCFG_REMAPMEMORY_FSMC


	)

1064 
	#__HAL_REMAPMEMORY_QUADSPI
 
__HAL_SYSCFG_REMAPMEMORY_QUADSPI


	)

1065 
	#__HAL_FMC_BANK
 
__HAL_SYSCFG_FMC_BANK


	)

1066 
	#__HAL_GET_FLAG
 
__HAL_SYSCFG_GET_FLAG


	)

1067 
	#__HAL_CLEAR_FLAG
 
__HAL_SYSCFG_CLEAR_FLAG


	)

1068 
	#__HAL_VREFINT_OUT_ENABLE
 
__HAL_SYSCFG_VREFINT_OUT_ENABLE


	)

1069 
	#__HAL_VREFINT_OUT_DISABLE
 
__HAL_SYSCFG_VREFINT_OUT_DISABLE


	)

1071 
	#SYSCFG_FLAG_VREF_READY
 
SYSCFG_FLAG_VREFINT_READY


	)

1072 
	#SYSCFG_FLAG_RC48
 
RCC_FLAG_HSI48


	)

1073 
	#IS_SYSCFG_FASTMODEPLUS_CONFIG
 
IS_I2C_FASTMODEPLUS


	)

1074 
	#UFB_MODE_BôNumbî
 
UFB_MODE_BIT_NUMBER


	)

1075 
	#CMP_PD_BôNumbî
 
CMP_PD_BIT_NUMBER


	)

1085 
	#__ADC_ENABLE
 
__HAL_ADC_ENABLE


	)

1086 
	#__ADC_DISABLE
 
__HAL_ADC_DISABLE


	)

1087 
	#__HAL_ADC_ENABLING_CONDITIONS
 
ADC_ENABLING_CONDITIONS


	)

1088 
	#__HAL_ADC_DISABLING_CONDITIONS
 
ADC_DISABLING_CONDITIONS


	)

1089 
	#__HAL_ADC_IS_ENABLED
 
ADC_IS_ENABLE


	)

1090 
	#__ADC_IS_ENABLED
 
ADC_IS_ENABLE


	)

1091 
	#__HAL_ADC_IS_SOFTWARE_START_REGULAR
 
ADC_IS_SOFTWARE_START_REGULAR


	)

1092 
	#__HAL_ADC_IS_SOFTWARE_START_INJECTED
 
ADC_IS_SOFTWARE_START_INJECTED


	)

1093 
	#__HAL_ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED
 
ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED


	)

1094 
	#__HAL_ADC_IS_CONVERSION_ONGOING_REGULAR
 
ADC_IS_CONVERSION_ONGOING_REGULAR


	)

1095 
	#__HAL_ADC_IS_CONVERSION_ONGOING_INJECTED
 
ADC_IS_CONVERSION_ONGOING_INJECTED


	)

1096 
	#__HAL_ADC_IS_CONVERSION_ONGOING
 
ADC_IS_CONVERSION_ONGOING


	)

1097 
	#__HAL_ADC_CLEAR_ERRORCODE
 
ADC_CLEAR_ERRORCODE


	)

1099 
	#__HAL_ADC_GET_RESOLUTION
 
ADC_GET_RESOLUTION


	)

1100 
	#__HAL_ADC_JSQR_RK
 
ADC_JSQR_RK


	)

1101 
	#__HAL_ADC_CFGR_AWD1CH
 
ADC_CFGR_AWD1CH_SHIFT


	)

1102 
	#__HAL_ADC_CFGR_AWD23CR
 
ADC_CFGR_AWD23CR


	)

1103 
	#__HAL_ADC_CFGR_INJECT_AUTO_CONVERSION
 
ADC_CFGR_INJECT_AUTO_CONVERSION


	)

1104 
	#__HAL_ADC_CFGR_INJECT_CONTEXT_QUEUE
 
ADC_CFGR_INJECT_CONTEXT_QUEUE


	)

1105 
	#__HAL_ADC_CFGR_INJECT_DISCCONTINUOUS
 
ADC_CFGR_INJECT_DISCCONTINUOUS


	)

1106 
	#__HAL_ADC_CFGR_REG_DISCCONTINUOUS
 
ADC_CFGR_REG_DISCCONTINUOUS


	)

1107 
	#__HAL_ADC_CFGR_DISCONTINUOUS_NUM
 
ADC_CFGR_DISCONTINUOUS_NUM


	)

1108 
	#__HAL_ADC_CFGR_AUTOWAIT
 
ADC_CFGR_AUTOWAIT


	)

1109 
	#__HAL_ADC_CFGR_CONTINUOUS
 
ADC_CFGR_CONTINUOUS


	)

1110 
	#__HAL_ADC_CFGR_OVERRUN
 
ADC_CFGR_OVERRUN


	)

1111 
	#__HAL_ADC_CFGR_DMACONTREQ
 
ADC_CFGR_DMACONTREQ


	)

1112 
	#__HAL_ADC_CFGR_EXTSEL
 
ADC_CFGR_EXTSEL_SET


	)

1113 
	#__HAL_ADC_JSQR_JEXTSEL
 
ADC_JSQR_JEXTSEL_SET


	)

1114 
	#__HAL_ADC_OFR_CHANNEL
 
ADC_OFR_CHANNEL


	)

1115 
	#__HAL_ADC_DIFSEL_CHANNEL
 
ADC_DIFSEL_CHANNEL


	)

1116 
	#__HAL_ADC_CALFACT_DIFF_SET
 
ADC_CALFACT_DIFF_SET


	)

1117 
	#__HAL_ADC_CALFACT_DIFF_GET
 
ADC_CALFACT_DIFF_GET


	)

1118 
	#__HAL_ADC_TRX_HIGHTHRESHOLD
 
ADC_TRX_HIGHTHRESHOLD


	)

1120 
	#__HAL_ADC_OFFSET_SHIFT_RESOLUTION
 
ADC_OFFSET_SHIFT_RESOLUTION


	)

1121 
	#__HAL_ADC_AWD1THRESHOLD_SHIFT_RESOLUTION
 
ADC_AWD1THRESHOLD_SHIFT_RESOLUTION


	)

1122 
	#__HAL_ADC_AWD23THRESHOLD_SHIFT_RESOLUTION
 
ADC_AWD23THRESHOLD_SHIFT_RESOLUTION


	)

1123 
	#__HAL_ADC_COMMON_REGISTER
 
ADC_COMMON_REGISTER


	)

1124 
	#__HAL_ADC_COMMON_CCR_MULTI
 
ADC_COMMON_CCR_MULTI


	)

1125 
	#__HAL_ADC_MULTIMODE_IS_ENABLED
 
ADC_MULTIMODE_IS_ENABLE


	)

1126 
	#__ADC_MULTIMODE_IS_ENABLED
 
ADC_MULTIMODE_IS_ENABLE


	)

1127 
	#__HAL_ADC_NONMULTIMODE_OR_MULTIMODEMASTER
 
ADC_NONMULTIMODE_OR_MULTIMODEMASTER


	)

1128 
	#__HAL_ADC_COMMON_ADC_OTHER
 
ADC_COMMON_ADC_OTHER


	)

1129 
	#__HAL_ADC_MULTI_SLAVE
 
ADC_MULTI_SLAVE


	)

1131 
	#__HAL_ADC_SQR1_L
 
ADC_SQR1_L_SHIFT


	)

1132 
	#__HAL_ADC_JSQR_JL
 
ADC_JSQR_JL_SHIFT


	)

1133 
	#__HAL_ADC_JSQR_RK_JL
 
ADC_JSQR_RK_JL


	)

1134 
	#__HAL_ADC_CR1_DISCONTINUOUS_NUM
 
ADC_CR1_DISCONTINUOUS_NUM


	)

1135 
	#__HAL_ADC_CR1_SCAN
 
ADC_CR1_SCAN_SET


	)

1136 
	#__HAL_ADC_CONVCYCLES_MAX_RANGE
 
ADC_CONVCYCLES_MAX_RANGE


	)

1137 
	#__HAL_ADC_CLOCK_PRESCALER_RANGE
 
ADC_CLOCK_PRESCALER_RANGE


	)

1138 
	#__HAL_ADC_GET_CLOCK_PRESCALER
 
ADC_GET_CLOCK_PRESCALER


	)

1140 
	#__HAL_ADC_SQR1
 
ADC_SQR1


	)

1141 
	#__HAL_ADC_SMPR1
 
ADC_SMPR1


	)

1142 
	#__HAL_ADC_SMPR2
 
ADC_SMPR2


	)

1143 
	#__HAL_ADC_SQR3_RK
 
ADC_SQR3_RK


	)

1144 
	#__HAL_ADC_SQR2_RK
 
ADC_SQR2_RK


	)

1145 
	#__HAL_ADC_SQR1_RK
 
ADC_SQR1_RK


	)

1146 
	#__HAL_ADC_CR2_CONTINUOUS
 
ADC_CR2_CONTINUOUS


	)

1147 
	#__HAL_ADC_CR1_DISCONTINUOUS
 
ADC_CR1_DISCONTINUOUS


	)

1148 
	#__HAL_ADC_CR1_SCANCONV
 
ADC_CR1_SCANCONV


	)

1149 
	#__HAL_ADC_CR2_EOCSñe˘i⁄
 
ADC_CR2_EOCSñe˘i⁄


	)

1150 
	#__HAL_ADC_CR2_DMAC⁄tReq
 
ADC_CR2_DMAC⁄tReq


	)

1151 
	#__HAL_ADC_GET_RESOLUTION
 
ADC_GET_RESOLUTION


	)

1152 
	#__HAL_ADC_JSQR
 
ADC_JSQR


	)

1154 
	#__HAL_ADC_CHSELR_CHANNEL
 
ADC_CHSELR_CHANNEL


	)

1155 
	#__HAL_ADC_CFGR1_REG_DISCCONTINUOUS
 
ADC_CFGR1_REG_DISCCONTINUOUS


	)

1156 
	#__HAL_ADC_CFGR1_AUTOOFF
 
ADC_CFGR1_AUTOOFF


	)

1157 
	#__HAL_ADC_CFGR1_AUTOWAIT
 
ADC_CFGR1_AUTOWAIT


	)

1158 
	#__HAL_ADC_CFGR1_CONTINUOUS
 
ADC_CFGR1_CONTINUOUS


	)

1159 
	#__HAL_ADC_CFGR1_OVERRUN
 
ADC_CFGR1_OVERRUN


	)

1160 
	#__HAL_ADC_CFGR1_SCANDIR
 
ADC_CFGR1_SCANDIR


	)

1161 
	#__HAL_ADC_CFGR1_DMACONTREQ
 
ADC_CFGR1_DMACONTREQ


	)

1170 
	#__HAL_DHR12R1_ALIGNEMENT
 
DAC_DHR12R1_ALIGNMENT


	)

1171 
	#__HAL_DHR12R2_ALIGNEMENT
 
DAC_DHR12R2_ALIGNMENT


	)

1172 
	#__HAL_DHR12RD_ALIGNEMENT
 
DAC_DHR12RD_ALIGNMENT


	)

1173 
	#IS_DAC_GENERATE_WAVE
 
IS_DAC_WAVE


	)

1182 
	#__HAL_FREEZE_TIM1_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM1


	)

1183 
	#__HAL_UNFREEZE_TIM1_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM1


	)

1184 
	#__HAL_FREEZE_TIM2_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM2


	)

1185 
	#__HAL_UNFREEZE_TIM2_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM2


	)

1186 
	#__HAL_FREEZE_TIM3_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM3


	)

1187 
	#__HAL_UNFREEZE_TIM3_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM3


	)

1188 
	#__HAL_FREEZE_TIM4_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM4


	)

1189 
	#__HAL_UNFREEZE_TIM4_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM4


	)

1190 
	#__HAL_FREEZE_TIM5_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM5


	)

1191 
	#__HAL_UNFREEZE_TIM5_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM5


	)

1192 
	#__HAL_FREEZE_TIM6_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM6


	)

1193 
	#__HAL_UNFREEZE_TIM6_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM6


	)

1194 
	#__HAL_FREEZE_TIM7_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM7


	)

1195 
	#__HAL_UNFREEZE_TIM7_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM7


	)

1196 
	#__HAL_FREEZE_TIM8_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM8


	)

1197 
	#__HAL_UNFREEZE_TIM8_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM8


	)

1199 
	#__HAL_FREEZE_TIM9_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM9


	)

1200 
	#__HAL_UNFREEZE_TIM9_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM9


	)

1201 
	#__HAL_FREEZE_TIM10_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM10


	)

1202 
	#__HAL_UNFREEZE_TIM10_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM10


	)

1203 
	#__HAL_FREEZE_TIM11_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM11


	)

1204 
	#__HAL_UNFREEZE_TIM11_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM11


	)

1205 
	#__HAL_FREEZE_TIM12_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM12


	)

1206 
	#__HAL_UNFREEZE_TIM12_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM12


	)

1207 
	#__HAL_FREEZE_TIM13_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM13


	)

1208 
	#__HAL_UNFREEZE_TIM13_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM13


	)

1209 
	#__HAL_FREEZE_TIM14_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM14


	)

1210 
	#__HAL_UNFREEZE_TIM14_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM14


	)

1211 
	#__HAL_FREEZE_CAN2_DBGMCU
 
__HAL_DBGMCU_FREEZE_CAN2


	)

1212 
	#__HAL_UNFREEZE_CAN2_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_CAN2


	)

1215 
	#__HAL_FREEZE_TIM15_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM15


	)

1216 
	#__HAL_UNFREEZE_TIM15_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM15


	)

1217 
	#__HAL_FREEZE_TIM16_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM16


	)

1218 
	#__HAL_UNFREEZE_TIM16_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM16


	)

1219 
	#__HAL_FREEZE_TIM17_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM17


	)

1220 
	#__HAL_UNFREEZE_TIM17_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM17


	)

1221 
	#__HAL_FREEZE_RTC_DBGMCU
 
__HAL_DBGMCU_FREEZE_RTC


	)

1222 
	#__HAL_UNFREEZE_RTC_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_RTC


	)

1223 
	#__HAL_FREEZE_WWDG_DBGMCU
 
__HAL_DBGMCU_FREEZE_WWDG


	)

1224 
	#__HAL_UNFREEZE_WWDG_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_WWDG


	)

1225 
	#__HAL_FREEZE_IWDG_DBGMCU
 
__HAL_DBGMCU_FREEZE_IWDG


	)

1226 
	#__HAL_UNFREEZE_IWDG_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_IWDG


	)

1227 
	#__HAL_FREEZE_I2C1_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_FREEZE_I2C1_TIMEOUT


	)

1228 
	#__HAL_UNFREEZE_I2C1_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_I2C1_TIMEOUT


	)

1229 
	#__HAL_FREEZE_I2C2_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_FREEZE_I2C2_TIMEOUT


	)

1230 
	#__HAL_UNFREEZE_I2C2_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_I2C2_TIMEOUT


	)

1231 
	#__HAL_FREEZE_I2C3_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_FREEZE_I2C3_TIMEOUT


	)

1232 
	#__HAL_UNFREEZE_I2C3_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_I2C3_TIMEOUT


	)

1233 
	#__HAL_FREEZE_CAN1_DBGMCU
 
__HAL_DBGMCU_FREEZE_CAN1


	)

1234 
	#__HAL_UNFREEZE_CAN1_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_CAN1


	)

1235 
	#__HAL_FREEZE_LPTIM1_DBGMCU
 
__HAL_DBGMCU_FREEZE_LPTIM1


	)

1236 
	#__HAL_UNFREEZE_LPTIM1_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_LPTIM1


	)

1237 
	#__HAL_FREEZE_LPTIM2_DBGMCU
 
__HAL_DBGMCU_FREEZE_LPTIM2


	)

1238 
	#__HAL_UNFREEZE_LPTIM2_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_LPTIM2


	)

1247 #i‡
deföed
(
STM32F3
)

1248 
	#COMP_START
 
__HAL_COMP_ENABLE


	)

1249 
	#COMP_STOP
 
__HAL_COMP_DISABLE


	)

1250 
	#COMP_LOCK
 
__HAL_COMP_LOCK


	)

1252 #i‡
deföed
(
STM32F301x8
Ë|| deföed(
STM32F302x8
Ë|| deföed(
STM32F318xx
Ë|| deföed(
STM32F303x8
Ë|| deföed(
STM32F334x8
Ë|| deföed(
STM32F328xx
)

1253 
	#__HAL_COMP_EXTI_RISING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE
() : \

1254 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_RISING_EDGE
() : \

1255 
	`__HAL_COMP_COMP6_EXTI_ENABLE_RISING_EDGE
())

	)

1256 
	#__HAL_COMP_EXTI_RISING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE
() : \

1257 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_RISING_EDGE
() : \

1258 
	`__HAL_COMP_COMP6_EXTI_DISABLE_RISING_EDGE
())

	)

1259 
	#__HAL_COMP_EXTI_FALLING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE
() : \

1260 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_FALLING_EDGE
() : \

1261 
	`__HAL_COMP_COMP6_EXTI_ENABLE_FALLING_EDGE
())

	)

1262 
	#__HAL_COMP_EXTI_FALLING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE
() : \

1263 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_FALLING_EDGE
() : \

1264 
	`__HAL_COMP_COMP6_EXTI_DISABLE_FALLING_EDGE
())

	)

1265 
	#__HAL_COMP_EXTI_ENABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_IT
() : \

1266 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_IT
() : \

1267 
	`__HAL_COMP_COMP6_EXTI_ENABLE_IT
())

	)

1268 
	#__HAL_COMP_EXTI_DISABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_IT
() : \

1269 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_IT
() : \

1270 
	`__HAL_COMP_COMP6_EXTI_DISABLE_IT
())

	)

1271 
	#__HAL_COMP_EXTI_GET_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_GET_FLAG
() : \

1272 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_GET_FLAG
() : \

1273 
	`__HAL_COMP_COMP6_EXTI_GET_FLAG
())

	)

1274 
	#__HAL_COMP_EXTI_CLEAR_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_CLEAR_FLAG
() : \

1275 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_CLEAR_FLAG
() : \

1276 
	`__HAL_COMP_COMP6_EXTI_CLEAR_FLAG
())

	)

1278 #i‡
deföed
(
STM32F302xE
Ë|| deföed(
STM32F302xC
)

1279 
	#__HAL_COMP_EXTI_RISING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE
() : \

1280 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE
() : \

1281 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_RISING_EDGE
() : \

1282 
	`__HAL_COMP_COMP6_EXTI_ENABLE_RISING_EDGE
())

	)

1283 
	#__HAL_COMP_EXTI_RISING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_RISING_EDGE
() : \

1284 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE
() : \

1285 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_RISING_EDGE
() : \

1286 
	`__HAL_COMP_COMP6_EXTI_DISABLE_RISING_EDGE
())

	)

1287 
	#__HAL_COMP_EXTI_FALLING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE
() : \

1288 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE
() : \

1289 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_FALLING_EDGE
() : \

1290 
	`__HAL_COMP_COMP6_EXTI_ENABLE_FALLING_EDGE
())

	)

1291 
	#__HAL_COMP_EXTI_FALLING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_FALLING_EDGE
() : \

1292 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE
() : \

1293 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_FALLING_EDGE
() : \

1294 
	`__HAL_COMP_COMP6_EXTI_DISABLE_FALLING_EDGE
())

	)

1295 
	#__HAL_COMP_EXTI_ENABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_IT
() : \

1296 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_IT
() : \

1297 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_IT
() : \

1298 
	`__HAL_COMP_COMP6_EXTI_ENABLE_IT
())

	)

1299 
	#__HAL_COMP_EXTI_DISABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_IT
() : \

1300 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_IT
() : \

1301 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_IT
() : \

1302 
	`__HAL_COMP_COMP6_EXTI_DISABLE_IT
())

	)

1303 
	#__HAL_COMP_EXTI_GET_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_GET_FLAG
() : \

1304 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_GET_FLAG
() : \

1305 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_GET_FLAG
() : \

1306 
	`__HAL_COMP_COMP6_EXTI_GET_FLAG
())

	)

1307 
	#__HAL_COMP_EXTI_CLEAR_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_CLEAR_FLAG
() : \

1308 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_CLEAR_FLAG
() : \

1309 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_CLEAR_FLAG
() : \

1310 
	`__HAL_COMP_COMP6_EXTI_CLEAR_FLAG
())

	)

1312 #i‡
deföed
(
STM32F303xE
Ë|| deföed(
STM32F398xx
Ë|| deföed(
STM32F303xC
Ë|| deföed(
STM32F358xx
)

1313 
	#__HAL_COMP_EXTI_RISING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE
() : \

1314 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE
() : \

1315 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
	`__HAL_COMP_COMP3_EXTI_ENABLE_RISING_EDGE
() : \

1316 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_RISING_EDGE
() : \

1317 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
	`__HAL_COMP_COMP5_EXTI_ENABLE_RISING_EDGE
() : \

1318 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
	`__HAL_COMP_COMP6_EXTI_ENABLE_RISING_EDGE
() : \

1319 
	`__HAL_COMP_COMP7_EXTI_ENABLE_RISING_EDGE
())

	)

1320 
	#__HAL_COMP_EXTI_RISING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_RISING_EDGE
() : \

1321 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE
() : \

1322 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
	`__HAL_COMP_COMP3_EXTI_DISABLE_RISING_EDGE
() : \

1323 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_RISING_EDGE
() : \

1324 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
	`__HAL_COMP_COMP5_EXTI_DISABLE_RISING_EDGE
() : \

1325 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
	`__HAL_COMP_COMP6_EXTI_DISABLE_RISING_EDGE
() : \

1326 
	`__HAL_COMP_COMP7_EXTI_DISABLE_RISING_EDGE
())

	)

1327 
	#__HAL_COMP_EXTI_FALLING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE
() : \

1328 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE
() : \

1329 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
	`__HAL_COMP_COMP3_EXTI_ENABLE_FALLING_EDGE
() : \

1330 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_FALLING_EDGE
() : \

1331 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
	`__HAL_COMP_COMP5_EXTI_ENABLE_FALLING_EDGE
() : \

1332 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
	`__HAL_COMP_COMP6_EXTI_ENABLE_FALLING_EDGE
() : \

1333 
	`__HAL_COMP_COMP7_EXTI_ENABLE_FALLING_EDGE
())

	)

1334 
	#__HAL_COMP_EXTI_FALLING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_FALLING_EDGE
() : \

1335 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE
() : \

1336 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
	`__HAL_COMP_COMP3_EXTI_DISABLE_FALLING_EDGE
() : \

1337 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_FALLING_EDGE
() : \

1338 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
	`__HAL_COMP_COMP5_EXTI_DISABLE_FALLING_EDGE
() : \

1339 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
	`__HAL_COMP_COMP6_EXTI_DISABLE_FALLING_EDGE
() : \

1340 
	`__HAL_COMP_COMP7_EXTI_DISABLE_FALLING_EDGE
())

	)

1341 
	#__HAL_COMP_EXTI_ENABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_IT
() : \

1342 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_IT
() : \

1343 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
	`__HAL_COMP_COMP3_EXTI_ENABLE_IT
() : \

1344 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_IT
() : \

1345 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
	`__HAL_COMP_COMP5_EXTI_ENABLE_IT
() : \

1346 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
	`__HAL_COMP_COMP6_EXTI_ENABLE_IT
() : \

1347 
	`__HAL_COMP_COMP7_EXTI_ENABLE_IT
())

	)

1348 
	#__HAL_COMP_EXTI_DISABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_IT
() : \

1349 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_IT
() : \

1350 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
	`__HAL_COMP_COMP3_EXTI_DISABLE_IT
() : \

1351 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_IT
() : \

1352 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
	`__HAL_COMP_COMP5_EXTI_DISABLE_IT
() : \

1353 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
	`__HAL_COMP_COMP6_EXTI_DISABLE_IT
() : \

1354 
	`__HAL_COMP_COMP7_EXTI_DISABLE_IT
())

	)

1355 
	#__HAL_COMP_EXTI_GET_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_GET_FLAG
() : \

1356 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_GET_FLAG
() : \

1357 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
	`__HAL_COMP_COMP3_EXTI_GET_FLAG
() : \

1358 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_GET_FLAG
() : \

1359 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
	`__HAL_COMP_COMP5_EXTI_GET_FLAG
() : \

1360 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
	`__HAL_COMP_COMP6_EXTI_GET_FLAG
() : \

1361 
	`__HAL_COMP_COMP7_EXTI_GET_FLAG
())

	)

1362 
	#__HAL_COMP_EXTI_CLEAR_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_CLEAR_FLAG
() : \

1363 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_CLEAR_FLAG
() : \

1364 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
	`__HAL_COMP_COMP3_EXTI_CLEAR_FLAG
() : \

1365 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_CLEAR_FLAG
() : \

1366 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
	`__HAL_COMP_COMP5_EXTI_CLEAR_FLAG
() : \

1367 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
	`__HAL_COMP_COMP6_EXTI_CLEAR_FLAG
() : \

1368 
	`__HAL_COMP_COMP7_EXTI_CLEAR_FLAG
())

	)

1370 #i‡
deföed
(
STM32F373xC
Ë||deföed(
STM32F378xx
)

1371 
	#__HAL_COMP_EXTI_RISING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE
() : \

1372 
	`__HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE
())

	)

1373 
	#__HAL_COMP_EXTI_RISING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_RISING_EDGE
() : \

1374 
	`__HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE
())

	)

1375 
	#__HAL_COMP_EXTI_FALLING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE
() : \

1376 
	`__HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE
())

	)

1377 
	#__HAL_COMP_EXTI_FALLING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_FALLING_EDGE
() : \

1378 
	`__HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE
())

	)

1379 
	#__HAL_COMP_EXTI_ENABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_IT
() : \

1380 
	`__HAL_COMP_COMP2_EXTI_ENABLE_IT
())

	)

1381 
	#__HAL_COMP_EXTI_DISABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_IT
() : \

1382 
	`__HAL_COMP_COMP2_EXTI_DISABLE_IT
())

	)

1383 
	#__HAL_COMP_EXTI_GET_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_GET_FLAG
() : \

1384 
	`__HAL_COMP_COMP2_EXTI_GET_FLAG
())

	)

1385 
	#__HAL_COMP_EXTI_CLEAR_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_CLEAR_FLAG
() : \

1386 
	`__HAL_COMP_COMP2_EXTI_CLEAR_FLAG
())

	)

1389 
	#__HAL_COMP_EXTI_RISING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE
() : \

1390 
	`__HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE
())

	)

1391 
	#__HAL_COMP_EXTI_RISING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_RISING_EDGE
() : \

1392 
	`__HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE
())

	)

1393 
	#__HAL_COMP_EXTI_FALLING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE
() : \

1394 
	`__HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE
())

	)

1395 
	#__HAL_COMP_EXTI_FALLING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_FALLING_EDGE
() : \

1396 
	`__HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE
())

	)

1397 
	#__HAL_COMP_EXTI_ENABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_IT
() : \

1398 
	`__HAL_COMP_COMP2_EXTI_ENABLE_IT
())

	)

1399 
	#__HAL_COMP_EXTI_DISABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_IT
() : \

1400 
	`__HAL_COMP_COMP2_EXTI_DISABLE_IT
())

	)

1401 
	#__HAL_COMP_EXTI_GET_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_GET_FLAG
() : \

1402 
	`__HAL_COMP_COMP2_EXTI_GET_FLAG
())

	)

1403 
	#__HAL_COMP_EXTI_CLEAR_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_CLEAR_FLAG
() : \

1404 
	`__HAL_COMP_COMP2_EXTI_CLEAR_FLAG
())

	)

1407 
	#__HAL_COMP_GET_EXTI_LINE
 
COMP_GET_EXTI_LINE


	)

1417 
	#IS_DAC_WAVE
(
WAVE
Ë(((WAVEË=
DAC_WAVE_NONE
) || \

1418 ((
WAVE
Ë=
DAC_WAVE_NOISE
)|| \

1419 ((
WAVE
Ë=
DAC_WAVE_TRIANGLE
))

	)

1429 
	#IS_WRPAREA
 
IS_OB_WRPAREA


	)

1430 
	#IS_TYPEPROGRAM
 
IS_FLASH_TYPEPROGRAM


	)

1431 
	#IS_TYPEPROGRAMFLASH
 
IS_FLASH_TYPEPROGRAM


	)

1432 
	#IS_TYPEERASE
 
IS_FLASH_TYPEERASE


	)

1433 
	#IS_NBSECTORS
 
IS_FLASH_NBSECTORS


	)

1434 
	#IS_OB_WDG_SOURCE
 
IS_OB_IWDG_SOURCE


	)

1444 
	#__HAL_I2C_RESET_CR2
 
I2C_RESET_CR2


	)

1445 
	#__HAL_I2C_GENERATE_START
 
I2C_GENERATE_START


	)

1446 
	#__HAL_I2C_FREQ_RANGE
 
I2C_FREQ_RANGE


	)

1447 
	#__HAL_I2C_RISE_TIME
 
I2C_RISE_TIME


	)

1448 
	#__HAL_I2C_SPEED_STANDARD
 
I2C_SPEED_STANDARD


	)

1449 
	#__HAL_I2C_SPEED_FAST
 
I2C_SPEED_FAST


	)

1450 
	#__HAL_I2C_SPEED
 
I2C_SPEED


	)

1451 
	#__HAL_I2C_7BIT_ADD_WRITE
 
I2C_7BIT_ADD_WRITE


	)

1452 
	#__HAL_I2C_7BIT_ADD_READ
 
I2C_7BIT_ADD_READ


	)

1453 
	#__HAL_I2C_10BIT_ADDRESS
 
I2C_10BIT_ADDRESS


	)

1454 
	#__HAL_I2C_10BIT_HEADER_WRITE
 
I2C_10BIT_HEADER_WRITE


	)

1455 
	#__HAL_I2C_10BIT_HEADER_READ
 
I2C_10BIT_HEADER_READ


	)

1456 
	#__HAL_I2C_MEM_ADD_MSB
 
I2C_MEM_ADD_MSB


	)

1457 
	#__HAL_I2C_MEM_ADD_LSB
 
I2C_MEM_ADD_LSB


	)

1458 
	#__HAL_I2C_FREQRANGE
 
I2C_FREQRANGE


	)

1467 
	#IS_I2S_INSTANCE
 
IS_I2S_ALL_INSTANCE


	)

1468 
	#IS_I2S_INSTANCE_EXT
 
IS_I2S_ALL_INSTANCE_EXT


	)

1478 
	#__IRDA_DISABLE
 
__HAL_IRDA_DISABLE


	)

1479 
	#__IRDA_ENABLE
 
__HAL_IRDA_ENABLE


	)

1481 
	#__HAL_IRDA_GETCLOCKSOURCE
 
IRDA_GETCLOCKSOURCE


	)

1482 
	#__HAL_IRDA_MASK_COMPUTATION
 
IRDA_MASK_COMPUTATION


	)

1483 
	#__IRDA_GETCLOCKSOURCE
 
IRDA_GETCLOCKSOURCE


	)

1484 
	#__IRDA_MASK_COMPUTATION
 
IRDA_MASK_COMPUTATION


	)

1486 
	#IS_IRDA_ONEBIT_SAMPLE
 
IS_IRDA_ONE_BIT_SAMPLE


	)

1497 
	#__HAL_IWDG_ENABLE_WRITE_ACCESS
 
IWDG_ENABLE_WRITE_ACCESS


	)

1498 
	#__HAL_IWDG_DISABLE_WRITE_ACCESS
 
IWDG_DISABLE_WRITE_ACCESS


	)

1508 
	#__HAL_LPTIM_ENABLE_INTERRUPT
 
__HAL_LPTIM_ENABLE_IT


	)

1509 
	#__HAL_LPTIM_DISABLE_INTERRUPT
 
__HAL_LPTIM_DISABLE_IT


	)

1510 
	#__HAL_LPTIM_GET_ITSTATUS
 
__HAL_LPTIM_GET_IT_SOURCE


	)

1520 
	#__OPAMP_CSR_OPAXPD
 
OPAMP_CSR_OPAXPD


	)

1521 
	#__OPAMP_CSR_S3SELX
 
OPAMP_CSR_S3SELX


	)

1522 
	#__OPAMP_CSR_S4SELX
 
OPAMP_CSR_S4SELX


	)

1523 
	#__OPAMP_CSR_S5SELX
 
OPAMP_CSR_S5SELX


	)

1524 
	#__OPAMP_CSR_S6SELX
 
OPAMP_CSR_S6SELX


	)

1525 
	#__OPAMP_CSR_OPAXCAL_L
 
OPAMP_CSR_OPAXCAL_L


	)

1526 
	#__OPAMP_CSR_OPAXCAL_H
 
OPAMP_CSR_OPAXCAL_H


	)

1527 
	#__OPAMP_CSR_OPAXLPM
 
OPAMP_CSR_OPAXLPM


	)

1528 
	#__OPAMP_CSR_ALL_SWITCHES
 
OPAMP_CSR_ALL_SWITCHES


	)

1529 
	#__OPAMP_CSR_ANAWSELX
 
OPAMP_CSR_ANAWSELX


	)

1530 
	#__OPAMP_CSR_OPAXCALOUT
 
OPAMP_CSR_OPAXCALOUT


	)

1531 
	#__OPAMP_OFFSET_TRIM_BITSPOSITION
 
OPAMP_OFFSET_TRIM_BITSPOSITION


	)

1532 
	#__OPAMP_OFFSET_TRIM_SET
 
OPAMP_OFFSET_TRIM_SET


	)

1542 
	#__HAL_PVD_EVENT_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_EVENT


	)

1543 
	#__HAL_PVD_EVENT_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_EVENT


	)

1544 
	#__HAL_PVD_EXTI_FALLINGTRIGGER_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE


	)

1545 
	#__HAL_PVD_EXTI_FALLINGTRIGGER_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE


	)

1546 
	#__HAL_PVD_EXTI_RISINGTRIGGER_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE


	)

1547 
	#__HAL_PVD_EXTI_RISINGTRIGGER_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE


	)

1548 
	#__HAL_PVM_EVENT_DISABLE
 
__HAL_PWR_PVM_EVENT_DISABLE


	)

1549 
	#__HAL_PVM_EVENT_ENABLE
 
__HAL_PWR_PVM_EVENT_ENABLE


	)

1550 
	#__HAL_PVM_EXTI_FALLINGTRIGGER_DISABLE
 
__HAL_PWR_PVM_EXTI_FALLINGTRIGGER_DISABLE


	)

1551 
	#__HAL_PVM_EXTI_FALLINGTRIGGER_ENABLE
 
__HAL_PWR_PVM_EXTI_FALLINGTRIGGER_ENABLE


	)

1552 
	#__HAL_PVM_EXTI_RISINGTRIGGER_DISABLE
 
__HAL_PWR_PVM_EXTI_RISINGTRIGGER_DISABLE


	)

1553 
	#__HAL_PVM_EXTI_RISINGTRIGGER_ENABLE
 
__HAL_PWR_PVM_EXTI_RISINGTRIGGER_ENABLE


	)

1554 
	#__HAL_PWR_INTERNALWAKEUP_DISABLE
 
HAL_PWREx_DißbÀI¡î«lWakeUpLöe


	)

1555 
	#__HAL_PWR_INTERNALWAKEUP_ENABLE
 
HAL_PWREx_E«bÀI¡î«lWakeUpLöe


	)

1556 
	#__HAL_PWR_PULL_UP_DOWN_CONFIG_DISABLE
 
HAL_PWREx_DißbÀPuŒUpPuŒDownC⁄fig


	)

1557 
	#__HAL_PWR_PULL_UP_DOWN_CONFIG_ENABLE
 
HAL_PWREx_E«bÀPuŒUpPuŒDownC⁄fig


	)

1558 
	#__HAL_PWR_PVD_EXTI_CLEAR_EGDE_TRIGGER
(Ëdÿ{ 
	`__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE
();
	`__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE
(); } 0)

	)

1559 
	#__HAL_PWR_PVD_EXTI_EVENT_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_EVENT


	)

1560 
	#__HAL_PWR_PVD_EXTI_EVENT_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_EVENT


	)

1561 
	#__HAL_PWR_PVD_EXTI_FALLINGTRIGGER_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE


	)

1562 
	#__HAL_PWR_PVD_EXTI_FALLINGTRIGGER_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE


	)

1563 
	#__HAL_PWR_PVD_EXTI_RISINGTRIGGER_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE


	)

1564 
	#__HAL_PWR_PVD_EXTI_RISINGTRIGGER_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE


	)

1565 
	#__HAL_PWR_PVD_EXTI_SET_FALLING_EGDE_TRIGGER
 
__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE


	)

1566 
	#__HAL_PWR_PVD_EXTI_SET_RISING_EDGE_TRIGGER
 
__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE


	)

1567 
	#__HAL_PWR_PVM_DISABLE
(Ëdÿ{ 
	`HAL_PWREx_DißbÀPVM1
();
	`HAL_PWREx_DißbÀPVM2
();
	`HAL_PWREx_DißbÀPVM3
();
	`HAL_PWREx_DißbÀPVM4
(); } 0)

	)

1568 
	#__HAL_PWR_PVM_ENABLE
(Ëdÿ{ 
	`HAL_PWREx_E«bÀPVM1
();
	`HAL_PWREx_E«bÀPVM2
();
	`HAL_PWREx_E«bÀPVM3
();
	`HAL_PWREx_E«bÀPVM4
(); } 0)

	)

1569 
	#__HAL_PWR_SRAM2CONTENT_PRESERVE_DISABLE
 
HAL_PWREx_DißbÀSRAM2C⁄ã¡Rëíti⁄


	)

1570 
	#__HAL_PWR_SRAM2CONTENT_PRESERVE_ENABLE
 
HAL_PWREx_E«bÀSRAM2C⁄ã¡Rëíti⁄


	)

1571 
	#__HAL_PWR_VDDIO2_DISABLE
 
HAL_PWREx_DißbÀVddIO2


	)

1572 
	#__HAL_PWR_VDDIO2_ENABLE
 
HAL_PWREx_E«bÀVddIO2


	)

1573 
	#__HAL_PWR_VDDIO2_EXTI_CLEAR_EGDE_TRIGGER
 
__HAL_PWR_VDDIO2_EXTI_DISABLE_FALLING_EDGE


	)

1574 
	#__HAL_PWR_VDDIO2_EXTI_SET_FALLING_EGDE_TRIGGER
 
__HAL_PWR_VDDIO2_EXTI_ENABLE_FALLING_EDGE


	)

1575 
	#__HAL_PWR_VDDUSB_DISABLE
 
HAL_PWREx_DißbÀVddUSB


	)

1576 
	#__HAL_PWR_VDDUSB_ENABLE
 
HAL_PWREx_E«bÀVddUSB


	)

1578 #i‡
deföed
 (
STM32F4
)

1579 
	#__HAL_PVD_EXTI_ENABLE_IT
(
PWR_EXTI_LINE_PVD
Ë
	`__HAL_PWR_PVD_EXTI_ENABLE_IT
()

	)

1580 
	#__HAL_PVD_EXTI_DISABLE_IT
(
PWR_EXTI_LINE_PVD
Ë
	`__HAL_PWR_PVD_EXTI_DISABLE_IT
()

	)

1581 
	#__HAL_PVD_EXTI_GET_FLAG
(
PWR_EXTI_LINE_PVD
Ë
	`__HAL_PWR_PVD_EXTI_GET_FLAG
()

	)

1582 
	#__HAL_PVD_EXTI_CLEAR_FLAG
(
PWR_EXTI_LINE_PVD
Ë
	`__HAL_PWR_PVD_EXTI_CLEAR_FLAG
()

	)

1583 
	#__HAL_PVD_EXTI_GENERATE_SWIT
(
PWR_EXTI_LINE_PVD
Ë
	`__HAL_PWR_PVD_EXTI_GENERATE_SWIT
()

	)

1585 
	#__HAL_PVD_EXTI_CLEAR_FLAG
 
__HAL_PWR_PVD_EXTI_CLEAR_FLAG


	)

1586 
	#__HAL_PVD_EXTI_DISABLE_IT
 
__HAL_PWR_PVD_EXTI_DISABLE_IT


	)

1587 
	#__HAL_PVD_EXTI_ENABLE_IT
 
__HAL_PWR_PVD_EXTI_ENABLE_IT


	)

1588 
	#__HAL_PVD_EXTI_GENERATE_SWIT
 
__HAL_PWR_PVD_EXTI_GENERATE_SWIT


	)

1589 
	#__HAL_PVD_EXTI_GET_FLAG
 
__HAL_PWR_PVD_EXTI_GET_FLAG


	)

1600 
	#RCC_St›WakeUpClock_MSI
 
RCC_STOP_WAKEUPCLOCK_MSI


	)

1601 
	#RCC_St›WakeUpClock_HSI
 
RCC_STOP_WAKEUPCLOCK_HSI


	)

1603 
	#HAL_RCC_CCSCÆlback
 
HAL_RCC_CSSCÆlback


	)

1604 
	#HAL_RC48_E«bÀBuf„r_Cmd
(
cmd
Ë(((cmd)==
ENABLE
Ë? 
	`HAL_RCCEx_E«bÀHSI48_VREFINT
(Ë: 
	`HAL_RCCEx_DißbÀHSI48_VREFINT
())

	)

1606 
	#__ADC_CLK_DISABLE
 
__HAL_RCC_ADC_CLK_DISABLE


	)

1607 
	#__ADC_CLK_ENABLE
 
__HAL_RCC_ADC_CLK_ENABLE


	)

1608 
	#__ADC_CLK_SLEEP_DISABLE
 
__HAL_RCC_ADC_CLK_SLEEP_DISABLE


	)

1609 
	#__ADC_CLK_SLEEP_ENABLE
 
__HAL_RCC_ADC_CLK_SLEEP_ENABLE


	)

1610 
	#__ADC_FORCE_RESET
 
__HAL_RCC_ADC_FORCE_RESET


	)

1611 
	#__ADC_RELEASE_RESET
 
__HAL_RCC_ADC_RELEASE_RESET


	)

1612 
	#__ADC1_CLK_DISABLE
 
__HAL_RCC_ADC1_CLK_DISABLE


	)

1613 
	#__ADC1_CLK_ENABLE
 
__HAL_RCC_ADC1_CLK_ENABLE


	)

1614 
	#__ADC1_FORCE_RESET
 
__HAL_RCC_ADC1_FORCE_RESET


	)

1615 
	#__ADC1_RELEASE_RESET
 
__HAL_RCC_ADC1_RELEASE_RESET


	)

1616 
	#__ADC1_CLK_SLEEP_ENABLE
 
__HAL_RCC_ADC1_CLK_SLEEP_ENABLE


	)

1617 
	#__ADC1_CLK_SLEEP_DISABLE
 
__HAL_RCC_ADC1_CLK_SLEEP_DISABLE


	)

1618 
	#__ADC2_CLK_DISABLE
 
__HAL_RCC_ADC2_CLK_DISABLE


	)

1619 
	#__ADC2_CLK_ENABLE
 
__HAL_RCC_ADC2_CLK_ENABLE


	)

1620 
	#__ADC2_FORCE_RESET
 
__HAL_RCC_ADC2_FORCE_RESET


	)

1621 
	#__ADC2_RELEASE_RESET
 
__HAL_RCC_ADC2_RELEASE_RESET


	)

1622 
	#__ADC3_CLK_DISABLE
 
__HAL_RCC_ADC3_CLK_DISABLE


	)

1623 
	#__ADC3_CLK_ENABLE
 
__HAL_RCC_ADC3_CLK_ENABLE


	)

1624 
	#__ADC3_FORCE_RESET
 
__HAL_RCC_ADC3_FORCE_RESET


	)

1625 
	#__ADC3_RELEASE_RESET
 
__HAL_RCC_ADC3_RELEASE_RESET


	)

1626 
	#__AES_CLK_DISABLE
 
__HAL_RCC_AES_CLK_DISABLE


	)

1627 
	#__AES_CLK_ENABLE
 
__HAL_RCC_AES_CLK_ENABLE


	)

1628 
	#__AES_CLK_SLEEP_DISABLE
 
__HAL_RCC_AES_CLK_SLEEP_DISABLE


	)

1629 
	#__AES_CLK_SLEEP_ENABLE
 
__HAL_RCC_AES_CLK_SLEEP_ENABLE


	)

1630 
	#__AES_FORCE_RESET
 
__HAL_RCC_AES_FORCE_RESET


	)

1631 
	#__AES_RELEASE_RESET
 
__HAL_RCC_AES_RELEASE_RESET


	)

1632 
	#__CRYP_CLK_SLEEP_ENABLE
 
__HAL_RCC_CRYP_CLK_SLEEP_ENABLE


	)

1633 
	#__CRYP_CLK_SLEEP_DISABLE
 
__HAL_RCC_CRYP_CLK_SLEEP_DISABLE


	)

1634 
	#__CRYP_CLK_ENABLE
 
__HAL_RCC_CRYP_CLK_ENABLE


	)

1635 
	#__CRYP_CLK_DISABLE
 
__HAL_RCC_CRYP_CLK_DISABLE


	)

1636 
	#__CRYP_FORCE_RESET
 
__HAL_RCC_CRYP_FORCE_RESET


	)

1637 
	#__CRYP_RELEASE_RESET
 
__HAL_RCC_CRYP_RELEASE_RESET


	)

1638 
	#__AFIO_CLK_DISABLE
 
__HAL_RCC_AFIO_CLK_DISABLE


	)

1639 
	#__AFIO_CLK_ENABLE
 
__HAL_RCC_AFIO_CLK_ENABLE


	)

1640 
	#__AFIO_FORCE_RESET
 
__HAL_RCC_AFIO_FORCE_RESET


	)

1641 
	#__AFIO_RELEASE_RESET
 
__HAL_RCC_AFIO_RELEASE_RESET


	)

1642 
	#__AHB_FORCE_RESET
 
__HAL_RCC_AHB_FORCE_RESET


	)

1643 
	#__AHB_RELEASE_RESET
 
__HAL_RCC_AHB_RELEASE_RESET


	)

1644 
	#__AHB1_FORCE_RESET
 
__HAL_RCC_AHB1_FORCE_RESET


	)

1645 
	#__AHB1_RELEASE_RESET
 
__HAL_RCC_AHB1_RELEASE_RESET


	)

1646 
	#__AHB2_FORCE_RESET
 
__HAL_RCC_AHB2_FORCE_RESET


	)

1647 
	#__AHB2_RELEASE_RESET
 
__HAL_RCC_AHB2_RELEASE_RESET


	)

1648 
	#__AHB3_FORCE_RESET
 
__HAL_RCC_AHB3_FORCE_RESET


	)

1649 
	#__AHB3_RELEASE_RESET
 
__HAL_RCC_AHB3_RELEASE_RESET


	)

1650 
	#__APB1_FORCE_RESET
 
__HAL_RCC_APB1_FORCE_RESET


	)

1651 
	#__APB1_RELEASE_RESET
 
__HAL_RCC_APB1_RELEASE_RESET


	)

1652 
	#__APB2_FORCE_RESET
 
__HAL_RCC_APB2_FORCE_RESET


	)

1653 
	#__APB2_RELEASE_RESET
 
__HAL_RCC_APB2_RELEASE_RESET


	)

1654 
	#__BKP_CLK_DISABLE
 
__HAL_RCC_BKP_CLK_DISABLE


	)

1655 
	#__BKP_CLK_ENABLE
 
__HAL_RCC_BKP_CLK_ENABLE


	)

1656 
	#__BKP_FORCE_RESET
 
__HAL_RCC_BKP_FORCE_RESET


	)

1657 
	#__BKP_RELEASE_RESET
 
__HAL_RCC_BKP_RELEASE_RESET


	)

1658 
	#__CAN1_CLK_DISABLE
 
__HAL_RCC_CAN1_CLK_DISABLE


	)

1659 
	#__CAN1_CLK_ENABLE
 
__HAL_RCC_CAN1_CLK_ENABLE


	)

1660 
	#__CAN1_CLK_SLEEP_DISABLE
 
__HAL_RCC_CAN1_CLK_SLEEP_DISABLE


	)

1661 
	#__CAN1_CLK_SLEEP_ENABLE
 
__HAL_RCC_CAN1_CLK_SLEEP_ENABLE


	)

1662 
	#__CAN1_FORCE_RESET
 
__HAL_RCC_CAN1_FORCE_RESET


	)

1663 
	#__CAN1_RELEASE_RESET
 
__HAL_RCC_CAN1_RELEASE_RESET


	)

1664 
	#__CAN_CLK_DISABLE
 
__HAL_RCC_CAN1_CLK_DISABLE


	)

1665 
	#__CAN_CLK_ENABLE
 
__HAL_RCC_CAN1_CLK_ENABLE


	)

1666 
	#__CAN_FORCE_RESET
 
__HAL_RCC_CAN1_FORCE_RESET


	)

1667 
	#__CAN_RELEASE_RESET
 
__HAL_RCC_CAN1_RELEASE_RESET


	)

1668 
	#__CAN2_CLK_DISABLE
 
__HAL_RCC_CAN2_CLK_DISABLE


	)

1669 
	#__CAN2_CLK_ENABLE
 
__HAL_RCC_CAN2_CLK_ENABLE


	)

1670 
	#__CAN2_FORCE_RESET
 
__HAL_RCC_CAN2_FORCE_RESET


	)

1671 
	#__CAN2_RELEASE_RESET
 
__HAL_RCC_CAN2_RELEASE_RESET


	)

1672 
	#__CEC_CLK_DISABLE
 
__HAL_RCC_CEC_CLK_DISABLE


	)

1673 
	#__CEC_CLK_ENABLE
 
__HAL_RCC_CEC_CLK_ENABLE


	)

1674 
	#__COMP_CLK_DISABLE
 
__HAL_RCC_COMP_CLK_DISABLE


	)

1675 
	#__COMP_CLK_ENABLE
 
__HAL_RCC_COMP_CLK_ENABLE


	)

1676 
	#__COMP_FORCE_RESET
 
__HAL_RCC_COMP_FORCE_RESET


	)

1677 
	#__COMP_RELEASE_RESET
 
__HAL_RCC_COMP_RELEASE_RESET


	)

1678 
	#__COMP_CLK_SLEEP_ENABLE
 
__HAL_RCC_COMP_CLK_SLEEP_ENABLE


	)

1679 
	#__COMP_CLK_SLEEP_DISABLE
 
__HAL_RCC_COMP_CLK_SLEEP_DISABLE


	)

1680 
	#__CEC_FORCE_RESET
 
__HAL_RCC_CEC_FORCE_RESET


	)

1681 
	#__CEC_RELEASE_RESET
 
__HAL_RCC_CEC_RELEASE_RESET


	)

1682 
	#__CRC_CLK_DISABLE
 
__HAL_RCC_CRC_CLK_DISABLE


	)

1683 
	#__CRC_CLK_ENABLE
 
__HAL_RCC_CRC_CLK_ENABLE


	)

1684 
	#__CRC_CLK_SLEEP_DISABLE
 
__HAL_RCC_CRC_CLK_SLEEP_DISABLE


	)

1685 
	#__CRC_CLK_SLEEP_ENABLE
 
__HAL_RCC_CRC_CLK_SLEEP_ENABLE


	)

1686 
	#__CRC_FORCE_RESET
 
__HAL_RCC_CRC_FORCE_RESET


	)

1687 
	#__CRC_RELEASE_RESET
 
__HAL_RCC_CRC_RELEASE_RESET


	)

1688 
	#__DAC_CLK_DISABLE
 
__HAL_RCC_DAC_CLK_DISABLE


	)

1689 
	#__DAC_CLK_ENABLE
 
__HAL_RCC_DAC_CLK_ENABLE


	)

1690 
	#__DAC_FORCE_RESET
 
__HAL_RCC_DAC_FORCE_RESET


	)

1691 
	#__DAC_RELEASE_RESET
 
__HAL_RCC_DAC_RELEASE_RESET


	)

1692 
	#__DAC1_CLK_DISABLE
 
__HAL_RCC_DAC1_CLK_DISABLE


	)

1693 
	#__DAC1_CLK_ENABLE
 
__HAL_RCC_DAC1_CLK_ENABLE


	)

1694 
	#__DAC1_CLK_SLEEP_DISABLE
 
__HAL_RCC_DAC1_CLK_SLEEP_DISABLE


	)

1695 
	#__DAC1_CLK_SLEEP_ENABLE
 
__HAL_RCC_DAC1_CLK_SLEEP_ENABLE


	)

1696 
	#__DAC1_FORCE_RESET
 
__HAL_RCC_DAC1_FORCE_RESET


	)

1697 
	#__DAC1_RELEASE_RESET
 
__HAL_RCC_DAC1_RELEASE_RESET


	)

1698 
	#__DBGMCU_CLK_ENABLE
 
__HAL_RCC_DBGMCU_CLK_ENABLE


	)

1699 
	#__DBGMCU_CLK_DISABLE
 
__HAL_RCC_DBGMCU_CLK_DISABLE


	)

1700 
	#__DBGMCU_FORCE_RESET
 
__HAL_RCC_DBGMCU_FORCE_RESET


	)

1701 
	#__DBGMCU_RELEASE_RESET
 
__HAL_RCC_DBGMCU_RELEASE_RESET


	)

1702 
	#__DFSDM_CLK_DISABLE
 
__HAL_RCC_DFSDM_CLK_DISABLE


	)

1703 
	#__DFSDM_CLK_ENABLE
 
__HAL_RCC_DFSDM_CLK_ENABLE


	)

1704 
	#__DFSDM_CLK_SLEEP_DISABLE
 
__HAL_RCC_DFSDM_CLK_SLEEP_DISABLE


	)

1705 
	#__DFSDM_CLK_SLEEP_ENABLE
 
__HAL_RCC_DFSDM_CLK_SLEEP_ENABLE


	)

1706 
	#__DFSDM_FORCE_RESET
 
__HAL_RCC_DFSDM_FORCE_RESET


	)

1707 
	#__DFSDM_RELEASE_RESET
 
__HAL_RCC_DFSDM_RELEASE_RESET


	)

1708 
	#__DMA1_CLK_DISABLE
 
__HAL_RCC_DMA1_CLK_DISABLE


	)

1709 
	#__DMA1_CLK_ENABLE
 
__HAL_RCC_DMA1_CLK_ENABLE


	)

1710 
	#__DMA1_CLK_SLEEP_DISABLE
 
__HAL_RCC_DMA1_CLK_SLEEP_DISABLE


	)

1711 
	#__DMA1_CLK_SLEEP_ENABLE
 
__HAL_RCC_DMA1_CLK_SLEEP_ENABLE


	)

1712 
	#__DMA1_FORCE_RESET
 
__HAL_RCC_DMA1_FORCE_RESET


	)

1713 
	#__DMA1_RELEASE_RESET
 
__HAL_RCC_DMA1_RELEASE_RESET


	)

1714 
	#__DMA2_CLK_DISABLE
 
__HAL_RCC_DMA2_CLK_DISABLE


	)

1715 
	#__DMA2_CLK_ENABLE
 
__HAL_RCC_DMA2_CLK_ENABLE


	)

1716 
	#__DMA2_CLK_SLEEP_DISABLE
 
__HAL_RCC_DMA2_CLK_SLEEP_DISABLE


	)

1717 
	#__DMA2_CLK_SLEEP_ENABLE
 
__HAL_RCC_DMA2_CLK_SLEEP_ENABLE


	)

1718 
	#__DMA2_FORCE_RESET
 
__HAL_RCC_DMA2_FORCE_RESET


	)

1719 
	#__DMA2_RELEASE_RESET
 
__HAL_RCC_DMA2_RELEASE_RESET


	)

1720 
	#__ETHMAC_CLK_DISABLE
 
__HAL_RCC_ETHMAC_CLK_DISABLE


	)

1721 
	#__ETHMAC_CLK_ENABLE
 
__HAL_RCC_ETHMAC_CLK_ENABLE


	)

1722 
	#__ETHMAC_FORCE_RESET
 
__HAL_RCC_ETHMAC_FORCE_RESET


	)

1723 
	#__ETHMAC_RELEASE_RESET
 
__HAL_RCC_ETHMAC_RELEASE_RESET


	)

1724 
	#__ETHMACRX_CLK_DISABLE
 
__HAL_RCC_ETHMACRX_CLK_DISABLE


	)

1725 
	#__ETHMACRX_CLK_ENABLE
 
__HAL_RCC_ETHMACRX_CLK_ENABLE


	)

1726 
	#__ETHMACTX_CLK_DISABLE
 
__HAL_RCC_ETHMACTX_CLK_DISABLE


	)

1727 
	#__ETHMACTX_CLK_ENABLE
 
__HAL_RCC_ETHMACTX_CLK_ENABLE


	)

1728 
	#__FIREWALL_CLK_DISABLE
 
__HAL_RCC_FIREWALL_CLK_DISABLE


	)

1729 
	#__FIREWALL_CLK_ENABLE
 
__HAL_RCC_FIREWALL_CLK_ENABLE


	)

1730 
	#__FLASH_CLK_DISABLE
 
__HAL_RCC_FLASH_CLK_DISABLE


	)

1731 
	#__FLASH_CLK_ENABLE
 
__HAL_RCC_FLASH_CLK_ENABLE


	)

1732 
	#__FLASH_CLK_SLEEP_DISABLE
 
__HAL_RCC_FLASH_CLK_SLEEP_DISABLE


	)

1733 
	#__FLASH_CLK_SLEEP_ENABLE
 
__HAL_RCC_FLASH_CLK_SLEEP_ENABLE


	)

1734 
	#__FLASH_FORCE_RESET
 
__HAL_RCC_FLASH_FORCE_RESET


	)

1735 
	#__FLASH_RELEASE_RESET
 
__HAL_RCC_FLASH_RELEASE_RESET


	)

1736 
	#__FLITF_CLK_DISABLE
 
__HAL_RCC_FLITF_CLK_DISABLE


	)

1737 
	#__FLITF_CLK_ENABLE
 
__HAL_RCC_FLITF_CLK_ENABLE


	)

1738 
	#__FLITF_FORCE_RESET
 
__HAL_RCC_FLITF_FORCE_RESET


	)

1739 
	#__FLITF_RELEASE_RESET
 
__HAL_RCC_FLITF_RELEASE_RESET


	)

1740 
	#__FLITF_CLK_SLEEP_ENABLE
 
__HAL_RCC_FLITF_CLK_SLEEP_ENABLE


	)

1741 
	#__FLITF_CLK_SLEEP_DISABLE
 
__HAL_RCC_FLITF_CLK_SLEEP_DISABLE


	)

1742 
	#__FMC_CLK_DISABLE
 
__HAL_RCC_FMC_CLK_DISABLE


	)

1743 
	#__FMC_CLK_ENABLE
 
__HAL_RCC_FMC_CLK_ENABLE


	)

1744 
	#__FMC_CLK_SLEEP_DISABLE
 
__HAL_RCC_FMC_CLK_SLEEP_DISABLE


	)

1745 
	#__FMC_CLK_SLEEP_ENABLE
 
__HAL_RCC_FMC_CLK_SLEEP_ENABLE


	)

1746 
	#__FMC_FORCE_RESET
 
__HAL_RCC_FMC_FORCE_RESET


	)

1747 
	#__FMC_RELEASE_RESET
 
__HAL_RCC_FMC_RELEASE_RESET


	)

1748 
	#__FSMC_CLK_DISABLE
 
__HAL_RCC_FSMC_CLK_DISABLE


	)

1749 
	#__FSMC_CLK_ENABLE
 
__HAL_RCC_FSMC_CLK_ENABLE


	)

1750 
	#__GPIOA_CLK_DISABLE
 
__HAL_RCC_GPIOA_CLK_DISABLE


	)

1751 
	#__GPIOA_CLK_ENABLE
 
__HAL_RCC_GPIOA_CLK_ENABLE


	)

1752 
	#__GPIOA_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOA_CLK_SLEEP_DISABLE


	)

1753 
	#__GPIOA_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOA_CLK_SLEEP_ENABLE


	)

1754 
	#__GPIOA_FORCE_RESET
 
__HAL_RCC_GPIOA_FORCE_RESET


	)

1755 
	#__GPIOA_RELEASE_RESET
 
__HAL_RCC_GPIOA_RELEASE_RESET


	)

1756 
	#__GPIOB_CLK_DISABLE
 
__HAL_RCC_GPIOB_CLK_DISABLE


	)

1757 
	#__GPIOB_CLK_ENABLE
 
__HAL_RCC_GPIOB_CLK_ENABLE


	)

1758 
	#__GPIOB_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOB_CLK_SLEEP_DISABLE


	)

1759 
	#__GPIOB_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOB_CLK_SLEEP_ENABLE


	)

1760 
	#__GPIOB_FORCE_RESET
 
__HAL_RCC_GPIOB_FORCE_RESET


	)

1761 
	#__GPIOB_RELEASE_RESET
 
__HAL_RCC_GPIOB_RELEASE_RESET


	)

1762 
	#__GPIOC_CLK_DISABLE
 
__HAL_RCC_GPIOC_CLK_DISABLE


	)

1763 
	#__GPIOC_CLK_ENABLE
 
__HAL_RCC_GPIOC_CLK_ENABLE


	)

1764 
	#__GPIOC_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOC_CLK_SLEEP_DISABLE


	)

1765 
	#__GPIOC_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOC_CLK_SLEEP_ENABLE


	)

1766 
	#__GPIOC_FORCE_RESET
 
__HAL_RCC_GPIOC_FORCE_RESET


	)

1767 
	#__GPIOC_RELEASE_RESET
 
__HAL_RCC_GPIOC_RELEASE_RESET


	)

1768 
	#__GPIOD_CLK_DISABLE
 
__HAL_RCC_GPIOD_CLK_DISABLE


	)

1769 
	#__GPIOD_CLK_ENABLE
 
__HAL_RCC_GPIOD_CLK_ENABLE


	)

1770 
	#__GPIOD_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOD_CLK_SLEEP_DISABLE


	)

1771 
	#__GPIOD_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOD_CLK_SLEEP_ENABLE


	)

1772 
	#__GPIOD_FORCE_RESET
 
__HAL_RCC_GPIOD_FORCE_RESET


	)

1773 
	#__GPIOD_RELEASE_RESET
 
__HAL_RCC_GPIOD_RELEASE_RESET


	)

1774 
	#__GPIOE_CLK_DISABLE
 
__HAL_RCC_GPIOE_CLK_DISABLE


	)

1775 
	#__GPIOE_CLK_ENABLE
 
__HAL_RCC_GPIOE_CLK_ENABLE


	)

1776 
	#__GPIOE_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOE_CLK_SLEEP_DISABLE


	)

1777 
	#__GPIOE_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOE_CLK_SLEEP_ENABLE


	)

1778 
	#__GPIOE_FORCE_RESET
 
__HAL_RCC_GPIOE_FORCE_RESET


	)

1779 
	#__GPIOE_RELEASE_RESET
 
__HAL_RCC_GPIOE_RELEASE_RESET


	)

1780 
	#__GPIOF_CLK_DISABLE
 
__HAL_RCC_GPIOF_CLK_DISABLE


	)

1781 
	#__GPIOF_CLK_ENABLE
 
__HAL_RCC_GPIOF_CLK_ENABLE


	)

1782 
	#__GPIOF_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOF_CLK_SLEEP_DISABLE


	)

1783 
	#__GPIOF_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOF_CLK_SLEEP_ENABLE


	)

1784 
	#__GPIOF_FORCE_RESET
 
__HAL_RCC_GPIOF_FORCE_RESET


	)

1785 
	#__GPIOF_RELEASE_RESET
 
__HAL_RCC_GPIOF_RELEASE_RESET


	)

1786 
	#__GPIOG_CLK_DISABLE
 
__HAL_RCC_GPIOG_CLK_DISABLE


	)

1787 
	#__GPIOG_CLK_ENABLE
 
__HAL_RCC_GPIOG_CLK_ENABLE


	)

1788 
	#__GPIOG_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOG_CLK_SLEEP_DISABLE


	)

1789 
	#__GPIOG_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOG_CLK_SLEEP_ENABLE


	)

1790 
	#__GPIOG_FORCE_RESET
 
__HAL_RCC_GPIOG_FORCE_RESET


	)

1791 
	#__GPIOG_RELEASE_RESET
 
__HAL_RCC_GPIOG_RELEASE_RESET


	)

1792 
	#__GPIOH_CLK_DISABLE
 
__HAL_RCC_GPIOH_CLK_DISABLE


	)

1793 
	#__GPIOH_CLK_ENABLE
 
__HAL_RCC_GPIOH_CLK_ENABLE


	)

1794 
	#__GPIOH_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOH_CLK_SLEEP_DISABLE


	)

1795 
	#__GPIOH_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOH_CLK_SLEEP_ENABLE


	)

1796 
	#__GPIOH_FORCE_RESET
 
__HAL_RCC_GPIOH_FORCE_RESET


	)

1797 
	#__GPIOH_RELEASE_RESET
 
__HAL_RCC_GPIOH_RELEASE_RESET


	)

1798 
	#__I2C1_CLK_DISABLE
 
__HAL_RCC_I2C1_CLK_DISABLE


	)

1799 
	#__I2C1_CLK_ENABLE
 
__HAL_RCC_I2C1_CLK_ENABLE


	)

1800 
	#__I2C1_CLK_SLEEP_DISABLE
 
__HAL_RCC_I2C1_CLK_SLEEP_DISABLE


	)

1801 
	#__I2C1_CLK_SLEEP_ENABLE
 
__HAL_RCC_I2C1_CLK_SLEEP_ENABLE


	)

1802 
	#__I2C1_FORCE_RESET
 
__HAL_RCC_I2C1_FORCE_RESET


	)

1803 
	#__I2C1_RELEASE_RESET
 
__HAL_RCC_I2C1_RELEASE_RESET


	)

1804 
	#__I2C2_CLK_DISABLE
 
__HAL_RCC_I2C2_CLK_DISABLE


	)

1805 
	#__I2C2_CLK_ENABLE
 
__HAL_RCC_I2C2_CLK_ENABLE


	)

1806 
	#__I2C2_CLK_SLEEP_DISABLE
 
__HAL_RCC_I2C2_CLK_SLEEP_DISABLE


	)

1807 
	#__I2C2_CLK_SLEEP_ENABLE
 
__HAL_RCC_I2C2_CLK_SLEEP_ENABLE


	)

1808 
	#__I2C2_FORCE_RESET
 
__HAL_RCC_I2C2_FORCE_RESET


	)

1809 
	#__I2C2_RELEASE_RESET
 
__HAL_RCC_I2C2_RELEASE_RESET


	)

1810 
	#__I2C3_CLK_DISABLE
 
__HAL_RCC_I2C3_CLK_DISABLE


	)

1811 
	#__I2C3_CLK_ENABLE
 
__HAL_RCC_I2C3_CLK_ENABLE


	)

1812 
	#__I2C3_CLK_SLEEP_DISABLE
 
__HAL_RCC_I2C3_CLK_SLEEP_DISABLE


	)

1813 
	#__I2C3_CLK_SLEEP_ENABLE
 
__HAL_RCC_I2C3_CLK_SLEEP_ENABLE


	)

1814 
	#__I2C3_FORCE_RESET
 
__HAL_RCC_I2C3_FORCE_RESET


	)

1815 
	#__I2C3_RELEASE_RESET
 
__HAL_RCC_I2C3_RELEASE_RESET


	)

1816 
	#__LCD_CLK_DISABLE
 
__HAL_RCC_LCD_CLK_DISABLE


	)

1817 
	#__LCD_CLK_ENABLE
 
__HAL_RCC_LCD_CLK_ENABLE


	)

1818 
	#__LCD_CLK_SLEEP_DISABLE
 
__HAL_RCC_LCD_CLK_SLEEP_DISABLE


	)

1819 
	#__LCD_CLK_SLEEP_ENABLE
 
__HAL_RCC_LCD_CLK_SLEEP_ENABLE


	)

1820 
	#__LCD_FORCE_RESET
 
__HAL_RCC_LCD_FORCE_RESET


	)

1821 
	#__LCD_RELEASE_RESET
 
__HAL_RCC_LCD_RELEASE_RESET


	)

1822 
	#__LPTIM1_CLK_DISABLE
 
__HAL_RCC_LPTIM1_CLK_DISABLE


	)

1823 
	#__LPTIM1_CLK_ENABLE
 
__HAL_RCC_LPTIM1_CLK_ENABLE


	)

1824 
	#__LPTIM1_CLK_SLEEP_DISABLE
 
__HAL_RCC_LPTIM1_CLK_SLEEP_DISABLE


	)

1825 
	#__LPTIM1_CLK_SLEEP_ENABLE
 
__HAL_RCC_LPTIM1_CLK_SLEEP_ENABLE


	)

1826 
	#__LPTIM1_FORCE_RESET
 
__HAL_RCC_LPTIM1_FORCE_RESET


	)

1827 
	#__LPTIM1_RELEASE_RESET
 
__HAL_RCC_LPTIM1_RELEASE_RESET


	)

1828 
	#__LPTIM2_CLK_DISABLE
 
__HAL_RCC_LPTIM2_CLK_DISABLE


	)

1829 
	#__LPTIM2_CLK_ENABLE
 
__HAL_RCC_LPTIM2_CLK_ENABLE


	)

1830 
	#__LPTIM2_CLK_SLEEP_DISABLE
 
__HAL_RCC_LPTIM2_CLK_SLEEP_DISABLE


	)

1831 
	#__LPTIM2_CLK_SLEEP_ENABLE
 
__HAL_RCC_LPTIM2_CLK_SLEEP_ENABLE


	)

1832 
	#__LPTIM2_FORCE_RESET
 
__HAL_RCC_LPTIM2_FORCE_RESET


	)

1833 
	#__LPTIM2_RELEASE_RESET
 
__HAL_RCC_LPTIM2_RELEASE_RESET


	)

1834 
	#__LPUART1_CLK_DISABLE
 
__HAL_RCC_LPUART1_CLK_DISABLE


	)

1835 
	#__LPUART1_CLK_ENABLE
 
__HAL_RCC_LPUART1_CLK_ENABLE


	)

1836 
	#__LPUART1_CLK_SLEEP_DISABLE
 
__HAL_RCC_LPUART1_CLK_SLEEP_DISABLE


	)

1837 
	#__LPUART1_CLK_SLEEP_ENABLE
 
__HAL_RCC_LPUART1_CLK_SLEEP_ENABLE


	)

1838 
	#__LPUART1_FORCE_RESET
 
__HAL_RCC_LPUART1_FORCE_RESET


	)

1839 
	#__LPUART1_RELEASE_RESET
 
__HAL_RCC_LPUART1_RELEASE_RESET


	)

1840 
	#__OPAMP_CLK_DISABLE
 
__HAL_RCC_OPAMP_CLK_DISABLE


	)

1841 
	#__OPAMP_CLK_ENABLE
 
__HAL_RCC_OPAMP_CLK_ENABLE


	)

1842 
	#__OPAMP_CLK_SLEEP_DISABLE
 
__HAL_RCC_OPAMP_CLK_SLEEP_DISABLE


	)

1843 
	#__OPAMP_CLK_SLEEP_ENABLE
 
__HAL_RCC_OPAMP_CLK_SLEEP_ENABLE


	)

1844 
	#__OPAMP_FORCE_RESET
 
__HAL_RCC_OPAMP_FORCE_RESET


	)

1845 
	#__OPAMP_RELEASE_RESET
 
__HAL_RCC_OPAMP_RELEASE_RESET


	)

1846 
	#__OTGFS_CLK_DISABLE
 
__HAL_RCC_OTGFS_CLK_DISABLE


	)

1847 
	#__OTGFS_CLK_ENABLE
 
__HAL_RCC_OTGFS_CLK_ENABLE


	)

1848 
	#__OTGFS_CLK_SLEEP_DISABLE
 
__HAL_RCC_OTGFS_CLK_SLEEP_DISABLE


	)

1849 
	#__OTGFS_CLK_SLEEP_ENABLE
 
__HAL_RCC_OTGFS_CLK_SLEEP_ENABLE


	)

1850 
	#__OTGFS_FORCE_RESET
 
__HAL_RCC_OTGFS_FORCE_RESET


	)

1851 
	#__OTGFS_RELEASE_RESET
 
__HAL_RCC_OTGFS_RELEASE_RESET


	)

1852 
	#__PWR_CLK_DISABLE
 
__HAL_RCC_PWR_CLK_DISABLE


	)

1853 
	#__PWR_CLK_ENABLE
 
__HAL_RCC_PWR_CLK_ENABLE


	)

1854 
	#__PWR_CLK_SLEEP_DISABLE
 
__HAL_RCC_PWR_CLK_SLEEP_DISABLE


	)

1855 
	#__PWR_CLK_SLEEP_ENABLE
 
__HAL_RCC_PWR_CLK_SLEEP_ENABLE


	)

1856 
	#__PWR_FORCE_RESET
 
__HAL_RCC_PWR_FORCE_RESET


	)

1857 
	#__PWR_RELEASE_RESET
 
__HAL_RCC_PWR_RELEASE_RESET


	)

1858 
	#__QSPI_CLK_DISABLE
 
__HAL_RCC_QSPI_CLK_DISABLE


	)

1859 
	#__QSPI_CLK_ENABLE
 
__HAL_RCC_QSPI_CLK_ENABLE


	)

1860 
	#__QSPI_CLK_SLEEP_DISABLE
 
__HAL_RCC_QSPI_CLK_SLEEP_DISABLE


	)

1861 
	#__QSPI_CLK_SLEEP_ENABLE
 
__HAL_RCC_QSPI_CLK_SLEEP_ENABLE


	)

1862 
	#__QSPI_FORCE_RESET
 
__HAL_RCC_QSPI_FORCE_RESET


	)

1863 
	#__QSPI_RELEASE_RESET
 
__HAL_RCC_QSPI_RELEASE_RESET


	)

1864 
	#__RNG_CLK_DISABLE
 
__HAL_RCC_RNG_CLK_DISABLE


	)

1865 
	#__RNG_CLK_ENABLE
 
__HAL_RCC_RNG_CLK_ENABLE


	)

1866 
	#__RNG_CLK_SLEEP_DISABLE
 
__HAL_RCC_RNG_CLK_SLEEP_DISABLE


	)

1867 
	#__RNG_CLK_SLEEP_ENABLE
 
__HAL_RCC_RNG_CLK_SLEEP_ENABLE


	)

1868 
	#__RNG_FORCE_RESET
 
__HAL_RCC_RNG_FORCE_RESET


	)

1869 
	#__RNG_RELEASE_RESET
 
__HAL_RCC_RNG_RELEASE_RESET


	)

1870 
	#__SAI1_CLK_DISABLE
 
__HAL_RCC_SAI1_CLK_DISABLE


	)

1871 
	#__SAI1_CLK_ENABLE
 
__HAL_RCC_SAI1_CLK_ENABLE


	)

1872 
	#__SAI1_CLK_SLEEP_DISABLE
 
__HAL_RCC_SAI1_CLK_SLEEP_DISABLE


	)

1873 
	#__SAI1_CLK_SLEEP_ENABLE
 
__HAL_RCC_SAI1_CLK_SLEEP_ENABLE


	)

1874 
	#__SAI1_FORCE_RESET
 
__HAL_RCC_SAI1_FORCE_RESET


	)

1875 
	#__SAI1_RELEASE_RESET
 
__HAL_RCC_SAI1_RELEASE_RESET


	)

1876 
	#__SAI2_CLK_DISABLE
 
__HAL_RCC_SAI2_CLK_DISABLE


	)

1877 
	#__SAI2_CLK_ENABLE
 
__HAL_RCC_SAI2_CLK_ENABLE


	)

1878 
	#__SAI2_CLK_SLEEP_DISABLE
 
__HAL_RCC_SAI2_CLK_SLEEP_DISABLE


	)

1879 
	#__SAI2_CLK_SLEEP_ENABLE
 
__HAL_RCC_SAI2_CLK_SLEEP_ENABLE


	)

1880 
	#__SAI2_FORCE_RESET
 
__HAL_RCC_SAI2_FORCE_RESET


	)

1881 
	#__SAI2_RELEASE_RESET
 
__HAL_RCC_SAI2_RELEASE_RESET


	)

1882 
	#__SDIO_CLK_DISABLE
 
__HAL_RCC_SDIO_CLK_DISABLE


	)

1883 
	#__SDIO_CLK_ENABLE
 
__HAL_RCC_SDIO_CLK_ENABLE


	)

1884 
	#__SDMMC_CLK_DISABLE
 
__HAL_RCC_SDMMC_CLK_DISABLE


	)

1885 
	#__SDMMC_CLK_ENABLE
 
__HAL_RCC_SDMMC_CLK_ENABLE


	)

1886 
	#__SDMMC_CLK_SLEEP_DISABLE
 
__HAL_RCC_SDMMC_CLK_SLEEP_DISABLE


	)

1887 
	#__SDMMC_CLK_SLEEP_ENABLE
 
__HAL_RCC_SDMMC_CLK_SLEEP_ENABLE


	)

1888 
	#__SDMMC_FORCE_RESET
 
__HAL_RCC_SDMMC_FORCE_RESET


	)

1889 
	#__SDMMC_RELEASE_RESET
 
__HAL_RCC_SDMMC_RELEASE_RESET


	)

1890 
	#__SPI1_CLK_DISABLE
 
__HAL_RCC_SPI1_CLK_DISABLE


	)

1891 
	#__SPI1_CLK_ENABLE
 
__HAL_RCC_SPI1_CLK_ENABLE


	)

1892 
	#__SPI1_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI1_CLK_SLEEP_DISABLE


	)

1893 
	#__SPI1_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI1_CLK_SLEEP_ENABLE


	)

1894 
	#__SPI1_FORCE_RESET
 
__HAL_RCC_SPI1_FORCE_RESET


	)

1895 
	#__SPI1_RELEASE_RESET
 
__HAL_RCC_SPI1_RELEASE_RESET


	)

1896 
	#__SPI2_CLK_DISABLE
 
__HAL_RCC_SPI2_CLK_DISABLE


	)

1897 
	#__SPI2_CLK_ENABLE
 
__HAL_RCC_SPI2_CLK_ENABLE


	)

1898 
	#__SPI2_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI2_CLK_SLEEP_DISABLE


	)

1899 
	#__SPI2_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI2_CLK_SLEEP_ENABLE


	)

1900 
	#__SPI2_FORCE_RESET
 
__HAL_RCC_SPI2_FORCE_RESET


	)

1901 
	#__SPI2_RELEASE_RESET
 
__HAL_RCC_SPI2_RELEASE_RESET


	)

1902 
	#__SPI3_CLK_DISABLE
 
__HAL_RCC_SPI3_CLK_DISABLE


	)

1903 
	#__SPI3_CLK_ENABLE
 
__HAL_RCC_SPI3_CLK_ENABLE


	)

1904 
	#__SPI3_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI3_CLK_SLEEP_DISABLE


	)

1905 
	#__SPI3_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI3_CLK_SLEEP_ENABLE


	)

1906 
	#__SPI3_FORCE_RESET
 
__HAL_RCC_SPI3_FORCE_RESET


	)

1907 
	#__SPI3_RELEASE_RESET
 
__HAL_RCC_SPI3_RELEASE_RESET


	)

1908 
	#__SRAM_CLK_DISABLE
 
__HAL_RCC_SRAM_CLK_DISABLE


	)

1909 
	#__SRAM_CLK_ENABLE
 
__HAL_RCC_SRAM_CLK_ENABLE


	)

1910 
	#__SRAM1_CLK_SLEEP_DISABLE
 
__HAL_RCC_SRAM1_CLK_SLEEP_DISABLE


	)

1911 
	#__SRAM1_CLK_SLEEP_ENABLE
 
__HAL_RCC_SRAM1_CLK_SLEEP_ENABLE


	)

1912 
	#__SRAM2_CLK_SLEEP_DISABLE
 
__HAL_RCC_SRAM2_CLK_SLEEP_DISABLE


	)

1913 
	#__SRAM2_CLK_SLEEP_ENABLE
 
__HAL_RCC_SRAM2_CLK_SLEEP_ENABLE


	)

1914 
	#__SWPMI1_CLK_DISABLE
 
__HAL_RCC_SWPMI1_CLK_DISABLE


	)

1915 
	#__SWPMI1_CLK_ENABLE
 
__HAL_RCC_SWPMI1_CLK_ENABLE


	)

1916 
	#__SWPMI1_CLK_SLEEP_DISABLE
 
__HAL_RCC_SWPMI1_CLK_SLEEP_DISABLE


	)

1917 
	#__SWPMI1_CLK_SLEEP_ENABLE
 
__HAL_RCC_SWPMI1_CLK_SLEEP_ENABLE


	)

1918 
	#__SWPMI1_FORCE_RESET
 
__HAL_RCC_SWPMI1_FORCE_RESET


	)

1919 
	#__SWPMI1_RELEASE_RESET
 
__HAL_RCC_SWPMI1_RELEASE_RESET


	)

1920 
	#__SYSCFG_CLK_DISABLE
 
__HAL_RCC_SYSCFG_CLK_DISABLE


	)

1921 
	#__SYSCFG_CLK_ENABLE
 
__HAL_RCC_SYSCFG_CLK_ENABLE


	)

1922 
	#__SYSCFG_CLK_SLEEP_DISABLE
 
__HAL_RCC_SYSCFG_CLK_SLEEP_DISABLE


	)

1923 
	#__SYSCFG_CLK_SLEEP_ENABLE
 
__HAL_RCC_SYSCFG_CLK_SLEEP_ENABLE


	)

1924 
	#__SYSCFG_FORCE_RESET
 
__HAL_RCC_SYSCFG_FORCE_RESET


	)

1925 
	#__SYSCFG_RELEASE_RESET
 
__HAL_RCC_SYSCFG_RELEASE_RESET


	)

1926 
	#__TIM1_CLK_DISABLE
 
__HAL_RCC_TIM1_CLK_DISABLE


	)

1927 
	#__TIM1_CLK_ENABLE
 
__HAL_RCC_TIM1_CLK_ENABLE


	)

1928 
	#__TIM1_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM1_CLK_SLEEP_DISABLE


	)

1929 
	#__TIM1_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM1_CLK_SLEEP_ENABLE


	)

1930 
	#__TIM1_FORCE_RESET
 
__HAL_RCC_TIM1_FORCE_RESET


	)

1931 
	#__TIM1_RELEASE_RESET
 
__HAL_RCC_TIM1_RELEASE_RESET


	)

1932 
	#__TIM10_CLK_DISABLE
 
__HAL_RCC_TIM10_CLK_DISABLE


	)

1933 
	#__TIM10_CLK_ENABLE
 
__HAL_RCC_TIM10_CLK_ENABLE


	)

1934 
	#__TIM10_FORCE_RESET
 
__HAL_RCC_TIM10_FORCE_RESET


	)

1935 
	#__TIM10_RELEASE_RESET
 
__HAL_RCC_TIM10_RELEASE_RESET


	)

1936 
	#__TIM11_CLK_DISABLE
 
__HAL_RCC_TIM11_CLK_DISABLE


	)

1937 
	#__TIM11_CLK_ENABLE
 
__HAL_RCC_TIM11_CLK_ENABLE


	)

1938 
	#__TIM11_FORCE_RESET
 
__HAL_RCC_TIM11_FORCE_RESET


	)

1939 
	#__TIM11_RELEASE_RESET
 
__HAL_RCC_TIM11_RELEASE_RESET


	)

1940 
	#__TIM12_CLK_DISABLE
 
__HAL_RCC_TIM12_CLK_DISABLE


	)

1941 
	#__TIM12_CLK_ENABLE
 
__HAL_RCC_TIM12_CLK_ENABLE


	)

1942 
	#__TIM12_FORCE_RESET
 
__HAL_RCC_TIM12_FORCE_RESET


	)

1943 
	#__TIM12_RELEASE_RESET
 
__HAL_RCC_TIM12_RELEASE_RESET


	)

1944 
	#__TIM13_CLK_DISABLE
 
__HAL_RCC_TIM13_CLK_DISABLE


	)

1945 
	#__TIM13_CLK_ENABLE
 
__HAL_RCC_TIM13_CLK_ENABLE


	)

1946 
	#__TIM13_FORCE_RESET
 
__HAL_RCC_TIM13_FORCE_RESET


	)

1947 
	#__TIM13_RELEASE_RESET
 
__HAL_RCC_TIM13_RELEASE_RESET


	)

1948 
	#__TIM14_CLK_DISABLE
 
__HAL_RCC_TIM14_CLK_DISABLE


	)

1949 
	#__TIM14_CLK_ENABLE
 
__HAL_RCC_TIM14_CLK_ENABLE


	)

1950 
	#__TIM14_FORCE_RESET
 
__HAL_RCC_TIM14_FORCE_RESET


	)

1951 
	#__TIM14_RELEASE_RESET
 
__HAL_RCC_TIM14_RELEASE_RESET


	)

1952 
	#__TIM15_CLK_DISABLE
 
__HAL_RCC_TIM15_CLK_DISABLE


	)

1953 
	#__TIM15_CLK_ENABLE
 
__HAL_RCC_TIM15_CLK_ENABLE


	)

1954 
	#__TIM15_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM15_CLK_SLEEP_DISABLE


	)

1955 
	#__TIM15_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM15_CLK_SLEEP_ENABLE


	)

1956 
	#__TIM15_FORCE_RESET
 
__HAL_RCC_TIM15_FORCE_RESET


	)

1957 
	#__TIM15_RELEASE_RESET
 
__HAL_RCC_TIM15_RELEASE_RESET


	)

1958 
	#__TIM16_CLK_DISABLE
 
__HAL_RCC_TIM16_CLK_DISABLE


	)

1959 
	#__TIM16_CLK_ENABLE
 
__HAL_RCC_TIM16_CLK_ENABLE


	)

1960 
	#__TIM16_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM16_CLK_SLEEP_DISABLE


	)

1961 
	#__TIM16_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM16_CLK_SLEEP_ENABLE


	)

1962 
	#__TIM16_FORCE_RESET
 
__HAL_RCC_TIM16_FORCE_RESET


	)

1963 
	#__TIM16_RELEASE_RESET
 
__HAL_RCC_TIM16_RELEASE_RESET


	)

1964 
	#__TIM17_CLK_DISABLE
 
__HAL_RCC_TIM17_CLK_DISABLE


	)

1965 
	#__TIM17_CLK_ENABLE
 
__HAL_RCC_TIM17_CLK_ENABLE


	)

1966 
	#__TIM17_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM17_CLK_SLEEP_DISABLE


	)

1967 
	#__TIM17_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM17_CLK_SLEEP_ENABLE


	)

1968 
	#__TIM17_FORCE_RESET
 
__HAL_RCC_TIM17_FORCE_RESET


	)

1969 
	#__TIM17_RELEASE_RESET
 
__HAL_RCC_TIM17_RELEASE_RESET


	)

1970 
	#__TIM2_CLK_DISABLE
 
__HAL_RCC_TIM2_CLK_DISABLE


	)

1971 
	#__TIM2_CLK_ENABLE
 
__HAL_RCC_TIM2_CLK_ENABLE


	)

1972 
	#__TIM2_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM2_CLK_SLEEP_DISABLE


	)

1973 
	#__TIM2_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM2_CLK_SLEEP_ENABLE


	)

1974 
	#__TIM2_FORCE_RESET
 
__HAL_RCC_TIM2_FORCE_RESET


	)

1975 
	#__TIM2_RELEASE_RESET
 
__HAL_RCC_TIM2_RELEASE_RESET


	)

1976 
	#__TIM3_CLK_DISABLE
 
__HAL_RCC_TIM3_CLK_DISABLE


	)

1977 
	#__TIM3_CLK_ENABLE
 
__HAL_RCC_TIM3_CLK_ENABLE


	)

1978 
	#__TIM3_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM3_CLK_SLEEP_DISABLE


	)

1979 
	#__TIM3_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM3_CLK_SLEEP_ENABLE


	)

1980 
	#__TIM3_FORCE_RESET
 
__HAL_RCC_TIM3_FORCE_RESET


	)

1981 
	#__TIM3_RELEASE_RESET
 
__HAL_RCC_TIM3_RELEASE_RESET


	)

1982 
	#__TIM4_CLK_DISABLE
 
__HAL_RCC_TIM4_CLK_DISABLE


	)

1983 
	#__TIM4_CLK_ENABLE
 
__HAL_RCC_TIM4_CLK_ENABLE


	)

1984 
	#__TIM4_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM4_CLK_SLEEP_DISABLE


	)

1985 
	#__TIM4_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM4_CLK_SLEEP_ENABLE


	)

1986 
	#__TIM4_FORCE_RESET
 
__HAL_RCC_TIM4_FORCE_RESET


	)

1987 
	#__TIM4_RELEASE_RESET
 
__HAL_RCC_TIM4_RELEASE_RESET


	)

1988 
	#__TIM5_CLK_DISABLE
 
__HAL_RCC_TIM5_CLK_DISABLE


	)

1989 
	#__TIM5_CLK_ENABLE
 
__HAL_RCC_TIM5_CLK_ENABLE


	)

1990 
	#__TIM5_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM5_CLK_SLEEP_DISABLE


	)

1991 
	#__TIM5_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM5_CLK_SLEEP_ENABLE


	)

1992 
	#__TIM5_FORCE_RESET
 
__HAL_RCC_TIM5_FORCE_RESET


	)

1993 
	#__TIM5_RELEASE_RESET
 
__HAL_RCC_TIM5_RELEASE_RESET


	)

1994 
	#__TIM6_CLK_DISABLE
 
__HAL_RCC_TIM6_CLK_DISABLE


	)

1995 
	#__TIM6_CLK_ENABLE
 
__HAL_RCC_TIM6_CLK_ENABLE


	)

1996 
	#__TIM6_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM6_CLK_SLEEP_DISABLE


	)

1997 
	#__TIM6_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM6_CLK_SLEEP_ENABLE


	)

1998 
	#__TIM6_FORCE_RESET
 
__HAL_RCC_TIM6_FORCE_RESET


	)

1999 
	#__TIM6_RELEASE_RESET
 
__HAL_RCC_TIM6_RELEASE_RESET


	)

2000 
	#__TIM7_CLK_DISABLE
 
__HAL_RCC_TIM7_CLK_DISABLE


	)

2001 
	#__TIM7_CLK_ENABLE
 
__HAL_RCC_TIM7_CLK_ENABLE


	)

2002 
	#__TIM7_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM7_CLK_SLEEP_DISABLE


	)

2003 
	#__TIM7_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM7_CLK_SLEEP_ENABLE


	)

2004 
	#__TIM7_FORCE_RESET
 
__HAL_RCC_TIM7_FORCE_RESET


	)

2005 
	#__TIM7_RELEASE_RESET
 
__HAL_RCC_TIM7_RELEASE_RESET


	)

2006 
	#__TIM8_CLK_DISABLE
 
__HAL_RCC_TIM8_CLK_DISABLE


	)

2007 
	#__TIM8_CLK_ENABLE
 
__HAL_RCC_TIM8_CLK_ENABLE


	)

2008 
	#__TIM8_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM8_CLK_SLEEP_DISABLE


	)

2009 
	#__TIM8_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM8_CLK_SLEEP_ENABLE


	)

2010 
	#__TIM8_FORCE_RESET
 
__HAL_RCC_TIM8_FORCE_RESET


	)

2011 
	#__TIM8_RELEASE_RESET
 
__HAL_RCC_TIM8_RELEASE_RESET


	)

2012 
	#__TIM9_CLK_DISABLE
 
__HAL_RCC_TIM9_CLK_DISABLE


	)

2013 
	#__TIM9_CLK_ENABLE
 
__HAL_RCC_TIM9_CLK_ENABLE


	)

2014 
	#__TIM9_FORCE_RESET
 
__HAL_RCC_TIM9_FORCE_RESET


	)

2015 
	#__TIM9_RELEASE_RESET
 
__HAL_RCC_TIM9_RELEASE_RESET


	)

2016 
	#__TSC_CLK_DISABLE
 
__HAL_RCC_TSC_CLK_DISABLE


	)

2017 
	#__TSC_CLK_ENABLE
 
__HAL_RCC_TSC_CLK_ENABLE


	)

2018 
	#__TSC_CLK_SLEEP_DISABLE
 
__HAL_RCC_TSC_CLK_SLEEP_DISABLE


	)

2019 
	#__TSC_CLK_SLEEP_ENABLE
 
__HAL_RCC_TSC_CLK_SLEEP_ENABLE


	)

2020 
	#__TSC_FORCE_RESET
 
__HAL_RCC_TSC_FORCE_RESET


	)

2021 
	#__TSC_RELEASE_RESET
 
__HAL_RCC_TSC_RELEASE_RESET


	)

2022 
	#__UART4_CLK_DISABLE
 
__HAL_RCC_UART4_CLK_DISABLE


	)

2023 
	#__UART4_CLK_ENABLE
 
__HAL_RCC_UART4_CLK_ENABLE


	)

2024 
	#__UART4_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART4_CLK_SLEEP_DISABLE


	)

2025 
	#__UART4_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART4_CLK_SLEEP_ENABLE


	)

2026 
	#__UART4_FORCE_RESET
 
__HAL_RCC_UART4_FORCE_RESET


	)

2027 
	#__UART4_RELEASE_RESET
 
__HAL_RCC_UART4_RELEASE_RESET


	)

2028 
	#__UART5_CLK_DISABLE
 
__HAL_RCC_UART5_CLK_DISABLE


	)

2029 
	#__UART5_CLK_ENABLE
 
__HAL_RCC_UART5_CLK_ENABLE


	)

2030 
	#__UART5_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART5_CLK_SLEEP_DISABLE


	)

2031 
	#__UART5_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART5_CLK_SLEEP_ENABLE


	)

2032 
	#__UART5_FORCE_RESET
 
__HAL_RCC_UART5_FORCE_RESET


	)

2033 
	#__UART5_RELEASE_RESET
 
__HAL_RCC_UART5_RELEASE_RESET


	)

2034 
	#__USART1_CLK_DISABLE
 
__HAL_RCC_USART1_CLK_DISABLE


	)

2035 
	#__USART1_CLK_ENABLE
 
__HAL_RCC_USART1_CLK_ENABLE


	)

2036 
	#__USART1_CLK_SLEEP_DISABLE
 
__HAL_RCC_USART1_CLK_SLEEP_DISABLE


	)

2037 
	#__USART1_CLK_SLEEP_ENABLE
 
__HAL_RCC_USART1_CLK_SLEEP_ENABLE


	)

2038 
	#__USART1_FORCE_RESET
 
__HAL_RCC_USART1_FORCE_RESET


	)

2039 
	#__USART1_RELEASE_RESET
 
__HAL_RCC_USART1_RELEASE_RESET


	)

2040 
	#__USART2_CLK_DISABLE
 
__HAL_RCC_USART2_CLK_DISABLE


	)

2041 
	#__USART2_CLK_ENABLE
 
__HAL_RCC_USART2_CLK_ENABLE


	)

2042 
	#__USART2_CLK_SLEEP_DISABLE
 
__HAL_RCC_USART2_CLK_SLEEP_DISABLE


	)

2043 
	#__USART2_CLK_SLEEP_ENABLE
 
__HAL_RCC_USART2_CLK_SLEEP_ENABLE


	)

2044 
	#__USART2_FORCE_RESET
 
__HAL_RCC_USART2_FORCE_RESET


	)

2045 
	#__USART2_RELEASE_RESET
 
__HAL_RCC_USART2_RELEASE_RESET


	)

2046 
	#__USART3_CLK_DISABLE
 
__HAL_RCC_USART3_CLK_DISABLE


	)

2047 
	#__USART3_CLK_ENABLE
 
__HAL_RCC_USART3_CLK_ENABLE


	)

2048 
	#__USART3_CLK_SLEEP_DISABLE
 
__HAL_RCC_USART3_CLK_SLEEP_DISABLE


	)

2049 
	#__USART3_CLK_SLEEP_ENABLE
 
__HAL_RCC_USART3_CLK_SLEEP_ENABLE


	)

2050 
	#__USART3_FORCE_RESET
 
__HAL_RCC_USART3_FORCE_RESET


	)

2051 
	#__USART3_RELEASE_RESET
 
__HAL_RCC_USART3_RELEASE_RESET


	)

2052 
	#__USART4_CLK_DISABLE
 
__HAL_RCC_USART4_CLK_DISABLE


	)

2053 
	#__USART4_CLK_ENABLE
 
__HAL_RCC_USART4_CLK_ENABLE


	)

2054 
	#__USART4_CLK_SLEEP_ENABLE
 
__HAL_RCC_USART4_CLK_SLEEP_ENABLE


	)

2055 
	#__USART4_CLK_SLEEP_DISABLE
 
__HAL_RCC_USART4_CLK_SLEEP_DISABLE


	)

2056 
	#__USART4_FORCE_RESET
 
__HAL_RCC_USART4_FORCE_RESET


	)

2057 
	#__USART4_RELEASE_RESET
 
__HAL_RCC_USART4_RELEASE_RESET


	)

2058 
	#__USART5_CLK_DISABLE
 
__HAL_RCC_USART5_CLK_DISABLE


	)

2059 
	#__USART5_CLK_ENABLE
 
__HAL_RCC_USART5_CLK_ENABLE


	)

2060 
	#__USART5_CLK_SLEEP_ENABLE
 
__HAL_RCC_USART5_CLK_SLEEP_ENABLE


	)

2061 
	#__USART5_CLK_SLEEP_DISABLE
 
__HAL_RCC_USART5_CLK_SLEEP_DISABLE


	)

2062 
	#__USART5_FORCE_RESET
 
__HAL_RCC_USART5_FORCE_RESET


	)

2063 
	#__USART5_RELEASE_RESET
 
__HAL_RCC_USART5_RELEASE_RESET


	)

2064 
	#__USART7_CLK_DISABLE
 
__HAL_RCC_USART7_CLK_DISABLE


	)

2065 
	#__USART7_CLK_ENABLE
 
__HAL_RCC_USART7_CLK_ENABLE


	)

2066 
	#__USART7_FORCE_RESET
 
__HAL_RCC_USART7_FORCE_RESET


	)

2067 
	#__USART7_RELEASE_RESET
 
__HAL_RCC_USART7_RELEASE_RESET


	)

2068 
	#__USART8_CLK_DISABLE
 
__HAL_RCC_USART8_CLK_DISABLE


	)

2069 
	#__USART8_CLK_ENABLE
 
__HAL_RCC_USART8_CLK_ENABLE


	)

2070 
	#__USART8_FORCE_RESET
 
__HAL_RCC_USART8_FORCE_RESET


	)

2071 
	#__USART8_RELEASE_RESET
 
__HAL_RCC_USART8_RELEASE_RESET


	)

2072 
	#__USB_CLK_DISABLE
 
__HAL_RCC_USB_CLK_DISABLE


	)

2073 
	#__USB_CLK_ENABLE
 
__HAL_RCC_USB_CLK_ENABLE


	)

2074 
	#__USB_FORCE_RESET
 
__HAL_RCC_USB_FORCE_RESET


	)

2075 
	#__USB_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_CLK_SLEEP_ENABLE


	)

2076 
	#__USB_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_CLK_SLEEP_DISABLE


	)

2077 
	#__USB_OTG_FS_CLK_DISABLE
 
__HAL_RCC_USB_OTG_FS_CLK_DISABLE


	)

2078 
	#__USB_OTG_FS_CLK_ENABLE
 
__HAL_RCC_USB_OTG_FS_CLK_ENABLE


	)

2079 
	#__USB_RELEASE_RESET
 
__HAL_RCC_USB_RELEASE_RESET


	)

2080 
	#__WWDG_CLK_DISABLE
 
__HAL_RCC_WWDG_CLK_DISABLE


	)

2081 
	#__WWDG_CLK_ENABLE
 
__HAL_RCC_WWDG_CLK_ENABLE


	)

2082 
	#__WWDG_CLK_SLEEP_DISABLE
 
__HAL_RCC_WWDG_CLK_SLEEP_DISABLE


	)

2083 
	#__WWDG_CLK_SLEEP_ENABLE
 
__HAL_RCC_WWDG_CLK_SLEEP_ENABLE


	)

2084 
	#__WWDG_FORCE_RESET
 
__HAL_RCC_WWDG_FORCE_RESET


	)

2085 
	#__WWDG_RELEASE_RESET
 
__HAL_RCC_WWDG_RELEASE_RESET


	)

2086 
	#__TIM21_CLK_ENABLE
 
__HAL_RCC_TIM21_CLK_ENABLE


	)

2087 
	#__TIM21_CLK_DISABLE
 
__HAL_RCC_TIM21_CLK_DISABLE


	)

2088 
	#__TIM21_FORCE_RESET
 
__HAL_RCC_TIM21_FORCE_RESET


	)

2089 
	#__TIM21_RELEASE_RESET
 
__HAL_RCC_TIM21_RELEASE_RESET


	)

2090 
	#__TIM21_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM21_CLK_SLEEP_ENABLE


	)

2091 
	#__TIM21_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM21_CLK_SLEEP_DISABLE


	)

2092 
	#__TIM22_CLK_ENABLE
 
__HAL_RCC_TIM22_CLK_ENABLE


	)

2093 
	#__TIM22_CLK_DISABLE
 
__HAL_RCC_TIM22_CLK_DISABLE


	)

2094 
	#__TIM22_FORCE_RESET
 
__HAL_RCC_TIM22_FORCE_RESET


	)

2095 
	#__TIM22_RELEASE_RESET
 
__HAL_RCC_TIM22_RELEASE_RESET


	)

2096 
	#__TIM22_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM22_CLK_SLEEP_ENABLE


	)

2097 
	#__TIM22_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM22_CLK_SLEEP_DISABLE


	)

2098 
	#__CRS_CLK_DISABLE
 
__HAL_RCC_CRS_CLK_DISABLE


	)

2099 
	#__CRS_CLK_ENABLE
 
__HAL_RCC_CRS_CLK_ENABLE


	)

2100 
	#__CRS_CLK_SLEEP_DISABLE
 
__HAL_RCC_CRS_CLK_SLEEP_DISABLE


	)

2101 
	#__CRS_CLK_SLEEP_ENABLE
 
__HAL_RCC_CRS_CLK_SLEEP_ENABLE


	)

2102 
	#__CRS_FORCE_RESET
 
__HAL_RCC_CRS_FORCE_RESET


	)

2103 
	#__CRS_RELEASE_RESET
 
__HAL_RCC_CRS_RELEASE_RESET


	)

2104 
	#__RCC_BACKUPRESET_FORCE
 
__HAL_RCC_BACKUPRESET_FORCE


	)

2105 
	#__RCC_BACKUPRESET_RELEASE
 
__HAL_RCC_BACKUPRESET_RELEASE


	)

2107 
	#__USB_OTG_FS_FORCE_RESET
 
__HAL_RCC_USB_OTG_FS_FORCE_RESET


	)

2108 
	#__USB_OTG_FS_RELEASE_RESET
 
__HAL_RCC_USB_OTG_FS_RELEASE_RESET


	)

2109 
	#__USB_OTG_FS_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_OTG_FS_CLK_SLEEP_ENABLE


	)

2110 
	#__USB_OTG_FS_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_OTG_FS_CLK_SLEEP_DISABLE


	)

2111 
	#__USB_OTG_HS_CLK_DISABLE
 
__HAL_RCC_USB_OTG_HS_CLK_DISABLE


	)

2112 
	#__USB_OTG_HS_CLK_ENABLE
 
__HAL_RCC_USB_OTG_HS_CLK_ENABLE


	)

2113 
	#__USB_OTG_HS_ULPI_CLK_ENABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE


	)

2114 
	#__USB_OTG_HS_ULPI_CLK_DISABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_DISABLE


	)

2115 
	#__TIM9_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM9_CLK_SLEEP_ENABLE


	)

2116 
	#__TIM9_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM9_CLK_SLEEP_DISABLE


	)

2117 
	#__TIM10_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM10_CLK_SLEEP_ENABLE


	)

2118 
	#__TIM10_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM10_CLK_SLEEP_DISABLE


	)

2119 
	#__TIM11_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM11_CLK_SLEEP_ENABLE


	)

2120 
	#__TIM11_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM11_CLK_SLEEP_DISABLE


	)

2121 
	#__ETHMACPTP_CLK_SLEEP_ENABLE
 
__HAL_RCC_ETHMACPTP_CLK_SLEEP_ENABLE


	)

2122 
	#__ETHMACPTP_CLK_SLEEP_DISABLE
 
__HAL_RCC_ETHMACPTP_CLK_SLEEP_DISABLE


	)

2123 
	#__ETHMACPTP_CLK_ENABLE
 
__HAL_RCC_ETHMACPTP_CLK_ENABLE


	)

2124 
	#__ETHMACPTP_CLK_DISABLE
 
__HAL_RCC_ETHMACPTP_CLK_DISABLE


	)

2125 
	#__HASH_CLK_ENABLE
 
__HAL_RCC_HASH_CLK_ENABLE


	)

2126 
	#__HASH_FORCE_RESET
 
__HAL_RCC_HASH_FORCE_RESET


	)

2127 
	#__HASH_RELEASE_RESET
 
__HAL_RCC_HASH_RELEASE_RESET


	)

2128 
	#__HASH_CLK_SLEEP_ENABLE
 
__HAL_RCC_HASH_CLK_SLEEP_ENABLE


	)

2129 
	#__HASH_CLK_SLEEP_DISABLE
 
__HAL_RCC_HASH_CLK_SLEEP_DISABLE


	)

2130 
	#__HASH_CLK_DISABLE
 
__HAL_RCC_HASH_CLK_DISABLE


	)

2131 
	#__SPI5_CLK_ENABLE
 
__HAL_RCC_SPI5_CLK_ENABLE


	)

2132 
	#__SPI5_CLK_DISABLE
 
__HAL_RCC_SPI5_CLK_DISABLE


	)

2133 
	#__SPI5_FORCE_RESET
 
__HAL_RCC_SPI5_FORCE_RESET


	)

2134 
	#__SPI5_RELEASE_RESET
 
__HAL_RCC_SPI5_RELEASE_RESET


	)

2135 
	#__SPI5_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI5_CLK_SLEEP_ENABLE


	)

2136 
	#__SPI5_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI5_CLK_SLEEP_DISABLE


	)

2137 
	#__SPI6_CLK_ENABLE
 
__HAL_RCC_SPI6_CLK_ENABLE


	)

2138 
	#__SPI6_CLK_DISABLE
 
__HAL_RCC_SPI6_CLK_DISABLE


	)

2139 
	#__SPI6_FORCE_RESET
 
__HAL_RCC_SPI6_FORCE_RESET


	)

2140 
	#__SPI6_RELEASE_RESET
 
__HAL_RCC_SPI6_RELEASE_RESET


	)

2141 
	#__SPI6_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI6_CLK_SLEEP_ENABLE


	)

2142 
	#__SPI6_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI6_CLK_SLEEP_DISABLE


	)

2143 
	#__LTDC_CLK_ENABLE
 
__HAL_RCC_LTDC_CLK_ENABLE


	)

2144 
	#__LTDC_CLK_DISABLE
 
__HAL_RCC_LTDC_CLK_DISABLE


	)

2145 
	#__LTDC_FORCE_RESET
 
__HAL_RCC_LTDC_FORCE_RESET


	)

2146 
	#__LTDC_RELEASE_RESET
 
__HAL_RCC_LTDC_RELEASE_RESET


	)

2147 
	#__LTDC_CLK_SLEEP_ENABLE
 
__HAL_RCC_LTDC_CLK_SLEEP_ENABLE


	)

2148 
	#__ETHMAC_CLK_SLEEP_ENABLE
 
__HAL_RCC_ETHMAC_CLK_SLEEP_ENABLE


	)

2149 
	#__ETHMAC_CLK_SLEEP_DISABLE
 
__HAL_RCC_ETHMAC_CLK_SLEEP_DISABLE


	)

2150 
	#__ETHMACTX_CLK_SLEEP_ENABLE
 
__HAL_RCC_ETHMACTX_CLK_SLEEP_ENABLE


	)

2151 
	#__ETHMACTX_CLK_SLEEP_DISABLE
 
__HAL_RCC_ETHMACTX_CLK_SLEEP_DISABLE


	)

2152 
	#__ETHMACRX_CLK_SLEEP_ENABLE
 
__HAL_RCC_ETHMACRX_CLK_SLEEP_ENABLE


	)

2153 
	#__ETHMACRX_CLK_SLEEP_DISABLE
 
__HAL_RCC_ETHMACRX_CLK_SLEEP_DISABLE


	)

2154 
	#__TIM12_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM12_CLK_SLEEP_ENABLE


	)

2155 
	#__TIM12_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM12_CLK_SLEEP_DISABLE


	)

2156 
	#__TIM13_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM13_CLK_SLEEP_ENABLE


	)

2157 
	#__TIM13_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM13_CLK_SLEEP_DISABLE


	)

2158 
	#__TIM14_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM14_CLK_SLEEP_ENABLE


	)

2159 
	#__TIM14_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM14_CLK_SLEEP_DISABLE


	)

2160 
	#__BKPSRAM_CLK_ENABLE
 
__HAL_RCC_BKPSRAM_CLK_ENABLE


	)

2161 
	#__BKPSRAM_CLK_DISABLE
 
__HAL_RCC_BKPSRAM_CLK_DISABLE


	)

2162 
	#__BKPSRAM_CLK_SLEEP_ENABLE
 
__HAL_RCC_BKPSRAM_CLK_SLEEP_ENABLE


	)

2163 
	#__BKPSRAM_CLK_SLEEP_DISABLE
 
__HAL_RCC_BKPSRAM_CLK_SLEEP_DISABLE


	)

2164 
	#__CCMDATARAMEN_CLK_ENABLE
 
__HAL_RCC_CCMDATARAMEN_CLK_ENABLE


	)

2165 
	#__CCMDATARAMEN_CLK_DISABLE
 
__HAL_RCC_CCMDATARAMEN_CLK_DISABLE


	)

2166 
	#__USART6_CLK_ENABLE
 
__HAL_RCC_USART6_CLK_ENABLE


	)

2167 
	#__USART6_CLK_DISABLE
 
__HAL_RCC_USART6_CLK_DISABLE


	)

2168 
	#__USART6_FORCE_RESET
 
__HAL_RCC_USART6_FORCE_RESET


	)

2169 
	#__USART6_RELEASE_RESET
 
__HAL_RCC_USART6_RELEASE_RESET


	)

2170 
	#__USART6_CLK_SLEEP_ENABLE
 
__HAL_RCC_USART6_CLK_SLEEP_ENABLE


	)

2171 
	#__USART6_CLK_SLEEP_DISABLE
 
__HAL_RCC_USART6_CLK_SLEEP_DISABLE


	)

2172 
	#__SPI4_CLK_ENABLE
 
__HAL_RCC_SPI4_CLK_ENABLE


	)

2173 
	#__SPI4_CLK_DISABLE
 
__HAL_RCC_SPI4_CLK_DISABLE


	)

2174 
	#__SPI4_FORCE_RESET
 
__HAL_RCC_SPI4_FORCE_RESET


	)

2175 
	#__SPI4_RELEASE_RESET
 
__HAL_RCC_SPI4_RELEASE_RESET


	)

2176 
	#__SPI4_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI4_CLK_SLEEP_ENABLE


	)

2177 
	#__SPI4_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI4_CLK_SLEEP_DISABLE


	)

2178 
	#__GPIOI_CLK_ENABLE
 
__HAL_RCC_GPIOI_CLK_ENABLE


	)

2179 
	#__GPIOI_CLK_DISABLE
 
__HAL_RCC_GPIOI_CLK_DISABLE


	)

2180 
	#__GPIOI_FORCE_RESET
 
__HAL_RCC_GPIOI_FORCE_RESET


	)

2181 
	#__GPIOI_RELEASE_RESET
 
__HAL_RCC_GPIOI_RELEASE_RESET


	)

2182 
	#__GPIOI_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOI_CLK_SLEEP_ENABLE


	)

2183 
	#__GPIOI_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOI_CLK_SLEEP_DISABLE


	)

2184 
	#__GPIOJ_CLK_ENABLE
 
__HAL_RCC_GPIOJ_CLK_ENABLE


	)

2185 
	#__GPIOJ_CLK_DISABLE
 
__HAL_RCC_GPIOJ_CLK_DISABLE


	)

2186 
	#__GPIOJ_FORCE_RESET
 
__HAL_RCC_GPIOJ_FORCE_RESET


	)

2187 
	#__GPIOJ_RELEASE_RESET
 
__HAL_RCC_GPIOJ_RELEASE_RESET


	)

2188 
	#__GPIOJ_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOJ_CLK_SLEEP_ENABLE


	)

2189 
	#__GPIOJ_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOJ_CLK_SLEEP_DISABLE


	)

2190 
	#__GPIOK_CLK_ENABLE
 
__HAL_RCC_GPIOK_CLK_ENABLE


	)

2191 
	#__GPIOK_CLK_DISABLE
 
__HAL_RCC_GPIOK_CLK_DISABLE


	)

2192 
	#__GPIOK_RELEASE_RESET
 
__HAL_RCC_GPIOK_RELEASE_RESET


	)

2193 
	#__GPIOK_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOK_CLK_SLEEP_ENABLE


	)

2194 
	#__GPIOK_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOK_CLK_SLEEP_DISABLE


	)

2195 
	#__ETH_CLK_ENABLE
 
__HAL_RCC_ETH_CLK_ENABLE


	)

2196 
	#__ETH_CLK_DISABLE
 
__HAL_RCC_ETH_CLK_DISABLE


	)

2197 
	#__DCMI_CLK_ENABLE
 
__HAL_RCC_DCMI_CLK_ENABLE


	)

2198 
	#__DCMI_CLK_DISABLE
 
__HAL_RCC_DCMI_CLK_DISABLE


	)

2199 
	#__DCMI_FORCE_RESET
 
__HAL_RCC_DCMI_FORCE_RESET


	)

2200 
	#__DCMI_RELEASE_RESET
 
__HAL_RCC_DCMI_RELEASE_RESET


	)

2201 
	#__DCMI_CLK_SLEEP_ENABLE
 
__HAL_RCC_DCMI_CLK_SLEEP_ENABLE


	)

2202 
	#__DCMI_CLK_SLEEP_DISABLE
 
__HAL_RCC_DCMI_CLK_SLEEP_DISABLE


	)

2203 
	#__UART7_CLK_ENABLE
 
__HAL_RCC_UART7_CLK_ENABLE


	)

2204 
	#__UART7_CLK_DISABLE
 
__HAL_RCC_UART7_CLK_DISABLE


	)

2205 
	#__UART7_RELEASE_RESET
 
__HAL_RCC_UART7_RELEASE_RESET


	)

2206 
	#__UART7_FORCE_RESET
 
__HAL_RCC_UART7_FORCE_RESET


	)

2207 
	#__UART7_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART7_CLK_SLEEP_ENABLE


	)

2208 
	#__UART7_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART7_CLK_SLEEP_DISABLE


	)

2209 
	#__UART8_CLK_ENABLE
 
__HAL_RCC_UART8_CLK_ENABLE


	)

2210 
	#__UART8_CLK_DISABLE
 
__HAL_RCC_UART8_CLK_DISABLE


	)

2211 
	#__UART8_FORCE_RESET
 
__HAL_RCC_UART8_FORCE_RESET


	)

2212 
	#__UART8_RELEASE_RESET
 
__HAL_RCC_UART8_RELEASE_RESET


	)

2213 
	#__UART8_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART8_CLK_SLEEP_ENABLE


	)

2214 
	#__UART8_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART8_CLK_SLEEP_DISABLE


	)

2215 
	#__OTGHS_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_OTG_HS_CLK_SLEEP_ENABLE


	)

2216 
	#__OTGHS_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_OTG_HS_CLK_SLEEP_DISABLE


	)

2217 
	#__OTGHS_FORCE_RESET
 
__HAL_RCC_USB_OTG_HS_FORCE_RESET


	)

2218 
	#__OTGHS_RELEASE_RESET
 
__HAL_RCC_USB_OTG_HS_RELEASE_RESET


	)

2219 
	#__OTGHSULPI_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_ENABLE


	)

2220 
	#__OTGHSULPI_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_DISABLE


	)

2221 
	#__HAL_RCC_OTGHS_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_OTG_HS_CLK_SLEEP_ENABLE


	)

2222 
	#__HAL_RCC_OTGHS_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_OTG_HS_CLK_SLEEP_DISABLE


	)

2223 
	#__HAL_RCC_OTGHS_IS_CLK_SLEEP_ENABLED
 
__HAL_RCC_USB_OTG_HS_IS_CLK_SLEEP_ENABLED


	)

2224 
	#__HAL_RCC_OTGHS_IS_CLK_SLEEP_DISABLED
 
__HAL_RCC_USB_OTG_HS_IS_CLK_SLEEP_DISABLED


	)

2225 
	#__HAL_RCC_OTGHS_FORCE_RESET
 
__HAL_RCC_USB_OTG_HS_FORCE_RESET


	)

2226 
	#__HAL_RCC_OTGHS_RELEASE_RESET
 
__HAL_RCC_USB_OTG_HS_RELEASE_RESET


	)

2227 
	#__HAL_RCC_OTGHSULPI_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_ENABLE


	)

2228 
	#__HAL_RCC_OTGHSULPI_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_DISABLE


	)

2229 
	#__HAL_RCC_OTGHSULPI_IS_CLK_SLEEP_ENABLED
 
__HAL_RCC_USB_OTG_HS_ULPI_IS_CLK_SLEEP_ENABLED


	)

2230 
	#__HAL_RCC_OTGHSULPI_IS_CLK_SLEEP_DISABLED
 
__HAL_RCC_USB_OTG_HS_ULPI_IS_CLK_SLEEP_DISABLED


	)

2231 
	#__CRYP_FORCE_RESET
 
__HAL_RCC_CRYP_FORCE_RESET


	)

2232 
	#__SRAM3_CLK_SLEEP_ENABLE
 
__HAL_RCC_SRAM3_CLK_SLEEP_ENABLE


	)

2233 
	#__CAN2_CLK_SLEEP_ENABLE
 
__HAL_RCC_CAN2_CLK_SLEEP_ENABLE


	)

2234 
	#__CAN2_CLK_SLEEP_DISABLE
 
__HAL_RCC_CAN2_CLK_SLEEP_DISABLE


	)

2235 
	#__DAC_CLK_SLEEP_ENABLE
 
__HAL_RCC_DAC_CLK_SLEEP_ENABLE


	)

2236 
	#__DAC_CLK_SLEEP_DISABLE
 
__HAL_RCC_DAC_CLK_SLEEP_DISABLE


	)

2237 
	#__ADC2_CLK_SLEEP_ENABLE
 
__HAL_RCC_ADC2_CLK_SLEEP_ENABLE


	)

2238 
	#__ADC2_CLK_SLEEP_DISABLE
 
__HAL_RCC_ADC2_CLK_SLEEP_DISABLE


	)

2239 
	#__ADC3_CLK_SLEEP_ENABLE
 
__HAL_RCC_ADC3_CLK_SLEEP_ENABLE


	)

2240 
	#__ADC3_CLK_SLEEP_DISABLE
 
__HAL_RCC_ADC3_CLK_SLEEP_DISABLE


	)

2241 
	#__FSMC_FORCE_RESET
 
__HAL_RCC_FSMC_FORCE_RESET


	)

2242 
	#__FSMC_RELEASE_RESET
 
__HAL_RCC_FSMC_RELEASE_RESET


	)

2243 
	#__FSMC_CLK_SLEEP_ENABLE
 
__HAL_RCC_FSMC_CLK_SLEEP_ENABLE


	)

2244 
	#__FSMC_CLK_SLEEP_DISABLE
 
__HAL_RCC_FSMC_CLK_SLEEP_DISABLE


	)

2245 
	#__SDIO_FORCE_RESET
 
__HAL_RCC_SDIO_FORCE_RESET


	)

2246 
	#__SDIO_RELEASE_RESET
 
__HAL_RCC_SDIO_RELEASE_RESET


	)

2247 
	#__SDIO_CLK_SLEEP_DISABLE
 
__HAL_RCC_SDIO_CLK_SLEEP_DISABLE


	)

2248 
	#__SDIO_CLK_SLEEP_ENABLE
 
__HAL_RCC_SDIO_CLK_SLEEP_ENABLE


	)

2249 
	#__DMA2D_CLK_ENABLE
 
__HAL_RCC_DMA2D_CLK_ENABLE


	)

2250 
	#__DMA2D_CLK_DISABLE
 
__HAL_RCC_DMA2D_CLK_DISABLE


	)

2251 
	#__DMA2D_FORCE_RESET
 
__HAL_RCC_DMA2D_FORCE_RESET


	)

2252 
	#__DMA2D_RELEASE_RESET
 
__HAL_RCC_DMA2D_RELEASE_RESET


	)

2253 
	#__DMA2D_CLK_SLEEP_ENABLE
 
__HAL_RCC_DMA2D_CLK_SLEEP_ENABLE


	)

2254 
	#__DMA2D_CLK_SLEEP_DISABLE
 
__HAL_RCC_DMA2D_CLK_SLEEP_DISABLE


	)

2257 
	#__HAL_RCC_OTGFS_FORCE_RESET
 
__HAL_RCC_USB_OTG_FS_FORCE_RESET


	)

2258 
	#__HAL_RCC_OTGFS_RELEASE_RESET
 
__HAL_RCC_USB_OTG_FS_RELEASE_RESET


	)

2260 
	#__ADC12_CLK_ENABLE
 
__HAL_RCC_ADC12_CLK_ENABLE


	)

2261 
	#__ADC12_CLK_DISABLE
 
__HAL_RCC_ADC12_CLK_DISABLE


	)

2262 
	#__ADC34_CLK_ENABLE
 
__HAL_RCC_ADC34_CLK_ENABLE


	)

2263 
	#__ADC34_CLK_DISABLE
 
__HAL_RCC_ADC34_CLK_DISABLE


	)

2264 
	#__ADC12_CLK_ENABLE
 
__HAL_RCC_ADC12_CLK_ENABLE


	)

2265 
	#__ADC12_CLK_DISABLE
 
__HAL_RCC_ADC12_CLK_DISABLE


	)

2266 
	#__DAC2_CLK_ENABLE
 
__HAL_RCC_DAC2_CLK_ENABLE


	)

2267 
	#__DAC2_CLK_DISABLE
 
__HAL_RCC_DAC2_CLK_DISABLE


	)

2268 
	#__TIM18_CLK_ENABLE
 
__HAL_RCC_TIM18_CLK_ENABLE


	)

2269 
	#__TIM18_CLK_DISABLE
 
__HAL_RCC_TIM18_CLK_DISABLE


	)

2270 
	#__TIM19_CLK_ENABLE
 
__HAL_RCC_TIM19_CLK_ENABLE


	)

2271 
	#__TIM19_CLK_DISABLE
 
__HAL_RCC_TIM19_CLK_DISABLE


	)

2272 
	#__TIM20_CLK_ENABLE
 
__HAL_RCC_TIM20_CLK_ENABLE


	)

2273 
	#__TIM20_CLK_DISABLE
 
__HAL_RCC_TIM20_CLK_DISABLE


	)

2274 
	#__HRTIM1_CLK_ENABLE
 
__HAL_RCC_HRTIM1_CLK_ENABLE


	)

2275 
	#__HRTIM1_CLK_DISABLE
 
__HAL_RCC_HRTIM1_CLK_DISABLE


	)

2276 
	#__SDADC1_CLK_ENABLE
 
__HAL_RCC_SDADC1_CLK_ENABLE


	)

2277 
	#__SDADC2_CLK_ENABLE
 
__HAL_RCC_SDADC2_CLK_ENABLE


	)

2278 
	#__SDADC3_CLK_ENABLE
 
__HAL_RCC_SDADC3_CLK_ENABLE


	)

2279 
	#__SDADC1_CLK_DISABLE
 
__HAL_RCC_SDADC1_CLK_DISABLE


	)

2280 
	#__SDADC2_CLK_DISABLE
 
__HAL_RCC_SDADC2_CLK_DISABLE


	)

2281 
	#__SDADC3_CLK_DISABLE
 
__HAL_RCC_SDADC3_CLK_DISABLE


	)

2283 
	#__ADC12_FORCE_RESET
 
__HAL_RCC_ADC12_FORCE_RESET


	)

2284 
	#__ADC12_RELEASE_RESET
 
__HAL_RCC_ADC12_RELEASE_RESET


	)

2285 
	#__ADC34_FORCE_RESET
 
__HAL_RCC_ADC34_FORCE_RESET


	)

2286 
	#__ADC34_RELEASE_RESET
 
__HAL_RCC_ADC34_RELEASE_RESET


	)

2287 
	#__ADC12_FORCE_RESET
 
__HAL_RCC_ADC12_FORCE_RESET


	)

2288 
	#__ADC12_RELEASE_RESET
 
__HAL_RCC_ADC12_RELEASE_RESET


	)

2289 
	#__DAC2_FORCE_RESET
 
__HAL_RCC_DAC2_FORCE_RESET


	)

2290 
	#__DAC2_RELEASE_RESET
 
__HAL_RCC_DAC2_RELEASE_RESET


	)

2291 
	#__TIM18_FORCE_RESET
 
__HAL_RCC_TIM18_FORCE_RESET


	)

2292 
	#__TIM18_RELEASE_RESET
 
__HAL_RCC_TIM18_RELEASE_RESET


	)

2293 
	#__TIM19_FORCE_RESET
 
__HAL_RCC_TIM19_FORCE_RESET


	)

2294 
	#__TIM19_RELEASE_RESET
 
__HAL_RCC_TIM19_RELEASE_RESET


	)

2295 
	#__TIM20_FORCE_RESET
 
__HAL_RCC_TIM20_FORCE_RESET


	)

2296 
	#__TIM20_RELEASE_RESET
 
__HAL_RCC_TIM20_RELEASE_RESET


	)

2297 
	#__HRTIM1_FORCE_RESET
 
__HAL_RCC_HRTIM1_FORCE_RESET


	)

2298 
	#__HRTIM1_RELEASE_RESET
 
__HAL_RCC_HRTIM1_RELEASE_RESET


	)

2299 
	#__SDADC1_FORCE_RESET
 
__HAL_RCC_SDADC1_FORCE_RESET


	)

2300 
	#__SDADC2_FORCE_RESET
 
__HAL_RCC_SDADC2_FORCE_RESET


	)

2301 
	#__SDADC3_FORCE_RESET
 
__HAL_RCC_SDADC3_FORCE_RESET


	)

2302 
	#__SDADC1_RELEASE_RESET
 
__HAL_RCC_SDADC1_RELEASE_RESET


	)

2303 
	#__SDADC2_RELEASE_RESET
 
__HAL_RCC_SDADC2_RELEASE_RESET


	)

2304 
	#__SDADC3_RELEASE_RESET
 
__HAL_RCC_SDADC3_RELEASE_RESET


	)

2306 
	#__ADC1_IS_CLK_ENABLED
 
__HAL_RCC_ADC1_IS_CLK_ENABLED


	)

2307 
	#__ADC1_IS_CLK_DISABLED
 
__HAL_RCC_ADC1_IS_CLK_DISABLED


	)

2308 
	#__ADC12_IS_CLK_ENABLED
 
__HAL_RCC_ADC12_IS_CLK_ENABLED


	)

2309 
	#__ADC12_IS_CLK_DISABLED
 
__HAL_RCC_ADC12_IS_CLK_DISABLED


	)

2310 
	#__ADC34_IS_CLK_ENABLED
 
__HAL_RCC_ADC34_IS_CLK_ENABLED


	)

2311 
	#__ADC34_IS_CLK_DISABLED
 
__HAL_RCC_ADC34_IS_CLK_DISABLED


	)

2312 
	#__CEC_IS_CLK_ENABLED
 
__HAL_RCC_CEC_IS_CLK_ENABLED


	)

2313 
	#__CEC_IS_CLK_DISABLED
 
__HAL_RCC_CEC_IS_CLK_DISABLED


	)

2314 
	#__CRC_IS_CLK_ENABLED
 
__HAL_RCC_CRC_IS_CLK_ENABLED


	)

2315 
	#__CRC_IS_CLK_DISABLED
 
__HAL_RCC_CRC_IS_CLK_DISABLED


	)

2316 
	#__DAC1_IS_CLK_ENABLED
 
__HAL_RCC_DAC1_IS_CLK_ENABLED


	)

2317 
	#__DAC1_IS_CLK_DISABLED
 
__HAL_RCC_DAC1_IS_CLK_DISABLED


	)

2318 
	#__DAC2_IS_CLK_ENABLED
 
__HAL_RCC_DAC2_IS_CLK_ENABLED


	)

2319 
	#__DAC2_IS_CLK_DISABLED
 
__HAL_RCC_DAC2_IS_CLK_DISABLED


	)

2320 
	#__DMA1_IS_CLK_ENABLED
 
__HAL_RCC_DMA1_IS_CLK_ENABLED


	)

2321 
	#__DMA1_IS_CLK_DISABLED
 
__HAL_RCC_DMA1_IS_CLK_DISABLED


	)

2322 
	#__DMA2_IS_CLK_ENABLED
 
__HAL_RCC_DMA2_IS_CLK_ENABLED


	)

2323 
	#__DMA2_IS_CLK_DISABLED
 
__HAL_RCC_DMA2_IS_CLK_DISABLED


	)

2324 
	#__FLITF_IS_CLK_ENABLED
 
__HAL_RCC_FLITF_IS_CLK_ENABLED


	)

2325 
	#__FLITF_IS_CLK_DISABLED
 
__HAL_RCC_FLITF_IS_CLK_DISABLED


	)

2326 
	#__FMC_IS_CLK_ENABLED
 
__HAL_RCC_FMC_IS_CLK_ENABLED


	)

2327 
	#__FMC_IS_CLK_DISABLED
 
__HAL_RCC_FMC_IS_CLK_DISABLED


	)

2328 
	#__GPIOA_IS_CLK_ENABLED
 
__HAL_RCC_GPIOA_IS_CLK_ENABLED


	)

2329 
	#__GPIOA_IS_CLK_DISABLED
 
__HAL_RCC_GPIOA_IS_CLK_DISABLED


	)

2330 
	#__GPIOB_IS_CLK_ENABLED
 
__HAL_RCC_GPIOB_IS_CLK_ENABLED


	)

2331 
	#__GPIOB_IS_CLK_DISABLED
 
__HAL_RCC_GPIOB_IS_CLK_DISABLED


	)

2332 
	#__GPIOC_IS_CLK_ENABLED
 
__HAL_RCC_GPIOC_IS_CLK_ENABLED


	)

2333 
	#__GPIOC_IS_CLK_DISABLED
 
__HAL_RCC_GPIOC_IS_CLK_DISABLED


	)

2334 
	#__GPIOD_IS_CLK_ENABLED
 
__HAL_RCC_GPIOD_IS_CLK_ENABLED


	)

2335 
	#__GPIOD_IS_CLK_DISABLED
 
__HAL_RCC_GPIOD_IS_CLK_DISABLED


	)

2336 
	#__GPIOE_IS_CLK_ENABLED
 
__HAL_RCC_GPIOE_IS_CLK_ENABLED


	)

2337 
	#__GPIOE_IS_CLK_DISABLED
 
__HAL_RCC_GPIOE_IS_CLK_DISABLED


	)

2338 
	#__GPIOF_IS_CLK_ENABLED
 
__HAL_RCC_GPIOF_IS_CLK_ENABLED


	)

2339 
	#__GPIOF_IS_CLK_DISABLED
 
__HAL_RCC_GPIOF_IS_CLK_DISABLED


	)

2340 
	#__GPIOG_IS_CLK_ENABLED
 
__HAL_RCC_GPIOG_IS_CLK_ENABLED


	)

2341 
	#__GPIOG_IS_CLK_DISABLED
 
__HAL_RCC_GPIOG_IS_CLK_DISABLED


	)

2342 
	#__GPIOH_IS_CLK_ENABLED
 
__HAL_RCC_GPIOH_IS_CLK_ENABLED


	)

2343 
	#__GPIOH_IS_CLK_DISABLED
 
__HAL_RCC_GPIOH_IS_CLK_DISABLED


	)

2344 
	#__HRTIM1_IS_CLK_ENABLED
 
__HAL_RCC_HRTIM1_IS_CLK_ENABLED


	)

2345 
	#__HRTIM1_IS_CLK_DISABLED
 
__HAL_RCC_HRTIM1_IS_CLK_DISABLED


	)

2346 
	#__I2C1_IS_CLK_ENABLED
 
__HAL_RCC_I2C1_IS_CLK_ENABLED


	)

2347 
	#__I2C1_IS_CLK_DISABLED
 
__HAL_RCC_I2C1_IS_CLK_DISABLED


	)

2348 
	#__I2C2_IS_CLK_ENABLED
 
__HAL_RCC_I2C2_IS_CLK_ENABLED


	)

2349 
	#__I2C2_IS_CLK_DISABLED
 
__HAL_RCC_I2C2_IS_CLK_DISABLED


	)

2350 
	#__I2C3_IS_CLK_ENABLED
 
__HAL_RCC_I2C3_IS_CLK_ENABLED


	)

2351 
	#__I2C3_IS_CLK_DISABLED
 
__HAL_RCC_I2C3_IS_CLK_DISABLED


	)

2352 
	#__PWR_IS_CLK_ENABLED
 
__HAL_RCC_PWR_IS_CLK_ENABLED


	)

2353 
	#__PWR_IS_CLK_DISABLED
 
__HAL_RCC_PWR_IS_CLK_DISABLED


	)

2354 
	#__SYSCFG_IS_CLK_ENABLED
 
__HAL_RCC_SYSCFG_IS_CLK_ENABLED


	)

2355 
	#__SYSCFG_IS_CLK_DISABLED
 
__HAL_RCC_SYSCFG_IS_CLK_DISABLED


	)

2356 
	#__SPI1_IS_CLK_ENABLED
 
__HAL_RCC_SPI1_IS_CLK_ENABLED


	)

2357 
	#__SPI1_IS_CLK_DISABLED
 
__HAL_RCC_SPI1_IS_CLK_DISABLED


	)

2358 
	#__SPI2_IS_CLK_ENABLED
 
__HAL_RCC_SPI2_IS_CLK_ENABLED


	)

2359 
	#__SPI2_IS_CLK_DISABLED
 
__HAL_RCC_SPI2_IS_CLK_DISABLED


	)

2360 
	#__SPI3_IS_CLK_ENABLED
 
__HAL_RCC_SPI3_IS_CLK_ENABLED


	)

2361 
	#__SPI3_IS_CLK_DISABLED
 
__HAL_RCC_SPI3_IS_CLK_DISABLED


	)

2362 
	#__SPI4_IS_CLK_ENABLED
 
__HAL_RCC_SPI4_IS_CLK_ENABLED


	)

2363 
	#__SPI4_IS_CLK_DISABLED
 
__HAL_RCC_SPI4_IS_CLK_DISABLED


	)

2364 
	#__SDADC1_IS_CLK_ENABLED
 
__HAL_RCC_SDADC1_IS_CLK_ENABLED


	)

2365 
	#__SDADC1_IS_CLK_DISABLED
 
__HAL_RCC_SDADC1_IS_CLK_DISABLED


	)

2366 
	#__SDADC2_IS_CLK_ENABLED
 
__HAL_RCC_SDADC2_IS_CLK_ENABLED


	)

2367 
	#__SDADC2_IS_CLK_DISABLED
 
__HAL_RCC_SDADC2_IS_CLK_DISABLED


	)

2368 
	#__SDADC3_IS_CLK_ENABLED
 
__HAL_RCC_SDADC3_IS_CLK_ENABLED


	)

2369 
	#__SDADC3_IS_CLK_DISABLED
 
__HAL_RCC_SDADC3_IS_CLK_DISABLED


	)

2370 
	#__SRAM_IS_CLK_ENABLED
 
__HAL_RCC_SRAM_IS_CLK_ENABLED


	)

2371 
	#__SRAM_IS_CLK_DISABLED
 
__HAL_RCC_SRAM_IS_CLK_DISABLED


	)

2372 
	#__TIM1_IS_CLK_ENABLED
 
__HAL_RCC_TIM1_IS_CLK_ENABLED


	)

2373 
	#__TIM1_IS_CLK_DISABLED
 
__HAL_RCC_TIM1_IS_CLK_DISABLED


	)

2374 
	#__TIM2_IS_CLK_ENABLED
 
__HAL_RCC_TIM2_IS_CLK_ENABLED


	)

2375 
	#__TIM2_IS_CLK_DISABLED
 
__HAL_RCC_TIM2_IS_CLK_DISABLED


	)

2376 
	#__TIM3_IS_CLK_ENABLED
 
__HAL_RCC_TIM3_IS_CLK_ENABLED


	)

2377 
	#__TIM3_IS_CLK_DISABLED
 
__HAL_RCC_TIM3_IS_CLK_DISABLED


	)

2378 
	#__TIM4_IS_CLK_ENABLED
 
__HAL_RCC_TIM4_IS_CLK_ENABLED


	)

2379 
	#__TIM4_IS_CLK_DISABLED
 
__HAL_RCC_TIM4_IS_CLK_DISABLED


	)

2380 
	#__TIM5_IS_CLK_ENABLED
 
__HAL_RCC_TIM5_IS_CLK_ENABLED


	)

2381 
	#__TIM5_IS_CLK_DISABLED
 
__HAL_RCC_TIM5_IS_CLK_DISABLED


	)

2382 
	#__TIM6_IS_CLK_ENABLED
 
__HAL_RCC_TIM6_IS_CLK_ENABLED


	)

2383 
	#__TIM6_IS_CLK_DISABLED
 
__HAL_RCC_TIM6_IS_CLK_DISABLED


	)

2384 
	#__TIM7_IS_CLK_ENABLED
 
__HAL_RCC_TIM7_IS_CLK_ENABLED


	)

2385 
	#__TIM7_IS_CLK_DISABLED
 
__HAL_RCC_TIM7_IS_CLK_DISABLED


	)

2386 
	#__TIM8_IS_CLK_ENABLED
 
__HAL_RCC_TIM8_IS_CLK_ENABLED


	)

2387 
	#__TIM8_IS_CLK_DISABLED
 
__HAL_RCC_TIM8_IS_CLK_DISABLED


	)

2388 
	#__TIM12_IS_CLK_ENABLED
 
__HAL_RCC_TIM12_IS_CLK_ENABLED


	)

2389 
	#__TIM12_IS_CLK_DISABLED
 
__HAL_RCC_TIM12_IS_CLK_DISABLED


	)

2390 
	#__TIM13_IS_CLK_ENABLED
 
__HAL_RCC_TIM13_IS_CLK_ENABLED


	)

2391 
	#__TIM13_IS_CLK_DISABLED
 
__HAL_RCC_TIM13_IS_CLK_DISABLED


	)

2392 
	#__TIM14_IS_CLK_ENABLED
 
__HAL_RCC_TIM14_IS_CLK_ENABLED


	)

2393 
	#__TIM14_IS_CLK_DISABLED
 
__HAL_RCC_TIM14_IS_CLK_DISABLED


	)

2394 
	#__TIM15_IS_CLK_ENABLED
 
__HAL_RCC_TIM15_IS_CLK_ENABLED


	)

2395 
	#__TIM15_IS_CLK_DISABLED
 
__HAL_RCC_TIM15_IS_CLK_DISABLED


	)

2396 
	#__TIM16_IS_CLK_ENABLED
 
__HAL_RCC_TIM16_IS_CLK_ENABLED


	)

2397 
	#__TIM16_IS_CLK_DISABLED
 
__HAL_RCC_TIM16_IS_CLK_DISABLED


	)

2398 
	#__TIM17_IS_CLK_ENABLED
 
__HAL_RCC_TIM17_IS_CLK_ENABLED


	)

2399 
	#__TIM17_IS_CLK_DISABLED
 
__HAL_RCC_TIM17_IS_CLK_DISABLED


	)

2400 
	#__TIM18_IS_CLK_ENABLED
 
__HAL_RCC_TIM18_IS_CLK_ENABLED


	)

2401 
	#__TIM18_IS_CLK_DISABLED
 
__HAL_RCC_TIM18_IS_CLK_DISABLED


	)

2402 
	#__TIM19_IS_CLK_ENABLED
 
__HAL_RCC_TIM19_IS_CLK_ENABLED


	)

2403 
	#__TIM19_IS_CLK_DISABLED
 
__HAL_RCC_TIM19_IS_CLK_DISABLED


	)

2404 
	#__TIM20_IS_CLK_ENABLED
 
__HAL_RCC_TIM20_IS_CLK_ENABLED


	)

2405 
	#__TIM20_IS_CLK_DISABLED
 
__HAL_RCC_TIM20_IS_CLK_DISABLED


	)

2406 
	#__TSC_IS_CLK_ENABLED
 
__HAL_RCC_TSC_IS_CLK_ENABLED


	)

2407 
	#__TSC_IS_CLK_DISABLED
 
__HAL_RCC_TSC_IS_CLK_DISABLED


	)

2408 
	#__UART4_IS_CLK_ENABLED
 
__HAL_RCC_UART4_IS_CLK_ENABLED


	)

2409 
	#__UART4_IS_CLK_DISABLED
 
__HAL_RCC_UART4_IS_CLK_DISABLED


	)

2410 
	#__UART5_IS_CLK_ENABLED
 
__HAL_RCC_UART5_IS_CLK_ENABLED


	)

2411 
	#__UART5_IS_CLK_DISABLED
 
__HAL_RCC_UART5_IS_CLK_DISABLED


	)

2412 
	#__USART1_IS_CLK_ENABLED
 
__HAL_RCC_USART1_IS_CLK_ENABLED


	)

2413 
	#__USART1_IS_CLK_DISABLED
 
__HAL_RCC_USART1_IS_CLK_DISABLED


	)

2414 
	#__USART2_IS_CLK_ENABLED
 
__HAL_RCC_USART2_IS_CLK_ENABLED


	)

2415 
	#__USART2_IS_CLK_DISABLED
 
__HAL_RCC_USART2_IS_CLK_DISABLED


	)

2416 
	#__USART3_IS_CLK_ENABLED
 
__HAL_RCC_USART3_IS_CLK_ENABLED


	)

2417 
	#__USART3_IS_CLK_DISABLED
 
__HAL_RCC_USART3_IS_CLK_DISABLED


	)

2418 
	#__USB_IS_CLK_ENABLED
 
__HAL_RCC_USB_IS_CLK_ENABLED


	)

2419 
	#__USB_IS_CLK_DISABLED
 
__HAL_RCC_USB_IS_CLK_DISABLED


	)

2420 
	#__WWDG_IS_CLK_ENABLED
 
__HAL_RCC_WWDG_IS_CLK_ENABLED


	)

2421 
	#__WWDG_IS_CLK_DISABLED
 
__HAL_RCC_WWDG_IS_CLK_DISABLED


	)

2423 #i‡
deföed
(
STM32F4
)

2424 
	#__HAL_RCC_SDMMC1_FORCE_RESET
 
__HAL_RCC_SDIO_FORCE_RESET


	)

2425 
	#__HAL_RCC_SDMMC1_RELEASE_RESET
 
__HAL_RCC_SDIO_RELEASE_RESET


	)

2426 
	#__HAL_RCC_SDMMC1_CLK_SLEEP_ENABLE
 
__HAL_RCC_SDIO_CLK_SLEEP_ENABLE


	)

2427 
	#__HAL_RCC_SDMMC1_CLK_SLEEP_DISABLE
 
__HAL_RCC_SDIO_CLK_SLEEP_DISABLE


	)

2428 
	#__HAL_RCC_SDMMC1_CLK_ENABLE
 
__HAL_RCC_SDIO_CLK_ENABLE


	)

2429 
	#__HAL_RCC_SDMMC1_CLK_DISABLE
 
__HAL_RCC_SDIO_CLK_DISABLE


	)

2430 
	#__HAL_RCC_SDMMC1_IS_CLK_ENABLED
 
__HAL_RCC_SDIO_IS_CLK_ENABLED


	)

2431 
	#__HAL_RCC_SDMMC1_IS_CLK_DISABLED
 
__HAL_RCC_SDIO_IS_CLK_DISABLED


	)

2432 
	#Sdmmc1ClockSñe˘i⁄
 
SdioClockSñe˘i⁄


	)

2433 
	#RCC_PERIPHCLK_SDMMC1
 
RCC_PERIPHCLK_SDIO


	)

2434 
	#RCC_SDMMC1CLKSOURCE_CLK48
 
RCC_SDIOCLKSOURCE_CK48


	)

2435 
	#RCC_SDMMC1CLKSOURCE_SYSCLK
 
RCC_SDIOCLKSOURCE_SYSCLK


	)

2436 
	#__HAL_RCC_SDMMC1_CONFIG
 
__HAL_RCC_SDIO_CONFIG


	)

2437 
	#__HAL_RCC_GET_SDMMC1_SOURCE
 
__HAL_RCC_GET_SDIO_SOURCE


	)

2440 #i‡
deföed
(
STM32F7
Ë|| deföed(
STM32L4
)

2441 
	#__HAL_RCC_SDIO_FORCE_RESET
 
__HAL_RCC_SDMMC1_FORCE_RESET


	)

2442 
	#__HAL_RCC_SDIO_RELEASE_RESET
 
__HAL_RCC_SDMMC1_RELEASE_RESET


	)

2443 
	#__HAL_RCC_SDIO_CLK_SLEEP_ENABLE
 
__HAL_RCC_SDMMC1_CLK_SLEEP_ENABLE


	)

2444 
	#__HAL_RCC_SDIO_CLK_SLEEP_DISABLE
 
__HAL_RCC_SDMMC1_CLK_SLEEP_DISABLE


	)

2445 
	#__HAL_RCC_SDIO_CLK_ENABLE
 
__HAL_RCC_SDMMC1_CLK_ENABLE


	)

2446 
	#__HAL_RCC_SDIO_CLK_DISABLE
 
__HAL_RCC_SDMMC1_CLK_DISABLE


	)

2447 
	#__HAL_RCC_SDIO_IS_CLK_ENABLED
 
__HAL_RCC_SDMMC1_IS_CLK_ENABLED


	)

2448 
	#__HAL_RCC_SDIO_IS_CLK_DISABLED
 
__HAL_RCC_SDMMC1_IS_CLK_DISABLED


	)

2449 
	#SdioClockSñe˘i⁄
 
Sdmmc1ClockSñe˘i⁄


	)

2450 
	#RCC_PERIPHCLK_SDIO
 
RCC_PERIPHCLK_SDMMC1


	)

2451 
	#__HAL_RCC_SDIO_CONFIG
 
__HAL_RCC_SDMMC1_CONFIG


	)

2452 
	#__HAL_RCC_GET_SDIO_SOURCE
 
__HAL_RCC_GET_SDMMC1_SOURCE


	)

2455 #i‡
deföed
(
STM32F7
)

2456 
	#RCC_SDIOCLKSOURCE_CK48
 
RCC_SDMMC1CLKSOURCE_CLK48


	)

2457 
	#RCC_SDIOCLKSOURCE_SYSCLK
 
RCC_SDMMC1CLKSOURCE_SYSCLK


	)

2460 
	#__HAL_RCC_I2SCLK
 
__HAL_RCC_I2S_CONFIG


	)

2461 
	#__HAL_RCC_I2SCLK_CONFIG
 
__HAL_RCC_I2S_CONFIG


	)

2463 
	#__RCC_PLLSRC
 
RCC_GET_PLL_OSCSOURCE


	)

2465 
	#IS_RCC_MSIRANGE
 
IS_RCC_MSI_CLOCK_RANGE


	)

2466 
	#IS_RCC_RTCCLK_SOURCE
 
IS_RCC_RTCCLKSOURCE


	)

2467 
	#IS_RCC_SYSCLK_DIV
 
IS_RCC_HCLK


	)

2468 
	#IS_RCC_HCLK_DIV
 
IS_RCC_PCLK


	)

2469 
	#IS_RCC_PERIPHCLK
 
IS_RCC_PERIPHCLOCK


	)

2471 
	#RCC_IT_HSI14
 
RCC_IT_HSI14RDY


	)

2473 #i‡
deföed
(
STM32L0
)

2474 
	#RCC_IT_LSECSS
 
RCC_IT_CSSLSE


	)

2475 
	#RCC_IT_CSS
 
RCC_IT_CSSHSE


	)

2478 
	#IS_RCC_MCOSOURCE
 
IS_RCC_MCO1SOURCE


	)

2479 
	#__HAL_RCC_MCO_CONFIG
 
__HAL_RCC_MCO1_CONFIG


	)

2480 
	#RCC_MCO_NODIV
 
RCC_MCODIV_1


	)

2481 
	#RCC_MCO_DIV1
 
RCC_MCODIV_1


	)

2482 
	#RCC_MCO_DIV2
 
RCC_MCODIV_2


	)

2483 
	#RCC_MCO_DIV4
 
RCC_MCODIV_4


	)

2484 
	#RCC_MCO_DIV8
 
RCC_MCODIV_8


	)

2485 
	#RCC_MCO_DIV16
 
RCC_MCODIV_16


	)

2486 
	#RCC_MCO_DIV32
 
RCC_MCODIV_32


	)

2487 
	#RCC_MCO_DIV64
 
RCC_MCODIV_64


	)

2488 
	#RCC_MCO_DIV128
 
RCC_MCODIV_128


	)

2489 
	#RCC_MCOSOURCE_NONE
 
RCC_MCO1SOURCE_NOCLOCK


	)

2490 
	#RCC_MCOSOURCE_LSI
 
RCC_MCO1SOURCE_LSI


	)

2491 
	#RCC_MCOSOURCE_LSE
 
RCC_MCO1SOURCE_LSE


	)

2492 
	#RCC_MCOSOURCE_SYSCLK
 
RCC_MCO1SOURCE_SYSCLK


	)

2493 
	#RCC_MCOSOURCE_HSI
 
RCC_MCO1SOURCE_HSI


	)

2494 
	#RCC_MCOSOURCE_HSI14
 
RCC_MCO1SOURCE_HSI14


	)

2495 
	#RCC_MCOSOURCE_HSI48
 
RCC_MCO1SOURCE_HSI48


	)

2496 
	#RCC_MCOSOURCE_HSE
 
RCC_MCO1SOURCE_HSE


	)

2497 
	#RCC_MCOSOURCE_PLLCLK_DIV1
 
RCC_MCO1SOURCE_PLLCLK


	)

2498 
	#RCC_MCOSOURCE_PLLCLK_NODIV
 
RCC_MCO1SOURCE_PLLCLK


	)

2499 
	#RCC_MCOSOURCE_PLLCLK_DIV2
 
RCC_MCO1SOURCE_PLLCLK_DIV2


	)

2501 
	#RCC_RTCCLKSOURCE_NONE
 
RCC_RTCCLKSOURCE_NO_CLK


	)

2503 
	#RCC_USBCLK_PLLSAI1
 
RCC_USBCLKSOURCE_PLLSAI1


	)

2504 
	#RCC_USBCLK_PLL
 
RCC_USBCLKSOURCE_PLL


	)

2505 
	#RCC_USBCLK_MSI
 
RCC_USBCLKSOURCE_MSI


	)

2506 
	#RCC_USBCLKSOURCE_PLLCLK
 
RCC_USBCLKSOURCE_PLL


	)

2507 
	#RCC_USBPLLCLK_DIV1
 
RCC_USBCLKSOURCE_PLL


	)

2508 
	#RCC_USBPLLCLK_DIV1_5
 
RCC_USBCLKSOURCE_PLL_DIV1_5


	)

2509 
	#RCC_USBPLLCLK_DIV2
 
RCC_USBCLKSOURCE_PLL_DIV2


	)

2510 
	#RCC_USBPLLCLK_DIV3
 
RCC_USBCLKSOURCE_PLL_DIV3


	)

2512 
	#HSION_BôNumbî
 
RCC_HSION_BIT_NUMBER


	)

2513 
	#HSION_BITNUMBER
 
RCC_HSION_BIT_NUMBER


	)

2514 
	#HSEON_BôNumbî
 
RCC_HSEON_BIT_NUMBER


	)

2515 
	#HSEON_BITNUMBER
 
RCC_HSEON_BIT_NUMBER


	)

2516 
	#MSION_BITNUMBER
 
RCC_MSION_BIT_NUMBER


	)

2517 
	#CSSON_BôNumbî
 
RCC_CSSON_BIT_NUMBER


	)

2518 
	#CSSON_BITNUMBER
 
RCC_CSSON_BIT_NUMBER


	)

2519 
	#PLLON_BôNumbî
 
RCC_PLLON_BIT_NUMBER


	)

2520 
	#PLLON_BITNUMBER
 
RCC_PLLON_BIT_NUMBER


	)

2521 
	#PLLI2SON_BôNumbî
 
RCC_PLLI2SON_BIT_NUMBER


	)

2522 
	#I2SSRC_BôNumbî
 
RCC_I2SSRC_BIT_NUMBER


	)

2523 
	#RTCEN_BôNumbî
 
RCC_RTCEN_BIT_NUMBER


	)

2524 
	#RTCEN_BITNUMBER
 
RCC_RTCEN_BIT_NUMBER


	)

2525 
	#BDRST_BôNumbî
 
RCC_BDRST_BIT_NUMBER


	)

2526 
	#BDRST_BITNUMBER
 
RCC_BDRST_BIT_NUMBER


	)

2527 
	#RTCRST_BITNUMBER
 
RCC_RTCRST_BIT_NUMBER


	)

2528 
	#LSION_BôNumbî
 
RCC_LSION_BIT_NUMBER


	)

2529 
	#LSION_BITNUMBER
 
RCC_LSION_BIT_NUMBER


	)

2530 
	#LSEON_BôNumbî
 
RCC_LSEON_BIT_NUMBER


	)

2531 
	#LSEON_BITNUMBER
 
RCC_LSEON_BIT_NUMBER


	)

2532 
	#LSEBYP_BITNUMBER
 
RCC_LSEBYP_BIT_NUMBER


	)

2533 
	#PLLSAION_BôNumbî
 
RCC_PLLSAION_BIT_NUMBER


	)

2534 
	#TIMPRE_BôNumbî
 
RCC_TIMPRE_BIT_NUMBER


	)

2535 
	#RMVF_BôNumbî
 
RCC_RMVF_BIT_NUMBER


	)

2536 
	#RMVF_BITNUMBER
 
RCC_RMVF_BIT_NUMBER


	)

2537 
	#RCC_CR2_HSI14TRIM_BôNumbî
 
RCC_HSI14TRIM_BIT_NUMBER


	)

2538 
	#CR_BYTE2_ADDRESS
 
RCC_CR_BYTE2_ADDRESS


	)

2539 
	#CIR_BYTE1_ADDRESS
 
RCC_CIR_BYTE1_ADDRESS


	)

2540 
	#CIR_BYTE2_ADDRESS
 
RCC_CIR_BYTE2_ADDRESS


	)

2541 
	#BDCR_BYTE0_ADDRESS
 
RCC_BDCR_BYTE0_ADDRESS


	)

2542 
	#DBP_TIMEOUT_VALUE
 
RCC_DBP_TIMEOUT_VALUE


	)

2543 
	#LSE_TIMEOUT_VALUE
 
RCC_LSE_TIMEOUT_VALUE


	)

2545 
	#CR_HSION_BB
 
RCC_CR_HSION_BB


	)

2546 
	#CR_CSSON_BB
 
RCC_CR_CSSON_BB


	)

2547 
	#CR_PLLON_BB
 
RCC_CR_PLLON_BB


	)

2548 
	#CR_PLLI2SON_BB
 
RCC_CR_PLLI2SON_BB


	)

2549 
	#CR_MSION_BB
 
RCC_CR_MSION_BB


	)

2550 
	#CSR_LSION_BB
 
RCC_CSR_LSION_BB


	)

2551 
	#CSR_LSEON_BB
 
RCC_CSR_LSEON_BB


	)

2552 
	#CSR_LSEBYP_BB
 
RCC_CSR_LSEBYP_BB


	)

2553 
	#CSR_RTCEN_BB
 
RCC_CSR_RTCEN_BB


	)

2554 
	#CSR_RTCRST_BB
 
RCC_CSR_RTCRST_BB


	)

2555 
	#CFGR_I2SSRC_BB
 
RCC_CFGR_I2SSRC_BB


	)

2556 
	#BDCR_RTCEN_BB
 
RCC_BDCR_RTCEN_BB


	)

2557 
	#BDCR_BDRST_BB
 
RCC_BDCR_BDRST_BB


	)

2558 
	#CR_HSEON_BB
 
RCC_CR_HSEON_BB


	)

2559 
	#CSR_RMVF_BB
 
RCC_CSR_RMVF_BB


	)

2560 
	#CR_PLLSAION_BB
 
RCC_CR_PLLSAION_BB


	)

2561 
	#DCKCFGR_TIMPRE_BB
 
RCC_DCKCFGR_TIMPRE_BB


	)

2563 
	#__HAL_RCC_CRS_ENABLE_FREQ_ERROR_COUNTER
 
__HAL_RCC_CRS_FREQ_ERROR_COUNTER_ENABLE


	)

2564 
	#__HAL_RCC_CRS_DISABLE_FREQ_ERROR_COUNTER
 
__HAL_RCC_CRS_FREQ_ERROR_COUNTER_DISABLE


	)

2565 
	#__HAL_RCC_CRS_ENABLE_AUTOMATIC_CALIB
 
__HAL_RCC_CRS_AUTOMATIC_CALIB_ENABLE


	)

2566 
	#__HAL_RCC_CRS_DISABLE_AUTOMATIC_CALIB
 
__HAL_RCC_CRS_AUTOMATIC_CALIB_DISABLE


	)

2567 
	#__HAL_RCC_CRS_CALCULATE_RELOADVALUE
 
__HAL_RCC_CRS_RELOADVALUE_CALCULATE


	)

2569 
	#__HAL_RCC_GET_IT_SOURCE
 
__HAL_RCC_GET_IT


	)

2577 
	#HAL_RNG_RódyCÆlback
(
__HANDLE__
Ë
	`HAL_RNG_RódyD©aCÆlback
((__HANDLE__), 
uöt32_t
 
øndom32bô
)

	)

2587 
	#__HAL_RTC_CLEAR_FLAG
 
__HAL_RTC_EXTI_CLEAR_FLAG


	)

2588 
	#__HAL_RTC_DISABLE_IT
 
__HAL_RTC_EXTI_DISABLE_IT


	)

2589 
	#__HAL_RTC_ENABLE_IT
 
__HAL_RTC_EXTI_ENABLE_IT


	)

2591 #i‡
deföed
 (
STM32F1
)

2592 
	#__HAL_RTC_EXTI_CLEAR_FLAG
(
RTC_EXTI_LINE_ALARM_EVENT
Ë
	`__HAL_RTC_ALARM_EXTI_CLEAR_FLAG
()

	)

2594 
	#__HAL_RTC_EXTI_ENABLE_IT
(
RTC_EXTI_LINE_ALARM_EVENT
Ë
	`__HAL_RTC_ALARM_EXTI_ENABLE_IT
()

	)

2596 
	#__HAL_RTC_EXTI_DISABLE_IT
(
RTC_EXTI_LINE_ALARM_EVENT
Ë
	`__HAL_RTC_ALARM_EXTI_DISABLE_IT
()

	)

2598 
	#__HAL_RTC_EXTI_GET_FLAG
(
RTC_EXTI_LINE_ALARM_EVENT
Ë
	`__HAL_RTC_ALARM_EXTI_GET_FLAG
()

	)

2600 
	#__HAL_RTC_EXTI_GENERATE_SWIT
(
RTC_EXTI_LINE_ALARM_EVENT
Ë
	`__HAL_RTC_ALARM_EXTI_GENERATE_SWIT
()

	)

2602 
	#__HAL_RTC_EXTI_CLEAR_FLAG
(
__EXTI_LINE__
Ë(((__EXTI_LINE__Ë=
RTC_EXTI_LINE_ALARM_EVENT
Ë? 
	`__HAL_RTC_ALARM_EXTI_CLEAR_FLAG
() : \

2603 (((
__EXTI_LINE__
Ë=
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
Ë? 
	`__HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG
() : \

2604 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_CLEAR_FLAG
()))

	)

2605 
	#__HAL_RTC_EXTI_ENABLE_IT
(
__EXTI_LINE__
Ë(((__EXTI_LINE__Ë=
RTC_EXTI_LINE_ALARM_EVENT
Ë? 
	`__HAL_RTC_ALARM_EXTI_ENABLE_IT
() : \

2606 (((
__EXTI_LINE__
Ë=
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
Ë? 
	`__HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT
() : \

2607 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT
()))

	)

2608 
	#__HAL_RTC_EXTI_DISABLE_IT
(
__EXTI_LINE__
Ë(((__EXTI_LINE__Ë=
RTC_EXTI_LINE_ALARM_EVENT
Ë? 
	`__HAL_RTC_ALARM_EXTI_DISABLE_IT
() : \

2609 (((
__EXTI_LINE__
Ë=
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
Ë? 
	`__HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_IT
() : \

2610 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_DISABLE_IT
()))

	)

2611 
	#__HAL_RTC_EXTI_GET_FLAG
(
__EXTI_LINE__
Ë(((__EXTI_LINE__Ë=
RTC_EXTI_LINE_ALARM_EVENT
Ë? 
	`__HAL_RTC_ALARM_EXTI_GET_FLAG
() : \

2612 (((
__EXTI_LINE__
Ë=
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
Ë? 
	`__HAL_RTC_WAKEUPTIMER_EXTI_GET_FLAG
() : \

2613 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_GET_FLAG
()))

	)

2614 
	#__HAL_RTC_EXTI_GENERATE_SWIT
(
__EXTI_LINE__
Ë(((__EXTI_LINE__Ë=
RTC_EXTI_LINE_ALARM_EVENT
Ë? 
	`__HAL_RTC_ALARM_EXTI_GENERATE_SWIT
() : \

2615 (((
__EXTI_LINE__
Ë=
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
Ë? 
	`__HAL_RTC_WAKEUPTIMER_EXTI_GENERATE_SWIT
() : \

2616 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_GENERATE_SWIT
()))

	)

2619 
	#IS_ALARM
 
IS_RTC_ALARM


	)

2620 
	#IS_ALARM_MASK
 
IS_RTC_ALARM_MASK


	)

2621 
	#IS_TAMPER
 
IS_RTC_TAMPER


	)

2622 
	#IS_TAMPER_ERASE_MODE
 
IS_RTC_TAMPER_ERASE_MODE


	)

2623 
	#IS_TAMPER_FILTER
 
IS_RTC_TAMPER_FILTER


	)

2624 
	#IS_TAMPER_INTERRUPT
 
IS_RTC_TAMPER_INTERRUPT


	)

2625 
	#IS_TAMPER_MASKFLAG_STATE
 
IS_RTC_TAMPER_MASKFLAG_STATE


	)

2626 
	#IS_TAMPER_PRECHARGE_DURATION
 
IS_RTC_TAMPER_PRECHARGE_DURATION


	)

2627 
	#IS_TAMPER_PULLUP_STATE
 
IS_RTC_TAMPER_PULLUP_STATE


	)

2628 
	#IS_TAMPER_SAMPLING_FREQ
 
IS_RTC_TAMPER_SAMPLING_FREQ


	)

2629 
	#IS_TAMPER_TIMESTAMPONTAMPER_DETECTION
 
IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION


	)

2630 
	#IS_TAMPER_TRIGGER
 
IS_RTC_TAMPER_TRIGGER


	)

2631 
	#IS_WAKEUP_CLOCK
 
IS_RTC_WAKEUP_CLOCK


	)

2632 
	#IS_WAKEUP_COUNTER
 
IS_RTC_WAKEUP_COUNTER


	)

2634 
	#__RTC_WRITEPROTECTION_ENABLE
 
__HAL_RTC_WRITEPROTECTION_ENABLE


	)

2635 
	#__RTC_WRITEPROTECTION_DISABLE
 
__HAL_RTC_WRITEPROTECTION_DISABLE


	)

2645 
	#SD_OCR_CID_CSD_OVERWRIETE
 
SD_OCR_CID_CSD_OVERWRITE


	)

2646 
	#SD_CMD_SD_APP_STAUS
 
SD_CMD_SD_APP_STATUS


	)

2648 #i‡
deföed
(
STM32F4
)

2649 
	#SD_SDMMC_DISABLED
 
SD_SDIO_DISABLED


	)

2650 
	#SD_SDMMC_FUNCTION_BUSY
 
SD_SDIO_FUNCTION_BUSY


	)

2651 
	#SD_SDMMC_FUNCTION_FAILED
 
SD_SDIO_FUNCTION_FAILED


	)

2652 
	#SD_SDMMC_UNKNOWN_FUNCTION
 
SD_SDIO_UNKNOWN_FUNCTION


	)

2653 
	#SD_CMD_SDMMC_SEN_OP_COND
 
SD_CMD_SDIO_SEN_OP_COND


	)

2654 
	#SD_CMD_SDMMC_RW_DIRECT
 
SD_CMD_SDIO_RW_DIRECT


	)

2655 
	#SD_CMD_SDMMC_RW_EXTENDED
 
SD_CMD_SDIO_RW_EXTENDED


	)

2656 
	#__HAL_SD_SDMMC_ENABLE
 
__HAL_SD_SDIO_ENABLE


	)

2657 
	#__HAL_SD_SDMMC_DISABLE
 
__HAL_SD_SDIO_DISABLE


	)

2658 
	#__HAL_SD_SDMMC_DMA_ENABLE
 
__HAL_SD_SDIO_DMA_ENABLE


	)

2659 
	#__HAL_SD_SDMMC_DMA_DISABLE
 
__HAL_SD_SDIO_DMA_DISABL


	)

2660 
	#__HAL_SD_SDMMC_ENABLE_IT
 
__HAL_SD_SDIO_ENABLE_IT


	)

2661 
	#__HAL_SD_SDMMC_DISABLE_IT
 
__HAL_SD_SDIO_DISABLE_IT


	)

2662 
	#__HAL_SD_SDMMC_GET_FLAG
 
__HAL_SD_SDIO_GET_FLAG


	)

2663 
	#__HAL_SD_SDMMC_CLEAR_FLAG
 
__HAL_SD_SDIO_CLEAR_FLAG


	)

2664 
	#__HAL_SD_SDMMC_GET_IT
 
__HAL_SD_SDIO_GET_IT


	)

2665 
	#__HAL_SD_SDMMC_CLEAR_IT
 
__HAL_SD_SDIO_CLEAR_IT


	)

2666 
	#SDMMC_STATIC_FLAGS
 
SDIO_STATIC_FLAGS


	)

2667 
	#SDMMC_CMD0TIMEOUT
 
SDIO_CMD0TIMEOUT


	)

2668 
	#SD_SDMMC_SEND_IF_COND
 
SD_SDIO_SEND_IF_COND


	)

2670 
	#SDMMC1_IRQn
 
SDIO_IRQn


	)

2671 
	#SDMMC1_IRQH™dÀr
 
SDIO_IRQH™dÀr


	)

2674 #i‡
deföed
(
STM32F7
Ë|| deföed(
STM32L4
)

2675 
	#SD_SDIO_DISABLED
 
SD_SDMMC_DISABLED


	)

2676 
	#SD_SDIO_FUNCTION_BUSY
 
SD_SDMMC_FUNCTION_BUSY


	)

2677 
	#SD_SDIO_FUNCTION_FAILED
 
SD_SDMMC_FUNCTION_FAILED


	)

2678 
	#SD_SDIO_UNKNOWN_FUNCTION
 
SD_SDMMC_UNKNOWN_FUNCTION


	)

2679 
	#SD_CMD_SDIO_SEN_OP_COND
 
SD_CMD_SDMMC_SEN_OP_COND


	)

2680 
	#SD_CMD_SDIO_RW_DIRECT
 
SD_CMD_SDMMC_RW_DIRECT


	)

2681 
	#SD_CMD_SDIO_RW_EXTENDED
 
SD_CMD_SDMMC_RW_EXTENDED


	)

2682 
	#__HAL_SD_SDIO_ENABLE
 
__HAL_SD_SDMMC_ENABLE


	)

2683 
	#__HAL_SD_SDIO_DISABLE
 
__HAL_SD_SDMMC_DISABLE


	)

2684 
	#__HAL_SD_SDIO_DMA_ENABLE
 
__HAL_SD_SDMMC_DMA_ENABLE


	)

2685 
	#__HAL_SD_SDIO_DMA_DISABL
 
__HAL_SD_SDMMC_DMA_DISABLE


	)

2686 
	#__HAL_SD_SDIO_ENABLE_IT
 
__HAL_SD_SDMMC_ENABLE_IT


	)

2687 
	#__HAL_SD_SDIO_DISABLE_IT
 
__HAL_SD_SDMMC_DISABLE_IT


	)

2688 
	#__HAL_SD_SDIO_GET_FLAG
 
__HAL_SD_SDMMC_GET_FLAG


	)

2689 
	#__HAL_SD_SDIO_CLEAR_FLAG
 
__HAL_SD_SDMMC_CLEAR_FLAG


	)

2690 
	#__HAL_SD_SDIO_GET_IT
 
__HAL_SD_SDMMC_GET_IT


	)

2691 
	#__HAL_SD_SDIO_CLEAR_IT
 
__HAL_SD_SDMMC_CLEAR_IT


	)

2692 
	#SDIO_STATIC_FLAGS
 
SDMMC_STATIC_FLAGS


	)

2693 
	#SDIO_CMD0TIMEOUT
 
SDMMC_CMD0TIMEOUT


	)

2694 
	#SD_SDIO_SEND_IF_COND
 
SD_SDMMC_SEND_IF_COND


	)

2696 
	#SDIO_IRQn
 
SDMMC1_IRQn


	)

2697 
	#SDIO_IRQH™dÀr
 
SDMMC1_IRQH™dÀr


	)

2707 
	#__SMARTCARD_ENABLE_IT
 
__HAL_SMARTCARD_ENABLE_IT


	)

2708 
	#__SMARTCARD_DISABLE_IT
 
__HAL_SMARTCARD_DISABLE_IT


	)

2709 
	#__SMARTCARD_ENABLE
 
__HAL_SMARTCARD_ENABLE


	)

2710 
	#__SMARTCARD_DISABLE
 
__HAL_SMARTCARD_DISABLE


	)

2711 
	#__SMARTCARD_DMA_REQUEST_ENABLE
 
__HAL_SMARTCARD_DMA_REQUEST_ENABLE


	)

2712 
	#__SMARTCARD_DMA_REQUEST_DISABLE
 
__HAL_SMARTCARD_DMA_REQUEST_DISABLE


	)

2714 
	#__HAL_SMARTCARD_GETCLOCKSOURCE
 
SMARTCARD_GETCLOCKSOURCE


	)

2715 
	#__SMARTCARD_GETCLOCKSOURCE
 
SMARTCARD_GETCLOCKSOURCE


	)

2717 
	#IS_SMARTCARD_ONEBIT_SAMPLING
 
IS_SMARTCARD_ONE_BIT_SAMPLE


	)

2726 
	#__HAL_SMBUS_RESET_CR1
 
SMBUS_RESET_CR1


	)

2727 
	#__HAL_SMBUS_RESET_CR2
 
SMBUS_RESET_CR2


	)

2728 
	#__HAL_SMBUS_GENERATE_START
 
SMBUS_GENERATE_START


	)

2729 
	#__HAL_SMBUS_GET_ADDR_MATCH
 
SMBUS_GET_ADDR_MATCH


	)

2730 
	#__HAL_SMBUS_GET_DIR
 
SMBUS_GET_DIR


	)

2731 
	#__HAL_SMBUS_GET_STOP_MODE
 
SMBUS_GET_STOP_MODE


	)

2732 
	#__HAL_SMBUS_GET_PEC_MODE
 
SMBUS_GET_PEC_MODE


	)

2733 
	#__HAL_SMBUS_GET_ALERT_ENABLED
 
SMBUS_GET_ALERT_ENABLED


	)

2742 
	#__HAL_SPI_1LINE_TX
 
SPI_1LINE_TX


	)

2743 
	#__HAL_SPI_1LINE_RX
 
SPI_1LINE_RX


	)

2744 
	#__HAL_SPI_RESET_CRC
 
SPI_RESET_CRC


	)

2754 
	#__HAL_UART_GETCLOCKSOURCE
 
UART_GETCLOCKSOURCE


	)

2755 
	#__HAL_UART_MASK_COMPUTATION
 
UART_MASK_COMPUTATION


	)

2756 
	#__UART_GETCLOCKSOURCE
 
UART_GETCLOCKSOURCE


	)

2757 
	#__UART_MASK_COMPUTATION
 
UART_MASK_COMPUTATION


	)

2759 
	#IS_UART_WAKEUPMETHODE
 
IS_UART_WAKEUPMETHOD


	)

2761 
	#IS_UART_ONEBIT_SAMPLE
 
IS_UART_ONE_BIT_SAMPLE


	)

2762 
	#IS_UART_ONEBIT_SAMPLING
 
IS_UART_ONE_BIT_SAMPLE


	)

2773 
	#__USART_ENABLE_IT
 
__HAL_USART_ENABLE_IT


	)

2774 
	#__USART_DISABLE_IT
 
__HAL_USART_DISABLE_IT


	)

2775 
	#__USART_ENABLE
 
__HAL_USART_ENABLE


	)

2776 
	#__USART_DISABLE
 
__HAL_USART_DISABLE


	)

2778 
	#__HAL_USART_GETCLOCKSOURCE
 
USART_GETCLOCKSOURCE


	)

2779 
	#__USART_GETCLOCKSOURCE
 
USART_GETCLOCKSOURCE


	)

2788 
	#USB_EXTI_LINE_WAKEUP
 
USB_WAKEUP_EXTI_LINE


	)

2790 
	#USB_FS_EXTI_TRIGGER_RISING_EDGE
 
USB_OTG_FS_WAKEUP_EXTI_RISING_EDGE


	)

2791 
	#USB_FS_EXTI_TRIGGER_FALLING_EDGE
 
USB_OTG_FS_WAKEUP_EXTI_FALLING_EDGE


	)

2792 
	#USB_FS_EXTI_TRIGGER_BOTH_EDGE
 
USB_OTG_FS_WAKEUP_EXTI_RISING_FALLING_EDGE


	)

2793 
	#USB_FS_EXTI_LINE_WAKEUP
 
USB_OTG_FS_WAKEUP_EXTI_LINE


	)

2795 
	#USB_HS_EXTI_TRIGGER_RISING_EDGE
 
USB_OTG_HS_WAKEUP_EXTI_RISING_EDGE


	)

2796 
	#USB_HS_EXTI_TRIGGER_FALLING_EDGE
 
USB_OTG_HS_WAKEUP_EXTI_FALLING_EDGE


	)

2797 
	#USB_HS_EXTI_TRIGGER_BOTH_EDGE
 
USB_OTG_HS_WAKEUP_EXTI_RISING_FALLING_EDGE


	)

2798 
	#USB_HS_EXTI_LINE_WAKEUP
 
USB_OTG_HS_WAKEUP_EXTI_LINE


	)

2800 
	#__HAL_USB_EXTI_ENABLE_IT
 
__HAL_USB_WAKEUP_EXTI_ENABLE_IT


	)

2801 
	#__HAL_USB_EXTI_DISABLE_IT
 
__HAL_USB_WAKEUP_EXTI_DISABLE_IT


	)

2802 
	#__HAL_USB_EXTI_GET_FLAG
 
__HAL_USB_WAKEUP_EXTI_GET_FLAG


	)

2803 
	#__HAL_USB_EXTI_CLEAR_FLAG
 
__HAL_USB_WAKEUP_EXTI_CLEAR_FLAG


	)

2804 
	#__HAL_USB_EXTI_SET_RISING_EDGE_TRIGGER
 
__HAL_USB_WAKEUP_EXTI_ENABLE_RISING_EDGE


	)

2805 
	#__HAL_USB_EXTI_SET_FALLING_EDGE_TRIGGER
 
__HAL_USB_WAKEUP_EXTI_ENABLE_FALLING_EDGE


	)

2806 
	#__HAL_USB_EXTI_SET_FALLINGRISING_TRIGGER
 
__HAL_USB_WAKEUP_EXTI_ENABLE_RISING_FALLING_EDGE


	)

2808 
	#__HAL_USB_FS_EXTI_ENABLE_IT
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_IT


	)

2809 
	#__HAL_USB_FS_EXTI_DISABLE_IT
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_DISABLE_IT


	)

2810 
	#__HAL_USB_FS_EXTI_GET_FLAG
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_GET_FLAG


	)

2811 
	#__HAL_USB_FS_EXTI_CLEAR_FLAG
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG


	)

2812 
	#__HAL_USB_FS_EXTI_SET_RISING_EGDE_TRIGGER
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_EDGE


	)

2813 
	#__HAL_USB_FS_EXTI_SET_FALLING_EGDE_TRIGGER
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_FALLING_EDGE


	)

2814 
	#__HAL_USB_FS_EXTI_SET_FALLINGRISING_TRIGGER
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_FALLING_EDGE


	)

2815 
	#__HAL_USB_FS_EXTI_GENERATE_SWIT
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_GENERATE_SWIT


	)

2817 
	#__HAL_USB_HS_EXTI_ENABLE_IT
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_IT


	)

2818 
	#__HAL_USB_HS_EXTI_DISABLE_IT
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_DISABLE_IT


	)

2819 
	#__HAL_USB_HS_EXTI_GET_FLAG
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_GET_FLAG


	)

2820 
	#__HAL_USB_HS_EXTI_CLEAR_FLAG
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_CLEAR_FLAG


	)

2821 
	#__HAL_USB_HS_EXTI_SET_RISING_EGDE_TRIGGER
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_RISING_EDGE


	)

2822 
	#__HAL_USB_HS_EXTI_SET_FALLING_EGDE_TRIGGER
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_FALLING_EDGE


	)

2823 
	#__HAL_USB_HS_EXTI_SET_FALLINGRISING_TRIGGER
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_RISING_FALLING_EDGE


	)

2824 
	#__HAL_USB_HS_EXTI_GENERATE_SWIT
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_GENERATE_SWIT


	)

2826 
	#HAL_PCD_A˘iveRemŸeWakeup
 
HAL_PCD_A˘iv©eRemŸeWakeup


	)

2827 
	#HAL_PCD_DeA˘iveRemŸeWakeup
 
HAL_PCD_DeA˘iv©eRemŸeWakeup


	)

2829 
	#HAL_PCD_SëTxFiFo
 
HAL_PCDEx_SëTxFiFo


	)

2830 
	#HAL_PCD_SëRxFiFo
 
HAL_PCDEx_SëRxFiFo


	)

2838 
	#__HAL_TIM_SëICPªsˇÀrVÆue
 
TIM_SET_ICPRESCALERVALUE


	)

2839 
	#__HAL_TIM_Re£tICPªsˇÀrVÆue
 
TIM_RESET_ICPRESCALERVALUE


	)

2841 
	#TIM_GET_ITSTATUS
 
__HAL_TIM_GET_IT_SOURCE


	)

2842 
	#TIM_GET_CLEAR_IT
 
__HAL_TIM_CLEAR_IT


	)

2844 
	#__HAL_TIM_GET_ITSTATUS
 
__HAL_TIM_GET_IT_SOURCE


	)

2846 
	#__HAL_TIM_DIRECTION_STATUS
 
__HAL_TIM_IS_TIM_COUNTING_DOWN


	)

2847 
	#__HAL_TIM_PRESCALER
 
__HAL_TIM_SET_PRESCALER


	)

2848 
	#__HAL_TIM_SëCou¡î
 
__HAL_TIM_SET_COUNTER


	)

2849 
	#__HAL_TIM_GëCou¡î
 
__HAL_TIM_GET_COUNTER


	)

2850 
	#__HAL_TIM_SëAut‹ñﬂd
 
__HAL_TIM_SET_AUTORELOAD


	)

2851 
	#__HAL_TIM_GëAut‹ñﬂd
 
__HAL_TIM_GET_AUTORELOAD


	)

2852 
	#__HAL_TIM_SëClockDivisi⁄
 
__HAL_TIM_SET_CLOCKDIVISION


	)

2853 
	#__HAL_TIM_GëClockDivisi⁄
 
__HAL_TIM_GET_CLOCKDIVISION


	)

2854 
	#__HAL_TIM_SëICPªsˇÀr
 
__HAL_TIM_SET_ICPRESCALER


	)

2855 
	#__HAL_TIM_GëICPªsˇÀr
 
__HAL_TIM_GET_ICPRESCALER


	)

2856 
	#__HAL_TIM_SëCom∑ª
 
__HAL_TIM_SET_COMPARE


	)

2857 
	#__HAL_TIM_GëCom∑ª
 
__HAL_TIM_GET_COMPARE


	)

2859 
	#IS_TIM_INTERNAL_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
) || \

2860 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

2861 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

2862 ((
SELECTION
Ë=
TIM_TS_ITR3
))

	)

2864 
	#IS_TIM_PWMI_CHANNELS
(
CHANNEL
Ë(((CHANNELË=
TIM_CHANNEL_1
) || \

2865 ((
CHANNEL
Ë=
TIM_CHANNEL_2
))

	)

2867 
	#TIM_OUTPUTNSTATE_ENABLE
 (
TIM_CCER_CC1NE
)

	)

2869 
	#IS_TIM_OUTPUTN_STATE
(
STATE
Ë(((STATEË=
TIM_OUTPUTNSTATE_DISABLE
) || \

2870 ((
STATE
Ë=
TIM_OUTPUTNSTATE_ENABLE
))

	)

2872 
	#IS_TIM_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_OUTPUTSTATE_DISABLE
) || \

2873 ((
STATE
Ë=
TIM_OUTPUTSTATE_ENABLE
))

	)

2882 
	#__HAL_ETH_EXTI_ENABLE_IT
 
__HAL_ETH_WAKEUP_EXTI_ENABLE_IT


	)

2883 
	#__HAL_ETH_EXTI_DISABLE_IT
 
__HAL_ETH_WAKEUP_EXTI_DISABLE_IT


	)

2884 
	#__HAL_ETH_EXTI_GET_FLAG
 
__HAL_ETH_WAKEUP_EXTI_GET_FLAG


	)

2885 
	#__HAL_ETH_EXTI_CLEAR_FLAG
 
__HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG


	)

2886 
	#__HAL_ETH_EXTI_SET_RISING_EGDE_TRIGGER
 
__HAL_ETH_WAKEUP_EXTI_ENABLE_RISING_EDGE_TRIGGER


	)

2887 
	#__HAL_ETH_EXTI_SET_FALLING_EGDE_TRIGGER
 
__HAL_ETH_WAKEUP_EXTI_ENABLE_FALLING_EDGE_TRIGGER


	)

2888 
	#__HAL_ETH_EXTI_SET_FALLINGRISING_TRIGGER
 
__HAL_ETH_WAKEUP_EXTI_ENABLE_FALLINGRISING_TRIGGER


	)

2890 
	#ETH_PROMISCIOUSMODE_ENABLE
 
ETH_PROMISCUOUS_MODE_ENABLE


	)

2891 
	#ETH_PROMISCIOUSMODE_DISABLE
 
ETH_PROMISCUOUS_MODE_DISABLE


	)

2892 
	#IS_ETH_PROMISCIOUS_MODE
 
IS_ETH_PROMISCUOUS_MODE


	)

2900 
	#__HAL_LTDC_LAYER
 
LTDC_LAYER


	)

2908 
	#SAI_OUTPUTDRIVE_DISABLED
 
SAI_OUTPUTDRIVE_DISABLE


	)

2909 
	#SAI_OUTPUTDRIVE_ENABLED
 
SAI_OUTPUTDRIVE_ENABLE


	)

2910 
	#SAI_MASTERDIVIDER_ENABLED
 
SAI_MASTERDIVIDER_ENABLE


	)

2911 
	#SAI_MASTERDIVIDER_DISABLED
 
SAI_MASTERDIVIDER_DISABLE


	)

2912 
	#SAI_STREOMODE
 
SAI_STEREOMODE


	)

2913 
	#SAI_FIFOSètus_Em±y
 
SAI_FIFOSTATUS_EMPTY


	)

2914 
	#SAI_FIFOSètus_Less1Qu¨ãrFuŒ
 
SAI_FIFOSTATUS_LESS1QUARTERFULL


	)

2915 
	#SAI_FIFOSètus_1Qu¨ãrFuŒ
 
SAI_FIFOSTATUS_1QUARTERFULL


	)

2916 
	#SAI_FIFOSètus_HÆfFuŒ
 
SAI_FIFOSTATUS_HALFFULL


	)

2917 
	#SAI_FIFOSètus_3Qu¨ãrsFuŒ
 
SAI_FIFOSTATUS_3QUARTERFULL


	)

2918 
	#SAI_FIFOSètus_FuŒ
 
SAI_FIFOSTATUS_FULL


	)

2919 
	#IS_SAI_BLOCK_MONO_STREO_MODE
 
IS_SAI_BLOCK_MONO_STEREO_MODE


	)

2934 #ifde‡
__˝lu•lus


	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Inc\stm32f1xx_hal.h

40 #i‚de‡
__STM32F1xx_HAL_H


41 
	#__STM32F1xx_HAL_H


	)

43 #ifde‡
__˝lu•lus


48 
	~"°m32f1xx_hÆ_c⁄f.h
"

83 
	#__HAL_DBGMCU_FREEZE_TIM2
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM2_STOP
)

	)

84 
	#__HAL_DBGMCU_UNFREEZE_TIM2
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM2_STOP
)

	)

89 
	#__HAL_DBGMCU_FREEZE_TIM3
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM3_STOP
)

	)

90 
	#__HAL_DBGMCU_UNFREEZE_TIM3
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM3_STOP
)

	)

92 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM4_STOP
)

96 
	#__HAL_DBGMCU_FREEZE_TIM4
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM4_STOP
)

	)

97 
	#__HAL_DBGMCU_UNFREEZE_TIM4
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM4_STOP
)

	)

100 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM5_STOP
)

104 
	#__HAL_DBGMCU_FREEZE_TIM5
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM5_STOP
)

	)

105 
	#__HAL_DBGMCU_UNFREEZE_TIM5
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM5_STOP
)

	)

108 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM6_STOP
)

112 
	#__HAL_DBGMCU_FREEZE_TIM6
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM6_STOP
)

	)

113 
	#__HAL_DBGMCU_UNFREEZE_TIM6
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM6_STOP
)

	)

116 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM7_STOP
)

120 
	#__HAL_DBGMCU_FREEZE_TIM7
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM7_STOP
)

	)

121 
	#__HAL_DBGMCU_UNFREEZE_TIM7
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM7_STOP
)

	)

124 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM12_STOP
)

128 
	#__HAL_DBGMCU_FREEZE_TIM12
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM12_STOP
)

	)

129 
	#__HAL_DBGMCU_UNFREEZE_TIM12
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM12_STOP
)

	)

132 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM13_STOP
)

136 
	#__HAL_DBGMCU_FREEZE_TIM13
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM13_STOP
)

	)

137 
	#__HAL_DBGMCU_UNFREEZE_TIM13
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM13_STOP
)

	)

140 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM14_STOP
)

144 
	#__HAL_DBGMCU_FREEZE_TIM14
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM14_STOP
)

	)

145 
	#__HAL_DBGMCU_UNFREEZE_TIM14
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM14_STOP
)

	)

151 
	#__HAL_DBGMCU_FREEZE_WWDG
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_WWDG_STOP
)

	)

152 
	#__HAL_DBGMCU_UNFREEZE_WWDG
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_WWDG_STOP
)

	)

157 
	#__HAL_DBGMCU_FREEZE_IWDG
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_IWDG_STOP
)

	)

158 
	#__HAL_DBGMCU_UNFREEZE_IWDG
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_IWDG_STOP
)

	)

163 
	#__HAL_DBGMCU_FREEZE_I2C1_TIMEOUT
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT
)

	)

164 
	#__HAL_DBGMCU_UNFREEZE_I2C1_TIMEOUT
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT
)

	)

166 #i‡
deföed
 (
DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT
)

170 
	#__HAL_DBGMCU_FREEZE_I2C2_TIMEOUT
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT
)

	)

171 
	#__HAL_DBGMCU_UNFREEZE_I2C2_TIMEOUT
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT
)

	)

174 #i‡
deföed
 (
DBGMCU_CR_DBG_CAN1_STOP
)

178 
	#__HAL_DBGMCU_FREEZE_CAN1
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_CAN1_STOP
)

	)

179 
	#__HAL_DBGMCU_UNFREEZE_CAN1
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_CAN1_STOP
)

	)

182 #i‡
deföed
 (
DBGMCU_CR_DBG_CAN2_STOP
)

186 
	#__HAL_DBGMCU_FREEZE_CAN2
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_CAN2_STOP
)

	)

187 
	#__HAL_DBGMCU_UNFREEZE_CAN2
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_CAN2_STOP
)

	)

191 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM1_STOP
)

195 
	#__HAL_DBGMCU_FREEZE_TIM1
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM1_STOP
)

	)

196 
	#__HAL_DBGMCU_UNFREEZE_TIM1
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM1_STOP
)

	)

199 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM8_STOP
)

203 
	#__HAL_DBGMCU_FREEZE_TIM8
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM8_STOP
)

	)

204 
	#__HAL_DBGMCU_UNFREEZE_TIM8
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM8_STOP
)

	)

207 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM9_STOP
)

211 
	#__HAL_DBGMCU_FREEZE_TIM9
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM9_STOP
)

	)

212 
	#__HAL_DBGMCU_UNFREEZE_TIM9
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM9_STOP
)

	)

215 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM10_STOP
)

219 
	#__HAL_DBGMCU_FREEZE_TIM10
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM10_STOP
)

	)

220 
	#__HAL_DBGMCU_UNFREEZE_TIM10
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM10_STOP
)

	)

223 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM11_STOP
)

227 
	#__HAL_DBGMCU_FREEZE_TIM11
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM11_STOP
)

	)

228 
	#__HAL_DBGMCU_UNFREEZE_TIM11
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM11_STOP
)

	)

232 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM15_STOP
)

236 
	#__HAL_DBGMCU_FREEZE_TIM15
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM15_STOP
)

	)

237 
	#__HAL_DBGMCU_UNFREEZE_TIM15
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM15_STOP
)

	)

240 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM16_STOP
)

244 
	#__HAL_DBGMCU_FREEZE_TIM16
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM16_STOP
)

	)

245 
	#__HAL_DBGMCU_UNFREEZE_TIM16
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM16_STOP
)

	)

248 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM17_STOP
)

252 
	#__HAL_DBGMCU_FREEZE_TIM17
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM17_STOP
)

	)

253 
	#__HAL_DBGMCU_UNFREEZE_TIM17
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM17_STOP
)

	)

275 
HAL_SètusTy≥Def
 
HAL_Inô
();

276 
HAL_SètusTy≥Def
 
HAL_DeInô
();

277 
HAL_M•Inô
();

278 
HAL_M•DeInô
();

279 
HAL_SètusTy≥Def
 
HAL_InôTick
 (
uöt32_t
 
TickPri‹ôy
);

290 
HAL_IncTick
();

291 
HAL_Dñay
(
__IO
 
uöt32_t
 
Dñay
);

292 
uöt32_t
 
HAL_GëTick
();

293 
HAL_Su•ídTick
();

294 
HAL_ResumeTick
();

295 
uöt32_t
 
HAL_GëHÆVîsi⁄
();

296 
uöt32_t
 
HAL_GëREVID
();

297 
uöt32_t
 
HAL_GëDEVID
();

298 
HAL_DBGMCU_E«bÀDBGSÀïMode
();

299 
HAL_DBGMCU_DißbÀDBGSÀïMode
();

300 
HAL_DBGMCU_E«bÀDBGSt›Mode
();

301 
HAL_DBGMCU_DißbÀDBGSt›Mode
();

302 
HAL_DBGMCU_E«bÀDBGSèndbyMode
();

303 
HAL_DBGMCU_DißbÀDBGSèndbyMode
();

322 #ifde‡
__˝lu•lus


	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Inc\stm32f1xx_hal_cortex.h

39 #i‚de‡
__STM32F1xx_HAL_CORTEX_H


40 
	#__STM32F1xx_HAL_CORTEX_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f1xx_hÆ_def.h
"

61 #i‡(
__MPU_PRESENT
 == 1)

68 
uöt8_t
 
E«bÀ
;

70 
uöt8_t
 
Numbî
;

72 
uöt32_t
 
Ba£Addªss
;

73 
uöt8_t
 
Size
;

75 
uöt8_t
 
SubRegi⁄DißbÀ
;

77 
uöt8_t
 
Ty≥ExtFõld
;

79 
uöt8_t
 
Ac˚ssPîmissi⁄
;

81 
uöt8_t
 
DißbÀExec
;

83 
uöt8_t
 
IsSh¨óbÀ
;

85 
uöt8_t
 
IsCachóbÀ
;

87 
uöt8_t
 
IsBuf„øbÀ
;

89 }
	tMPU_Regi⁄_InôTy≥Def
;

109 
	#NVIC_PRIORITYGROUP_0
 ((
uöt32_t
)0x00000007Ë

	)

111 
	#NVIC_PRIORITYGROUP_1
 ((
uöt32_t
)0x00000006Ë

	)

113 
	#NVIC_PRIORITYGROUP_2
 ((
uöt32_t
)0x00000005Ë

	)

115 
	#NVIC_PRIORITYGROUP_3
 ((
uöt32_t
)0x00000004Ë

	)

117 
	#NVIC_PRIORITYGROUP_4
 ((
uöt32_t
)0x00000003Ë

	)

126 
	#SYSTICK_CLKSOURCE_HCLK_DIV8
 ((
uöt32_t
)0x00000000)

	)

127 
	#SYSTICK_CLKSOURCE_HCLK
 ((
uöt32_t
)0x00000004)

	)

133 #i‡(
__MPU_PRESENT
 == 1)

137 
	#MPU_HFNMI_PRIVDEF_NONE
 ((
uöt32_t
)0x00000000)

	)

138 
	#MPU_HARDFAULT_NMI
 ((
uöt32_t
)0x00000002)

	)

139 
	#MPU_PRIVILEGED_DEFAULT
 ((
uöt32_t
)0x00000004)

	)

140 
	#MPU_HFNMI_PRIVDEF
 ((
uöt32_t
)0x00000006)

	)

148 
	#MPU_REGION_ENABLE
 ((
uöt8_t
)0x01)

	)

149 
	#MPU_REGION_DISABLE
 ((
uöt8_t
)0x00)

	)

157 
	#MPU_INSTRUCTION_ACCESS_ENABLE
 ((
uöt8_t
)0x00)

	)

158 
	#MPU_INSTRUCTION_ACCESS_DISABLE
 ((
uöt8_t
)0x01)

	)

166 
	#MPU_ACCESS_SHAREABLE
 ((
uöt8_t
)0x01)

	)

167 
	#MPU_ACCESS_NOT_SHAREABLE
 ((
uöt8_t
)0x00)

	)

175 
	#MPU_ACCESS_CACHEABLE
 ((
uöt8_t
)0x01)

	)

176 
	#MPU_ACCESS_NOT_CACHEABLE
 ((
uöt8_t
)0x00)

	)

184 
	#MPU_ACCESS_BUFFERABLE
 ((
uöt8_t
)0x01)

	)

185 
	#MPU_ACCESS_NOT_BUFFERABLE
 ((
uöt8_t
)0x00)

	)

193 
	#MPU_TEX_LEVEL0
 ((
uöt8_t
)0x00)

	)

194 
	#MPU_TEX_LEVEL1
 ((
uöt8_t
)0x01)

	)

195 
	#MPU_TEX_LEVEL2
 ((
uöt8_t
)0x02)

	)

203 
	#MPU_REGION_SIZE_32B
 ((
uöt8_t
)0x04)

	)

204 
	#MPU_REGION_SIZE_64B
 ((
uöt8_t
)0x05)

	)

205 
	#MPU_REGION_SIZE_128B
 ((
uöt8_t
)0x06)

	)

206 
	#MPU_REGION_SIZE_256B
 ((
uöt8_t
)0x07)

	)

207 
	#MPU_REGION_SIZE_512B
 ((
uöt8_t
)0x08)

	)

208 
	#MPU_REGION_SIZE_1KB
 ((
uöt8_t
)0x09)

	)

209 
	#MPU_REGION_SIZE_2KB
 ((
uöt8_t
)0x0A)

	)

210 
	#MPU_REGION_SIZE_4KB
 ((
uöt8_t
)0x0B)

	)

211 
	#MPU_REGION_SIZE_8KB
 ((
uöt8_t
)0x0C)

	)

212 
	#MPU_REGION_SIZE_16KB
 ((
uöt8_t
)0x0D)

	)

213 
	#MPU_REGION_SIZE_32KB
 ((
uöt8_t
)0x0E)

	)

214 
	#MPU_REGION_SIZE_64KB
 ((
uöt8_t
)0x0F)

	)

215 
	#MPU_REGION_SIZE_128KB
 ((
uöt8_t
)0x10)

	)

216 
	#MPU_REGION_SIZE_256KB
 ((
uöt8_t
)0x11)

	)

217 
	#MPU_REGION_SIZE_512KB
 ((
uöt8_t
)0x12)

	)

218 
	#MPU_REGION_SIZE_1MB
 ((
uöt8_t
)0x13)

	)

219 
	#MPU_REGION_SIZE_2MB
 ((
uöt8_t
)0x14)

	)

220 
	#MPU_REGION_SIZE_4MB
 ((
uöt8_t
)0x15)

	)

221 
	#MPU_REGION_SIZE_8MB
 ((
uöt8_t
)0x16)

	)

222 
	#MPU_REGION_SIZE_16MB
 ((
uöt8_t
)0x17)

	)

223 
	#MPU_REGION_SIZE_32MB
 ((
uöt8_t
)0x18)

	)

224 
	#MPU_REGION_SIZE_64MB
 ((
uöt8_t
)0x19)

	)

225 
	#MPU_REGION_SIZE_128MB
 ((
uöt8_t
)0x1A)

	)

226 
	#MPU_REGION_SIZE_256MB
 ((
uöt8_t
)0x1B)

	)

227 
	#MPU_REGION_SIZE_512MB
 ((
uöt8_t
)0x1C)

	)

228 
	#MPU_REGION_SIZE_1GB
 ((
uöt8_t
)0x1D)

	)

229 
	#MPU_REGION_SIZE_2GB
 ((
uöt8_t
)0x1E)

	)

230 
	#MPU_REGION_SIZE_4GB
 ((
uöt8_t
)0x1F)

	)

238 
	#MPU_REGION_NO_ACCESS
 ((
uöt8_t
)0x00)

	)

239 
	#MPU_REGION_PRIV_RW
 ((
uöt8_t
)0x01)

	)

240 
	#MPU_REGION_PRIV_RW_URO
 ((
uöt8_t
)0x02)

	)

241 
	#MPU_REGION_FULL_ACCESS
 ((
uöt8_t
)0x03)

	)

242 
	#MPU_REGION_PRIV_RO
 ((
uöt8_t
)0x05)

	)

243 
	#MPU_REGION_PRIV_RO_URO
 ((
uöt8_t
)0x06)

	)

251 
	#MPU_REGION_NUMBER0
 ((
uöt8_t
)0x00)

	)

252 
	#MPU_REGION_NUMBER1
 ((
uöt8_t
)0x01)

	)

253 
	#MPU_REGION_NUMBER2
 ((
uöt8_t
)0x02)

	)

254 
	#MPU_REGION_NUMBER3
 ((
uöt8_t
)0x03)

	)

255 
	#MPU_REGION_NUMBER4
 ((
uöt8_t
)0x04)

	)

256 
	#MPU_REGION_NUMBER5
 ((
uöt8_t
)0x05)

	)

257 
	#MPU_REGION_NUMBER6
 ((
uöt8_t
)0x06)

	)

258 
	#MPU_REGION_NUMBER7
 ((
uöt8_t
)0x07)

	)

277 
	#IS_NVIC_PRIORITY_GROUP
(
GROUP
Ë(((GROUPË=
NVIC_PRIORITYGROUP_0
) || \

278 ((
GROUP
Ë=
NVIC_PRIORITYGROUP_1
) || \

279 ((
GROUP
Ë=
NVIC_PRIORITYGROUP_2
) || \

280 ((
GROUP
Ë=
NVIC_PRIORITYGROUP_3
) || \

281 ((
GROUP
Ë=
NVIC_PRIORITYGROUP_4
))

	)

283 
	#IS_NVIC_PREEMPTION_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

285 
	#IS_NVIC_SUB_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

287 
	#IS_NVIC_DEVICE_IRQ
(
IRQ
Ë((IRQË>0x00)

	)

296 
	#IS_SYSTICK_CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
SYSTICK_CLKSOURCE_HCLK
) || \

297 ((
SOURCE
Ë=
SYSTICK_CLKSOURCE_HCLK_DIV8
))

	)

301 #i‡(
__MPU_PRESENT
 == 1)

302 
	#IS_MPU_REGION_ENABLE
(
STATE
Ë(((STATEË=
MPU_REGION_ENABLE
) || \

303 ((
STATE
Ë=
MPU_REGION_DISABLE
))

	)

305 
	#IS_MPU_INSTRUCTION_ACCESS
(
STATE
Ë(((STATEË=
MPU_INSTRUCTION_ACCESS_ENABLE
) || \

306 ((
STATE
Ë=
MPU_INSTRUCTION_ACCESS_DISABLE
))

	)

308 
	#IS_MPU_ACCESS_SHAREABLE
(
STATE
Ë(((STATEË=
MPU_ACCESS_SHAREABLE
) || \

309 ((
STATE
Ë=
MPU_ACCESS_NOT_SHAREABLE
))

	)

311 
	#IS_MPU_ACCESS_CACHEABLE
(
STATE
Ë(((STATEË=
MPU_ACCESS_CACHEABLE
) || \

312 ((
STATE
Ë=
MPU_ACCESS_NOT_CACHEABLE
))

	)

314 
	#IS_MPU_ACCESS_BUFFERABLE
(
STATE
Ë(((STATEË=
MPU_ACCESS_BUFFERABLE
) || \

315 ((
STATE
Ë=
MPU_ACCESS_NOT_BUFFERABLE
))

	)

317 
	#IS_MPU_TEX_LEVEL
(
TYPE
Ë(((TYPEË=
MPU_TEX_LEVEL0
) || \

318 ((
TYPE
Ë=
MPU_TEX_LEVEL1
) || \

319 ((
TYPE
Ë=
MPU_TEX_LEVEL2
))

	)

321 
	#IS_MPU_REGION_PERMISSION_ATTRIBUTE
(
TYPE
Ë(((TYPEË=
MPU_REGION_NO_ACCESS
) || \

322 ((
TYPE
Ë=
MPU_REGION_PRIV_RW
) || \

323 ((
TYPE
Ë=
MPU_REGION_PRIV_RW_URO
) || \

324 ((
TYPE
Ë=
MPU_REGION_FULL_ACCESS
) || \

325 ((
TYPE
Ë=
MPU_REGION_PRIV_RO
) || \

326 ((
TYPE
Ë=
MPU_REGION_PRIV_RO_URO
))

	)

328 
	#IS_MPU_REGION_NUMBER
(
NUMBER
Ë(((NUMBERË=
MPU_REGION_NUMBER0
) || \

329 ((
NUMBER
Ë=
MPU_REGION_NUMBER1
) || \

330 ((
NUMBER
Ë=
MPU_REGION_NUMBER2
) || \

331 ((
NUMBER
Ë=
MPU_REGION_NUMBER3
) || \

332 ((
NUMBER
Ë=
MPU_REGION_NUMBER4
) || \

333 ((
NUMBER
Ë=
MPU_REGION_NUMBER5
) || \

334 ((
NUMBER
Ë=
MPU_REGION_NUMBER6
) || \

335 ((
NUMBER
Ë=
MPU_REGION_NUMBER7
))

	)

337 
	#IS_MPU_REGION_SIZE
(
SIZE
Ë(((SIZEË=
MPU_REGION_SIZE_32B
) || \

338 ((
SIZE
Ë=
MPU_REGION_SIZE_64B
) || \

339 ((
SIZE
Ë=
MPU_REGION_SIZE_128B
) || \

340 ((
SIZE
Ë=
MPU_REGION_SIZE_256B
) || \

341 ((
SIZE
Ë=
MPU_REGION_SIZE_512B
) || \

342 ((
SIZE
Ë=
MPU_REGION_SIZE_1KB
) || \

343 ((
SIZE
Ë=
MPU_REGION_SIZE_2KB
) || \

344 ((
SIZE
Ë=
MPU_REGION_SIZE_4KB
) || \

345 ((
SIZE
Ë=
MPU_REGION_SIZE_8KB
) || \

346 ((
SIZE
Ë=
MPU_REGION_SIZE_16KB
) || \

347 ((
SIZE
Ë=
MPU_REGION_SIZE_32KB
) || \

348 ((
SIZE
Ë=
MPU_REGION_SIZE_64KB
) || \

349 ((
SIZE
Ë=
MPU_REGION_SIZE_128KB
) || \

350 ((
SIZE
Ë=
MPU_REGION_SIZE_256KB
) || \

351 ((
SIZE
Ë=
MPU_REGION_SIZE_512KB
) || \

352 ((
SIZE
Ë=
MPU_REGION_SIZE_1MB
) || \

353 ((
SIZE
Ë=
MPU_REGION_SIZE_2MB
) || \

354 ((
SIZE
Ë=
MPU_REGION_SIZE_4MB
) || \

355 ((
SIZE
Ë=
MPU_REGION_SIZE_8MB
) || \

356 ((
SIZE
Ë=
MPU_REGION_SIZE_16MB
) || \

357 ((
SIZE
Ë=
MPU_REGION_SIZE_32MB
) || \

358 ((
SIZE
Ë=
MPU_REGION_SIZE_64MB
) || \

359 ((
SIZE
Ë=
MPU_REGION_SIZE_128MB
) || \

360 ((
SIZE
Ë=
MPU_REGION_SIZE_256MB
) || \

361 ((
SIZE
Ë=
MPU_REGION_SIZE_512MB
) || \

362 ((
SIZE
Ë=
MPU_REGION_SIZE_1GB
) || \

363 ((
SIZE
Ë=
MPU_REGION_SIZE_2GB
) || \

364 ((
SIZE
Ë=
MPU_REGION_SIZE_4GB
))

	)

366 
	#IS_MPU_SUB_REGION_DISABLE
(
SUBREGION
Ë((SUBREGIONË< (
uöt16_t
)0x00FF)

	)

382 
HAL_NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
);

383 
HAL_NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
);

384 
HAL_NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
);

385 
HAL_NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
);

386 
HAL_NVIC_Sy°emRe£t
();

387 
uöt32_t
 
HAL_SYSTICK_C⁄fig
(uöt32_à
TicksNumb
);

396 #i‡(
__MPU_PRESENT
 == 1)

397 
HAL_MPU_C⁄figRegi⁄
(
MPU_Regi⁄_InôTy≥Def
 *
MPU_Inô
);

399 
uöt32_t
 
HAL_NVIC_GëPri‹ôyGroupög
();

400 
HAL_NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
);

401 
uöt32_t
 
HAL_NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
);

402 
HAL_NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
);

403 
HAL_NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
);

404 
uöt32_t
 
HAL_NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
);

405 
HAL_SYSTICK_CLKSour˚C⁄fig
(
uöt32_t
 
CLKSour˚
);

406 
HAL_SYSTICK_IRQH™dÀr
();

407 
HAL_SYSTICK_CÆlback
();

422 #i‡(
__MPU_PRESENT
 == 1)

427 
__STATIC_INLINE
 
HAL_MPU_DißbÀ
()

430 
SCB
->
SHCSR
 &~
SCB_SHCSR_MEMFAULTENA_Msk
;

433 
MPU
->
CTRL
 &~
MPU_CTRL_ENABLE_Msk
;

447 
__STATIC_INLINE
 
HAL_MPU_E«bÀ
(
uöt32_t
 
MPU_C⁄åﬁ
)

450 
MPU
->
CTRL
 = 
MPU_C⁄åﬁ
 | 
MPU_CTRL_ENABLE_Msk
;

453 
SCB
->
SHCSR
 |
SCB_SHCSR_MEMFAULTENA_Msk
;

469 #ifde‡
__˝lu•lus


	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Inc\stm32f1xx_hal_def.h

40 #i‚de‡
__STM32F1xx_HAL_DEF


41 
	#__STM32F1xx_HAL_DEF


	)

43 #ifde‡
__˝lu•lus


48 
	~"°m32f1xx.h
"

49 
	~"Legacy/°m32_hÆ_Àgacy.h
"

50 
	~<°dio.h
>

59 
HAL_OK
 = 0x00,

60 
HAL_ERROR
 = 0x01,

61 
HAL_BUSY
 = 0x02,

62 
HAL_TIMEOUT
 = 0x03

63 } 
	tHAL_SètusTy≥Def
;

70 
HAL_UNLOCKED
 = 0x00,

71 
HAL_LOCKED
 = 0x01

72 } 
	tHAL_LockTy≥Def
;

76 
	#HAL_MAX_DELAY
 0xFFFFFFFF

	)

78 
	#HAL_IS_BIT_SET
(
REG
, 
BIT
Ë(((REGË& (BIT)Ë!
RESET
)

	)

79 
	#HAL_IS_BIT_CLR
(
REG
, 
BIT
Ë(((REGË& (BIT)Ë=
RESET
)

	)

81 
	#__HAL_LINKDMA
(
__HANDLE__
, 
__PPP_DMA_FIELD_
, 
__DMA_HANDLE_
) \

83 (
__HANDLE__
)->
__PPP_DMA_FIELD_
 = &(
__DMA_HANDLE_
); \

84 (
__DMA_HANDLE_
).
P¨ít
 = (
__HANDLE__
); \

85 } 0)

	)

87 
	#UNUSED
(
x
Ë(()(x))

	)

104 
	#__HAL_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 0)

	)

106 #i‡(
USE_RTOS
 == 1)

109 
	#__HAL_LOCK
(
__HANDLE__
) \

111 if((
__HANDLE__
)->
Lock
 =
HAL_LOCKED
) \

113  
HAL_BUSY
; \

117 (
__HANDLE__
)->
Lock
 = 
HAL_LOCKED
; \

119 }0)

	)

121 
	#__HAL_UNLOCK
(
__HANDLE__
) \

123 (
__HANDLE__
)->
Lock
 = 
HAL_UNLOCKED
; \

124 }0)

	)

127 #i‡ 
deföed
 ( 
__GNUC__
 )

128 #i‚de‡
__wók


129 
	#__wók
 
	`__©åibuã__
((
wók
))

	)

131 #i‚de‡
__∑cked


132 
	#__∑cked
 
	`__©åibuã__
((
__∑cked__
))

	)

138 #i‡
deföed
 (
__GNUC__
)

139 #i‚de‡
__ALIGN_END


140 
	#__ALIGN_END
 
	`__©åibuã__
 ((
	`Æig√d
 (4)))

	)

142 #i‚de‡
__ALIGN_BEGIN


143 
	#__ALIGN_BEGIN


	)

146 #i‚de‡
__ALIGN_END


147 
	#__ALIGN_END


	)

149 #i‚de‡
__ALIGN_BEGIN


150 #i‡
deföed
 (
__CC_ARM
)

151 
	#__ALIGN_BEGIN
 
	`__Æign
(4)

	)

152 #ñi‡
deföed
 (
__ICCARM__
)

153 
	#__ALIGN_BEGIN


	)

161 #i‡
deföed
 ( 
__CC_ARM
 )

171 
	#__RAM_FUNC
 
HAL_SètusTy≥Def


	)

173 #ñi‡
deföed
 ( 
__ICCARM__
 )

178 
	#__RAM_FUNC
 
__ømfunc
 
HAL_SètusTy≥Def


	)

180 #ñi‡
deföed
 ( 
__GNUC__
 )

186 
	#__RAM_FUNC
 
HAL_SètusTy≥Def
 
	`__©åibuã__
((
	`£˘i⁄
(".RamFunc")))

	)

193 #i‡
deföed
 ( 
__CC_ARM
 ) || deföed ( 
__GNUC__
 )

197 
	#__NOINLINE
 
	`__©åibuã__
 ( (
noölöe
Ë)

	)

199 #ñi‡
deföed
 ( 
__ICCARM__
 )

203 
	#__NOINLINE
 
	`_Pøgma
("›timizêno_ölöe")

	)

208 #ifde‡
__˝lu•lus


	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Inc\stm32f1xx_hal_dma_ex.h

39 #i‚de‡
__STM32F1xx_HAL_DMA_EX_H


40 
	#__STM32F1xx_HAL_DMA_EX_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f1xx_hÆ_def.h
"

64 #i‡
deföed
 (
STM32F100xE
Ë|| deföed (
STM32F101xE
Ë|| deföed (
STM32F101xG
Ë|| deföed (
STM32F103xE
) || \

65 
deföed
 (
STM32F103xG
Ë|| deföed (
STM32F105xC
Ë|| deföed (
STM32F107xC
)

75 
	#__HAL_DMA_GET_TC_FLAG_INDEX
(
__HANDLE__
) \

76 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l1
))? 
DMA_FLAG_TC1
 :\

77 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l2
))? 
DMA_FLAG_TC2
 :\

78 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l3
))? 
DMA_FLAG_TC3
 :\

79 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l4
))? 
DMA_FLAG_TC4
 :\

80 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l5
))? 
DMA_FLAG_TC5
 :\

81 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l6
))? 
DMA_FLAG_TC6
 :\

82 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l7
))? 
DMA_FLAG_TC7
 :\

83 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l1
))? 
DMA_FLAG_TC1
 :\

84 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l2
))? 
DMA_FLAG_TC2
 :\

85 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l3
))? 
DMA_FLAG_TC3
 :\

86 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l4
))? 
DMA_FLAG_TC4
 :\

87 
DMA_FLAG_TC5
)

	)

94 
	#__HAL_DMA_GET_HT_FLAG_INDEX
(
__HANDLE__
)\

95 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l1
))? 
DMA_FLAG_HT1
 :\

96 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l2
))? 
DMA_FLAG_HT2
 :\

97 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l3
))? 
DMA_FLAG_HT3
 :\

98 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l4
))? 
DMA_FLAG_HT4
 :\

99 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l5
))? 
DMA_FLAG_HT5
 :\

100 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l6
))? 
DMA_FLAG_HT6
 :\

101 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l7
))? 
DMA_FLAG_HT7
 :\

102 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l1
))? 
DMA_FLAG_HT1
 :\

103 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l2
))? 
DMA_FLAG_HT2
 :\

104 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l3
))? 
DMA_FLAG_HT3
 :\

105 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l4
))? 
DMA_FLAG_HT4
 :\

106 
DMA_FLAG_HT5
)

	)

113 
	#__HAL_DMA_GET_TE_FLAG_INDEX
(
__HANDLE__
)\

114 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l1
))? 
DMA_FLAG_TE1
 :\

115 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l2
))? 
DMA_FLAG_TE2
 :\

116 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l3
))? 
DMA_FLAG_TE3
 :\

117 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l4
))? 
DMA_FLAG_TE4
 :\

118 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l5
))? 
DMA_FLAG_TE5
 :\

119 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l6
))? 
DMA_FLAG_TE6
 :\

120 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l7
))? 
DMA_FLAG_TE7
 :\

121 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l1
))? 
DMA_FLAG_TE1
 :\

122 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l2
))? 
DMA_FLAG_TE2
 :\

123 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l3
))? 
DMA_FLAG_TE3
 :\

124 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l4
))? 
DMA_FLAG_TE4
 :\

125 
DMA_FLAG_TE5
)

	)

138 
	#__HAL_DMA_GET_FLAG
(
__HANDLE__
, 
__FLAG__
)\

139 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë> (uöt32_t)
DMA1_Ch™√l7
)? (
DMA2
->
ISR
 & (
__FLAG__
)) :\

140 (
DMA1
->
ISR
 & (
__FLAG__
)))

	)

153 
	#__HAL_DMA_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
) \

154 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë> (uöt32_t)
DMA1_Ch™√l7
)? (
DMA2
->
IFCR
 = (
__FLAG__
)) :\

155 (
DMA1
->
IFCR
 = (
__FLAG__
)))

	)

171 
	#__HAL_DMA_GET_TC_FLAG_INDEX
(
__HANDLE__
) \

172 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l1
))? 
DMA_FLAG_TC1
 :\

173 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l2
))? 
DMA_FLAG_TC2
 :\

174 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l3
))? 
DMA_FLAG_TC3
 :\

175 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l4
))? 
DMA_FLAG_TC4
 :\

176 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l5
))? 
DMA_FLAG_TC5
 :\

177 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l6
))? 
DMA_FLAG_TC6
 :\

178 
DMA_FLAG_TC7
)

	)

185 
	#__HAL_DMA_GET_HT_FLAG_INDEX
(
__HANDLE__
)\

186 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l1
))? 
DMA_FLAG_HT1
 :\

187 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l2
))? 
DMA_FLAG_HT2
 :\

188 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l3
))? 
DMA_FLAG_HT3
 :\

189 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l4
))? 
DMA_FLAG_HT4
 :\

190 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l5
))? 
DMA_FLAG_HT5
 :\

191 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l6
))? 
DMA_FLAG_HT6
 :\

192 
DMA_FLAG_HT7
)

	)

199 
	#__HAL_DMA_GET_TE_FLAG_INDEX
(
__HANDLE__
)\

200 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l1
))? 
DMA_FLAG_TE1
 :\

201 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l2
))? 
DMA_FLAG_TE2
 :\

202 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l3
))? 
DMA_FLAG_TE3
 :\

203 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l4
))? 
DMA_FLAG_TE4
 :\

204 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l5
))? 
DMA_FLAG_TE5
 :\

205 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l6
))? 
DMA_FLAG_TE6
 :\

206 
DMA_FLAG_TE7
)

	)

220 
	#__HAL_DMA_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(
DMA1
->
ISR
 & (__FLAG__))

	)

233 
	#__HAL_DMA_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(
DMA1
->
IFCR
 = (__FLAG__))

	)

253 #ifde‡
__˝lu•lus


	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Inc\stm32f1xx_hal_flash.h

39 #i‚de‡
__STM32F1xx_HAL_FLASH_H


40 
	#__STM32F1xx_HAL_FLASH_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f1xx_hÆ_def.h
"

60 
	#FLASH_TIMEOUT_VALUE
 ((
uöt32_t
)50000)

	)

69 
	#IS_FLASH_TYPEPROGRAM
(
VALUE
Ë(((VALUEË=
FLASH_TYPEPROGRAM_HALFWORD
) || \

70 ((
VALUE
Ë=
FLASH_TYPEPROGRAM_WORD
) || \

71 ((
VALUE
Ë=
FLASH_TYPEPROGRAM_DOUBLEWORD
))

	)

73 #i‡ 
deföed
(
FLASH_ACR_LATENCY
)

74 
	#IS_FLASH_LATENCY
(
__LATENCY__
Ë(((__LATENCY__Ë=
FLASH_LATENCY_0
) || \

75 ((
__LATENCY__
Ë=
FLASH_LATENCY_1
) || \

76 ((
__LATENCY__
Ë=
FLASH_LATENCY_2
))

	)

79 
	#IS_FLASH_LATENCY
(
__LATENCY__
Ë((__LATENCY__Ë=
FLASH_LATENCY_0
)

	)

96 
FLASH_PROC_NONE
 = 0,

97 
FLASH_PROC_PAGEERASE
 = 1,

98 
FLASH_PROC_MASSERASE
 = 2,

99 
FLASH_PROC_PROGRAMHALFWORD
 = 3,

100 
FLASH_PROC_PROGRAMWORD
 = 4,

101 
FLASH_PROC_PROGRAMDOUBLEWORD
 = 5

102 } 
	tFLASH_Pro˚duªTy≥Def
;

109 
__IO
 
FLASH_Pro˚duªTy≥Def
 
Pro˚duªOnGoög
;

111 
__IO
 
uöt32_t
 
D©aRemaöög
;

113 
__IO
 
uöt32_t
 
Addªss
;

115 
__IO
 
uöt64_t
 
D©a
;

117 
HAL_LockTy≥Def
 
Lock
;

119 
__IO
 
uöt32_t
 
Eº‹Code
;

121 } 
	tFLASH_Pro˚ssTy≥Def
;

136 
	#HAL_FLASH_ERROR_NONE
 ((
uöt32_t
)0x00Ë

	)

137 
	#HAL_FLASH_ERROR_PROG
 ((
uöt32_t
)0x01Ë

	)

138 
	#HAL_FLASH_ERROR_WRP
 ((
uöt32_t
)0x02Ë

	)

139 
	#HAL_FLASH_ERROR_OPTV
 ((
uöt32_t
)0x04Ë

	)

148 
	#FLASH_TYPEPROGRAM_HALFWORD
 ((
uöt32_t
)0x01Ë

	)

149 
	#FLASH_TYPEPROGRAM_WORD
 ((
uöt32_t
)0x02Ë

	)

150 
	#FLASH_TYPEPROGRAM_DOUBLEWORD
 ((
uöt32_t
)0x03Ë

	)

156 #i‡ 
deföed
(
FLASH_ACR_LATENCY
)

160 
	#FLASH_LATENCY_0
 ((
uöt32_t
)0x00000000Ë

	)

161 
	#FLASH_LATENCY_1
 
FLASH_ACR_LATENCY_0


	)

162 
	#FLASH_LATENCY_2
 
FLASH_ACR_LATENCY_1


	)

172 
	#FLASH_LATENCY_0
 ((
uöt32_t
)0x00000000Ë

	)

201 
	#__HAL_FLASH_HALF_CYCLE_ACCESS_ENABLE
(Ë(
FLASH
->
ACR
 |
FLASH_ACR_HLFCYA
)

	)

209 
	#__HAL_FLASH_HALF_CYCLE_ACCESS_DISABLE
(Ë(
FLASH
->
ACR
 &(~
FLASH_ACR_HLFCYA
))

	)

215 #i‡
deföed
(
FLASH_ACR_LATENCY
)

227 
	#__HAL_FLASH_SET_LATENCY
(
__LATENCY__
Ë(
FLASH
->
ACR
 = (FLASH->ACR&(~
FLASH_ACR_LATENCY
)Ë| (__LATENCY__))

	)

235 
	#__HAL_FLASH_GET_LATENCY
(Ë(
	`READ_BIT
((
FLASH
->
ACR
), 
FLASH_ACR_LATENCY
))

	)

250 
	#__HAL_FLASH_PREFETCH_BUFFER_ENABLE
(Ë(
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
)

	)

256 
	#__HAL_FLASH_PREFETCH_BUFFER_DISABLE
(Ë(
FLASH
->
ACR
 &(~
FLASH_ACR_PRFTBE
))

	)

267 
	~"°m32f1xx_hÆ_Êash_ex.h
"

278 
HAL_SètusTy≥Def
 
HAL_FLASH_Progøm
(
uöt32_t
 
Ty≥Progøm
, uöt32_à
Addªss
, 
uöt64_t
 
D©a
);

279 
HAL_SètusTy≥Def
 
HAL_FLASH_Progøm_IT
(
uöt32_t
 
Ty≥Progøm
, uöt32_à
Addªss
, 
uöt64_t
 
D©a
);

282 
HAL_FLASH_IRQH™dÀr
();

284 
HAL_FLASH_EndOfO≥øti⁄CÆlback
(
uöt32_t
 
Rëu∫VÆue
);

285 
HAL_FLASH_O≥øti⁄Eº‹CÆlback
(
uöt32_t
 
Rëu∫VÆue
);

295 
HAL_SètusTy≥Def
 
HAL_FLASH_U∆ock
();

296 
HAL_SètusTy≥Def
 
HAL_FLASH_Lock
();

297 
HAL_SètusTy≥Def
 
HAL_FLASH_OB_U∆ock
();

298 
HAL_SètusTy≥Def
 
HAL_FLASH_OB_Lock
();

299 
HAL_SètusTy≥Def
 
HAL_FLASH_OB_Launch
();

309 
uöt32_t
 
HAL_FLASH_GëEº‹
();

323 
FLASH_PageEø£
(
uöt32_t
 
PageAddªss
);

324 
HAL_SètusTy≥Def
 
FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
);

325 #i‡
deföed
(
FLASH_BANK2_END
)

326 
HAL_SètusTy≥Def
 
FLASH_WaôF‹La°O≥øti⁄B™k2
(
uöt32_t
 
Timeout
);

341 #ifde‡
__˝lu•lus


	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Inc\stm32f1xx_hal_flash_ex.h

39 #i‚de‡
__STM32F1xx_HAL_FLASH_EX_H


40 
	#__STM32F1xx_HAL_FLASH_EX_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f1xx_hÆ_def.h
"

61 
	#FLASH_SIZE_DATA_REGISTER
 ((
uöt32_t
)0x1FFFF7E0)

	)

62 
	#OBR_REG_INDEX
 ((
uöt32_t
)1)

	)

63 
	#SR_FLAG_MASK
 ((
uöt32_t
)(
FLASH_SR_BSY
 | 
FLASH_SR_PGERR
 | 
FLASH_SR_WRPRTERR
 | 
FLASH_SR_EOP
))

	)

73 
	#IS_FLASH_TYPEERASE
(
VALUE
Ë(((VALUEË=
FLASH_TYPEERASE_PAGES
Ë|| ((VALUEË=
FLASH_TYPEERASE_MASSERASE
))

	)

75 
	#IS_OPTIONBYTE
(
VALUE
Ë(((VALUEË<(
OPTIONBYTE_WRP
 | 
OPTIONBYTE_RDP
 | 
OPTIONBYTE_USER
 | 
OPTIONBYTE_DATA
)))

	)

77 
	#IS_WRPSTATE
(
VALUE
Ë(((VALUEË=
OB_WRPSTATE_DISABLE
Ë|| ((VALUEË=
OB_WRPSTATE_ENABLE
))

	)

79 
	#IS_OB_RDP_LEVEL
(
LEVEL
Ë(((LEVELË=
OB_RDP_LEVEL_0
Ë|| ((LEVELË=
OB_RDP_LEVEL_1
))

	)

81 
	#IS_OB_DATA_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=
OB_DATA_ADDRESS_DATA0
Ë|| ((ADDRESSË=
OB_DATA_ADDRESS_DATA1
))

	)

83 
	#IS_OB_IWDG_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_IWDG_SW
Ë|| ((SOURCEË=
OB_IWDG_HW
))

	)

85 
	#IS_OB_STOP_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STOP_NO_RST
Ë|| ((SOURCEË=
OB_STOP_RST
))

	)

87 
	#IS_OB_STDBY_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STDBY_NO_RST
Ë|| ((SOURCEË=
OB_STDBY_RST
))

	)

89 #i‡
deföed
(
FLASH_BANK2_END
)

90 
	#IS_OB_BOOT1
(
BOOT1
Ë(((BOOT1Ë=
OB_BOOT1_RESET
Ë|| ((BOOT1Ë=
OB_BOOT1_SET
))

	)

94 #i‡(
deföed
(
STM32F101x6
Ë|| deföed(
STM32F102x6
Ë|| deföed(
STM32F103x6
))

95 
	#IS_FLASH_NB_PAGES
(
ADDRESS
,
NBPAGES
Ë(((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)Ë=0x20Ë? ((ADDRESS)+((NBPAGES)*
FLASH_PAGE_SIZE
)-1 <= 0x08007FFF) : \

96 ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <0x08003FFF))

	)

100 #i‡(
deföed
(
STM32F100xB
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103xB
))

101 
	#IS_FLASH_NB_PAGES
(
ADDRESS
,
NBPAGES
Ë(((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)Ë=0x80Ë? ((ADDRESS)+((NBPAGES)*
FLASH_PAGE_SIZE
)-1 <= 0x0801FFFF) : \

102 (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)Ë=0x40Ë? ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <= 0x0800FFFF) : \

103 (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)Ë=0x20Ë? ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <= 0x08007FFF) : \

104 ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <0x08003FFF))))

	)

108 #i‡(
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F103xE
))

109 
	#IS_FLASH_NB_PAGES
(
ADDRESS
,
NBPAGES
Ë(((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)Ë=0x200Ë? ((ADDRESS)+((NBPAGES)*
FLASH_PAGE_SIZE
)-1 <= 0x0807FFFF) : \

110 (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)Ë=0x180Ë? ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <= 0x0805FFFF) : \

111 ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <0x0803FFFF)))

	)

115 #i‡
deföed
(
FLASH_BANK2_END
)

116 
	#IS_FLASH_NB_PAGES
(
ADDRESS
,
NBPAGES
Ë(((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)Ë=0x400Ë? ((ADDRESS)+((NBPAGES)*
FLASH_PAGE_SIZE
)-1 <= 0x080FFFFF) : \

117 ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <0x080BFFFF))

	)

121 #i‡(
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
))

122 
	#IS_FLASH_NB_PAGES
(
ADDRESS
,
NBPAGES
Ë(((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)Ë=0x100Ë? ((ADDRESS)+((NBPAGES)*
FLASH_PAGE_SIZE
)-1 <= 0x0803FFFF) : \

123 (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)Ë=0x80Ë? ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <= 0x0801FFFF) : \

124 ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <0x0800FFFF)))

	)

127 
	#IS_OB_WRP
(
PAGE
Ë(((PAGEË!0x0000000))

	)

129 #i‡
deföed
(
FLASH_BANK2_END
)

130 
	#IS_FLASH_BANK
(
BANK
Ë(((BANKË=
FLASH_BANK_1
) || \

131 ((
BANK
Ë=
FLASH_BANK_2
) || \

132 ((
BANK
Ë=
FLASH_BANK_BOTH
))

	)

134 
	#IS_FLASH_BANK
(
BANK
Ë(((BANKË=
FLASH_BANK_1
))

	)

138 #i‡(
deföed
(
STM32F101x6
Ë|| deföed(
STM32F102x6
Ë|| deföed(
STM32F103x6
))

139 
	#IS_FLASH_PROGRAM_ADDRESS
(
ADDRESS
Ë(((ADDRESSË>
FLASH_BASE
Ë&& (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x20) ? \

140 ((
ADDRESS
Ë<
FLASH_BANK1_END
Ë: ((ADDRESSË<0x08003FFF)))

	)

145 #i‡(
deföed
(
STM32F100xB
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103xB
))

146 
	#IS_FLASH_PROGRAM_ADDRESS
(
ADDRESS
Ë(((ADDRESSË>
FLASH_BASE
Ë&& (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x80) ? \

147 ((
ADDRESS
Ë<
FLASH_BANK1_END
Ë: (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x40) ? \

148 ((
ADDRESS
Ë<0x0800FFFFË: (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x20) ? \

149 ((
ADDRESS
Ë<0x08007FFFË: ((ADDRESSË<0x08003FFF)))))

	)

154 #i‡(
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F103xE
))

155 
	#IS_FLASH_PROGRAM_ADDRESS
(
ADDRESS
Ë(((ADDRESSË>
FLASH_BASE
Ë&& (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x200) ? \

156 ((
ADDRESS
Ë<
FLASH_BANK1_END
Ë: (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x180) ? \

157 ((
ADDRESS
Ë<0x0805FFFFË: ((ADDRESSË<0x0803FFFF))))

	)

162 #i‡
deföed
(
FLASH_BANK2_END
)

163 
	#IS_FLASH_PROGRAM_ADDRESS
(
ADDRESS
Ë(((ADDRESSË>
FLASH_BASE
Ë&& (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x400) ? \

164 ((
ADDRESS
Ë<
FLASH_BANK2_END
Ë: ((ADDRESSË<0x080BFFFF)))

	)

169 #i‡(
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
))

170 
	#IS_FLASH_PROGRAM_ADDRESS
(
ADDRESS
Ë(((ADDRESSË>
FLASH_BASE
Ë&& (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x100) ? \

171 ((
ADDRESS
Ë<
FLASH_BANK1_END
Ë: (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x80) ? \

172 ((
ADDRESS
Ë<0x0801FFFFË: ((ADDRESSË<0x0800FFFF))))

	)

190 
uöt32_t
 
Ty≥Eø£
;

193 
uöt32_t
 
B™ks
;

196 
uöt32_t
 
PageAddªss
;

200 
uöt32_t
 
NbPages
;

203 } 
	tFLASH_Eø£InôTy≥Def
;

210 
uöt32_t
 
O±i⁄Ty≥
;

213 
uöt32_t
 
WRPSèã
;

216 
uöt32_t
 
WRPPage
;

219 
uöt32_t
 
B™ks
;

222 
uöt8_t
 
RDPLevñ
;

225 #i‡
deföed
(
FLASH_BANK2_END
)

226 
uöt8_t
 
USERC⁄fig
;

231 
uöt8_t
 
USERC⁄fig
;

237 
uöt32_t
 
DATAAddªss
;

240 
uöt8_t
 
DATAD©a
;

242 } 
	tFLASH_OBProgømInôTy≥Def
;

260 #i‡(
deföed
(
STM32F101x6
Ë|| deföed(
STM32F102x6
Ë|| deföed(
STM32F103x6
Ë|| deföed(
STM32F100xB
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103xB
))

261 
	#FLASH_PAGE_SIZE
 ((
uöt32_t
)0x400)

	)

265 #i‡(
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
Ë|| deföed(
STM32F103xG
Ë|| deföed(
STM32F105xC
Ë|| deföed(
STM32F107xC
))

266 
	#FLASH_PAGE_SIZE
 ((
uöt32_t
)0x800)

	)

278 
	#FLASH_TYPEERASE_PAGES
 ((
uöt32_t
)0x00Ë

	)

279 
	#FLASH_TYPEERASE_MASSERASE
 ((
uöt32_t
)0x02Ë

	)

288 #i‡
deföed
(
FLASH_BANK2_END
)

289 
	#FLASH_BANK_1
 ((
uöt32_t
)1Ë

	)

290 
	#FLASH_BANK_2
 ((
uöt32_t
)2Ë

	)

291 
	#FLASH_BANK_BOTH
 ((
uöt32_t
)
FLASH_BANK_1
 | 
FLASH_BANK_2
Ë

	)

294 
	#FLASH_BANK_1
 ((
uöt32_t
)1Ë

	)

311 
	#OPTIONBYTE_WRP
 ((
uöt32_t
)0x01Ë

	)

312 
	#OPTIONBYTE_RDP
 ((
uöt32_t
)0x02Ë

	)

313 
	#OPTIONBYTE_USER
 ((
uöt32_t
)0x04Ë

	)

314 
	#OPTIONBYTE_DATA
 ((
uöt32_t
)0x08Ë

	)

323 
	#OB_WRPSTATE_DISABLE
 ((
uöt32_t
)0x00Ë

	)

324 
	#OB_WRPSTATE_ENABLE
 ((
uöt32_t
)0x01Ë

	)

334 #i‡ 
deföed
(
STM32F101x6
Ë|| deföed(
STM32F102x6
Ë|| deföed(
STM32F103x6
) \

335 || 
deföed
(
STM32F100xB
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F102xB
) \

336 || 
deföed
(
STM32F103xB
)

337 
	#OB_WRP_PAGES0TO3
 ((
uöt32_t
)0x00000001Ë

	)

338 
	#OB_WRP_PAGES4TO7
 ((
uöt32_t
)0x00000002Ë

	)

339 
	#OB_WRP_PAGES8TO11
 ((
uöt32_t
)0x00000004Ë

	)

340 
	#OB_WRP_PAGES12TO15
 ((
uöt32_t
)0x00000008Ë

	)

341 
	#OB_WRP_PAGES16TO19
 ((
uöt32_t
)0x00000010Ë

	)

342 
	#OB_WRP_PAGES20TO23
 ((
uöt32_t
)0x00000020Ë

	)

343 
	#OB_WRP_PAGES24TO27
 ((
uöt32_t
)0x00000040Ë

	)

344 
	#OB_WRP_PAGES28TO31
 ((
uöt32_t
)0x00000080Ë

	)

349 #i‡ 
deföed
(
STM32F100xB
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103xB
)

350 
	#OB_WRP_PAGES32TO35
 ((
uöt32_t
)0x00000100Ë

	)

351 
	#OB_WRP_PAGES36TO39
 ((
uöt32_t
)0x00000200Ë

	)

352 
	#OB_WRP_PAGES40TO43
 ((
uöt32_t
)0x00000400Ë

	)

353 
	#OB_WRP_PAGES44TO47
 ((
uöt32_t
)0x00000800Ë

	)

354 
	#OB_WRP_PAGES48TO51
 ((
uöt32_t
)0x00001000Ë

	)

355 
	#OB_WRP_PAGES52TO55
 ((
uöt32_t
)0x00002000Ë

	)

356 
	#OB_WRP_PAGES56TO59
 ((
uöt32_t
)0x00004000Ë

	)

357 
	#OB_WRP_PAGES60TO63
 ((
uöt32_t
)0x00008000Ë

	)

358 
	#OB_WRP_PAGES64TO67
 ((
uöt32_t
)0x00010000Ë

	)

359 
	#OB_WRP_PAGES68TO71
 ((
uöt32_t
)0x00020000Ë

	)

360 
	#OB_WRP_PAGES72TO75
 ((
uöt32_t
)0x00040000Ë

	)

361 
	#OB_WRP_PAGES76TO79
 ((
uöt32_t
)0x00080000Ë

	)

362 
	#OB_WRP_PAGES80TO83
 ((
uöt32_t
)0x00100000Ë

	)

363 
	#OB_WRP_PAGES84TO87
 ((
uöt32_t
)0x00200000Ë

	)

364 
	#OB_WRP_PAGES88TO91
 ((
uöt32_t
)0x00400000Ë

	)

365 
	#OB_WRP_PAGES92TO95
 ((
uöt32_t
)0x00800000Ë

	)

366 
	#OB_WRP_PAGES96TO99
 ((
uöt32_t
)0x01000000Ë

	)

367 
	#OB_WRP_PAGES100TO103
 ((
uöt32_t
)0x02000000Ë

	)

368 
	#OB_WRP_PAGES104TO107
 ((
uöt32_t
)0x04000000Ë

	)

369 
	#OB_WRP_PAGES108TO111
 ((
uöt32_t
)0x08000000Ë

	)

370 
	#OB_WRP_PAGES112TO115
 ((
uöt32_t
)0x10000000Ë

	)

371 
	#OB_WRP_PAGES116TO119
 ((
uöt32_t
)0x20000000Ë

	)

372 
	#OB_WRP_PAGES120TO123
 ((
uöt32_t
)0x40000000Ë

	)

373 
	#OB_WRP_PAGES124TO127
 ((
uöt32_t
)0x80000000Ë

	)

378 #i‡ 
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F103xE
) \

379 || 
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103xG
) \

380 || 
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

381 
	#OB_WRP_PAGES0TO1
 ((
uöt32_t
)0x00000001Ë

	)

382 
	#OB_WRP_PAGES2TO3
 ((
uöt32_t
)0x00000002Ë

	)

383 
	#OB_WRP_PAGES4TO5
 ((
uöt32_t
)0x00000004Ë

	)

384 
	#OB_WRP_PAGES6TO7
 ((
uöt32_t
)0x00000008Ë

	)

385 
	#OB_WRP_PAGES8TO9
 ((
uöt32_t
)0x00000010Ë

	)

386 
	#OB_WRP_PAGES10TO11
 ((
uöt32_t
)0x00000020Ë

	)

387 
	#OB_WRP_PAGES12TO13
 ((
uöt32_t
)0x00000040Ë

	)

388 
	#OB_WRP_PAGES14TO15
 ((
uöt32_t
)0x00000080Ë

	)

389 
	#OB_WRP_PAGES16TO17
 ((
uöt32_t
)0x00000100Ë

	)

390 
	#OB_WRP_PAGES18TO19
 ((
uöt32_t
)0x00000200Ë

	)

391 
	#OB_WRP_PAGES20TO21
 ((
uöt32_t
)0x00000400Ë

	)

392 
	#OB_WRP_PAGES22TO23
 ((
uöt32_t
)0x00000800Ë

	)

393 
	#OB_WRP_PAGES24TO25
 ((
uöt32_t
)0x00001000Ë

	)

394 
	#OB_WRP_PAGES26TO27
 ((
uöt32_t
)0x00002000Ë

	)

395 
	#OB_WRP_PAGES28TO29
 ((
uöt32_t
)0x00004000Ë

	)

396 
	#OB_WRP_PAGES30TO31
 ((
uöt32_t
)0x00008000Ë

	)

397 
	#OB_WRP_PAGES32TO33
 ((
uöt32_t
)0x00010000Ë

	)

398 
	#OB_WRP_PAGES34TO35
 ((
uöt32_t
)0x00020000Ë

	)

399 
	#OB_WRP_PAGES36TO37
 ((
uöt32_t
)0x00040000Ë

	)

400 
	#OB_WRP_PAGES38TO39
 ((
uöt32_t
)0x00080000Ë

	)

401 
	#OB_WRP_PAGES40TO41
 ((
uöt32_t
)0x00100000Ë

	)

402 
	#OB_WRP_PAGES42TO43
 ((
uöt32_t
)0x00200000Ë

	)

403 
	#OB_WRP_PAGES44TO45
 ((
uöt32_t
)0x00400000Ë

	)

404 
	#OB_WRP_PAGES46TO47
 ((
uöt32_t
)0x00800000Ë

	)

405 
	#OB_WRP_PAGES48TO49
 ((
uöt32_t
)0x01000000Ë

	)

406 
	#OB_WRP_PAGES50TO51
 ((
uöt32_t
)0x02000000Ë

	)

407 
	#OB_WRP_PAGES52TO53
 ((
uöt32_t
)0x04000000Ë

	)

408 
	#OB_WRP_PAGES54TO55
 ((
uöt32_t
)0x08000000Ë

	)

409 
	#OB_WRP_PAGES56TO57
 ((
uöt32_t
)0x10000000Ë

	)

410 
	#OB_WRP_PAGES58TO59
 ((
uöt32_t
)0x20000000Ë

	)

411 
	#OB_WRP_PAGES60TO61
 ((
uöt32_t
)0x40000000Ë

	)

412 
	#OB_WRP_PAGES62TO127
 ((
uöt32_t
)0x80000000Ë

	)

413 
	#OB_WRP_PAGES62TO255
 ((
uöt32_t
)0x80000000Ë

	)

414 
	#OB_WRP_PAGES62TO511
 ((
uöt32_t
)0x80000000Ë

	)

419 
	#OB_WRP_ALLPAGES
 ((
uöt32_t
)0xFFFFFFFFË

	)

422 #i‡ 
deföed
(
STM32F101x6
Ë|| deföed(
STM32F102x6
Ë|| deföed(
STM32F103x6
)

423 
	#OB_WRP_PAGES0TO31MASK
 ((
uöt32_t
)0x000000FF)

	)

427 #i‡ 
deföed
(
STM32F100xB
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103xB
)

428 
	#OB_WRP_PAGES0TO31MASK
 ((
uöt32_t
)0x000000FF)

	)

429 
	#OB_WRP_PAGES32TO63MASK
 ((
uöt32_t
)0x0000FF00)

	)

430 
	#OB_WRP_PAGES64TO95MASK
 ((
uöt32_t
)0x00FF0000)

	)

431 
	#OB_WRP_PAGES96TO127MASK
 ((
uöt32_t
)0xFF000000)

	)

435 #i‡ 
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F103xE
)

436 
	#OB_WRP_PAGES0TO15MASK
 ((
uöt32_t
)0x000000FF)

	)

437 
	#OB_WRP_PAGES16TO31MASK
 ((
uöt32_t
)0x0000FF00)

	)

438 
	#OB_WRP_PAGES32TO47MASK
 ((
uöt32_t
)0x00FF0000)

	)

439 
	#OB_WRP_PAGES48TO255MASK
 ((
uöt32_t
)0xFF000000)

	)

443 #i‡ 
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103xG
)

444 
	#OB_WRP_PAGES0TO15MASK
 ((
uöt32_t
)0x000000FF)

	)

445 
	#OB_WRP_PAGES16TO31MASK
 ((
uöt32_t
)0x0000FF00)

	)

446 
	#OB_WRP_PAGES32TO47MASK
 ((
uöt32_t
)0x00FF0000)

	)

447 
	#OB_WRP_PAGES48TO511MASK
 ((
uöt32_t
)0xFF000000)

	)

451 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

452 
	#OB_WRP_PAGES0TO15MASK
 ((
uöt32_t
)0x000000FF)

	)

453 
	#OB_WRP_PAGES16TO31MASK
 ((
uöt32_t
)0x0000FF00)

	)

454 
	#OB_WRP_PAGES32TO47MASK
 ((
uöt32_t
)0x00FF0000)

	)

455 
	#OB_WRP_PAGES48TO127MASK
 ((
uöt32_t
)0xFF000000)

	)

465 
	#OB_RDP_LEVEL_0
 ((
uöt8_t
)0xA5)

	)

466 
	#OB_RDP_LEVEL_1
 ((
uöt8_t
)0x00)

	)

474 
	#OB_IWDG_SW
 ((
uöt16_t
)0x0001Ë

	)

475 
	#OB_IWDG_HW
 ((
uöt16_t
)0x0000Ë

	)

483 
	#OB_STOP_NO_RST
 ((
uöt16_t
)0x0002Ë

	)

484 
	#OB_STOP_RST
 ((
uöt16_t
)0x0000Ë

	)

492 
	#OB_STDBY_NO_RST
 ((
uöt16_t
)0x0004Ë

	)

493 
	#OB_STDBY_RST
 ((
uöt16_t
)0x0000Ë

	)

498 #i‡
deföed
(
FLASH_BANK2_END
)

502 
	#OB_BOOT1_RESET
 ((
uöt16_t
)0x0000Ë

	)

503 
	#OB_BOOT1_SET
 ((
uöt16_t
)0x0008Ë

	)

512 
	#OB_DATA_ADDRESS_DATA0
 ((
uöt32_t
)0x1FFFF804)

	)

513 
	#OB_DATA_ADDRESS_DATA1
 ((
uöt32_t
)0x1FFFF806)

	)

530 #i‡
deföed
(
FLASH_BANK2_END
)

531 
	#FLASH_FLAG_BSY
 
FLASH_FLAG_BSY_BANK1


	)

532 
	#FLASH_FLAG_PGERR
 
FLASH_FLAG_PGERR_BANK1


	)

533 
	#FLASH_FLAG_WRPERR
 
FLASH_FLAG_WRPERR_BANK1


	)

534 
	#FLASH_FLAG_EOP
 
FLASH_FLAG_EOP_BANK1


	)

536 
	#FLASH_FLAG_BSY_BANK1
 
FLASH_SR_BSY


	)

537 
	#FLASH_FLAG_PGERR_BANK1
 
FLASH_SR_PGERR


	)

538 
	#FLASH_FLAG_WRPERR_BANK1
 
FLASH_SR_WRPRTERR


	)

539 
	#FLASH_FLAG_EOP_BANK1
 
FLASH_SR_EOP


	)

541 
	#FLASH_FLAG_BSY_BANK2
 (
FLASH_SR2_BSY
 << 16Ë

	)

542 
	#FLASH_FLAG_PGERR_BANK2
 (
FLASH_SR2_PGERR
 << 16Ë

	)

543 
	#FLASH_FLAG_WRPERR_BANK2
 (
FLASH_SR2_WRPRTERR
 << 16Ë

	)

544 
	#FLASH_FLAG_EOP_BANK2
 (
FLASH_SR2_EOP
 << 16Ë

	)

548 
	#FLASH_FLAG_BSY
 
FLASH_SR_BSY


	)

549 
	#FLASH_FLAG_PGERR
 
FLASH_SR_PGERR


	)

550 
	#FLASH_FLAG_WRPERR
 
FLASH_SR_WRPRTERR


	)

551 
	#FLASH_FLAG_EOP
 
FLASH_SR_EOP


	)

554 
	#FLASH_FLAG_OPTVERR
 ((
OBR_REG_INDEX
 << 8 | 
FLASH_OBR_OPTERR
)Ë

	)

563 #i‡
deföed
(
FLASH_BANK2_END
)

564 
	#FLASH_IT_EOP
 
FLASH_IT_EOP_BANK1


	)

565 
	#FLASH_IT_ERR
 
FLASH_IT_ERR_BANK1


	)

567 
	#FLASH_IT_EOP_BANK1
 
FLASH_CR_EOPIE


	)

568 
	#FLASH_IT_ERR_BANK1
 
FLASH_CR_ERRIE


	)

570 
	#FLASH_IT_EOP_BANK2
 (
FLASH_CR2_EOPIE
 << 16Ë

	)

571 
	#FLASH_IT_ERR_BANK2
 (
FLASH_CR2_ERRIE
 << 16Ë

	)

575 
	#FLASH_IT_EOP
 
FLASH_CR_EOPIE


	)

576 
	#FLASH_IT_ERR
 
FLASH_CR_ERRIE


	)

602 #i‡
deföed
(
FLASH_BANK2_END
)

613 
	#__HAL_FLASH_ENABLE_IT
(
__INTERRUPT__
) do { \

615 
	`SET_BIT
(
FLASH
->
CR
, ((
__INTERRUPT__
) & 0x0000FFFF)); \

617 
	`SET_BIT
(
FLASH
->
CR2
, ((
__INTERRUPT__
) >> 16)); \

618 } 0)

	)

630 
	#__HAL_FLASH_DISABLE_IT
(
__INTERRUPT__
) do { \

632 
	`CLEAR_BIT
(
FLASH
->
CR
, ((
__INTERRUPT__
) & 0x0000FFFF)); \

634 
	`CLEAR_BIT
(
FLASH
->
CR2
, ((
__INTERRUPT__
) >> 16)); \

635 } 0)

	)

652 
	#__HAL_FLASH_GET_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
FLASH_FLAG_OPTVERR
) ? \

653 (
FLASH
->
OBR
 & 
FLASH_OBR_OPTERR
) : \

654 ((((
__FLAG__
Ë& 
SR_FLAG_MASK
Ë!
RESET
)? \

655 (
FLASH
->
SR
 & ((
__FLAG__
Ë& 
SR_FLAG_MASK
)) : \

656 (
FLASH
->
SR2
 & ((
__FLAG__
Ë>> 16))))

	)

673 
	#__HAL_FLASH_CLEAR_FLAG
(
__FLAG__
) do { \

675 i‡((
__FLAG__
Ë=
FLASH_FLAG_OPTVERR
) \

677 
	`CLEAR_BIT
(
FLASH
->
OBR
, 
FLASH_OBR_OPTERR
); \

681 i‡(((
__FLAG__
Ë& 
SR_FLAG_MASK
Ë!
RESET
) \

683 
FLASH
->
SR
 = ((
__FLAG__
Ë& 
SR_FLAG_MASK
); \

686 i‡(((
__FLAG__
Ë>> 16Ë!
RESET
) \

688 
FLASH
->
SR2
 = ((
__FLAG__
) >> 16); \

691 } 0)

	)

701 
	#__HAL_FLASH_ENABLE_IT
(
__INTERRUPT__
Ë(
FLASH
->
CR
 |(__INTERRUPT__))

	)

711 
	#__HAL_FLASH_DISABLE_IT
(
__INTERRUPT__
Ë(
FLASH
->
CR
 &~(__INTERRUPT__))

	)

724 
	#__HAL_FLASH_GET_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
FLASH_FLAG_OPTVERR
) ? \

725 (
FLASH
->
OBR
 & 
FLASH_OBR_OPTERR
) : \

726 (
FLASH
->
SR
 & (
__FLAG__
)))

	)

737 
	#__HAL_FLASH_CLEAR_FLAG
(
__FLAG__
) do { \

739 i‡((
__FLAG__
Ë=
FLASH_FLAG_OPTVERR
) \

741 
	`CLEAR_BIT
(
FLASH
->
OBR
, 
FLASH_OBR_OPTERR
); \

745 
FLASH
->
SR
 = (
__FLAG__
); \

747 } 0)

	)

768 
HAL_SètusTy≥Def
 
HAL_FLASHEx_Eø£
(
FLASH_Eø£InôTy≥Def
 *
pEø£Inô
, 
uöt32_t
 *
PageEº‹
);

769 
HAL_SètusTy≥Def
 
HAL_FLASHEx_Eø£_IT
(
FLASH_Eø£InôTy≥Def
 *
pEø£Inô
);

779 
HAL_SètusTy≥Def
 
HAL_FLASHEx_OBEø£
();

780 
HAL_SètusTy≥Def
 
HAL_FLASHEx_OBProgøm
(
FLASH_OBProgømInôTy≥Def
 *
pOBInô
);

781 
HAL_FLASHEx_OBGëC⁄fig
(
FLASH_OBProgømInôTy≥Def
 *
pOBInô
);

782 
uöt32_t
 
HAL_FLASHEx_OBGëU£rD©a
(uöt32_à
DATAAdªss
);

798 #ifde‡
__˝lu•lus


	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Inc\stm32f1xx_hal_gpio.h

39 #i‚de‡
__STM32F1xx_HAL_GPIO_H


40 
	#__STM32F1xx_HAL_GPIO_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f1xx_hÆ_def.h
"

67 
uöt32_t
 
Pö
;

70 
uöt32_t
 
Mode
;

73 
uöt32_t
 
PuŒ
;

76 
uöt32_t
 
S≥ed
;

78 }
	tGPIO_InôTy≥Def
;

85 
GPIO_PIN_RESET
 = 0,

86 
GPIO_PIN_SET


87 }
	tGPIO_PöSèã
;

103 
	#GPIO_PIN_0
 ((
uöt16_t
)0x0001Ë

	)

104 
	#GPIO_PIN_1
 ((
uöt16_t
)0x0002Ë

	)

105 
	#GPIO_PIN_2
 ((
uöt16_t
)0x0004Ë

	)

106 
	#GPIO_PIN_3
 ((
uöt16_t
)0x0008Ë

	)

107 
	#GPIO_PIN_4
 ((
uöt16_t
)0x0010Ë

	)

108 
	#GPIO_PIN_5
 ((
uöt16_t
)0x0020Ë

	)

109 
	#GPIO_PIN_6
 ((
uöt16_t
)0x0040Ë

	)

110 
	#GPIO_PIN_7
 ((
uöt16_t
)0x0080Ë

	)

111 
	#GPIO_PIN_8
 ((
uöt16_t
)0x0100Ë

	)

112 
	#GPIO_PIN_9
 ((
uöt16_t
)0x0200Ë

	)

113 
	#GPIO_PIN_10
 ((
uöt16_t
)0x0400Ë

	)

114 
	#GPIO_PIN_11
 ((
uöt16_t
)0x0800Ë

	)

115 
	#GPIO_PIN_12
 ((
uöt16_t
)0x1000Ë

	)

116 
	#GPIO_PIN_13
 ((
uöt16_t
)0x2000Ë

	)

117 
	#GPIO_PIN_14
 ((
uöt16_t
)0x4000Ë

	)

118 
	#GPIO_PIN_15
 ((
uöt16_t
)0x8000Ë

	)

119 
	#GPIO_PIN_AŒ
 ((
uöt16_t
)0xFFFFË

	)

121 
	#GPIO_PIN_MASK
 ((
uöt32_t
)0x0000FFFFË

	)

137 
	#GPIO_MODE_INPUT
 ((
uöt32_t
)0x00000000Ë

	)

138 
	#GPIO_MODE_OUTPUT_PP
 ((
uöt32_t
)0x00000001Ë

	)

139 
	#GPIO_MODE_OUTPUT_OD
 ((
uöt32_t
)0x00000011Ë

	)

140 
	#GPIO_MODE_AF_PP
 ((
uöt32_t
)0x00000002Ë

	)

141 
	#GPIO_MODE_AF_OD
 ((
uöt32_t
)0x00000012Ë

	)

142 
	#GPIO_MODE_AF_INPUT
 
GPIO_MODE_INPUT


	)

144 
	#GPIO_MODE_ANALOG
 ((
uöt32_t
)0x00000003Ë

	)

146 
	#GPIO_MODE_IT_RISING
 ((
uöt32_t
)0x10110000Ë

	)

147 
	#GPIO_MODE_IT_FALLING
 ((
uöt32_t
)0x10210000Ë

	)

148 
	#GPIO_MODE_IT_RISING_FALLING
 ((
uöt32_t
)0x10310000Ë

	)

150 
	#GPIO_MODE_EVT_RISING
 ((
uöt32_t
)0x10120000Ë

	)

151 
	#GPIO_MODE_EVT_FALLING
 ((
uöt32_t
)0x10220000Ë

	)

152 
	#GPIO_MODE_EVT_RISING_FALLING
 ((
uöt32_t
)0x10320000Ë

	)

163 
	#GPIO_SPEED_FREQ_LOW
 (
GPIO_CRL_MODE0_1
Ë

	)

164 
	#GPIO_SPEED_FREQ_MEDIUM
 (
GPIO_CRL_MODE0_0
Ë

	)

165 
	#GPIO_SPEED_FREQ_HIGH
 (
GPIO_CRL_MODE0
Ë

	)

176 
	#GPIO_NOPULL
 ((
uöt32_t
)0x00000000Ë

	)

177 
	#GPIO_PULLUP
 ((
uöt32_t
)0x00000001Ë

	)

178 
	#GPIO_PULLDOWN
 ((
uöt32_t
)0x00000002Ë

	)

194 
	#IS_GPIO_PIN_ACTION
(
ACTION
Ë(((ACTIONË=
GPIO_PIN_RESET
Ë|| ((ACTIONË=
GPIO_PIN_SET
))

	)

196 
	#IS_GPIO_PIN
(
PIN
Ë(((PINË& 
GPIO_PIN_MASK
 ) !(
uöt32_t
)0x00)

	)

198 
	#IS_GPIO_PULL
(
PULL
Ë(((PULLË=
GPIO_NOPULL
Ë|| ((PULLË=
GPIO_PULLUP
) || \

199 ((
PULL
Ë=
GPIO_PULLDOWN
))

	)

201 
	#IS_GPIO_SPEED
(
SPEED
Ë(((SPEEDË=
GPIO_SPEED_FREQ_LOW
) || \

202 ((
SPEED
Ë=
GPIO_SPEED_FREQ_MEDIUM
Ë|| ((SPEEDË=
GPIO_SPEED_FREQ_HIGH
))

	)

204 
	#IS_GPIO_MODE
(
MODE
Ë(((MODEË=
GPIO_MODE_INPUT
) ||\

205 ((
MODE
Ë=
GPIO_MODE_OUTPUT_PP
) ||\

206 ((
MODE
Ë=
GPIO_MODE_OUTPUT_OD
) ||\

207 ((
MODE
Ë=
GPIO_MODE_AF_PP
) ||\

208 ((
MODE
Ë=
GPIO_MODE_AF_OD
) ||\

209 ((
MODE
Ë=
GPIO_MODE_IT_RISING
) ||\

210 ((
MODE
Ë=
GPIO_MODE_IT_FALLING
) ||\

211 ((
MODE
Ë=
GPIO_MODE_IT_RISING_FALLING
) ||\

212 ((
MODE
Ë=
GPIO_MODE_EVT_RISING
) ||\

213 ((
MODE
Ë=
GPIO_MODE_EVT_FALLING
) ||\

214 ((
MODE
Ë=
GPIO_MODE_EVT_RISING_FALLING
) ||\

215 ((
MODE
Ë=
GPIO_MODE_ANALOG
))

	)

233 
	#__HAL_GPIO_EXTI_GET_FLAG
(
__EXTI_LINE__
Ë(
EXTI
->
PR
 & (__EXTI_LINE__))

	)

241 
	#__HAL_GPIO_EXTI_CLEAR_FLAG
(
__EXTI_LINE__
Ë(
EXTI
->
PR
 = (__EXTI_LINE__))

	)

249 
	#__HAL_GPIO_EXTI_GET_IT
(
__EXTI_LINE__
Ë(
EXTI
->
PR
 & (__EXTI_LINE__))

	)

257 
	#__HAL_GPIO_EXTI_CLEAR_IT
(
__EXTI_LINE__
Ë(
EXTI
->
PR
 = (__EXTI_LINE__))

	)

265 
	#__HAL_GPIO_EXTI_GENERATE_SWIT
(
__EXTI_LINE__
Ë(
EXTI
->
SWIER
 |(__EXTI_LINE__))

	)

268 
	~"°m32f1xx_hÆ_gpio_ex.h
"

285 
HAL_GPIO_Inô
(
GPIO_Ty≥Def
 *
GPIOx
, 
GPIO_InôTy≥Def
 *
GPIO_Inô
);

286 
HAL_GPIO_DeInô
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt32_t
 
GPIO_Pö
);

295 
GPIO_PöSèã
 
HAL_GPIO_RódPö
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

296 
HAL_GPIO_WrôePö
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
GPIO_PöSèã
 
PöSèã
);

297 
HAL_GPIO_ToggÀPö
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

298 
HAL_SètusTy≥Def
 
HAL_GPIO_LockPö
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

299 
HAL_GPIO_EXTI_IRQH™dÀr
(
uöt16_t
 
GPIO_Pö
);

300 
HAL_GPIO_EXTI_CÆlback
(
uöt16_t
 
GPIO_Pö
);

318 #ifde‡
__˝lu•lus


	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Inc\stm32f1xx_hal_gpio_ex.h

39 #i‚de‡
__STM32F1xx_HAL_GPIO_EX_H


40 
	#__STM32F1xx_HAL_GPIO_EX_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f1xx_hÆ_def.h
"

74 
	#AFIO_EVENTOUT_PIN_0
 
AFIO_EVCR_PIN_PX0


	)

75 
	#AFIO_EVENTOUT_PIN_1
 
AFIO_EVCR_PIN_PX1


	)

76 
	#AFIO_EVENTOUT_PIN_2
 
AFIO_EVCR_PIN_PX2


	)

77 
	#AFIO_EVENTOUT_PIN_3
 
AFIO_EVCR_PIN_PX3


	)

78 
	#AFIO_EVENTOUT_PIN_4
 
AFIO_EVCR_PIN_PX4


	)

79 
	#AFIO_EVENTOUT_PIN_5
 
AFIO_EVCR_PIN_PX5


	)

80 
	#AFIO_EVENTOUT_PIN_6
 
AFIO_EVCR_PIN_PX6


	)

81 
	#AFIO_EVENTOUT_PIN_7
 
AFIO_EVCR_PIN_PX7


	)

82 
	#AFIO_EVENTOUT_PIN_8
 
AFIO_EVCR_PIN_PX8


	)

83 
	#AFIO_EVENTOUT_PIN_9
 
AFIO_EVCR_PIN_PX9


	)

84 
	#AFIO_EVENTOUT_PIN_10
 
AFIO_EVCR_PIN_PX10


	)

85 
	#AFIO_EVENTOUT_PIN_11
 
AFIO_EVCR_PIN_PX11


	)

86 
	#AFIO_EVENTOUT_PIN_12
 
AFIO_EVCR_PIN_PX12


	)

87 
	#AFIO_EVENTOUT_PIN_13
 
AFIO_EVCR_PIN_PX13


	)

88 
	#AFIO_EVENTOUT_PIN_14
 
AFIO_EVCR_PIN_PX14


	)

89 
	#AFIO_EVENTOUT_PIN_15
 
AFIO_EVCR_PIN_PX15


	)

91 
	#IS_AFIO_EVENTOUT_PIN
(
__PIN__
Ë(((__PIN__Ë=
AFIO_EVENTOUT_PIN_0
) || \

92 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_1
) || \

93 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_2
) || \

94 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_3
) || \

95 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_4
) || \

96 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_5
) || \

97 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_6
) || \

98 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_7
) || \

99 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_8
) || \

100 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_9
) || \

101 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_10
) || \

102 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_11
) || \

103 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_12
) || \

104 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_13
) || \

105 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_14
) || \

106 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_15
))

	)

115 
	#AFIO_EVENTOUT_PORT_A
 
AFIO_EVCR_PORT_PA


	)

116 
	#AFIO_EVENTOUT_PORT_B
 
AFIO_EVCR_PORT_PB


	)

117 
	#AFIO_EVENTOUT_PORT_C
 
AFIO_EVCR_PORT_PC


	)

118 
	#AFIO_EVENTOUT_PORT_D
 
AFIO_EVCR_PORT_PD


	)

119 
	#AFIO_EVENTOUT_PORT_E
 
AFIO_EVCR_PORT_PE


	)

121 
	#IS_AFIO_EVENTOUT_PORT
(
__PORT__
Ë(((__PORT__Ë=
AFIO_EVENTOUT_PORT_A
) || \

122 ((
__PORT__
Ë=
AFIO_EVENTOUT_PORT_B
) || \

123 ((
__PORT__
Ë=
AFIO_EVENTOUT_PORT_C
) || \

124 ((
__PORT__
Ë=
AFIO_EVENTOUT_PORT_D
) || \

125 ((
__PORT__
Ë=
AFIO_EVENTOUT_PORT_E
))

	)

144 
	#__HAL_AFIO_REMAP_SPI1_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_SPI1_REMAP
)

	)

151 
	#__HAL_AFIO_REMAP_SPI1_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_SPI1_REMAP
)

	)

158 
	#__HAL_AFIO_REMAP_I2C1_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_I2C1_REMAP
)

	)

165 
	#__HAL_AFIO_REMAP_I2C1_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_I2C1_REMAP
)

	)

172 
	#__HAL_AFIO_REMAP_USART1_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_USART1_REMAP
)

	)

179 
	#__HAL_AFIO_REMAP_USART1_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_USART1_REMAP
)

	)

186 
	#__HAL_AFIO_REMAP_USART2_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_USART2_REMAP
)

	)

193 
	#__HAL_AFIO_REMAP_USART2_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_USART2_REMAP
)

	)

200 
	#__HAL_AFIO_REMAP_USART3_ENABLE
(Ë
	`MODIFY_REG
(
AFIO
->
MAPR
, 
AFIO_MAPR_USART3_REMAP
, 
AFIO_MAPR_USART3_REMAP_FULLREMAP
)

	)

207 
	#__HAL_AFIO_REMAP_USART3_PARTIAL
(Ë
	`MODIFY_REG
(
AFIO
->
MAPR
, 
AFIO_MAPR_USART3_REMAP
, 
AFIO_MAPR_USART3_REMAP_PARTIALREMAP
)

	)

214 
	#__HAL_AFIO_REMAP_USART3_DISABLE
(Ë
	`MODIFY_REG
(
AFIO
->
MAPR
, 
AFIO_MAPR_USART3_REMAP
, 
AFIO_MAPR_USART3_REMAP_NOREMAP
)

	)

221 
	#__HAL_AFIO_REMAP_TIM1_ENABLE
(Ë
	`MODIFY_REG
(
AFIO
->
MAPR
, 
AFIO_MAPR_TIM1_REMAP
, 
AFIO_MAPR_TIM1_REMAP_FULLREMAP
)

	)

228 
	#__HAL_AFIO_REMAP_TIM1_PARTIAL
(Ë
	`MODIFY_REG
(
AFIO
->
MAPR
, 
AFIO_MAPR_TIM1_REMAP
, 
AFIO_MAPR_TIM1_REMAP_PARTIALREMAP
)

	)

235 
	#__HAL_AFIO_REMAP_TIM1_DISABLE
(Ë
	`MODIFY_REG
(
AFIO
->
MAPR
, 
AFIO_MAPR_TIM1_REMAP
, 
AFIO_MAPR_TIM1_REMAP_NOREMAP
)

	)

242 
	#__HAL_AFIO_REMAP_TIM2_ENABLE
(Ë
	`MODIFY_REG
(
AFIO
->
MAPR
, 
AFIO_MAPR_TIM2_REMAP
, 
AFIO_MAPR_TIM2_REMAP_FULLREMAP
)

	)

249 
	#__HAL_AFIO_REMAP_TIM2_PARTIAL_2
(Ë
	`MODIFY_REG
(
AFIO
->
MAPR
, 
AFIO_MAPR_TIM2_REMAP
, 
AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2
)

	)

256 
	#__HAL_AFIO_REMAP_TIM2_PARTIAL_1
(Ë
	`MODIFY_REG
(
AFIO
->
MAPR
, 
AFIO_MAPR_TIM2_REMAP
, 
AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1
)

	)

263 
	#__HAL_AFIO_REMAP_TIM2_DISABLE
(Ë
	`MODIFY_REG
(
AFIO
->
MAPR
, 
AFIO_MAPR_TIM2_REMAP
, 
AFIO_MAPR_TIM2_REMAP_NOREMAP
)

	)

271 
	#__HAL_AFIO_REMAP_TIM3_ENABLE
(Ë
	`MODIFY_REG
(
AFIO
->
MAPR
, 
AFIO_MAPR_TIM3_REMAP
, 
AFIO_MAPR_TIM3_REMAP_FULLREMAP
)

	)

279 
	#__HAL_AFIO_REMAP_TIM3_PARTIAL
(Ë
	`MODIFY_REG
(
AFIO
->
MAPR
, 
AFIO_MAPR_TIM3_REMAP
, 
AFIO_MAPR_TIM3_REMAP_PARTIALREMAP
)

	)

287 
	#__HAL_AFIO_REMAP_TIM3_DISABLE
(Ë
	`MODIFY_REG
(
AFIO
->
MAPR
, 
AFIO_MAPR_TIM3_REMAP
, 
AFIO_MAPR_TIM3_REMAP_NOREMAP
)

	)

295 
	#__HAL_AFIO_REMAP_TIM4_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_TIM4_REMAP
)

	)

303 
	#__HAL_AFIO_REMAP_TIM4_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_TIM4_REMAP
)

	)

305 #i‡
deföed
(
AFIO_MAPR_CAN_REMAP_REMAP1
)

312 
	#__HAL_AFIO_REMAP_CAN1_1
(Ë
	`MODIFY_REG
(
AFIO
->
MAPR
, 
AFIO_MAPR_CAN_REMAP
, 
AFIO_MAPR_CAN_REMAP_REMAP1
)

	)

319 
	#__HAL_AFIO_REMAP_CAN1_2
(Ë
	`MODIFY_REG
(
AFIO
->
MAPR
, 
AFIO_MAPR_CAN_REMAP
, 
AFIO_MAPR_CAN_REMAP_REMAP2
)

	)

326 
	#__HAL_AFIO_REMAP_CAN1_3
(Ë
	`MODIFY_REG
(
AFIO
->
MAPR
, 
AFIO_MAPR_CAN_REMAP
, 
AFIO_MAPR_CAN_REMAP_REMAP3
)

	)

337 
	#__HAL_AFIO_REMAP_PD01_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_PD01_REMAP
)

	)

347 
	#__HAL_AFIO_REMAP_PD01_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_PD01_REMAP
)

	)

349 #i‡
deföed
(
AFIO_MAPR_TIM5CH4_IREMAP
)

356 
	#__HAL_AFIO_REMAP_TIM5CH4_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_TIM5CH4_IREMAP
)

	)

364 
	#__HAL_AFIO_REMAP_TIM5CH4_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_TIM5CH4_IREMAP
)

	)

367 #i‡
deföed
(
AFIO_MAPR_ETH_REMAP
)

374 
	#__HAL_AFIO_REMAP_ETH_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_ETH_REMAP
)

	)

382 
	#__HAL_AFIO_REMAP_ETH_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_ETH_REMAP
)

	)

385 #i‡
deföed
(
AFIO_MAPR_CAN2_REMAP
)

393 
	#__HAL_AFIO_REMAP_CAN2_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_CAN2_REMAP
)

	)

401 
	#__HAL_AFIO_REMAP_CAN2_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_CAN2_REMAP
)

	)

404 #i‡
deföed
(
AFIO_MAPR_MII_RMII_SEL
)

411 
	#__HAL_AFIO_ETH_RMII
(Ë
	`SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_MII_RMII_SEL
)

	)

419 
	#__HAL_AFIO_ETH_MII
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_MII_RMII_SEL
)

	)

427 
	#__HAL_AFIO_REMAP_ADC1_ETRGINJ_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_ADC1_ETRGINJ_REMAP
)

	)

434 
	#__HAL_AFIO_REMAP_ADC1_ETRGINJ_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_ADC1_ETRGINJ_REMAP
)

	)

441 
	#__HAL_AFIO_REMAP_ADC1_ETRGREG_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_ADC1_ETRGREG_REMAP
)

	)

448 
	#__HAL_AFIO_REMAP_ADC1_ETRGREG_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_ADC1_ETRGREG_REMAP
)

	)

450 #i‡
deföed
(
AFIO_MAPR_ADC2_ETRGINJ_REMAP
)

457 
	#__HAL_AFIO_REMAP_ADC2_ETRGINJ_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_ADC2_ETRGINJ_REMAP
)

	)

464 
	#__HAL_AFIO_REMAP_ADC2_ETRGINJ_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_ADC2_ETRGINJ_REMAP
)

	)

467 #i‡
deföed
 (
AFIO_MAPR_ADC2_ETRGREG_REMAP
)

474 
	#__HAL_AFIO_REMAP_ADC2_ETRGREG_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_ADC2_ETRGREG_REMAP
)

	)

481 
	#__HAL_AFIO_REMAP_ADC2_ETRGREG_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_ADC2_ETRGREG_REMAP
)

	)

489 
	#__HAL_AFIO_REMAP_SWJ_ENABLE
(Ë
	`MODIFY_REG
(
AFIO
->
MAPR
, 
AFIO_MAPR_SWJ_CFG
, 
AFIO_MAPR_SWJ_CFG_RESET
)

	)

496 
	#__HAL_AFIO_REMAP_SWJ_NONJTRST
(Ë
	`MODIFY_REG
(
AFIO
->
MAPR
, 
AFIO_MAPR_SWJ_CFG
, 
AFIO_MAPR_SWJ_CFG_NOJNTRST
)

	)

503 
	#__HAL_AFIO_REMAP_SWJ_NOJTAG
(Ë
	`MODIFY_REG
(
AFIO
->
MAPR
, 
AFIO_MAPR_SWJ_CFG
, 
AFIO_MAPR_SWJ_CFG_JTAGDISABLE
)

	)

510 
	#__HAL_AFIO_REMAP_SWJ_DISABLE
(Ë
	`MODIFY_REG
(
AFIO
->
MAPR
, 
AFIO_MAPR_SWJ_CFG
, 
AFIO_MAPR_SWJ_CFG_DISABLE
)

	)

512 #i‡
deföed
(
AFIO_MAPR_SPI3_REMAP
)

520 
	#__HAL_AFIO_REMAP_SPI3_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_SPI3_REMAP
)

	)

528 
	#__HAL_AFIO_REMAP_SPI3_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_SPI3_REMAP
)

	)

531 #i‡
deföed
(
AFIO_MAPR_TIM2ITR1_IREMAP
)

539 
	#__HAL_AFIO_TIM2ITR1_TO_USB
(Ë
	`SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_TIM2ITR1_IREMAP
)

	)

547 
	#__HAL_AFIO_TIM2ITR1_TO_ETH
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_TIM2ITR1_IREMAP
)

	)

550 #i‡
deföed
(
AFIO_MAPR_PTP_PPS_REMAP
)

558 
	#__HAL_AFIO_ETH_PTP_PPS_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_PTP_PPS_REMAP
)

	)

566 
	#__HAL_AFIO_ETH_PTP_PPS_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR
, 
AFIO_MAPR_PTP_PPS_REMAP
)

	)

569 #i‡
deföed
(
AFIO_MAPR2_TIM9_REMAP
)

576 
	#__HAL_AFIO_REMAP_TIM9_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM9_REMAP
)

	)

583 
	#__HAL_AFIO_REMAP_TIM9_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM9_REMAP
)

	)

586 #i‡
deföed
(
AFIO_MAPR2_TIM10_REMAP
)

593 
	#__HAL_AFIO_REMAP_TIM10_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM10_REMAP
)

	)

600 
	#__HAL_AFIO_REMAP_TIM10_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM10_REMAP
)

	)

603 #i‡
deföed
(
AFIO_MAPR2_TIM11_REMAP
)

609 
	#__HAL_AFIO_REMAP_TIM11_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM11_REMAP
)

	)

616 
	#__HAL_AFIO_REMAP_TIM11_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM11_REMAP
)

	)

619 #i‡
deföed
(
AFIO_MAPR2_TIM13_REMAP
)

626 
	#__HAL_AFIO_REMAP_TIM13_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM13_REMAP
)

	)

633 
	#__HAL_AFIO_REMAP_TIM13_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM13_REMAP
)

	)

636 #i‡
deföed
(
AFIO_MAPR2_TIM14_REMAP
)

643 
	#__HAL_AFIO_REMAP_TIM14_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM14_REMAP
)

	)

650 
	#__HAL_AFIO_REMAP_TIM14_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM14_REMAP
)

	)

653 #i‡
deföed
(
AFIO_MAPR2_FSMC_NADV_REMAP
)

660 
	#__HAL_AFIO_FSMCNADV_DISCONNECTED
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_FSMC_NADV_REMAP
)

	)

667 
	#__HAL_AFIO_FSMCNADV_CONNECTED
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_FSMC_NADV_REMAP
)

	)

670 #i‡
deföed
(
AFIO_MAPR2_TIM15_REMAP
)

677 
	#__HAL_AFIO_REMAP_TIM15_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM15_REMAP
)

	)

684 
	#__HAL_AFIO_REMAP_TIM15_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM15_REMAP
)

	)

687 #i‡
deföed
(
AFIO_MAPR2_TIM16_REMAP
)

694 
	#__HAL_AFIO_REMAP_TIM16_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM16_REMAP
)

	)

701 
	#__HAL_AFIO_REMAP_TIM16_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM16_REMAP
)

	)

704 #i‡
deföed
(
AFIO_MAPR2_TIM17_REMAP
)

711 
	#__HAL_AFIO_REMAP_TIM17_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM17_REMAP
)

	)

718 
	#__HAL_AFIO_REMAP_TIM17_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM17_REMAP
)

	)

721 #i‡
deföed
(
AFIO_MAPR2_CEC_REMAP
)

728 
	#__HAL_AFIO_REMAP_CEC_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_CEC_REMAP
)

	)

735 
	#__HAL_AFIO_REMAP_CEC_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_CEC_REMAP
)

	)

738 #i‡
deföed
(
AFIO_MAPR2_TIM1_DMA_REMAP
)

745 
	#__HAL_AFIO_REMAP_TIM1DMA_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM1_DMA_REMAP
)

	)

752 
	#__HAL_AFIO_REMAP_TIM1DMA_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM1_DMA_REMAP
)

	)

755 #i‡
deföed
(
AFIO_MAPR2_TIM67_DAC_DMA_REMAP
)

762 
	#__HAL_AFIO_REMAP_TIM67DACDMA_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM67_DAC_DMA_REMAP
)

	)

769 
	#__HAL_AFIO_REMAP_TIM67DACDMA_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM67_DAC_DMA_REMAP
)

	)

772 #i‡
deföed
(
AFIO_MAPR2_TIM12_REMAP
)

780 
	#__HAL_AFIO_REMAP_TIM12_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM12_REMAP
)

	)

788 
	#__HAL_AFIO_REMAP_TIM12_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM12_REMAP
)

	)

791 #i‡
deföed
(
AFIO_MAPR2_MISC_REMAP
)

803 
	#__HAL_AFIO_REMAP_MISC_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_MISC_REMAP
)

	)

815 
	#__HAL_AFIO_REMAP_MISC_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_MISC_REMAP
)

	)

829 #i‡
deföed
(
STM32F101x6
Ë|| deföed(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)

830 
	#GPIO_GET_INDEX
(
__GPIOx__
Ë(((__GPIOx__Ë=(
GPIOA
))? 0U :\

831 ((
__GPIOx__
Ë=(
GPIOB
))? 1U :\

832 ((
__GPIOx__
Ë=(
GPIOC
))? 2U :3U)

	)

833 #ñi‡
deföed
(
STM32F100xB
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F103xB
Ë|| deföed(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

834 
	#GPIO_GET_INDEX
(
__GPIOx__
Ë(((__GPIOx__Ë=(
GPIOA
))? 0U :\

835 ((
__GPIOx__
Ë=(
GPIOB
))? 1U :\

836 ((
__GPIOx__
Ë=(
GPIOC
))? 2U :\

837 ((
__GPIOx__
Ë=(
GPIOD
))? 3U :4U)

	)

838 #ñi‡
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F101xG
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

839 
	#GPIO_GET_INDEX
(
__GPIOx__
Ë(((__GPIOx__Ë=(
GPIOA
))? 0U :\

840 ((
__GPIOx__
Ë=(
GPIOB
))? 1U :\

841 ((
__GPIOx__
Ë=(
GPIOC
))? 2U :\

842 ((
__GPIOx__
Ë=(
GPIOD
))? 3U :\

843 ((
__GPIOx__
Ë=(
GPIOE
))? 4U :\

844 ((
__GPIOx__
Ë=(
GPIOF
))? 5U :6U)

	)

861 
HAL_GPIOEx_C⁄figEvítout
(
uöt32_t
 
GPIO_P‹tSour˚
, uöt32_à
GPIO_PöSour˚
);

862 
HAL_GPIOEx_E«bÀEvítout
();

863 
HAL_GPIOEx_DißbÀEvítout
();

881 #ifde‡
__˝lu•lus


	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Inc\stm32f1xx_hal_pcd.h

39 #i‚de‡
__STM32F1xx_HAL_PCD_H


40 
	#__STM32F1xx_HAL_PCD_H


	)

42 #ifde‡
__˝lu•lus


46 #i‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
) || \

47 
deföed
(
STM32F103x6
Ë|| deföed(
STM32F103xB
) || \

48 
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
) || \

49 
deföed
(
STM32F105xC
Ë|| 
	$deföed
(
STM32F107xC
)

52 
	~"°m32f1xx_Œ_usb.h
"

72 
HAL_PCD_STATE_RESET
 = 0x00,

73 
HAL_PCD_STATE_READY
 = 0x01,

74 
HAL_PCD_STATE_ERROR
 = 0x02,

75 
HAL_PCD_STATE_BUSY
 = 0x03,

76 
HAL_PCD_STATE_TIMEOUT
 = 0x04

77 } 
	tPCD_SèãTy≥Def
;

79 #i‡
	`deföed
 (
USB
)

85 
PCD_EP_DBUF_OUT
,

86 
PCD_EP_DBUF_IN
,

87 
PCD_EP_DBUF_ERR
,

88 }
	tPCD_EP_DBUF_DIR
;

95 
PCD_EP_NOBUF
,

96 
PCD_EP_BUF0
,

97 
PCD_EP_BUF1


98 }
	tPCD_EP_BUF_NUM
;

101 #i‡
	`deföed
 (
USB_OTG_FS
)

102 
USB_OTG_GlobÆTy≥Def
 
	tPCD_Ty≥Def
;

103 
USB_OTG_CfgTy≥Def
 
	tPCD_InôTy≥Def
;

104 
USB_OTG_EPTy≥Def
 
	tPCD_EPTy≥Def
;

107 #i‡
	`deföed
 (
USB
)

108 
USB_Ty≥Def
 
	tPCD_Ty≥Def
;

109 
USB_CfgTy≥Def
 
	tPCD_InôTy≥Def
;

110 
USB_EPTy≥Def
 
	tPCD_EPTy≥Def
;

118 
PCD_Ty≥Def
 *
In°™˚
;

119 
PCD_InôTy≥Def
 
Inô
;

120 
__IO
 
uöt8_t
 
USB_Addªss
;

121 
PCD_EPTy≥Def
 
IN_ï
[15];

122 
PCD_EPTy≥Def
 
OUT_ï
[15];

123 
HAL_LockTy≥Def
 
Lock
;

124 
__IO
 
PCD_SèãTy≥Def
 
Sèã
;

125 
uöt32_t
 
Sëup
[12];

126 *
pD©a
;

127 } 
	tPCD_H™dÀTy≥Def
;

134 
	~"°m32f1xx_hÆ_pcd_ex.h
"

144 
	#PCD_SPEED_HIGH
 0

	)

145 
	#PCD_SPEED_HIGH_IN_FULL
 1

	)

146 
	#PCD_SPEED_FULL
 2

	)

154 
	#PCD_PHY_EMBEDDED
 2

	)

162 #i‚de‡
USBD_FS_TRDT_VALUE


163 
	#USBD_FS_TRDT_VALUE
 5

	)

178 #i‡
	`deföed
 (
USB_OTG_FS
)

180 
	#__HAL_PCD_ENABLE
(
__HANDLE__
Ë
	`USB_E«bÀGlobÆI¡
 ((__HANDLE__)->
In°™˚
)

	)

181 
	#__HAL_PCD_DISABLE
(
__HANDLE__
Ë
	`USB_DißbÀGlobÆI¡
 ((__HANDLE__)->
In°™˚
)

	)

183 
	#__HAL_PCD_GET_FLAG
(
__HANDLE__
, 
__INTERRUPT__
Ë((
	`USB_RódI¡îru±s
((__HANDLE__)->
In°™˚
Ë& (__INTERRUPT__)Ë=(__INTERRUPT__))

	)

184 
	#__HAL_PCD_CLEAR_FLAG
(
__HANDLE__
, 
__INTERRUPT__
Ë(((__HANDLE__)->
In°™˚
->
GINTSTS
Ë(__INTERRUPT__))

	)

185 
	#__HAL_PCD_IS_INVALID_INTERRUPT
(
__HANDLE__
Ë(
	`USB_RódI¡îru±s
((__HANDLE__)->
In°™˚
Ë=0)

	)

187 
	#__HAL_PCD_UNGATE_PHYCLOCK
(
__HANDLE__
Ë*(
__IO
 
uöt32_t
 *)((uöt32_t)((__HANDLE__)->
In°™˚
Ë+ 
USB_OTG_PCGCCTL_BASE
) &= \

188 ~(
USB_OTG_PCGCCTL_STOPCLK
)

	)

190 
	#__HAL_PCD_GATE_PHYCLOCK
(
__HANDLE__
Ë*(
__IO
 
uöt32_t
 *)((uöt32_t)((__HANDLE__)->
In°™˚
Ë+ 
USB_OTG_PCGCCTL_BASE
Ë|
USB_OTG_PCGCCTL_STOPCLK


	)

192 
	#__HAL_PCD_IS_PHY_SUSPENDED
(
__HANDLE__
Ë((*(
__IO
 
uöt32_t
 *)((uöt32_t)((__HANDLE__)->
In°™˚
Ë+ 
USB_OTG_PCGCCTL_BASE
))&0x10)

	)

194 
	#__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_IT
(Ë
EXTI
->
IMR
 |
USB_OTG_FS_WAKEUP_EXTI_LINE


	)

195 
	#__HAL_USB_OTG_FS_WAKEUP_EXTI_DISABLE_IT
(Ë
EXTI
->
IMR
 &~(
USB_OTG_FS_WAKEUP_EXTI_LINE
)

	)

196 
	#__HAL_USB_OTG_FS_WAKEUP_EXTI_GET_FLAG
(Ë
EXTI
->
PR
 & (
USB_OTG_FS_WAKEUP_EXTI_LINE
)

	)

197 
	#__HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG
(Ë
EXTI
->
PR
 = 
USB_OTG_FS_WAKEUP_EXTI_LINE


	)

199 
	#__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_EDGE
() \

201 
EXTI
->
FTSR
 &~(
USB_OTG_FS_WAKEUP_EXTI_LINE
); \

202 
EXTI
->
RTSR
 |
USB_OTG_FS_WAKEUP_EXTI_LINE
; \

203 
	}
} 0)

	)

205 
	#__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_FALLING_EDGE
() \

207 
EXTI
->
FTSR
 |(
USB_OTG_FS_WAKEUP_EXTI_LINE
); \

208 
EXTI
->
RTSR
 &~(
USB_OTG_FS_WAKEUP_EXTI_LINE
); \

209 } 0)

	)

211 
	#__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_FALLING_EDGE
() \

213 
EXTI
->
RTSR
 &~(
USB_OTG_FS_WAKEUP_EXTI_LINE
); \

214 
EXTI
->
FTSR
 &~(
USB_OTG_FS_WAKEUP_EXTI_LINE
); \

215 
EXTI
->
RTSR
 |
USB_OTG_FS_WAKEUP_EXTI_LINE
; \

216 
EXTI
->
FTSR
 |
USB_OTG_FS_WAKEUP_EXTI_LINE
; \

217 } 0)

	)

219 
	#__HAL_USB_OTG_FS_WAKEUP_EXTI_GENERATE_SWIT
(Ë(
EXTI
->
SWIER
 |
USB_OTG_FS_WAKEUP_EXTI_LINE
)

	)

222 #i‡
deföed
 (
USB
)

223 
	#__HAL_PCD_ENABLE
(
__HANDLE__
Ë
	`USB_E«bÀGlobÆI¡
 ((__HANDLE__)->
In°™˚
)

	)

224 
	#__HAL_PCD_DISABLE
(
__HANDLE__
Ë
	`USB_DißbÀGlobÆI¡
 ((__HANDLE__)->
In°™˚
)

	)

225 
	#__HAL_PCD_GET_FLAG
(
__HANDLE__
, 
__INTERRUPT__
Ë((
	`USB_RódI¡îru±s
((__HANDLE__)->
In°™˚
Ë& (__INTERRUPT__)Ë=(__INTERRUPT__))

	)

226 
	#__HAL_PCD_CLEAR_FLAG
(
__HANDLE__
, 
__INTERRUPT__
Ë(((__HANDLE__)->
In°™˚
->
ISTR
Ë&~(__INTERRUPT__))

	)

228 
	#__HAL_USB_WAKEUP_EXTI_ENABLE_IT
(Ë
EXTI
->
IMR
 |
USB_WAKEUP_EXTI_LINE


	)

229 
	#__HAL_USB_WAKEUP_EXTI_DISABLE_IT
(Ë
EXTI
->
IMR
 &~(
USB_WAKEUP_EXTI_LINE
)

	)

230 
	#__HAL_USB_WAKEUP_EXTI_GET_FLAG
(Ë
EXTI
->
PR
 & (
USB_WAKEUP_EXTI_LINE
)

	)

231 
	#__HAL_USB_WAKEUP_EXTI_CLEAR_FLAG
(Ë
EXTI
->
PR
 = 
USB_WAKEUP_EXTI_LINE


	)

233 
	#__HAL_USB_WAKEUP_EXTI_ENABLE_RISING_EDGE
() \

235 
EXTI
->
FTSR
 &~(
USB_WAKEUP_EXTI_LINE
); \

236 
EXTI
->
RTSR
 |
USB_WAKEUP_EXTI_LINE
; \

237 } 0)

	)

239 
	#__HAL_USB_WAKEUP_EXTI_ENABLE_FALLING_EDGE
() \

241 
EXTI
->
FTSR
 |(
USB_WAKEUP_EXTI_LINE
); \

242 
EXTI
->
RTSR
 &~(
USB_WAKEUP_EXTI_LINE
); \

243 } 0)

	)

245 
	#__HAL_USB_WAKEUP_EXTI_ENABLE_RISING_FALLING_EDGE
() \

247 
EXTI
->
RTSR
 &~(
USB_WAKEUP_EXTI_LINE
); \

248 
EXTI
->
FTSR
 &~(
USB_WAKEUP_EXTI_LINE
); \

249 
EXTI
->
RTSR
 |
USB_WAKEUP_EXTI_LINE
; \

250 
EXTI
->
FTSR
 |
USB_WAKEUP_EXTI_LINE
; \

251 } 0)

	)

267 
HAL_SètusTy≥Def
 
HAL_PCD_Inô
(
PCD_H™dÀTy≥Def
 *
hpcd
);

268 
HAL_SètusTy≥Def
 
HAL_PCD_DeInô
 (
PCD_H™dÀTy≥Def
 *
hpcd
);

269 
HAL_PCD_M•Inô
(
PCD_H™dÀTy≥Def
 *
hpcd
);

270 
HAL_PCD_M•DeInô
(
PCD_H™dÀTy≥Def
 *
hpcd
);

280 
HAL_SètusTy≥Def
 
HAL_PCD_Sèπ
(
PCD_H™dÀTy≥Def
 *
hpcd
);

281 
HAL_SètusTy≥Def
 
HAL_PCD_St›
(
PCD_H™dÀTy≥Def
 *
hpcd
);

282 
HAL_PCD_IRQH™dÀr
(
PCD_H™dÀTy≥Def
 *
hpcd
);

284 
HAL_PCD_D©aOutSègeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
);

285 
HAL_PCD_D©aInSègeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
);

286 
HAL_PCD_SëupSègeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
);

287 
HAL_PCD_SOFCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
);

288 
HAL_PCD_Re£tCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
);

289 
HAL_PCD_Su•ídCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
);

290 
HAL_PCD_ResumeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
);

291 
HAL_PCD_ISOOUTIncom∂ëeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
);

292 
HAL_PCD_ISOINIncom∂ëeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
);

293 
HAL_PCD_C⁄√˘CÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
);

294 
HAL_PCD_Disc⁄√˘CÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
);

303 
HAL_SètusTy≥Def
 
HAL_PCD_DevC⁄√˘
(
PCD_H™dÀTy≥Def
 *
hpcd
);

304 
HAL_SètusTy≥Def
 
HAL_PCD_DevDisc⁄√˘
(
PCD_H™dÀTy≥Def
 *
hpcd
);

305 
HAL_SètusTy≥Def
 
HAL_PCD_SëAddªss
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
addªss
);

306 
HAL_SètusTy≥Def
 
HAL_PCD_EP_O≥n
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
, 
uöt16_t
 
ï_mps
, uöt8_à
ï_ty≥
);

307 
HAL_SètusTy≥Def
 
HAL_PCD_EP_Clo£
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
);

308 
HAL_SètusTy≥Def
 
HAL_PCD_EP_Re˚ive
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
, uöt8_à*
pBuf
, 
uöt32_t
 
Àn
);

309 
HAL_SètusTy≥Def
 
HAL_PCD_EP_Tønsmô
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
, uöt8_à*
pBuf
, 
uöt32_t
 
Àn
);

310 
uöt16_t
 
HAL_PCD_EP_GëRxCou¡
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
);

311 
HAL_SètusTy≥Def
 
HAL_PCD_EP_SëSèŒ
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
);

312 
HAL_SètusTy≥Def
 
HAL_PCD_EP_CÃSèŒ
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
);

313 
HAL_SètusTy≥Def
 
HAL_PCD_EP_Flush
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
);

314 
HAL_SètusTy≥Def
 
HAL_PCD_A˘iv©eRemŸeWakeup
(
PCD_H™dÀTy≥Def
 *
hpcd
);

315 
HAL_SètusTy≥Def
 
HAL_PCD_DeA˘iv©eRemŸeWakeup
(
PCD_H™dÀTy≥Def
 *
hpcd
);

324 
PCD_SèãTy≥Def
 
HAL_PCD_GëSèã
(
PCD_H™dÀTy≥Def
 *
hpcd
);

340 #i‡
deföed
 (
USB_OTG_FS
)

341 
	#USB_OTG_FS_WAKEUP_EXTI_RISING_EDGE
 ((
uöt32_t
)0x08)

	)

342 
	#USB_OTG_FS_WAKEUP_EXTI_FALLING_EDGE
 ((
uöt32_t
)0x0C)

	)

343 
	#USB_OTG_FS_WAKEUP_EXTI_RISING_FALLING_EDGE
 ((
uöt32_t
)0x10)

	)

345 
	#USB_OTG_FS_WAKEUP_EXTI_LINE
 ((
uöt32_t
)0x00040000Ë

	)

348 #i‡
deföed
 (
USB
)

349 
	#USB_WAKEUP_EXTI_LINE
 ((
uöt32_t
)0x00040000Ë

	)

355 #i‡
deföed
 (
USB
)

359 
	#PCD_EP0MPS_64
 
DEP0CTL_MPS_64


	)

360 
	#PCD_EP0MPS_32
 
DEP0CTL_MPS_32


	)

361 
	#PCD_EP0MPS_16
 
DEP0CTL_MPS_16


	)

362 
	#PCD_EP0MPS_08
 
DEP0CTL_MPS_8


	)

370 
	#PCD_ENDP0
 ((
uöt8_t
)0)

	)

371 
	#PCD_ENDP1
 ((
uöt8_t
)1)

	)

372 
	#PCD_ENDP2
 ((
uöt8_t
)2)

	)

373 
	#PCD_ENDP3
 ((
uöt8_t
)3)

	)

374 
	#PCD_ENDP4
 ((
uöt8_t
)4)

	)

375 
	#PCD_ENDP5
 ((
uöt8_t
)5)

	)

376 
	#PCD_ENDP6
 ((
uöt8_t
)6)

	)

377 
	#PCD_ENDP7
 ((
uöt8_t
)7)

	)

385 
	#PCD_SNG_BUF
 0

	)

386 
	#PCD_DBL_BUF
 1

	)

399 #i‡
deföed
 (
USB
)

401 
	#PCD_SET_ENDPOINT
(
USBx
, 
bEpNum
,
wRegVÆue
Ë(*(&(USBx)->
EP0R
 + (bEpNumË* 2)(
uöt16_t
)(wRegVÆue))

	)

404 
	#PCD_GET_ENDPOINT
(
USBx
, 
bEpNum
Ë(*(&(USBx)->
EP0R
 + (bEpNumË* 2))

	)

407 
	#USB_EP0SèπX„r
 
USB_EPSèπX„r


	)

416 
	#PCD_SET_EPTYPE
(
USBx
, 
bEpNum
,
wTy≥
Ë(
	`PCD_SET_ENDPOINT
((USBx), (bEpNum),\

417 ((
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)Ë& 
USB_EP_T_MASK
Ë| (
wTy≥
Ë)))

	)

425 
	#PCD_GET_EPTYPE
(
USBx
, 
bEpNum
Ë(
	`PCD_GET_ENDPOINT
((USBx), (bEpNum)Ë& 
USB_EP_T_FIELD
)

	)

435 
	#PCD_FªeU£rBuf„r
(
USBx
, 
bEpNum
, 
bDú
)\

437 i‡((
bDú
Ë=
PCD_EP_DBUF_OUT
)\

439 
	`PCD_TX_DTOG
((
USBx
), (
bEpNum
));\

441 i‡((
bDú
Ë=
PCD_EP_DBUF_IN
)\

443 
	`PCD_RX_DTOG
((
USBx
), (
bEpNum
));\

445 }

	)

454 
	#PCD_GET_DB_DIR
(
USBx
, 
bEpNum
)\

456 i‡((
uöt16_t
)(*
	`PCD_EP_RX_CNT
((
USBx
), (
bEpNum
)) & 0xFC00) != 0)\

457 (
PCD_EP_DBUF_OUT
);\

458 i‡(((
uöt16_t
)(*
	`PCD_EP_TX_CNT
((
USBx
), (
bEpNum
))) & 0x03FF) != 0)\

459 (
PCD_EP_DBUF_IN
);\

461 (
PCD_EP_DBUF_ERR
);\

462 }

	)

471 
	#PCD_SET_EP_TX_STATUS
(
USBx
, 
bEpNum
, 
wSèã
Ë{ 
uöt16_t
 
_wRegVÆ
;\

473 
_wRegVÆ
 = 
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)Ë& 
USB_EPTX_DTOGMASK
;\

475 if((
USB_EPTX_DTOG1
 & (
wSèã
))!= 0)\

477 
_wRegVÆ
 ^
USB_EPTX_DTOG1
; \

480 if((
USB_EPTX_DTOG2
 & (
wSèã
))!= 0) \

482 
_wRegVÆ
 ^
USB_EPTX_DTOG2
; \

484 
	`PCD_SET_ENDPOINT
((
USBx
), (
bEpNum
), (
_wRegVÆ
 | 
USB_EP_CTR_RX
|
USB_EP_CTR_TX
));\

485 }

	)

494 
	#PCD_SET_EP_RX_STATUS
(
USBx
, 
bEpNum
,
wSèã
) {\

495 
uöt16_t
 
_wRegVÆ
; \

497 
_wRegVÆ
 = 
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)Ë& 
USB_EPRX_DTOGMASK
;\

499 if((
USB_EPRX_DTOG1
 & (
wSèã
))!= 0) \

501 
_wRegVÆ
 ^
USB_EPRX_DTOG1
; \

504 if((
USB_EPRX_DTOG2
 & (
wSèã
))!= 0) \

506 
_wRegVÆ
 ^
USB_EPRX_DTOG2
; \

508 
	`PCD_SET_ENDPOINT
((
USBx
), (
bEpNum
), (
_wRegVÆ
 | 
USB_EP_CTR_RX
|
USB_EP_CTR_TX
)); \

509 }

	)

519 
	#PCD_SET_EP_TXRX_STATUS
(
USBx
,
bEpNum
,
wSèãrx
,
wSèãtx
) {\

520 
uöt32_t
 
_wRegVÆ
; \

522 
_wRegVÆ
 = 
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)Ë& (
USB_EPRX_DTOGMASK
 |
USB_EPTX_STAT
) ;\

524 if((
USB_EPRX_DTOG1
 & ((
wSèãrx
)))!= 0) \

526 
_wRegVÆ
 ^
USB_EPRX_DTOG1
; \

529 if((
USB_EPRX_DTOG2
 & (
wSèãrx
))!= 0) \

531 
_wRegVÆ
 ^
USB_EPRX_DTOG2
; \

534 if((
USB_EPTX_DTOG1
 & (
wSèãtx
))!= 0) \

536 
_wRegVÆ
 ^
USB_EPTX_DTOG1
; \

539 if((
USB_EPTX_DTOG2
 & (
wSèãtx
))!= 0) \

541 
_wRegVÆ
 ^
USB_EPTX_DTOG2
; \

543 
	`PCD_SET_ENDPOINT
((
USBx
), (
bEpNum
), 
_wRegVÆ
 | 
USB_EP_CTR_RX
|
USB_EP_CTR_TX
); \

544 }

	)

553 
	#PCD_GET_EP_TX_STATUS
(
USBx
, 
bEpNum
Ë((
uöt16_t
)
	`PCD_GET_ENDPOINT
((USBx), (bEpNum)Ë& 
USB_EPTX_STAT
)

	)

554 
	#PCD_GET_EP_RX_STATUS
(
USBx
, 
bEpNum
Ë((
uöt16_t
)
	`PCD_GET_ENDPOINT
((USBx), (bEpNum)Ë& 
USB_EPRX_STAT
)

	)

562 
	#PCD_SET_EP_TX_VALID
(
USBx
, 
bEpNum
Ë(
	`PCD_SET_EP_TX_STATUS
((USBx), (bEpNum), 
USB_EP_TX_VALID
))

	)

563 
	#PCD_SET_EP_RX_VALID
(
USBx
, 
bEpNum
Ë(
	`PCD_SET_EP_RX_STATUS
((USBx), (bEpNum), 
USB_EP_RX_VALID
))

	)

571 
	#PCD_GET_EP_TX_STALL_STATUS
(
USBx
, 
bEpNum
Ë(
	`PCD_GET_EP_TX_STATUS
((USBx), (bEpNum)) \

572 =
USB_EP_TX_STALL
)

	)

573 
	#PCD_GET_EP_RX_STALL_STATUS
(
USBx
, 
bEpNum
Ë(
	`PCD_GET_EP_RX_STATUS
((USBx), (bEpNum)) \

574 =
USB_EP_RX_STALL
)

	)

582 
	#PCD_SET_EP_KIND
(
USBx
, 
bEpNum
Ë(
	`PCD_SET_ENDPOINT
((USBx), (bEpNum), \

583 (
USB_EP_CTR_RX
|
USB_EP_CTR_TX
|((
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)Ë| 
USB_EP_KIND
Ë& 
USB_EPREG_MASK
))))

	)

584 
	#PCD_CLEAR_EP_KIND
(
USBx
, 
bEpNum
Ë(
	`PCD_SET_ENDPOINT
((USBx), (bEpNum), \

585 (
USB_EP_CTR_RX
|
USB_EP_CTR_TX
|(
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)Ë& 
USB_EPKIND_MASK
))))

	)

593 
	#PCD_SET_OUT_STATUS
(
USBx
, 
bEpNum
Ë
	`PCD_SET_EP_KIND
((USBx), (bEpNum))

	)

594 
	#PCD_CLEAR_OUT_STATUS
(
USBx
, 
bEpNum
Ë
	`PCD_CLEAR_EP_KIND
((USBx), (bEpNum))

	)

602 
	#PCD_SET_EP_DBUF
(
USBx
, 
bEpNum
Ë
	`PCD_SET_EP_KIND
((USBx), (bEpNum))

	)

603 
	#PCD_CLEAR_EP_DBUF
(
USBx
, 
bEpNum
Ë
	`PCD_CLEAR_EP_KIND
((USBx), (bEpNum))

	)

611 
	#PCD_CLEAR_RX_EP_CTR
(
USBx
, 
bEpNum
Ë(
	`PCD_SET_ENDPOINT
((USBx), (bEpNum),\

612 
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)Ë& 0x7FFF & 
USB_EPREG_MASK
))

	)

613 
	#PCD_CLEAR_TX_EP_CTR
(
USBx
, 
bEpNum
Ë(
	`PCD_SET_ENDPOINT
((USBx), (bEpNum),\

614 
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)Ë& 0xFF7F & 
USB_EPREG_MASK
))

	)

622 
	#PCD_RX_DTOG
(
USBx
, 
bEpNum
Ë(
	`PCD_SET_ENDPOINT
((USBx), (bEpNum), \

623 
USB_EP_CTR_RX
|
USB_EP_CTR_TX
|
USB_EP_DTOG_RX
 | (
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)Ë& 
USB_EPREG_MASK
)))

	)

624 
	#PCD_TX_DTOG
(
USBx
, 
bEpNum
Ë(
	`PCD_SET_ENDPOINT
((USBx), (bEpNum), \

625 
USB_EP_CTR_RX
|
USB_EP_CTR_TX
|
USB_EP_DTOG_TX
 | (
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)Ë& 
USB_EPREG_MASK
)))

	)

633 
	#PCD_CLEAR_RX_DTOG
(
USBx
, 
bEpNum
Ëif((
	`PCD_GET_ENDPOINT
((USBx), (bEpNum)Ë& 
USB_EP_DTOG_RX
) != 0)\

635 
	`PCD_RX_DTOG
((
USBx
), (
bEpNum
)); \

636 }

	)

637 
	#PCD_CLEAR_TX_DTOG
(
USBx
, 
bEpNum
Ëif((
	`PCD_GET_ENDPOINT
((USBx), (bEpNum)Ë& 
USB_EP_DTOG_TX
) != 0)\

639 
	`PCD_TX_DTOG
((
USBx
), (
bEpNum
)); \

640 }

	)

649 
	#PCD_SET_EP_ADDRESS
(
USBx
, 
bEpNum
,
bAddr
Ë
	`PCD_SET_ENDPOINT
((USBx), (bEpNum),\

650 
USB_EP_CTR_RX
|
USB_EP_CTR_TX
|(
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)Ë& 
USB_EPREG_MASK
Ë| (
bAddr
))

	)

652 
	#PCD_GET_EP_ADDRESS
(
USBx
, 
bEpNum
Ë((
uöt8_t
)(
	`PCD_GET_ENDPOINT
((USBx), (bEpNum)Ë& 
USB_EPADDR_FIELD
))

	)

654 
	#PCD_EP_TX_ADDRESS
(
USBx
, 
bEpNum
Ë((
uöt32_t
 *)(((USBx)->
BTABLE
+(bEpNum)*8)*2+ ((uöt32_t)(USBxË+ 0x400)))

	)

655 
	#PCD_EP_TX_CNT
(
USBx
, 
bEpNum
Ë((
uöt32_t
 *)(((USBx)->
BTABLE
+(bEpNum)*8+2)*2+ ((uöt32_t)(USBxË+ 0x400)))

	)

656 
	#PCD_EP_RX_ADDRESS
(
USBx
, 
bEpNum
Ë((
uöt32_t
 *)(((USBx)->
BTABLE
+(bEpNum)*8+4)*2+ ((uöt32_t)(USBxË+ 0x400)))

	)

657 
	#PCD_EP_RX_CNT
(
USBx
, 
bEpNum
Ë((
uöt32_t
 *)(((USBx)->
BTABLE
+(bEpNum)*8+6)*2+ ((uöt32_t)(USBxË+ 0x400)))

	)

659 
	#PCD_SET_EP_RX_CNT
(
USBx
, 
bEpNum
,
wCou¡
) {\

660 
uöt32_t
 *
pdwReg
 = 
	`PCD_EP_RX_CNT
((
USBx
), (
bEpNum
)); \

661 
	`PCD_SET_EP_CNT_RX_REG
(
pdwReg
, (
wCou¡
));\

662 }

	)

671 
	#PCD_SET_EP_TX_ADDRESS
(
USBx
, 
bEpNum
,
wAddr
Ë(*
	`PCD_EP_TX_ADDRESS
((USBx), (bEpNum)Ë(((wAddrË>> 1Ë<< 1))

	)

672 
	#PCD_SET_EP_RX_ADDRESS
(
USBx
, 
bEpNum
,
wAddr
Ë(*
	`PCD_EP_RX_ADDRESS
((USBx), (bEpNum)Ë(((wAddrË>> 1Ë<< 1))

	)

680 
	#PCD_GET_EP_TX_ADDRESS
(
USBx
, 
bEpNum
Ë((
uöt16_t
)*
	`PCD_EP_TX_ADDRESS
((USBx), (bEpNum)))

	)

681 
	#PCD_GET_EP_RX_ADDRESS
(
USBx
, 
bEpNum
Ë((
uöt16_t
)*
	`PCD_EP_RX_ADDRESS
((USBx), (bEpNum)))

	)

690 
	#PCD_CALC_BLK32
(
dwReg
,
wCou¡
,
wNBlocks
) {\

691 (
wNBlocks
Ë(
wCou¡
) >> 5;\

692 if(((
wCou¡
) & 0x1f) == 0)\

694 (
wNBlocks
)--;\

696 *
pdwReg
 = (
uöt16_t
)((uöt16_t)((
wNBlocks
) << 10) | 0x8000); \

697 }

	)

699 
	#PCD_CALC_BLK2
(
dwReg
,
wCou¡
,
wNBlocks
) {\

700 (
wNBlocks
Ë(
wCou¡
) >> 1;\

701 if(((
wCou¡
) & 0x1) != 0)\

703 (
wNBlocks
)++;\

705 *
pdwReg
 = (
uöt16_t
)((
wNBlocks
) << 10);\

706 }

	)

708 
	#PCD_SET_EP_CNT_RX_REG
(
dwReg
,
wCou¡
) {\

709 
uöt16_t
 
wNBlocks
;\

710 if((
wCou¡
) > 62) \

712 
	`PCD_CALC_BLK32
((
dwReg
),(
wCou¡
),
wNBlocks
); \

716 
	`PCD_CALC_BLK2
((
dwReg
),(
wCou¡
),
wNBlocks
); \

718 }

	)

720 
	#PCD_SET_EP_RX_DBUF0_CNT
(
USBx
, 
bEpNum
,
wCou¡
) {\

721 
uöt32_t
 *
pdwReg
 = 
	`PCD_EP_TX_CNT
((
USBx
), (
bEpNum
)); \

722 
	`PCD_SET_EP_CNT_RX_REG
(
pdwReg
, (
wCou¡
));\

723 }

	)

732 
	#PCD_SET_EP_TX_CNT
(
USBx
, 
bEpNum
,
wCou¡
Ë(*
	`PCD_EP_TX_CNT
((USBx), (bEpNum)Ë(wCou¡))

	)

741 
	#PCD_GET_EP_TX_CNT
(
USBx
, 
bEpNum
Ë((
uöt16_t
)(*
	`PCD_EP_TX_CNT
((USBx), (bEpNum))Ë& 0x3ff)

	)

742 
	#PCD_GET_EP_RX_CNT
(
USBx
, 
bEpNum
Ë((
uöt16_t
)(*
	`PCD_EP_RX_CNT
((USBx), (bEpNum))Ë& 0x3ff)

	)

751 
	#PCD_SET_EP_DBUF0_ADDR
(
USBx
, 
bEpNum
,
wBuf0Addr
Ë{
	`PCD_SET_EP_TX_ADDRESS
((USBx), (bEpNum), (wBuf0Addr));}

	)

752 
	#PCD_SET_EP_DBUF1_ADDR
(
USBx
, 
bEpNum
,
wBuf1Addr
Ë{
	`PCD_SET_EP_RX_ADDRESS
((USBx), (bEpNum), (wBuf1Addr));}

	)

762 
	#PCD_SET_EP_DBUF_ADDR
(
USBx
, 
bEpNum
,
wBuf0Addr
,
wBuf1Addr
) { \

763 
	`PCD_SET_EP_DBUF0_ADDR
((
USBx
), (
bEpNum
), (
wBuf0Addr
));\

764 
	`PCD_SET_EP_DBUF1_ADDR
((
USBx
), (
bEpNum
), (
wBuf1Addr
));\

765 }

	)

773 
	#PCD_GET_EP_DBUF0_ADDR
(
USBx
, 
bEpNum
Ë(
	`PCD_GET_EP_TX_ADDRESS
((USBx), (bEpNum)))

	)

774 
	#PCD_GET_EP_DBUF1_ADDR
(
USBx
, 
bEpNum
Ë(
	`PCD_GET_EP_RX_ADDRESS
((USBx), (bEpNum)))

	)

785 
	#PCD_SET_EP_DBUF0_CNT
(
USBx
, 
bEpNum
, 
bDú
, 
wCou¡
) { \

786 if((
bDú
Ë=
PCD_EP_DBUF_OUT
)\

788 {
	`PCD_SET_EP_RX_DBUF0_CNT
((
USBx
), (
bEpNum
),(
wCou¡
));} \

789 if((
bDú
Ë=
PCD_EP_DBUF_IN
)\

791 *
	`PCD_EP_TX_CNT
((
USBx
), (
bEpNum
)Ë(
uöt32_t
)(
wCou¡
); \

792 }

	)

794 
	#PCD_SET_EP_DBUF1_CNT
(
USBx
, 
bEpNum
, 
bDú
, 
wCou¡
) { \

795 if((
bDú
Ë=
PCD_EP_DBUF_OUT
)\

797 
	`PCD_SET_EP_RX_CNT
((
USBx
), (
bEpNum
),(
wCou¡
)); \

799 if((
bDú
Ë=
PCD_EP_DBUF_IN
)\

801 *
	`PCD_EP_TX_CNT
((
USBx
), (
bEpNum
)Ë(
uöt32_t
)(
wCou¡
); \

803 }

	)

805 
	#PCD_SET_EP_DBUF_CNT
(
USBx
, 
bEpNum
, 
bDú
, 
wCou¡
) {\

806 
	`PCD_SET_EP_DBUF0_CNT
((
USBx
), (
bEpNum
), (
bDú
), (
wCou¡
)); \

807 
	`PCD_SET_EP_DBUF1_CNT
((
USBx
), (
bEpNum
), (
bDú
), (
wCou¡
)); \

808 }

	)

816 
	#PCD_GET_EP_DBUF0_CNT
(
USBx
, 
bEpNum
Ë(
	`PCD_GET_EP_TX_CNT
((USBx), (bEpNum)))

	)

817 
	#PCD_GET_EP_DBUF1_CNT
(
USBx
, 
bEpNum
Ë(
	`PCD_GET_EP_RX_CNT
((USBx), (bEpNum)))

	)

824 
	#IS_PCD_ALL_INSTANCE
 
IS_USB_ALL_INSTANCE


	)

846 #ifde‡
__˝lu•lus


	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Inc\stm32f1xx_hal_pcd_ex.h

39 #i‚de‡
__STM32F1xx_HAL_PCD_EX_H


40 
	#__STM32F1xx_HAL_PCD_EX_H


	)

42 #ifde‡
__˝lu•lus


46 #i‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
) || \

47 
deföed
(
STM32F103x6
Ë|| deföed(
STM32F103xB
) || \

48 
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
) || \

49 
deföed
(
STM32F105xC
Ë|| 
	$deföed
(
STM32F107xC
)

52 
	~"°m32f1xx_hÆ_def.h
"

72 #i‡
	`deföed
 (
USB_OTG_FS
)

73 
HAL_SètusTy≥Def
 
	`HAL_PCDEx_SëTxFiFo
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
fifo
, 
uöt16_t
 
size
);

74 
HAL_SètusTy≥Def
 
	`HAL_PCDEx_SëRxFiFo
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt16_t
 
size
);

77 #i‡
	`deföed
 (
USB
)

78 
HAL_SètusTy≥Def
 
	`HAL_PCDEx_PMAC⁄fig
(
PCD_H™dÀTy≥Def
 *
hpcd
,

79 
uöt16_t
 
ï_addr
,

80 
uöt16_t
 
ï_köd
,

81 
uöt32_t
 
pmØdªss
);

90 
	`HAL_PCDEx_SëC⁄√˘i⁄Sèã
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
°©e
);

109 #ifde‡
__˝lu•lus


110 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Inc\stm32f1xx_hal_pwr.h

39 #i‚de‡
__STM32F1xx_HAL_PWR_H


40 
	#__STM32F1xx_HAL_PWR_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f1xx_hÆ_def.h
"

68 
uöt32_t
 
PVDLevñ
;

71 
uöt32_t
 
Mode
;

73 }
	tPWR_PVDTy≥Def
;

87 
	#PWR_EXTI_LINE_PVD
 ((
uöt32_t
)0x00010000Ë

	)

103 
	#PWR_PVDLEVEL_0
 
PWR_CR_PLS_2V2


	)

104 
	#PWR_PVDLEVEL_1
 
PWR_CR_PLS_2V3


	)

105 
	#PWR_PVDLEVEL_2
 
PWR_CR_PLS_2V4


	)

106 
	#PWR_PVDLEVEL_3
 
PWR_CR_PLS_2V5


	)

107 
	#PWR_PVDLEVEL_4
 
PWR_CR_PLS_2V6


	)

108 
	#PWR_PVDLEVEL_5
 
PWR_CR_PLS_2V7


	)

109 
	#PWR_PVDLEVEL_6
 
PWR_CR_PLS_2V8


	)

110 
	#PWR_PVDLEVEL_7
 
PWR_CR_PLS_2V9


	)

119 
	#PWR_PVD_MODE_NORMAL
 ((
uöt32_t
)0x00000000Ë

	)

120 
	#PWR_PVD_MODE_IT_RISING
 ((
uöt32_t
)0x00010001Ë

	)

121 
	#PWR_PVD_MODE_IT_FALLING
 ((
uöt32_t
)0x00010002Ë

	)

122 
	#PWR_PVD_MODE_IT_RISING_FALLING
 ((
uöt32_t
)0x00010003Ë

	)

123 
	#PWR_PVD_MODE_EVENT_RISING
 ((
uöt32_t
)0x00020001Ë

	)

124 
	#PWR_PVD_MODE_EVENT_FALLING
 ((
uöt32_t
)0x00020002Ë

	)

125 
	#PWR_PVD_MODE_EVENT_RISING_FALLING
 ((
uöt32_t
)0x00020003Ë

	)

136 
	#PWR_WAKEUP_PIN1
 
PWR_CSR_EWUP


	)

145 
	#PWR_MAINREGULATOR_ON
 ((
uöt32_t
)0x00000000)

	)

146 
	#PWR_LOWPOWERREGULATOR_ON
 
PWR_CR_LPDS


	)

155 
	#PWR_SLEEPENTRY_WFI
 ((
uöt8_t
)0x01)

	)

156 
	#PWR_SLEEPENTRY_WFE
 ((
uöt8_t
)0x02)

	)

165 
	#PWR_STOPENTRY_WFI
 ((
uöt8_t
)0x01)

	)

166 
	#PWR_STOPENTRY_WFE
 ((
uöt8_t
)0x02)

	)

175 
	#PWR_FLAG_WU
 
PWR_CSR_WUF


	)

176 
	#PWR_FLAG_SB
 
PWR_CSR_SBF


	)

177 
	#PWR_FLAG_PVDO
 
PWR_CSR_PVDO


	)

208 
	#__HAL_PWR_GET_FLAG
(
__FLAG__
Ë((
PWR
->
CSR
 & (__FLAG__)Ë=(__FLAG__))

	)

216 
	#__HAL_PWR_CLEAR_FLAG
(
__FLAG__
Ë
	`SET_BIT
(
PWR
->
CR
, ((__FLAG__Ë<< 2))

	)

222 
	#__HAL_PWR_PVD_EXTI_ENABLE_IT
(Ë
	`SET_BIT
(
EXTI
->
IMR
, 
PWR_EXTI_LINE_PVD
)

	)

228 
	#__HAL_PWR_PVD_EXTI_DISABLE_IT
(Ë
	`CLEAR_BIT
(
EXTI
->
IMR
, 
PWR_EXTI_LINE_PVD
)

	)

234 
	#__HAL_PWR_PVD_EXTI_ENABLE_EVENT
(Ë
	`SET_BIT
(
EXTI
->
EMR
, 
PWR_EXTI_LINE_PVD
)

	)

240 
	#__HAL_PWR_PVD_EXTI_DISABLE_EVENT
(Ë
	`CLEAR_BIT
(
EXTI
->
EMR
, 
PWR_EXTI_LINE_PVD
)

	)

247 
	#__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE
(Ë
	`SET_BIT
(
EXTI
->
FTSR
, 
PWR_EXTI_LINE_PVD
)

	)

254 
	#__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE
(Ë
	`CLEAR_BIT
(
EXTI
->
FTSR
, 
PWR_EXTI_LINE_PVD
)

	)

261 
	#__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE
(Ë
	`SET_BIT
(
EXTI
->
RTSR
, 
PWR_EXTI_LINE_PVD
)

	)

268 
	#__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE
(Ë
	`CLEAR_BIT
(
EXTI
->
RTSR
, 
PWR_EXTI_LINE_PVD
)

	)

274 
	#__HAL_PWR_PVD_EXTI_ENABLE_RISING_FALLING_EDGE
(Ë
	`__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE
();
	`__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE
();

	)

281 
	#__HAL_PWR_PVD_EXTI_DISABLE_RISING_FALLING_EDGE
(Ë
	`__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE
();
	`__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE
();

	)

289 
	#__HAL_PWR_PVD_EXTI_GET_FLAG
(Ë(
EXTI
->
PR
 & (
PWR_EXTI_LINE_PVD
))

	)

295 
	#__HAL_PWR_PVD_EXTI_CLEAR_FLAG
(Ë(
EXTI
->
PR
 = (
PWR_EXTI_LINE_PVD
))

	)

301 
	#__HAL_PWR_PVD_EXTI_GENERATE_SWIT
(Ë
	`SET_BIT
(
EXTI
->
SWIER
, 
PWR_EXTI_LINE_PVD
)

	)

310 
	#IS_PWR_PVD_LEVEL
(
LEVEL
Ë(((LEVELË=
PWR_PVDLEVEL_0
Ë|| ((LEVELË=
PWR_PVDLEVEL_1
)|| \

311 ((
LEVEL
Ë=
PWR_PVDLEVEL_2
Ë|| ((LEVELË=
PWR_PVDLEVEL_3
)|| \

312 ((
LEVEL
Ë=
PWR_PVDLEVEL_4
Ë|| ((LEVELË=
PWR_PVDLEVEL_5
)|| \

313 ((
LEVEL
Ë=
PWR_PVDLEVEL_6
Ë|| ((LEVELË=
PWR_PVDLEVEL_7
))

	)

316 
	#IS_PWR_PVD_MODE
(
MODE
Ë(((MODEË=
PWR_PVD_MODE_IT_RISING
)|| ((MODEË=
PWR_PVD_MODE_IT_FALLING
) || \

317 ((
MODE
Ë=
PWR_PVD_MODE_IT_RISING_FALLING
Ë|| ((MODEË=
PWR_PVD_MODE_EVENT_RISING
) || \

318 ((
MODE
Ë=
PWR_PVD_MODE_EVENT_FALLING
Ë|| ((MODEË=
PWR_PVD_MODE_EVENT_RISING_FALLING
) || \

319 ((
MODE
Ë=
PWR_PVD_MODE_NORMAL
))

	)

321 
	#IS_PWR_WAKEUP_PIN
(
PIN
Ë(((PINË=
PWR_WAKEUP_PIN1
))

	)

323 
	#IS_PWR_REGULATOR
(
REGULATOR
Ë(((REGULATORË=
PWR_MAINREGULATOR_ON
) || \

324 ((
REGULATOR
Ë=
PWR_LOWPOWERREGULATOR_ON
))

	)

326 
	#IS_PWR_SLEEP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_SLEEPENTRY_WFI
Ë|| ((ENTRYË=
PWR_SLEEPENTRY_WFE
))

	)

328 
	#IS_PWR_STOP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_STOPENTRY_WFI
Ë|| ((ENTRYË=
PWR_STOPENTRY_WFE
))

	)

347 
HAL_PWR_DeInô
();

348 
HAL_PWR_E«bÀBkUpAc˚ss
();

349 
HAL_PWR_DißbÀBkUpAc˚ss
();

360 
HAL_PWR_C⁄figPVD
(
PWR_PVDTy≥Def
 *
sC⁄figPVD
);

362 
HAL_PWR_E«bÀPVD
();

363 
HAL_PWR_DißbÀPVD
();

366 
HAL_PWR_E«bÀWakeUpPö
(
uöt32_t
 
WakeUpPöx
);

367 
HAL_PWR_DißbÀWakeUpPö
(
uöt32_t
 
WakeUpPöx
);

370 
HAL_PWR_E¡îSTOPMode
(
uöt32_t
 
Reguœt‹
, 
uöt8_t
 
STOPE¡ry
);

371 
HAL_PWR_E¡îSLEEPMode
(
uöt32_t
 
Reguœt‹
, 
uöt8_t
 
SLEEPE¡ry
);

372 
HAL_PWR_E¡îSTANDBYMode
();

374 
HAL_PWR_E«bÀSÀïOnExô
();

375 
HAL_PWR_DißbÀSÀïOnExô
();

376 
HAL_PWR_E«bÀSEVOnPíd
();

377 
HAL_PWR_DißbÀSEVOnPíd
();

381 
HAL_PWR_PVD_IRQH™dÀr
();

382 
HAL_PWR_PVDCÆlback
();

399 #ifde‡
__˝lu•lus


	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Inc\stm32f1xx_hal_rcc.h

39 #i‚de‡
__STM32F1xx_HAL_RCC_H


40 
	#__STM32F1xx_HAL_RCC_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f1xx_hÆ_def.h
"

66 
	#RCC_DBP_TIMEOUT_VALUE
 ((
uöt32_t
)100Ë

	)

68 
	#RCC_LSE_TIMEOUT_VALUE
 
LSE_STARTUP_TIMEOUT


	)

69 
	#CLOCKSWITCH_TIMEOUT_VALUE
 ((
uöt32_t
)5000Ë

	)

70 
	#HSE_TIMEOUT_VALUE
 
HSE_STARTUP_TIMEOUT


	)

71 
	#HSI_TIMEOUT_VALUE
 ((
uöt32_t
)2Ë

	)

72 
	#LSI_TIMEOUT_VALUE
 ((
uöt32_t
)2Ë

	)

73 
	#PLL_TIMEOUT_VALUE
 ((
uöt32_t
)2Ë

	)

74 
	#LSI_VALUE
 ((
uöt32_t
)40000Ë

	)

83 
	#RCC_OFFSET
 (
RCC_BASE
 - 
PERIPH_BASE
)

	)

84 
	#RCC_CR_OFFSET
 0x00

	)

85 
	#RCC_CFGR_OFFSET
 0x04

	)

86 
	#RCC_CIR_OFFSET
 0x08

	)

87 
	#RCC_BDCR_OFFSET
 0x20

	)

88 
	#RCC_CSR_OFFSET
 0x24

	)

98 
	#RCC_CR_OFFSET_BB
 (
RCC_OFFSET
 + 
RCC_CR_OFFSET
)

	)

99 
	#RCC_CFGR_OFFSET_BB
 (
RCC_OFFSET
 + 
RCC_CFGR_OFFSET
)

	)

100 
	#RCC_CIR_OFFSET_BB
 (
RCC_OFFSET
 + 
RCC_CIR_OFFSET
)

	)

101 
	#RCC_BDCR_OFFSET_BB
 (
RCC_OFFSET
 + 
RCC_BDCR_OFFSET
)

	)

102 
	#RCC_CSR_OFFSET_BB
 (
RCC_OFFSET
 + 
RCC_CSR_OFFSET
)

	)

106 
	#RCC_HSION_BIT_NUMBER
 
	`POSITION_VAL
(
RCC_CR_HSION
)

	)

107 
	#RCC_CR_HSION_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_CR_OFFSET_BB
 * 32Ë+ (
RCC_HSION_BIT_NUMBER
 * 4)))

	)

109 
	#RCC_HSEON_BIT_NUMBER
 
	`POSITION_VAL
(
RCC_CR_HSEON
)

	)

110 
	#RCC_CR_HSEON_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_CR_OFFSET_BB
 * 32Ë+ (
RCC_HSEON_BIT_NUMBER
 * 4)))

	)

112 
	#RCC_CSSON_BIT_NUMBER
 
	`POSITION_VAL
(
RCC_CR_CSSON
)

	)

113 
	#RCC_CR_CSSON_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_CR_OFFSET_BB
 * 32Ë+ (
RCC_CSSON_BIT_NUMBER
 * 4)))

	)

115 
	#RCC_PLLON_BIT_NUMBER
 
	`POSITION_VAL
(
RCC_CR_PLLON
)

	)

116 
	#RCC_CR_PLLON_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_CR_OFFSET_BB
 * 32Ë+ (
RCC_PLLON_BIT_NUMBER
 * 4)))

	)

120 
	#RCC_LSION_BIT_NUMBER
 
	`POSITION_VAL
(
RCC_CSR_LSION
)

	)

121 
	#RCC_CSR_LSION_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_CSR_OFFSET_BB
 * 32Ë+ (
RCC_LSION_BIT_NUMBER
 * 4)))

	)

124 
	#RCC_RMVF_BIT_NUMBER
 
	`POSITION_VAL
(
RCC_CSR_RMVF
)

	)

125 
	#RCC_CSR_RMVF_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_CSR_OFFSET_BB
 * 32Ë+ (
RCC_RMVF_BIT_NUMBER
 * 4)))

	)

129 
	#RCC_LSEON_BIT_NUMBER
 
	`POSITION_VAL
(
RCC_BDCR_LSEON
)

	)

130 
	#RCC_BDCR_LSEON_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_BDCR_OFFSET_BB
 * 32Ë+ (
RCC_LSEON_BIT_NUMBER
 * 4)))

	)

133 
	#RCC_LSEBYP_BIT_NUMBER
 
	`POSITION_VAL
(
RCC_BDCR_LSEBYP
)

	)

134 
	#RCC_BDCR_LSEBYP_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_BDCR_OFFSET_BB
 * 32Ë+ (
RCC_LSEBYP_BIT_NUMBER
 * 4)))

	)

137 
	#RCC_RTCEN_BIT_NUMBER
 
	`POSITION_VAL
(
RCC_BDCR_RTCEN
)

	)

138 
	#RCC_BDCR_RTCEN_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_BDCR_OFFSET_BB
 * 32Ë+ (
RCC_RTCEN_BIT_NUMBER
 * 4)))

	)

141 
	#RCC_BDRST_BIT_NUMBER
 
	`POSITION_VAL
(
RCC_BDCR_BDRST
)

	)

142 
	#RCC_BDCR_BDRST_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_BDCR_OFFSET_BB
 * 32Ë+ (
RCC_BDRST_BIT_NUMBER
 * 4)))

	)

149 
	#RCC_CR_BYTE2_ADDRESS
 ((
uöt32_t
)(
RCC_BASE
 + 
RCC_CR_OFFSET
 + 0x02))

	)

152 
	#RCC_CIR_BYTE1_ADDRESS
 ((
uöt32_t
)(
RCC_BASE
 + 
RCC_CIR_OFFSET
 + 0x01))

	)

155 
	#RCC_CIR_BYTE2_ADDRESS
 ((
uöt32_t
)(
RCC_BASE
 + 
RCC_CIR_OFFSET
 + 0x02))

	)

158 
	#CR_REG_INDEX
 ((
uöt8_t
)1)

	)

159 
	#BDCR_REG_INDEX
 ((
uöt8_t
)2)

	)

160 
	#CSR_REG_INDEX
 ((
uöt8_t
)3)

	)

162 
	#RCC_FLAG_MASK
 ((
uöt8_t
)0x1F)

	)

174 
	#__HAL_RCC_SYSCFG_CLK_DISABLE
 
__HAL_RCC_AFIO_CLK_DISABLE


	)

175 
	#__HAL_RCC_SYSCFG_CLK_ENABLE
 
__HAL_RCC_AFIO_CLK_ENABLE


	)

176 
	#__HAL_RCC_SYSCFG_FORCE_RESET
 
__HAL_RCC_AFIO_FORCE_RESET


	)

177 
	#__HAL_RCC_SYSCFG_RELEASE_RESET
 
__HAL_RCC_AFIO_RELEASE_RESET


	)

182 
	#IS_RCC_PLLSOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_PLLSOURCE_HSI_DIV2
) || \

183 ((
__SOURCE__
Ë=
RCC_PLLSOURCE_HSE
))

	)

184 
	#IS_RCC_OSCILLATORTYPE
(
__OSCILLATOR__
Ë(((__OSCILLATOR__Ë=
RCC_OSCILLATORTYPE_NONE
) || \

185 (((
__OSCILLATOR__
Ë& 
RCC_OSCILLATORTYPE_HSE
) == RCC_OSCILLATORTYPE_HSE) || \

186 (((
__OSCILLATOR__
Ë& 
RCC_OSCILLATORTYPE_HSI
) == RCC_OSCILLATORTYPE_HSI) || \

187 (((
__OSCILLATOR__
Ë& 
RCC_OSCILLATORTYPE_LSI
) == RCC_OSCILLATORTYPE_LSI) || \

188 (((
__OSCILLATOR__
Ë& 
RCC_OSCILLATORTYPE_LSE
Ë=RCC_OSCILLATORTYPE_LSE))

	)

189 
	#IS_RCC_HSE
(
__HSE__
Ë(((__HSE__Ë=
RCC_HSE_OFF
Ë|| ((__HSE__Ë=
RCC_HSE_ON
) || \

190 ((
__HSE__
Ë=
RCC_HSE_BYPASS
))

	)

191 
	#IS_RCC_LSE
(
__LSE__
Ë(((__LSE__Ë=
RCC_LSE_OFF
Ë|| ((__LSE__Ë=
RCC_LSE_ON
) || \

192 ((
__LSE__
Ë=
RCC_LSE_BYPASS
))

	)

193 
	#IS_RCC_HSI
(
__HSI__
Ë(((__HSI__Ë=
RCC_HSI_OFF
Ë|| ((__HSI__Ë=
RCC_HSI_ON
))

	)

194 
	#IS_RCC_CALIBRATION_VALUE
(
__VALUE__
Ë((__VALUE__Ë<0x1F)

	)

195 
	#IS_RCC_LSI
(
__LSI__
Ë(((__LSI__Ë=
RCC_LSI_OFF
Ë|| ((__LSI__Ë=
RCC_LSI_ON
))

	)

196 
	#IS_RCC_PLL
(
__PLL__
Ë(((__PLL__Ë=
RCC_PLL_NONE
Ë|| ((__PLL__Ë=
RCC_PLL_OFF
) || \

197 ((
__PLL__
Ë=
RCC_PLL_ON
))

	)

199 
	#IS_RCC_CLOCKTYPE
(
CLK
Ë((((CLKË& 
RCC_CLOCKTYPE_SYSCLK
) == RCC_CLOCKTYPE_SYSCLK) || \

200 (((
CLK
Ë& 
RCC_CLOCKTYPE_HCLK
) == RCC_CLOCKTYPE_HCLK) || \

201 (((
CLK
Ë& 
RCC_CLOCKTYPE_PCLK1
) == RCC_CLOCKTYPE_PCLK1) || \

202 (((
CLK
Ë& 
RCC_CLOCKTYPE_PCLK2
Ë=RCC_CLOCKTYPE_PCLK2))

	)

203 
	#IS_RCC_SYSCLKSOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_SYSCLKSOURCE_HSI
) || \

204 ((
__SOURCE__
Ë=
RCC_SYSCLKSOURCE_HSE
) || \

205 ((
__SOURCE__
Ë=
RCC_SYSCLKSOURCE_PLLCLK
))

	)

206 
	#IS_RCC_SYSCLKSOURCE_STATUS
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_SYSCLKSOURCE_STATUS_HSI
) || \

207 ((
__SOURCE__
Ë=
RCC_SYSCLKSOURCE_STATUS_HSE
) || \

208 ((
__SOURCE__
Ë=
RCC_SYSCLKSOURCE_STATUS_PLLCLK
))

	)

209 
	#IS_RCC_HCLK
(
__HCLK__
Ë(((__HCLK__Ë=
RCC_SYSCLK_DIV1
Ë|| ((__HCLK__Ë=
RCC_SYSCLK_DIV2
) || \

210 ((
__HCLK__
Ë=
RCC_SYSCLK_DIV4
Ë|| ((__HCLK__Ë=
RCC_SYSCLK_DIV8
) || \

211 ((
__HCLK__
Ë=
RCC_SYSCLK_DIV16
Ë|| ((__HCLK__Ë=
RCC_SYSCLK_DIV64
) || \

212 ((
__HCLK__
Ë=
RCC_SYSCLK_DIV128
Ë|| ((__HCLK__Ë=
RCC_SYSCLK_DIV256
) || \

213 ((
__HCLK__
Ë=
RCC_SYSCLK_DIV512
))

	)

214 
	#IS_RCC_PCLK
(
__PCLK__
Ë(((__PCLK__Ë=
RCC_HCLK_DIV1
Ë|| ((__PCLK__Ë=
RCC_HCLK_DIV2
) || \

215 ((
__PCLK__
Ë=
RCC_HCLK_DIV4
Ë|| ((__PCLK__Ë=
RCC_HCLK_DIV8
) || \

216 ((
__PCLK__
Ë=
RCC_HCLK_DIV16
))

	)

217 
	#IS_RCC_MCO
(
__MCO__
Ë((__MCO__Ë=
RCC_MCO
)

	)

218 
	#IS_RCC_MCODIV
(
__DIV__
Ë(((__DIV__Ë=
RCC_MCODIV_1
))

	)

219 
	#IS_RCC_RTCCLKSOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_RTCCLKSOURCE_NO_CLK
) || \

220 ((
__SOURCE__
Ë=
RCC_RTCCLKSOURCE_LSE
) || \

221 ((
__SOURCE__
Ë=
RCC_RTCCLKSOURCE_LSI
) || \

222 ((
__SOURCE__
Ë=
RCC_RTCCLKSOURCE_HSE_DIV128
))

	)

239 
uöt32_t
 
PLLSèã
;

242 
uöt32_t
 
PLLSour˚
;

245 
uöt32_t
 
PLLMUL
;

247 } 
	tRCC_PLLInôTy≥Def
;

254 
uöt32_t
 
ClockTy≥
;

257 
uöt32_t
 
SYSCLKSour˚
;

260 
uöt32_t
 
AHBCLKDividî
;

263 
uöt32_t
 
APB1CLKDividî
;

266 
uöt32_t
 
APB2CLKDividî
;

268 } 
	tRCC_ClkInôTy≥Def
;

283 
	#RCC_PLLSOURCE_HSI_DIV2
 ((
uöt32_t
)0x00000000Ë

	)

284 
	#RCC_PLLSOURCE_HSE
 
RCC_CFGR_PLLSRC


	)

293 
	#RCC_OSCILLATORTYPE_NONE
 ((
uöt32_t
)0x00000000)

	)

294 
	#RCC_OSCILLATORTYPE_HSE
 ((
uöt32_t
)0x00000001)

	)

295 
	#RCC_OSCILLATORTYPE_HSI
 ((
uöt32_t
)0x00000002)

	)

296 
	#RCC_OSCILLATORTYPE_LSE
 ((
uöt32_t
)0x00000004)

	)

297 
	#RCC_OSCILLATORTYPE_LSI
 ((
uöt32_t
)0x00000008)

	)

305 
	#RCC_HSE_OFF
 ((
uöt32_t
)0x00000000Ë

	)

306 
	#RCC_HSE_ON
 
RCC_CR_HSEON


	)

307 
	#RCC_HSE_BYPASS
 ((
uöt32_t
)(
RCC_CR_HSEBYP
 | 
RCC_CR_HSEON
)Ë

	)

315 
	#RCC_LSE_OFF
 ((
uöt32_t
)0x00000000Ë

	)

316 
	#RCC_LSE_ON
 
RCC_BDCR_LSEON


	)

317 
	#RCC_LSE_BYPASS
 ((
uöt32_t
)(
RCC_BDCR_LSEBYP
 | 
RCC_BDCR_LSEON
)Ë

	)

326 
	#RCC_HSI_OFF
 ((
uöt32_t
)0x00000000Ë

	)

327 
	#RCC_HSI_ON
 
RCC_CR_HSION


	)

329 
	#RCC_HSICALIBRATION_DEFAULT
 ((
uöt32_t
)0x10Ë

	)

338 
	#RCC_LSI_OFF
 ((
uöt32_t
)0x00000000Ë

	)

339 
	#RCC_LSI_ON
 
RCC_CSR_LSION


	)

348 
	#RCC_PLL_NONE
 ((
uöt32_t
)0x00000000Ë

	)

349 
	#RCC_PLL_OFF
 ((
uöt32_t
)0x00000001Ë

	)

350 
	#RCC_PLL_ON
 ((
uöt32_t
)0x00000002Ë

	)

359 
	#RCC_CLOCKTYPE_SYSCLK
 ((
uöt32_t
)0x00000001Ë

	)

360 
	#RCC_CLOCKTYPE_HCLK
 ((
uöt32_t
)0x00000002Ë

	)

361 
	#RCC_CLOCKTYPE_PCLK1
 ((
uöt32_t
)0x00000004Ë

	)

362 
	#RCC_CLOCKTYPE_PCLK2
 ((
uöt32_t
)0x00000008Ë

	)

371 
	#RCC_SYSCLKSOURCE_HSI
 
RCC_CFGR_SW_HSI


	)

372 
	#RCC_SYSCLKSOURCE_HSE
 
RCC_CFGR_SW_HSE


	)

373 
	#RCC_SYSCLKSOURCE_PLLCLK
 
RCC_CFGR_SW_PLL


	)

382 
	#RCC_SYSCLKSOURCE_STATUS_HSI
 
RCC_CFGR_SWS_HSI


	)

383 
	#RCC_SYSCLKSOURCE_STATUS_HSE
 
RCC_CFGR_SWS_HSE


	)

384 
	#RCC_SYSCLKSOURCE_STATUS_PLLCLK
 
RCC_CFGR_SWS_PLL


	)

393 
	#RCC_SYSCLK_DIV1
 
RCC_CFGR_HPRE_DIV1


	)

394 
	#RCC_SYSCLK_DIV2
 
RCC_CFGR_HPRE_DIV2


	)

395 
	#RCC_SYSCLK_DIV4
 
RCC_CFGR_HPRE_DIV4


	)

396 
	#RCC_SYSCLK_DIV8
 
RCC_CFGR_HPRE_DIV8


	)

397 
	#RCC_SYSCLK_DIV16
 
RCC_CFGR_HPRE_DIV16


	)

398 
	#RCC_SYSCLK_DIV64
 
RCC_CFGR_HPRE_DIV64


	)

399 
	#RCC_SYSCLK_DIV128
 
RCC_CFGR_HPRE_DIV128


	)

400 
	#RCC_SYSCLK_DIV256
 
RCC_CFGR_HPRE_DIV256


	)

401 
	#RCC_SYSCLK_DIV512
 
RCC_CFGR_HPRE_DIV512


	)

410 
	#RCC_HCLK_DIV1
 
RCC_CFGR_PPRE1_DIV1


	)

411 
	#RCC_HCLK_DIV2
 
RCC_CFGR_PPRE1_DIV2


	)

412 
	#RCC_HCLK_DIV4
 
RCC_CFGR_PPRE1_DIV4


	)

413 
	#RCC_HCLK_DIV8
 
RCC_CFGR_PPRE1_DIV8


	)

414 
	#RCC_HCLK_DIV16
 
RCC_CFGR_PPRE1_DIV16


	)

423 
	#RCC_RTCCLKSOURCE_NO_CLK
 ((
uöt32_t
)0x00000000Ë

	)

424 
	#RCC_RTCCLKSOURCE_LSE
 
RCC_BDCR_RTCSEL_LSE


	)

425 
	#RCC_RTCCLKSOURCE_LSI
 
RCC_BDCR_RTCSEL_LSI


	)

426 
	#RCC_RTCCLKSOURCE_HSE_DIV128
 
RCC_BDCR_RTCSEL_HSE


	)

435 
	#RCC_MCO1
 ((
uöt32_t
)0x00000000)

	)

436 
	#RCC_MCO
 
RCC_MCO1


	)

445 
	#RCC_MCODIV_1
 ((
uöt32_t
)0x00000000)

	)

454 
	#RCC_IT_LSIRDY
 ((
uöt8_t
)
RCC_CIR_LSIRDYF
Ë

	)

455 
	#RCC_IT_LSERDY
 ((
uöt8_t
)
RCC_CIR_LSERDYF
Ë

	)

456 
	#RCC_IT_HSIRDY
 ((
uöt8_t
)
RCC_CIR_HSIRDYF
Ë

	)

457 
	#RCC_IT_HSERDY
 ((
uöt8_t
)
RCC_CIR_HSERDYF
Ë

	)

458 
	#RCC_IT_PLLRDY
 ((
uöt8_t
)
RCC_CIR_PLLRDYF
Ë

	)

459 
	#RCC_IT_CSS
 ((
uöt8_t
)
RCC_CIR_CSSF
Ë

	)

474 
	#RCC_FLAG_HSIRDY
 ((
uöt8_t
)((
CR_REG_INDEX
 << 5Ë| 
	`POSITION_VAL
(
RCC_CR_HSIRDY
))Ë

	)

475 
	#RCC_FLAG_HSERDY
 ((
uöt8_t
)((
CR_REG_INDEX
 << 5Ë| 
	`POSITION_VAL
(
RCC_CR_HSERDY
))Ë

	)

476 
	#RCC_FLAG_PLLRDY
 ((
uöt8_t
)((
CR_REG_INDEX
 << 5Ë| 
	`POSITION_VAL
(
RCC_CR_PLLRDY
))Ë

	)

479 
	#RCC_FLAG_LSIRDY
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5Ë| 
	`POSITION_VAL
(
RCC_CSR_LSIRDY
))Ë

	)

480 
	#RCC_FLAG_RMV
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5Ë| 
RCC_RMVF_BIT_NUMBER
)Ë

	)

481 
	#RCC_FLAG_PINRST
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5Ë| 
	`POSITION_VAL
(
RCC_CSR_PINRSTF
))Ë

	)

482 
	#RCC_FLAG_PORRST
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5Ë| 
	`POSITION_VAL
(
RCC_CSR_PORRSTF
))Ë

	)

483 
	#RCC_FLAG_SFTRST
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5Ë| 
	`POSITION_VAL
(
RCC_CSR_SFTRSTF
))Ë

	)

484 
	#RCC_FLAG_IWDGRST
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5Ë| 
	`POSITION_VAL
(
RCC_CSR_IWDGRSTF
))Ë

	)

485 
	#RCC_FLAG_WWDGRST
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5Ë| 
	`POSITION_VAL
(
RCC_CSR_WWDGRSTF
))Ë

	)

486 
	#RCC_FLAG_LPWRRST
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5Ë| 
	`POSITION_VAL
(
RCC_CSR_LPWRRSTF
))Ë

	)

489 
	#RCC_FLAG_LSERDY
 ((
uöt8_t
)((
BDCR_REG_INDEX
 << 5Ë| 
	`POSITION_VAL
(
RCC_BDCR_LSERDY
))Ë

	)

512 
	#__HAL_RCC_DMA1_CLK_ENABLE
() do { \

513 
__IO
 
uöt32_t
 
tm¥eg
; \

514 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_DMA1EN
);\

516 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_DMA1EN
);\

517 
	`UNUSED
(
tm¥eg
); \

518 } 0)

	)

520 
	#__HAL_RCC_SRAM_CLK_ENABLE
() do { \

521 
__IO
 
uöt32_t
 
tm¥eg
; \

522 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_SRAMEN
);\

524 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_SRAMEN
);\

525 
	`UNUSED
(
tm¥eg
); \

526 } 0)

	)

528 
	#__HAL_RCC_FLITF_CLK_ENABLE
() do { \

529 
__IO
 
uöt32_t
 
tm¥eg
; \

530 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_FLITFEN
);\

532 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_FLITFEN
);\

533 
	`UNUSED
(
tm¥eg
); \

534 } 0)

	)

536 
	#__HAL_RCC_CRC_CLK_ENABLE
() do { \

537 
__IO
 
uöt32_t
 
tm¥eg
; \

538 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_CRCEN
);\

540 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_CRCEN
);\

541 
	`UNUSED
(
tm¥eg
); \

542 } 0)

	)

544 
	#__HAL_RCC_DMA1_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_DMA1EN
))

	)

545 
	#__HAL_RCC_SRAM_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_SRAMEN
))

	)

546 
	#__HAL_RCC_FLITF_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_FLITFEN
))

	)

547 
	#__HAL_RCC_CRC_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_CRCEN
))

	)

561 
	#__HAL_RCC_DMA1_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_DMA1EN
)Ë!
RESET
)

	)

562 
	#__HAL_RCC_DMA1_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_DMA1EN
)Ë=
RESET
)

	)

563 
	#__HAL_RCC_SRAM_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_SRAMEN
)Ë!
RESET
)

	)

564 
	#__HAL_RCC_SRAM_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_SRAMEN
)Ë=
RESET
)

	)

565 
	#__HAL_RCC_FLITF_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_FLITFEN
)Ë!
RESET
)

	)

566 
	#__HAL_RCC_FLITF_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_FLITFEN
)Ë=
RESET
)

	)

567 
	#__HAL_RCC_CRC_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_CRCEN
)Ë!
RESET
)

	)

568 
	#__HAL_RCC_CRC_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_CRCEN
)Ë=
RESET
)

	)

581 
	#__HAL_RCC_TIM2_CLK_ENABLE
() do { \

582 
__IO
 
uöt32_t
 
tm¥eg
; \

583 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM2EN
);\

585 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM2EN
);\

586 
	`UNUSED
(
tm¥eg
); \

587 } 0)

	)

589 
	#__HAL_RCC_TIM3_CLK_ENABLE
() do { \

590 
__IO
 
uöt32_t
 
tm¥eg
; \

591 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM3EN
);\

593 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM3EN
);\

594 
	`UNUSED
(
tm¥eg
); \

595 } 0)

	)

597 
	#__HAL_RCC_WWDG_CLK_ENABLE
() do { \

598 
__IO
 
uöt32_t
 
tm¥eg
; \

599 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_WWDGEN
);\

601 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_WWDGEN
);\

602 
	`UNUSED
(
tm¥eg
); \

603 } 0)

	)

605 
	#__HAL_RCC_USART2_CLK_ENABLE
() do { \

606 
__IO
 
uöt32_t
 
tm¥eg
; \

607 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART2EN
);\

609 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART2EN
);\

610 
	`UNUSED
(
tm¥eg
); \

611 } 0)

	)

613 
	#__HAL_RCC_I2C1_CLK_ENABLE
() do { \

614 
__IO
 
uöt32_t
 
tm¥eg
; \

615 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C1EN
);\

617 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C1EN
);\

618 
	`UNUSED
(
tm¥eg
); \

619 } 0)

	)

621 
	#__HAL_RCC_BKP_CLK_ENABLE
() do { \

622 
__IO
 
uöt32_t
 
tm¥eg
; \

623 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_BKPEN
);\

625 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_BKPEN
);\

626 
	`UNUSED
(
tm¥eg
); \

627 } 0)

	)

629 
	#__HAL_RCC_PWR_CLK_ENABLE
() do { \

630 
__IO
 
uöt32_t
 
tm¥eg
; \

631 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_PWREN
);\

633 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_PWREN
);\

634 
	`UNUSED
(
tm¥eg
); \

635 } 0)

	)

637 
	#__HAL_RCC_TIM2_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM2EN
))

	)

638 
	#__HAL_RCC_TIM3_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM3EN
))

	)

639 
	#__HAL_RCC_WWDG_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_WWDGEN
))

	)

640 
	#__HAL_RCC_USART2_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_USART2EN
))

	)

641 
	#__HAL_RCC_I2C1_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_I2C1EN
))

	)

643 
	#__HAL_RCC_BKP_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_BKPEN
))

	)

644 
	#__HAL_RCC_PWR_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_PWREN
))

	)

658 
	#__HAL_RCC_TIM2_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM2EN
)Ë!
RESET
)

	)

659 
	#__HAL_RCC_TIM2_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM2EN
)Ë=
RESET
)

	)

660 
	#__HAL_RCC_TIM3_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM3EN
)Ë!
RESET
)

	)

661 
	#__HAL_RCC_TIM3_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM3EN
)Ë=
RESET
)

	)

662 
	#__HAL_RCC_WWDG_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_WWDGEN
)Ë!
RESET
)

	)

663 
	#__HAL_RCC_WWDG_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_WWDGEN
)Ë=
RESET
)

	)

664 
	#__HAL_RCC_USART2_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_USART2EN
)Ë!
RESET
)

	)

665 
	#__HAL_RCC_USART2_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_USART2EN
)Ë=
RESET
)

	)

666 
	#__HAL_RCC_I2C1_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_I2C1EN
)Ë!
RESET
)

	)

667 
	#__HAL_RCC_I2C1_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_I2C1EN
)Ë=
RESET
)

	)

668 
	#__HAL_RCC_BKP_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_BKPEN
)Ë!
RESET
)

	)

669 
	#__HAL_RCC_BKP_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_BKPEN
)Ë=
RESET
)

	)

670 
	#__HAL_RCC_PWR_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_PWREN
)Ë!
RESET
)

	)

671 
	#__HAL_RCC_PWR_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_PWREN
)Ë=
RESET
)

	)

684 
	#__HAL_RCC_AFIO_CLK_ENABLE
() do { \

685 
__IO
 
uöt32_t
 
tm¥eg
; \

686 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_AFIOEN
);\

688 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_AFIOEN
);\

689 
	`UNUSED
(
tm¥eg
); \

690 } 0)

	)

692 
	#__HAL_RCC_GPIOA_CLK_ENABLE
() do { \

693 
__IO
 
uöt32_t
 
tm¥eg
; \

694 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPAEN
);\

696 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPAEN
);\

697 
	`UNUSED
(
tm¥eg
); \

698 } 0)

	)

700 
	#__HAL_RCC_GPIOB_CLK_ENABLE
() do { \

701 
__IO
 
uöt32_t
 
tm¥eg
; \

702 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPBEN
);\

704 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPBEN
);\

705 
	`UNUSED
(
tm¥eg
); \

706 } 0)

	)

708 
	#__HAL_RCC_GPIOC_CLK_ENABLE
() do { \

709 
__IO
 
uöt32_t
 
tm¥eg
; \

710 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPCEN
);\

712 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPCEN
);\

713 
	`UNUSED
(
tm¥eg
); \

714 } 0)

	)

716 
	#__HAL_RCC_GPIOD_CLK_ENABLE
() do { \

717 
__IO
 
uöt32_t
 
tm¥eg
; \

718 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPDEN
);\

720 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPDEN
);\

721 
	`UNUSED
(
tm¥eg
); \

722 } 0)

	)

724 
	#__HAL_RCC_ADC1_CLK_ENABLE
() do { \

725 
__IO
 
uöt32_t
 
tm¥eg
; \

726 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC1EN
);\

728 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC1EN
);\

729 
	`UNUSED
(
tm¥eg
); \

730 } 0)

	)

732 
	#__HAL_RCC_TIM1_CLK_ENABLE
() do { \

733 
__IO
 
uöt32_t
 
tm¥eg
; \

734 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM1EN
);\

736 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM1EN
);\

737 
	`UNUSED
(
tm¥eg
); \

738 } 0)

	)

740 
	#__HAL_RCC_SPI1_CLK_ENABLE
() do { \

741 
__IO
 
uöt32_t
 
tm¥eg
; \

742 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SPI1EN
);\

744 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SPI1EN
);\

745 
	`UNUSED
(
tm¥eg
); \

746 } 0)

	)

748 
	#__HAL_RCC_USART1_CLK_ENABLE
() do { \

749 
__IO
 
uöt32_t
 
tm¥eg
; \

750 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_USART1EN
);\

752 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_USART1EN
);\

753 
	`UNUSED
(
tm¥eg
); \

754 } 0)

	)

756 
	#__HAL_RCC_AFIO_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_AFIOEN
))

	)

757 
	#__HAL_RCC_GPIOA_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_IOPAEN
))

	)

758 
	#__HAL_RCC_GPIOB_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_IOPBEN
))

	)

759 
	#__HAL_RCC_GPIOC_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_IOPCEN
))

	)

760 
	#__HAL_RCC_GPIOD_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_IOPDEN
))

	)

761 
	#__HAL_RCC_ADC1_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_ADC1EN
))

	)

763 
	#__HAL_RCC_TIM1_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM1EN
))

	)

764 
	#__HAL_RCC_SPI1_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_SPI1EN
))

	)

765 
	#__HAL_RCC_USART1_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_USART1EN
))

	)

779 
	#__HAL_RCC_AFIO_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_AFIOEN
)Ë!
RESET
)

	)

780 
	#__HAL_RCC_AFIO_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_AFIOEN
)Ë=
RESET
)

	)

781 
	#__HAL_RCC_GPIOA_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPAEN
)Ë!
RESET
)

	)

782 
	#__HAL_RCC_GPIOA_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPAEN
)Ë=
RESET
)

	)

783 
	#__HAL_RCC_GPIOB_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPBEN
)Ë!
RESET
)

	)

784 
	#__HAL_RCC_GPIOB_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPBEN
)Ë=
RESET
)

	)

785 
	#__HAL_RCC_GPIOC_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPCEN
)Ë!
RESET
)

	)

786 
	#__HAL_RCC_GPIOC_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPCEN
)Ë=
RESET
)

	)

787 
	#__HAL_RCC_GPIOD_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPDEN
)Ë!
RESET
)

	)

788 
	#__HAL_RCC_GPIOD_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPDEN
)Ë=
RESET
)

	)

789 
	#__HAL_RCC_ADC1_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_ADC1EN
)Ë!
RESET
)

	)

790 
	#__HAL_RCC_ADC1_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_ADC1EN
)Ë=
RESET
)

	)

791 
	#__HAL_RCC_TIM1_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM1EN
)Ë!
RESET
)

	)

792 
	#__HAL_RCC_TIM1_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM1EN
)Ë=
RESET
)

	)

793 
	#__HAL_RCC_SPI1_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_SPI1EN
)Ë!
RESET
)

	)

794 
	#__HAL_RCC_SPI1_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_SPI1EN
)Ë=
RESET
)

	)

795 
	#__HAL_RCC_USART1_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_USART1EN
)Ë!
RESET
)

	)

796 
	#__HAL_RCC_USART1_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_USART1EN
)Ë=
RESET
)

	)

806 
	#__HAL_RCC_APB1_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 = 0xFFFFFFFF)

	)

807 
	#__HAL_RCC_TIM2_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM2RST
))

	)

808 
	#__HAL_RCC_TIM3_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM3RST
))

	)

809 
	#__HAL_RCC_WWDG_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_WWDGRST
))

	)

810 
	#__HAL_RCC_USART2_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_USART2RST
))

	)

811 
	#__HAL_RCC_I2C1_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_I2C1RST
))

	)

813 
	#__HAL_RCC_BKP_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_BKPRST
))

	)

814 
	#__HAL_RCC_PWR_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_PWRRST
))

	)

816 
	#__HAL_RCC_APB1_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 = 0x00)

	)

817 
	#__HAL_RCC_TIM2_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM2RST
))

	)

818 
	#__HAL_RCC_TIM3_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM3RST
))

	)

819 
	#__HAL_RCC_WWDG_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_WWDGRST
))

	)

820 
	#__HAL_RCC_USART2_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_USART2RST
))

	)

821 
	#__HAL_RCC_I2C1_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_I2C1RST
))

	)

823 
	#__HAL_RCC_BKP_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_BKPRST
))

	)

824 
	#__HAL_RCC_PWR_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_PWRRST
))

	)

834 
	#__HAL_RCC_APB2_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 = 0xFFFFFFFF)

	)

835 
	#__HAL_RCC_AFIO_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_AFIORST
))

	)

836 
	#__HAL_RCC_GPIOA_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_IOPARST
))

	)

837 
	#__HAL_RCC_GPIOB_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_IOPBRST
))

	)

838 
	#__HAL_RCC_GPIOC_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_IOPCRST
))

	)

839 
	#__HAL_RCC_GPIOD_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_IOPDRST
))

	)

840 
	#__HAL_RCC_ADC1_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_ADC1RST
))

	)

842 
	#__HAL_RCC_TIM1_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM1RST
))

	)

843 
	#__HAL_RCC_SPI1_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_SPI1RST
))

	)

844 
	#__HAL_RCC_USART1_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_USART1RST
))

	)

846 
	#__HAL_RCC_APB2_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 = 0x00)

	)

847 
	#__HAL_RCC_AFIO_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_AFIORST
))

	)

848 
	#__HAL_RCC_GPIOA_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_IOPARST
))

	)

849 
	#__HAL_RCC_GPIOB_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_IOPBRST
))

	)

850 
	#__HAL_RCC_GPIOC_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_IOPCRST
))

	)

851 
	#__HAL_RCC_GPIOD_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_IOPDRST
))

	)

852 
	#__HAL_RCC_ADC1_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_ADC1RST
))

	)

854 
	#__HAL_RCC_TIM1_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM1RST
))

	)

855 
	#__HAL_RCC_SPI1_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_SPI1RST
))

	)

856 
	#__HAL_RCC_USART1_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_USART1RST
))

	)

876 
	#__HAL_RCC_HSI_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_HSION_BB
 = 
ENABLE
)

	)

877 
	#__HAL_RCC_HSI_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_HSION_BB
 = 
DISABLE
)

	)

886 
	#__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST
(
_HSICALIBRATIONVALUE_
) \

887 (
	`MODIFY_REG
(
RCC
->
CR
, 
RCC_CR_HSITRIM
, (
uöt32_t
)(
_HSICALIBRATIONVALUE_
Ë<< 
	`POSITION_VAL
(RCC_CR_HSITRIM)))

	)

902 
	#__HAL_RCC_LSI_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CSR_LSION_BB
 = 
ENABLE
)

	)

909 
	#__HAL_RCC_LSI_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CSR_LSION_BB
 = 
DISABLE
)

	)

941 
	#__HAL_RCC_HSE_CONFIG
(
__STATE__
) \

943 i‡((
__STATE__
Ë=
RCC_HSE_ON
) \

945 
	`SET_BIT
(
RCC
->
CR
, 
RCC_CR_HSEON
); \

947 i‡((
__STATE__
Ë=
RCC_HSE_OFF
) \

949 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEON
); \

950 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEBYP
); \

952 i‡((
__STATE__
Ë=
RCC_HSE_BYPASS
) \

954 
	`SET_BIT
(
RCC
->
CR
, 
RCC_CR_HSEBYP
); \

955 
	`SET_BIT
(
RCC
->
CR
, 
RCC_CR_HSEON
); \

959 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEON
); \

960 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEBYP
); \

962 }0)

	)

989 
	#__HAL_RCC_LSE_CONFIG
(
__STATE__
) \

991 i‡((
__STATE__
Ë=
RCC_LSE_ON
) \

993 
	`SET_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEON
); \

995 i‡((
__STATE__
Ë=
RCC_LSE_OFF
) \

997 
	`CLEAR_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEON
); \

998 
	`CLEAR_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEBYP
); \

1000 i‡((
__STATE__
Ë=
RCC_LSE_BYPASS
) \

1002 
	`SET_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEBYP
); \

1003 
	`SET_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEON
); \

1007 
	`CLEAR_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEON
); \

1008 
	`CLEAR_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEBYP
); \

1010 }0)

	)

1026 
	#__HAL_RCC_PLL_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_PLLON_BB
 = 
ENABLE
)

	)

1031 
	#__HAL_RCC_PLL_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_PLLON_BB
 = 
DISABLE
)

	)

1063 
	#__HAL_RCC_PLL_CONFIG
(
__RCC_PLLSOURCE__
, 
__PLLMUL__
)\

1064 
	`MODIFY_REG
(
RCC
->
CFGR
, (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
),((
__RCC_PLLSOURCE__
Ë| (
__PLLMUL__
Ë))

	)

1072 
	#__HAL_RCC_GET_PLL_OSCSOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_PLLSRC
)))

	)

1090 
	#__HAL_RCC_SYSCLK_CONFIG
(
__RCC_SYSCLKSOURCE__
) \

1091 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_SW
, (
__RCC_SYSCLKSOURCE__
))

	)

1100 
	#__HAL_RCC_GET_SYSCLK_SOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CFGR
,
RCC_CFGR_SWS
)))

	)

1110 #i‡ 
deföed
(
RCC_CFGR_MCO_3
)

1142 
	#__HAL_RCC_MCO1_CONFIG
(
__MCOCLKSOURCE__
, 
__MCODIV__
) \

1143 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_MCO
, (
__MCOCLKSOURCE__
))

	)

1176 
	#__HAL_RCC_RTC_CONFIG
(
__RTC_CLKSOURCE__
Ë
	`MODIFY_REG
(
RCC
->
BDCR
, 
RCC_BDCR_RTCSEL
, (__RTC_CLKSOURCE__))

	)

1185 
	#__HAL_RCC_GET_RTC_SOURCE
(Ë(
	`READ_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_RTCSEL
))

	)

1190 
	#__HAL_RCC_RTC_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_BDCR_RTCEN_BB
 = 
ENABLE
)

	)

1195 
	#__HAL_RCC_RTC_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_BDCR_RTCEN_BB
 = 
DISABLE
)

	)

1201 
	#__HAL_RCC_BACKUPRESET_FORCE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_BDCR_BDRST_BB
 = 
ENABLE
)

	)

1205 
	#__HAL_RCC_BACKUPRESET_RELEASE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_BDCR_BDRST_BB
 = 
DISABLE
)

	)

1232 
	#__HAL_RCC_ENABLE_IT
(
__INTERRUPT__
Ë(*(
__IO
 
uöt8_t
 *Ë
RCC_CIR_BYTE1_ADDRESS
 |(__INTERRUPT__))

	)

1250 
	#__HAL_RCC_DISABLE_IT
(
__INTERRUPT__
Ë(*(
__IO
 
uöt8_t
 *Ë
RCC_CIR_BYTE1_ADDRESS
 &~(__INTERRUPT__))

	)

1269 
	#__HAL_RCC_CLEAR_IT
(
__INTERRUPT__
Ë(*(
__IO
 
uöt8_t
 *Ë
RCC_CIR_BYTE2_ADDRESS
 = (__INTERRUPT__))

	)

1289 
	#__HAL_RCC_GET_IT
(
__INTERRUPT__
Ë((
RCC
->
CIR
 & (__INTERRUPT__)Ë=(__INTERRUPT__))

	)

1295 
	#__HAL_RCC_CLEAR_RESET_FLAGS
(Ë(*(
__IO
 
uöt32_t
 *)
RCC_CSR_RMVF_BB
 = 
ENABLE
)

	)

1320 
	#__HAL_RCC_GET_FLAG
(
__FLAG__
Ë(((((__FLAG__Ë>> 5Ë=
CR_REG_INDEX
)? 
RCC
->
CR
 : \

1321 ((((
__FLAG__
Ë>> 5Ë=
BDCR_REG_INDEX
)? 
RCC
->
BDCR
 : \

1322 
RCC
->
CSR
)Ë& ((
uöt32_t
)1 << ((
__FLAG__
Ë& 
RCC_FLAG_MASK
)))

	)

1333 
	~"°m32f1xx_hÆ_rcc_ex.h
"

1345 
HAL_RCC_DeInô
();

1346 
HAL_SètusTy≥Def
 
HAL_RCC_OscC⁄fig
(
RCC_OscInôTy≥Def
 *
RCC_OscInôSåu˘
);

1347 
HAL_SètusTy≥Def
 
HAL_RCC_ClockC⁄fig
(
RCC_ClkInôTy≥Def
 *
RCC_ClkInôSåu˘
, 
uöt32_t
 
FL©ícy
);

1358 
HAL_RCC_MCOC⁄fig
(
uöt32_t
 
RCC_MCOx
, uöt32_à
RCC_MCOSour˚
, uöt32_à
RCC_MCODiv
);

1359 
HAL_RCC_E«bÀCSS
();

1360 
HAL_RCC_DißbÀCSS
();

1361 
uöt32_t
 
HAL_RCC_GëSysClockFªq
();

1362 
uöt32_t
 
HAL_RCC_GëHCLKFªq
();

1363 
uöt32_t
 
HAL_RCC_GëPCLK1Fªq
();

1364 
uöt32_t
 
HAL_RCC_GëPCLK2Fªq
();

1365 
HAL_RCC_GëOscC⁄fig
(
RCC_OscInôTy≥Def
 *
RCC_OscInôSåu˘
);

1366 
HAL_RCC_GëClockC⁄fig
(
RCC_ClkInôTy≥Def
 *
RCC_ClkInôSåu˘
, 
uöt32_t
 *
pFL©ícy
);

1369 
HAL_RCC_NMI_IRQH™dÀr
();

1372 
HAL_RCC_CSSCÆlback
();

1390 #ifde‡
__˝lu•lus


	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Inc\stm32f1xx_hal_rcc_ex.h

39 #i‚de‡
__STM32F1xx_HAL_RCC_EX_H


40 
	#__STM32F1xx_HAL_RCC_EX_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f1xx_hÆ_def.h
"

61 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

64 
	#PLLI2SON_BITNUMBER
 
	`POSITION_VAL
(
RCC_CR_PLL3ON
)

	)

65 
	#RCC_CR_PLLI2SON_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_CR_OFFSET_BB
 * 32Ë+ (
PLLI2SON_BITNUMBER
 * 4)))

	)

67 
	#PLL2ON_BITNUMBER
 
	`POSITION_VAL
(
RCC_CR_PLL2ON
)

	)

68 
	#RCC_CR_PLL2ON_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_CR_OFFSET_BB
 * 32Ë+ (
PLL2ON_BITNUMBER
 * 4)))

	)

70 
	#PLLI2S_TIMEOUT_VALUE
 ((
uöt32_t
)100Ë

	)

71 
	#PLL2_TIMEOUT_VALUE
 ((
uöt32_t
)100Ë

	)

76 
	#CR_REG_INDEX
 ((
uöt8_t
)1)

	)

86 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

87 
	#IS_RCC_PREDIV1_SOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_PREDIV1_SOURCE_HSE
) || \

88 ((
__SOURCE__
Ë=
RCC_PREDIV1_SOURCE_PLL2
))

	)

91 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
Ë|| deföed(
STM32F100xB
)\

92 || 
deföed
(
STM32F100xE
)

93 
	#IS_RCC_HSE_PREDIV
(
__DIV__
Ë(((__DIV__Ë=
RCC_HSE_PREDIV_DIV1
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV_DIV2
) || \

94 ((
__DIV__
Ë=
RCC_HSE_PREDIV_DIV3
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV_DIV4
) || \

95 ((
__DIV__
Ë=
RCC_HSE_PREDIV_DIV5
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV_DIV6
) || \

96 ((
__DIV__
Ë=
RCC_HSE_PREDIV_DIV7
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV_DIV8
) || \

97 ((
__DIV__
Ë=
RCC_HSE_PREDIV_DIV9
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV_DIV10
) || \

98 ((
__DIV__
Ë=
RCC_HSE_PREDIV_DIV11
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV_DIV12
) || \

99 ((
__DIV__
Ë=
RCC_HSE_PREDIV_DIV13
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV_DIV14
) || \

100 ((
__DIV__
Ë=
RCC_HSE_PREDIV_DIV15
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV_DIV16
))

	)

103 
	#IS_RCC_HSE_PREDIV
(
__DIV__
Ë(((__DIV__Ë=
RCC_HSE_PREDIV_DIV1
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV_DIV2
))

	)

106 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

107 
	#IS_RCC_PLL_MUL
(
__MUL__
Ë(((__MUL__Ë=
RCC_PLL_MUL4
Ë|| ((__MUL__Ë=
RCC_PLL_MUL5
) || \

108 ((
__MUL__
Ë=
RCC_PLL_MUL6
Ë|| ((__MUL__Ë=
RCC_PLL_MUL7
) || \

109 ((
__MUL__
Ë=
RCC_PLL_MUL8
Ë|| ((__MUL__Ë=
RCC_PLL_MUL9
) || \

110 ((
__MUL__
Ë=
RCC_PLL_MUL6_5
))

	)

112 
	#IS_RCC_MCO1SOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_MCO1SOURCE_SYSCLK
Ë|| ((__SOURCE__Ë=
RCC_MCO1SOURCE_HSI
) \

113 || ((
__SOURCE__
Ë=
RCC_MCO1SOURCE_HSE
Ë|| ((__SOURCE__Ë=
RCC_MCO1SOURCE_PLLCLK
) \

114 || ((
__SOURCE__
Ë=
RCC_MCO1SOURCE_PLL2CLK
Ë|| ((__SOURCE__Ë=
RCC_MCO1SOURCE_PLL3CLK
) \

115 || ((
__SOURCE__
Ë=
RCC_MCO1SOURCE_PLL3CLK_DIV2
Ë|| ((__SOURCE__Ë=
RCC_MCO1SOURCE_EXT_HSE
) \

116 || ((
__SOURCE__
Ë=
RCC_MCO1SOURCE_NOCLOCK
))

	)

119 
	#IS_RCC_PLL_MUL
(
__MUL__
Ë(((__MUL__Ë=
RCC_PLL_MUL2
Ë|| ((__MUL__Ë=
RCC_PLL_MUL3
) || \

120 ((
__MUL__
Ë=
RCC_PLL_MUL4
Ë|| ((__MUL__Ë=
RCC_PLL_MUL5
) || \

121 ((
__MUL__
Ë=
RCC_PLL_MUL6
Ë|| ((__MUL__Ë=
RCC_PLL_MUL7
) || \

122 ((
__MUL__
Ë=
RCC_PLL_MUL8
Ë|| ((__MUL__Ë=
RCC_PLL_MUL9
) || \

123 ((
__MUL__
Ë=
RCC_PLL_MUL10
Ë|| ((__MUL__Ë=
RCC_PLL_MUL11
) || \

124 ((
__MUL__
Ë=
RCC_PLL_MUL12
Ë|| ((__MUL__Ë=
RCC_PLL_MUL13
) || \

125 ((
__MUL__
Ë=
RCC_PLL_MUL14
Ë|| ((__MUL__Ë=
RCC_PLL_MUL15
) || \

126 ((
__MUL__
Ë=
RCC_PLL_MUL16
))

	)

128 
	#IS_RCC_MCO1SOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_MCO1SOURCE_SYSCLK
Ë|| ((__SOURCE__Ë=
RCC_MCO1SOURCE_HSI
) \

129 || ((
__SOURCE__
Ë=
RCC_MCO1SOURCE_HSE
Ë|| ((__SOURCE__Ë=
RCC_MCO1SOURCE_PLLCLK
) \

130 || ((
__SOURCE__
Ë=
RCC_MCO1SOURCE_NOCLOCK
))

	)

134 
	#IS_RCC_ADCPLLCLK_DIV
(
__ADCCLK__
Ë(((__ADCCLK__Ë=
RCC_ADCPCLK2_DIV2
Ë|| ((__ADCCLK__Ë=
RCC_ADCPCLK2_DIV4
) || \

135 ((
__ADCCLK__
Ë=
RCC_ADCPCLK2_DIV6
Ë|| ((__ADCCLK__Ë=
RCC_ADCPCLK2_DIV8
))

	)

137 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

138 
	#IS_RCC_I2S2CLKSOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_I2S2CLKSOURCE_SYSCLK
Ë|| ((__SOURCE__Ë=
RCC_I2S2CLKSOURCE_PLLI2S_VCO
))

	)

140 
	#IS_RCC_I2S3CLKSOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_I2S3CLKSOURCE_SYSCLK
Ë|| ((__SOURCE__Ë=
RCC_I2S3CLKSOURCE_PLLI2S_VCO
))

	)

142 
	#IS_RCC_USBPLLCLK_DIV
(
__USBCLK__
Ë(((__USBCLK__Ë=
RCC_USBCLKSOURCE_PLL_DIV2
Ë|| ((__USBCLK__Ë=
RCC_USBCLKSOURCE_PLL_DIV3
))

	)

144 
	#IS_RCC_PLLI2S_MUL
(
__MUL__
Ë(((__MUL__Ë=
RCC_PLLI2S_MUL8
Ë|| ((__MUL__Ë=
RCC_PLLI2S_MUL9
) || \

145 ((
__MUL__
Ë=
RCC_PLLI2S_MUL10
Ë|| ((__MUL__Ë=
RCC_PLLI2S_MUL11
) || \

146 ((
__MUL__
Ë=
RCC_PLLI2S_MUL12
Ë|| ((__MUL__Ë=
RCC_PLLI2S_MUL13
) || \

147 ((
__MUL__
Ë=
RCC_PLLI2S_MUL14
Ë|| ((__MUL__Ë=
RCC_PLLI2S_MUL16
) || \

148 ((
__MUL__
Ë=
RCC_PLLI2S_MUL20
))

	)

150 
	#IS_RCC_HSE_PREDIV2
(
__DIV__
Ë(((__DIV__Ë=
RCC_HSE_PREDIV2_DIV1
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV2_DIV2
) || \

151 ((
__DIV__
Ë=
RCC_HSE_PREDIV2_DIV3
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV2_DIV4
) || \

152 ((
__DIV__
Ë=
RCC_HSE_PREDIV2_DIV5
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV2_DIV6
) || \

153 ((
__DIV__
Ë=
RCC_HSE_PREDIV2_DIV7
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV2_DIV8
) || \

154 ((
__DIV__
Ë=
RCC_HSE_PREDIV2_DIV9
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV2_DIV10
) || \

155 ((
__DIV__
Ë=
RCC_HSE_PREDIV2_DIV11
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV2_DIV12
) || \

156 ((
__DIV__
Ë=
RCC_HSE_PREDIV2_DIV13
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV2_DIV14
) || \

157 ((
__DIV__
Ë=
RCC_HSE_PREDIV2_DIV15
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV2_DIV16
))

	)

159 
	#IS_RCC_PLL2
(
__PLL__
Ë(((__PLL__Ë=
RCC_PLL2_NONE
Ë|| ((__PLL__Ë=
RCC_PLL2_OFF
) || \

160 ((
__PLL__
Ë=
RCC_PLL2_ON
))

	)

162 
	#IS_RCC_PLL2_MUL
(
__MUL__
Ë(((__MUL__Ë=
RCC_PLL2_MUL8
Ë|| ((__MUL__Ë=
RCC_PLL2_MUL9
) || \

163 ((
__MUL__
Ë=
RCC_PLL2_MUL10
Ë|| ((__MUL__Ë=
RCC_PLL2_MUL11
) || \

164 ((
__MUL__
Ë=
RCC_PLL2_MUL12
Ë|| ((__MUL__Ë=
RCC_PLL2_MUL13
) || \

165 ((
__MUL__
Ë=
RCC_PLL2_MUL14
Ë|| ((__MUL__Ë=
RCC_PLL2_MUL16
) || \

166 ((
__MUL__
Ë=
RCC_PLL2_MUL20
))

	)

168 
	#IS_RCC_PERIPHCLOCK
(
__SELECTION__
) \

169 ((((
__SELECTION__
Ë& 
RCC_PERIPHCLK_RTC
) == RCC_PERIPHCLK_RTC) || \

170 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_ADC
) == RCC_PERIPHCLK_ADC) || \

171 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_I2S2
) == RCC_PERIPHCLK_I2S2) || \

172 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_I2S3
) == RCC_PERIPHCLK_I2S3) || \

173 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_USB
Ë=RCC_PERIPHCLK_USB))

	)

175 #ñi‡
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

177 
	#IS_RCC_I2S2CLKSOURCE
(
__SOURCE__
Ë((__SOURCE__Ë=
RCC_I2S2CLKSOURCE_SYSCLK
)

	)

179 
	#IS_RCC_I2S3CLKSOURCE
(
__SOURCE__
Ë((__SOURCE__Ë=
RCC_I2S3CLKSOURCE_SYSCLK
)

	)

181 
	#IS_RCC_PERIPHCLOCK
(
__SELECTION__
) \

182 ((((
__SELECTION__
Ë& 
RCC_PERIPHCLK_RTC
) == RCC_PERIPHCLK_RTC) || \

183 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_ADC
) == RCC_PERIPHCLK_ADC) || \

184 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_I2S2
) == RCC_PERIPHCLK_I2S2) || \

185 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_I2S3
) == RCC_PERIPHCLK_I2S3) || \

186 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_USB
Ë=RCC_PERIPHCLK_USB))

	)

189 #ñi‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

190 || 
deföed
(
STM32F103xB
)

192 
	#IS_RCC_PERIPHCLOCK
(
__SELECTION__
) \

193 ((((
__SELECTION__
Ë& 
RCC_PERIPHCLK_RTC
) == RCC_PERIPHCLK_RTC) || \

194 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_ADC
) == RCC_PERIPHCLK_ADC) || \

195 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_USB
Ë=RCC_PERIPHCLK_USB))

	)

199 
	#IS_RCC_PERIPHCLOCK
(
__SELECTION__
) \

200 ((((
__SELECTION__
Ë& 
RCC_PERIPHCLK_RTC
) == RCC_PERIPHCLK_RTC) || \

201 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_ADC
Ë=RCC_PERIPHCLK_ADC))

	)

205 #i‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

206 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

208 
	#IS_RCC_USBPLLCLK_DIV
(
__USBCLK__
Ë(((__USBCLK__Ë=
RCC_USBCLKSOURCE_PLL
Ë|| ((__USBCLK__Ë=
RCC_USBCLKSOURCE_PLL_DIV1_5
))

	)

222 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

228 
uöt32_t
 
PLL2Sèã
;

231 
uöt32_t
 
PLL2MUL
;

234 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

235 
uöt32_t
 
HSEPªdiv2VÆue
;

239 } 
	tRCC_PLL2InôTy≥Def
;

248 
uöt32_t
 
Oscûœt‹Ty≥
;

251 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

252 
uöt32_t
 
Pªdiv1Sour˚
;

256 
uöt32_t
 
HSESèã
;

259 
uöt32_t
 
HSEPªdivVÆue
;

262 
uöt32_t
 
LSESèã
;

265 
uöt32_t
 
HSISèã
;

268 
uöt32_t
 
HSICÆibøti⁄VÆue
;

271 
uöt32_t
 
LSISèã
;

274 
RCC_PLLInôTy≥Def
 
PLL
;

276 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

277 
RCC_PLL2InôTy≥Def
 
PLL2
;

279 } 
	tRCC_OscInôTy≥Def
;

281 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

287 
uöt32_t
 
PLLI2SMUL
;

290 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

291 
uöt32_t
 
HSEPªdiv2VÆue
;

295 } 
	tRCC_PLLI2SInôTy≥Def
;

303 
uöt32_t
 
PîùhClockSñe˘i⁄
;

306 
uöt32_t
 
RTCClockSñe˘i⁄
;

309 
uöt32_t
 
AdcClockSñe˘i⁄
;

312 #i‡
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
Ë|| deföed(
STM32F105xC
)\

313 || 
deföed
(
STM32F107xC
)

314 
uöt32_t
 
I2s2ClockSñe˘i⁄
;

317 
uöt32_t
 
I2s3ClockSñe˘i⁄
;

320 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

321 
RCC_PLLI2SInôTy≥Def
 
PLLI2S
;

327 #i‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

328 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)\

329 || 
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

330 
uöt32_t
 
UsbClockSñe˘i⁄
;

334 } 
	tRCC_PîùhCLKInôTy≥Def
;

349 
	#RCC_PERIPHCLK_RTC
 ((
uöt32_t
)0x00000001)

	)

350 
	#RCC_PERIPHCLK_ADC
 ((
uöt32_t
)0x00000002)

	)

351 #i‡
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
Ë|| deföed(
STM32F105xC
)\

352 || 
deföed
(
STM32F107xC
)

353 
	#RCC_PERIPHCLK_I2S2
 ((
uöt32_t
)0x00000004)

	)

354 
	#RCC_PERIPHCLK_I2S3
 ((
uöt32_t
)0x00000008)

	)

356 #i‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

357 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)\

358 || 
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

359 
	#RCC_PERIPHCLK_USB
 ((
uöt32_t
)0x00000010)

	)

369 
	#RCC_ADCPCLK2_DIV2
 
RCC_CFGR_ADCPRE_DIV2


	)

370 
	#RCC_ADCPCLK2_DIV4
 
RCC_CFGR_ADCPRE_DIV4


	)

371 
	#RCC_ADCPCLK2_DIV6
 
RCC_CFGR_ADCPRE_DIV6


	)

372 
	#RCC_ADCPCLK2_DIV8
 
RCC_CFGR_ADCPRE_DIV8


	)

378 #i‡
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
Ë|| deföed(
STM32F105xC
)\

379 || 
deföed
(
STM32F107xC
)

383 
	#RCC_I2S2CLKSOURCE_SYSCLK
 ((
uöt32_t
)0x00000000)

	)

384 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

385 
	#RCC_I2S2CLKSOURCE_PLLI2S_VCO
 
RCC_CFGR2_I2S2SRC


	)

395 
	#RCC_I2S3CLKSOURCE_SYSCLK
 ((
uöt32_t
)0x00000000)

	)

396 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

397 
	#RCC_I2S3CLKSOURCE_PLLI2S_VCO
 
RCC_CFGR2_I2S3SRC


	)

406 #i‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

407 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

412 
	#RCC_USBCLKSOURCE_PLL
 
RCC_CFGR_USBPRE


	)

413 
	#RCC_USBCLKSOURCE_PLL_DIV1_5
 ((
uöt32_t
)0x00000000)

	)

422 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

426 
	#RCC_USBCLKSOURCE_PLL_DIV2
 
RCC_CFGR_OTGFSPRE


	)

427 
	#RCC_USBCLKSOURCE_PLL_DIV3
 ((
uöt32_t
)0x00000000)

	)

437 
	#RCC_PLLI2S_MUL8
 
RCC_CFGR2_PLL3MUL8


	)

438 
	#RCC_PLLI2S_MUL9
 
RCC_CFGR2_PLL3MUL9


	)

439 
	#RCC_PLLI2S_MUL10
 
RCC_CFGR2_PLL3MUL10


	)

440 
	#RCC_PLLI2S_MUL11
 
RCC_CFGR2_PLL3MUL11


	)

441 
	#RCC_PLLI2S_MUL12
 
RCC_CFGR2_PLL3MUL12


	)

442 
	#RCC_PLLI2S_MUL13
 
RCC_CFGR2_PLL3MUL13


	)

443 
	#RCC_PLLI2S_MUL14
 
RCC_CFGR2_PLL3MUL14


	)

444 
	#RCC_PLLI2S_MUL16
 
RCC_CFGR2_PLL3MUL16


	)

445 
	#RCC_PLLI2S_MUL20
 
RCC_CFGR2_PLL3MUL20


	)

452 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

457 
	#RCC_PREDIV1_SOURCE_HSE
 
RCC_CFGR2_PREDIV1SRC_HSE


	)

458 
	#RCC_PREDIV1_SOURCE_PLL2
 
RCC_CFGR2_PREDIV1SRC_PLL2


	)

469 
	#RCC_HSE_PREDIV_DIV1
 ((
uöt32_t
)0x00000000)

	)

471 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
Ë|| deföed(
STM32F100xB
)\

472 || 
deföed
(
STM32F100xE
)

473 
	#RCC_HSE_PREDIV_DIV2
 
RCC_CFGR2_PREDIV1_DIV2


	)

474 
	#RCC_HSE_PREDIV_DIV3
 
RCC_CFGR2_PREDIV1_DIV3


	)

475 
	#RCC_HSE_PREDIV_DIV4
 
RCC_CFGR2_PREDIV1_DIV4


	)

476 
	#RCC_HSE_PREDIV_DIV5
 
RCC_CFGR2_PREDIV1_DIV5


	)

477 
	#RCC_HSE_PREDIV_DIV6
 
RCC_CFGR2_PREDIV1_DIV6


	)

478 
	#RCC_HSE_PREDIV_DIV7
 
RCC_CFGR2_PREDIV1_DIV7


	)

479 
	#RCC_HSE_PREDIV_DIV8
 
RCC_CFGR2_PREDIV1_DIV8


	)

480 
	#RCC_HSE_PREDIV_DIV9
 
RCC_CFGR2_PREDIV1_DIV9


	)

481 
	#RCC_HSE_PREDIV_DIV10
 
RCC_CFGR2_PREDIV1_DIV10


	)

482 
	#RCC_HSE_PREDIV_DIV11
 
RCC_CFGR2_PREDIV1_DIV11


	)

483 
	#RCC_HSE_PREDIV_DIV12
 
RCC_CFGR2_PREDIV1_DIV12


	)

484 
	#RCC_HSE_PREDIV_DIV13
 
RCC_CFGR2_PREDIV1_DIV13


	)

485 
	#RCC_HSE_PREDIV_DIV14
 
RCC_CFGR2_PREDIV1_DIV14


	)

486 
	#RCC_HSE_PREDIV_DIV15
 
RCC_CFGR2_PREDIV1_DIV15


	)

487 
	#RCC_HSE_PREDIV_DIV16
 
RCC_CFGR2_PREDIV1_DIV16


	)

489 
	#RCC_HSE_PREDIV_DIV2
 
RCC_CFGR_PLLXTPRE


	)

496 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

501 
	#RCC_HSE_PREDIV2_DIV1
 
RCC_CFGR2_PREDIV2_DIV1


	)

502 
	#RCC_HSE_PREDIV2_DIV2
 
RCC_CFGR2_PREDIV2_DIV2


	)

503 
	#RCC_HSE_PREDIV2_DIV3
 
RCC_CFGR2_PREDIV2_DIV3


	)

504 
	#RCC_HSE_PREDIV2_DIV4
 
RCC_CFGR2_PREDIV2_DIV4


	)

505 
	#RCC_HSE_PREDIV2_DIV5
 
RCC_CFGR2_PREDIV2_DIV5


	)

506 
	#RCC_HSE_PREDIV2_DIV6
 
RCC_CFGR2_PREDIV2_DIV6


	)

507 
	#RCC_HSE_PREDIV2_DIV7
 
RCC_CFGR2_PREDIV2_DIV7


	)

508 
	#RCC_HSE_PREDIV2_DIV8
 
RCC_CFGR2_PREDIV2_DIV8


	)

509 
	#RCC_HSE_PREDIV2_DIV9
 
RCC_CFGR2_PREDIV2_DIV9


	)

510 
	#RCC_HSE_PREDIV2_DIV10
 
RCC_CFGR2_PREDIV2_DIV10


	)

511 
	#RCC_HSE_PREDIV2_DIV11
 
RCC_CFGR2_PREDIV2_DIV11


	)

512 
	#RCC_HSE_PREDIV2_DIV12
 
RCC_CFGR2_PREDIV2_DIV12


	)

513 
	#RCC_HSE_PREDIV2_DIV13
 
RCC_CFGR2_PREDIV2_DIV13


	)

514 
	#RCC_HSE_PREDIV2_DIV14
 
RCC_CFGR2_PREDIV2_DIV14


	)

515 
	#RCC_HSE_PREDIV2_DIV15
 
RCC_CFGR2_PREDIV2_DIV15


	)

516 
	#RCC_HSE_PREDIV2_DIV16
 
RCC_CFGR2_PREDIV2_DIV16


	)

525 
	#RCC_PLL2_NONE
 ((
uöt32_t
)0x00000000)

	)

526 
	#RCC_PLL2_OFF
 ((
uöt32_t
)0x00000001)

	)

527 
	#RCC_PLL2_ON
 ((
uöt32_t
)0x00000002)

	)

537 
	#RCC_PLL2_MUL8
 
RCC_CFGR2_PLL2MUL8


	)

538 
	#RCC_PLL2_MUL9
 
RCC_CFGR2_PLL2MUL9


	)

539 
	#RCC_PLL2_MUL10
 
RCC_CFGR2_PLL2MUL10


	)

540 
	#RCC_PLL2_MUL11
 
RCC_CFGR2_PLL2MUL11


	)

541 
	#RCC_PLL2_MUL12
 
RCC_CFGR2_PLL2MUL12


	)

542 
	#RCC_PLL2_MUL13
 
RCC_CFGR2_PLL2MUL13


	)

543 
	#RCC_PLL2_MUL14
 
RCC_CFGR2_PLL2MUL14


	)

544 
	#RCC_PLL2_MUL16
 
RCC_CFGR2_PLL2MUL16


	)

545 
	#RCC_PLL2_MUL20
 
RCC_CFGR2_PLL2MUL20


	)

557 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

559 
	#RCC_PLL_MUL2
 
RCC_CFGR_PLLMULL2


	)

560 
	#RCC_PLL_MUL3
 
RCC_CFGR_PLLMULL3


	)

562 
	#RCC_PLL_MUL4
 
RCC_CFGR_PLLMULL4


	)

563 
	#RCC_PLL_MUL5
 
RCC_CFGR_PLLMULL5


	)

564 
	#RCC_PLL_MUL6
 
RCC_CFGR_PLLMULL6


	)

565 
	#RCC_PLL_MUL7
 
RCC_CFGR_PLLMULL7


	)

566 
	#RCC_PLL_MUL8
 
RCC_CFGR_PLLMULL8


	)

567 
	#RCC_PLL_MUL9
 
RCC_CFGR_PLLMULL9


	)

568 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

569 
	#RCC_PLL_MUL6_5
 
RCC_CFGR_PLLMULL6_5


	)

571 
	#RCC_PLL_MUL10
 
RCC_CFGR_PLLMULL10


	)

572 
	#RCC_PLL_MUL11
 
RCC_CFGR_PLLMULL11


	)

573 
	#RCC_PLL_MUL12
 
RCC_CFGR_PLLMULL12


	)

574 
	#RCC_PLL_MUL13
 
RCC_CFGR_PLLMULL13


	)

575 
	#RCC_PLL_MUL14
 
RCC_CFGR_PLLMULL14


	)

576 
	#RCC_PLL_MUL15
 
RCC_CFGR_PLLMULL15


	)

577 
	#RCC_PLL_MUL16
 
RCC_CFGR_PLLMULL16


	)

587 
	#RCC_MCO1SOURCE_NOCLOCK
 ((
uöt32_t
)
RCC_CFGR_MCO_NOCLOCK
)

	)

588 
	#RCC_MCO1SOURCE_SYSCLK
 ((
uöt32_t
)
RCC_CFGR_MCO_SYSCLK
)

	)

589 
	#RCC_MCO1SOURCE_HSI
 ((
uöt32_t
)
RCC_CFGR_MCO_HSI
)

	)

590 
	#RCC_MCO1SOURCE_HSE
 ((
uöt32_t
)
RCC_CFGR_MCO_HSE
)

	)

591 
	#RCC_MCO1SOURCE_PLLCLK
 ((
uöt32_t
)
RCC_CFGR_MCO_PLLCLK_DIV2
)

	)

592 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

593 
	#RCC_MCO1SOURCE_PLL2CLK
 ((
uöt32_t
)
RCC_CFGR_MCO_PLL2CLK
)

	)

594 
	#RCC_MCO1SOURCE_PLL3CLK_DIV2
 ((
uöt32_t
)
RCC_CFGR_MCO_PLL3CLK_DIV2
)

	)

595 
	#RCC_MCO1SOURCE_EXT_HSE
 ((
uöt32_t
)
RCC_CFGR_MCO_EXT_HSE
)

	)

596 
	#RCC_MCO1SOURCE_PLL3CLK
 ((
uöt32_t
)
RCC_CFGR_MCO_PLL3CLK
)

	)

602 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

606 
	#RCC_IT_PLL2RDY
 ((
uöt8_t
)
RCC_CIR_PLL2RDYF
)

	)

607 
	#RCC_IT_PLLI2SRDY
 ((
uöt8_t
)
RCC_CIR_PLL3RDYF
)

	)

620 
	#RCC_FLAG_PLL2RDY
 ((
uöt8_t
)((
CR_REG_INDEX
 << 5Ë| 
	`POSITION_VAL
(
RCC_CR_PLL2RDY
)))

	)

621 
	#RCC_FLAG_PLLI2SRDY
 ((
uöt8_t
)((
CR_REG_INDEX
 << 5Ë| 
	`POSITION_VAL
(
RCC_CR_PLL3RDY
)))

	)

644 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
)\

645 || 
deföed
(
STM32F103xG
Ë|| deföed(
STM32F105xC
Ë|| deföed (
STM32F107xC
)\

646 || 
deföed
 (
STM32F100xE
)

647 
	#__HAL_RCC_DMA2_CLK_ENABLE
() do { \

648 
__IO
 
uöt32_t
 
tm¥eg
; \

649 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_DMA2EN
);\

651 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_DMA2EN
);\

652 
	`UNUSED
(
tm¥eg
); \

653 } 0)

	)

655 
	#__HAL_RCC_DMA2_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_DMA2EN
))

	)

658 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
)\

659 || 
deföed
(
STM32F103xG
Ë|| deföed (
STM32F100xE
)

660 
	#__HAL_RCC_FSMC_CLK_ENABLE
() do { \

661 
__IO
 
uöt32_t
 
tm¥eg
; \

662 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_FSMCEN
);\

664 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_FSMCEN
);\

665 
	`UNUSED
(
tm¥eg
); \

666 } 0)

	)

668 
	#__HAL_RCC_FSMC_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_FSMCEN
))

	)

671 #i‡
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

672 
	#__HAL_RCC_SDIO_CLK_ENABLE
() do { \

673 
__IO
 
uöt32_t
 
tm¥eg
; \

674 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_SDIOEN
);\

676 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_SDIOEN
);\

677 
	`UNUSED
(
tm¥eg
); \

678 } 0)

	)

681 
	#__HAL_RCC_SDIO_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_SDIOEN
))

	)

684 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

685 
	#__HAL_RCC_USB_OTG_FS_CLK_ENABLE
() do { \

686 
__IO
 
uöt32_t
 
tm¥eg
; \

687 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_OTGFSEN
);\

689 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_OTGFSEN
);\

690 
	`UNUSED
(
tm¥eg
); \

691 } 0)

	)

694 
	#__HAL_RCC_USB_OTG_FS_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_OTGFSEN
))

	)

697 #i‡
deföed
(
STM32F107xC
)

698 
	#__HAL_RCC_ETHMAC_CLK_ENABLE
() do { \

699 
__IO
 
uöt32_t
 
tm¥eg
; \

700 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_ETHMACEN
);\

702 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_ETHMACEN
);\

703 
	`UNUSED
(
tm¥eg
); \

704 } 0)

	)

706 
	#__HAL_RCC_ETHMACTX_CLK_ENABLE
() do { \

707 
__IO
 
uöt32_t
 
tm¥eg
; \

708 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_ETHMACTXEN
);\

710 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_ETHMACTXEN
);\

711 
	`UNUSED
(
tm¥eg
); \

712 } 0)

	)

714 
	#__HAL_RCC_ETHMACRX_CLK_ENABLE
() do { \

715 
__IO
 
uöt32_t
 
tm¥eg
; \

716 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_ETHMACRXEN
);\

718 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_ETHMACRXEN
);\

719 
	`UNUSED
(
tm¥eg
); \

720 } 0)

	)

722 
	#__HAL_RCC_ETHMAC_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_ETHMACEN
))

	)

723 
	#__HAL_RCC_ETHMACTX_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_ETHMACTXEN
))

	)

724 
	#__HAL_RCC_ETHMACRX_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_ETHMACRXEN
))

	)

729 
	#__HAL_RCC_ETH_CLK_ENABLE
() do { \

730 
	`__HAL_RCC_ETHMAC_CLK_ENABLE
(); \

731 
	`__HAL_RCC_ETHMACTX_CLK_ENABLE
(); \

732 
	`__HAL_RCC_ETHMACRX_CLK_ENABLE
(); \

733 } 0)

	)

737 
	#__HAL_RCC_ETH_CLK_DISABLE
() do { \

738 
	`__HAL_RCC_ETHMACTX_CLK_DISABLE
(); \

739 
	`__HAL_RCC_ETHMACRX_CLK_DISABLE
(); \

740 
	`__HAL_RCC_ETHMAC_CLK_DISABLE
(); \

741 } 0)

	)

757 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
)\

758 || 
deföed
(
STM32F103xG
Ë|| deföed(
STM32F105xC
Ë|| deföed (
STM32F107xC
)\

759 || 
deföed
 (
STM32F100xE
)

760 
	#__HAL_RCC_DMA2_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_DMA2EN
)Ë!
RESET
)

	)

761 
	#__HAL_RCC_DMA2_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_DMA2EN
)Ë=
RESET
)

	)

763 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
)\

764 || 
deföed
(
STM32F103xG
Ë|| deföed (
STM32F100xE
)

765 
	#__HAL_RCC_FSMC_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_FSMCEN
)Ë!
RESET
)

	)

766 
	#__HAL_RCC_FSMC_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_FSMCEN
)Ë=
RESET
)

	)

768 #i‡
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

769 
	#__HAL_RCC_SDIO_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_SDIOEN
)Ë!
RESET
)

	)

770 
	#__HAL_RCC_SDIO_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_SDIOEN
)Ë=
RESET
)

	)

772 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

773 
	#__HAL_RCC_USB_OTG_FS_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_OTGFSEN
)Ë!
RESET
)

	)

774 
	#__HAL_RCC_USB_OTG_FS_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_OTGFSEN
)Ë=
RESET
)

	)

776 #i‡
deföed
(
STM32F107xC
)

777 
	#__HAL_RCC_ETHMAC_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_ETHMACEN
)Ë!
RESET
)

	)

778 
	#__HAL_RCC_ETHMAC_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_ETHMACEN
)Ë=
RESET
)

	)

779 
	#__HAL_RCC_ETHMACTX_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_ETHMACTXEN
)Ë!
RESET
)

	)

780 
	#__HAL_RCC_ETHMACTX_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_ETHMACTXEN
)Ë=
RESET
)

	)

781 
	#__HAL_RCC_ETHMACRX_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_ETHMACRXEN
)Ë!
RESET
)

	)

782 
	#__HAL_RCC_ETHMACRX_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_ETHMACRXEN
)Ë=
RESET
)

	)

797 #i‡
deföed
(
STM32F103x6
Ë|| deföed(
STM32F103xB
Ë|| deföed(
STM32F103xE
)\

798 || 
deföed
(
STM32F103xG
Ë|| deföed(
STM32F105xC
Ë||deföed(
STM32F107xC
)

799 
	#__HAL_RCC_CAN1_CLK_ENABLE
() do { \

800 
__IO
 
uöt32_t
 
tm¥eg
; \

801 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CAN1EN
);\

803 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CAN1EN
);\

804 
	`UNUSED
(
tm¥eg
); \

805 } 0)

	)

807 
	#__HAL_RCC_CAN1_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_CAN1EN
))

	)

810 #i‡
deföed
(
STM32F100xB
Ë|| deföed(
STM32F100xE
Ë|| deföed(
STM32F101xB
)\

811 || 
deföed
(
STM32F101xE
Ë|| deföed(
STM32F101xG
Ë|| deföed(
STM32F102xB
)\

812 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)\

813 || 
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

814 
	#__HAL_RCC_TIM4_CLK_ENABLE
() do { \

815 
__IO
 
uöt32_t
 
tm¥eg
; \

816 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM4EN
);\

818 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM4EN
);\

819 
	`UNUSED
(
tm¥eg
); \

820 } 0)

	)

822 
	#__HAL_RCC_SPI2_CLK_ENABLE
() do { \

823 
__IO
 
uöt32_t
 
tm¥eg
; \

824 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI2EN
);\

826 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI2EN
);\

827 
	`UNUSED
(
tm¥eg
); \

828 } 0)

	)

830 
	#__HAL_RCC_USART3_CLK_ENABLE
() do { \

831 
__IO
 
uöt32_t
 
tm¥eg
; \

832 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART3EN
);\

834 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART3EN
);\

835 
	`UNUSED
(
tm¥eg
); \

836 } 0)

	)

838 
	#__HAL_RCC_I2C2_CLK_ENABLE
() do { \

839 
__IO
 
uöt32_t
 
tm¥eg
; \

840 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C2EN
);\

842 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C2EN
);\

843 
	`UNUSED
(
tm¥eg
); \

844 } 0)

	)

846 
	#__HAL_RCC_TIM4_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM4EN
))

	)

847 
	#__HAL_RCC_SPI2_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_SPI2EN
))

	)

848 
	#__HAL_RCC_USART3_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_USART3EN
))

	)

849 
	#__HAL_RCC_I2C2_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_I2C2EN
))

	)

852 #i‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

853 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

854 
	#__HAL_RCC_USB_CLK_ENABLE
() do { \

855 
__IO
 
uöt32_t
 
tm¥eg
; \

856 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USBEN
);\

858 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USBEN
);\

859 
	`UNUSED
(
tm¥eg
); \

860 } 0)

	)

862 
	#__HAL_RCC_USB_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_USBEN
))

	)

865 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
)\

866 || 
deföed
(
STM32F103xG
Ë|| deföed(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

867 
	#__HAL_RCC_TIM5_CLK_ENABLE
() do { \

868 
__IO
 
uöt32_t
 
tm¥eg
; \

869 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM5EN
);\

871 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM5EN
);\

872 
	`UNUSED
(
tm¥eg
); \

873 } 0)

	)

875 
	#__HAL_RCC_TIM6_CLK_ENABLE
() do { \

876 
__IO
 
uöt32_t
 
tm¥eg
; \

877 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM6EN
);\

879 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM6EN
);\

880 
	`UNUSED
(
tm¥eg
); \

881 } 0)

	)

883 
	#__HAL_RCC_TIM7_CLK_ENABLE
() do { \

884 
__IO
 
uöt32_t
 
tm¥eg
; \

885 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM7EN
);\

887 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM7EN
);\

888 
	`UNUSED
(
tm¥eg
); \

889 } 0)

	)

891 
	#__HAL_RCC_SPI3_CLK_ENABLE
() do { \

892 
__IO
 
uöt32_t
 
tm¥eg
; \

893 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI3EN
);\

895 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI3EN
);\

896 
	`UNUSED
(
tm¥eg
); \

897 } 0)

	)

899 
	#__HAL_RCC_UART4_CLK_ENABLE
() do { \

900 
__IO
 
uöt32_t
 
tm¥eg
; \

901 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART4EN
);\

903 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART4EN
);\

904 
	`UNUSED
(
tm¥eg
); \

905 } 0)

	)

907 
	#__HAL_RCC_UART5_CLK_ENABLE
() do { \

908 
__IO
 
uöt32_t
 
tm¥eg
; \

909 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART5EN
);\

911 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART5EN
);\

912 
	`UNUSED
(
tm¥eg
); \

913 } 0)

	)

915 
	#__HAL_RCC_DAC_CLK_ENABLE
() do { \

916 
__IO
 
uöt32_t
 
tm¥eg
; \

917 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_DACEN
);\

919 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_DACEN
);\

920 
	`UNUSED
(
tm¥eg
); \

921 } 0)

	)

923 
	#__HAL_RCC_TIM5_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM5EN
))

	)

924 
	#__HAL_RCC_TIM6_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM6EN
))

	)

925 
	#__HAL_RCC_TIM7_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM7EN
))

	)

926 
	#__HAL_RCC_SPI3_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_SPI3EN
))

	)

927 
	#__HAL_RCC_UART4_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_UART4EN
))

	)

928 
	#__HAL_RCC_UART5_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_UART5EN
))

	)

929 
	#__HAL_RCC_DAC_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_DACEN
))

	)

932 #i‡
deföed
(
STM32F100xB
Ë|| deföed (
STM32F100xE
)

933 
	#__HAL_RCC_TIM6_CLK_ENABLE
() do { \

934 
__IO
 
uöt32_t
 
tm¥eg
; \

935 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM6EN
);\

937 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM6EN
);\

938 
	`UNUSED
(
tm¥eg
); \

939 } 0)

	)

941 
	#__HAL_RCC_TIM7_CLK_ENABLE
() do { \

942 
__IO
 
uöt32_t
 
tm¥eg
; \

943 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM7EN
);\

945 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM7EN
);\

946 
	`UNUSED
(
tm¥eg
); \

947 } 0)

	)

949 
	#__HAL_RCC_DAC_CLK_ENABLE
() do { \

950 
__IO
 
uöt32_t
 
tm¥eg
; \

951 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_DACEN
);\

953 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_DACEN
);\

954 
	`UNUSED
(
tm¥eg
); \

955 } 0)

	)

957 
	#__HAL_RCC_CEC_CLK_ENABLE
() do { \

958 
__IO
 
uöt32_t
 
tm¥eg
; \

959 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CECEN
);\

961 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CECEN
);\

962 
	`UNUSED
(
tm¥eg
); \

963 } 0)

	)

965 
	#__HAL_RCC_TIM6_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM6EN
))

	)

966 
	#__HAL_RCC_TIM7_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM7EN
))

	)

967 
	#__HAL_RCC_DAC_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_DACEN
))

	)

968 
	#__HAL_RCC_CEC_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_CECEN
))

	)

971 #ifde‡
STM32F100xE


972 
	#__HAL_RCC_TIM5_CLK_ENABLE
() do { \

973 
__IO
 
uöt32_t
 
tm¥eg
; \

974 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM5EN
);\

976 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM5EN
);\

977 
	`UNUSED
(
tm¥eg
); \

978 } 0)

	)

980 
	#__HAL_RCC_TIM12_CLK_ENABLE
() do { \

981 
__IO
 
uöt32_t
 
tm¥eg
; \

982 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM12EN
);\

984 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM12EN
);\

985 
	`UNUSED
(
tm¥eg
); \

986 } 0)

	)

988 
	#__HAL_RCC_TIM13_CLK_ENABLE
() do { \

989 
__IO
 
uöt32_t
 
tm¥eg
; \

990 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM13EN
);\

992 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM13EN
);\

993 
	`UNUSED
(
tm¥eg
); \

994 } 0)

	)

996 
	#__HAL_RCC_TIM14_CLK_ENABLE
() do { \

997 
__IO
 
uöt32_t
 
tm¥eg
; \

998 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM14EN
);\

1000 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM14EN
);\

1001 
	`UNUSED
(
tm¥eg
); \

1002 } 0)

	)

1004 
	#__HAL_RCC_SPI3_CLK_ENABLE
() do { \

1005 
__IO
 
uöt32_t
 
tm¥eg
; \

1006 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI3EN
);\

1008 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI3EN
);\

1009 
	`UNUSED
(
tm¥eg
); \

1010 } 0)

	)

1012 
	#__HAL_RCC_UART4_CLK_ENABLE
() do { \

1013 
__IO
 
uöt32_t
 
tm¥eg
; \

1014 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART4EN
);\

1016 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART4EN
);\

1017 
	`UNUSED
(
tm¥eg
); \

1018 } 0)

	)

1020 
	#__HAL_RCC_UART5_CLK_ENABLE
() do { \

1021 
__IO
 
uöt32_t
 
tm¥eg
; \

1022 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART5EN
);\

1024 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART5EN
);\

1025 
	`UNUSED
(
tm¥eg
); \

1026 } 0)

	)

1028 
	#__HAL_RCC_TIM5_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM5EN
))

	)

1029 
	#__HAL_RCC_TIM12_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM12EN
))

	)

1030 
	#__HAL_RCC_TIM13_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM13EN
))

	)

1031 
	#__HAL_RCC_TIM14_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM14EN
))

	)

1032 
	#__HAL_RCC_SPI3_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_SPI3EN
))

	)

1033 
	#__HAL_RCC_UART4_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_UART4EN
))

	)

1034 
	#__HAL_RCC_UART5_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_UART5EN
))

	)

1037 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1038 
	#__HAL_RCC_CAN2_CLK_ENABLE
() do { \

1039 
__IO
 
uöt32_t
 
tm¥eg
; \

1040 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CAN2EN
);\

1042 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CAN2EN
);\

1043 
	`UNUSED
(
tm¥eg
); \

1044 } 0)

	)

1046 
	#__HAL_RCC_CAN2_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_CAN2EN
))

	)

1049 #i‡
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103xG
)

1050 
	#__HAL_RCC_TIM12_CLK_ENABLE
() do { \

1051 
__IO
 
uöt32_t
 
tm¥eg
; \

1052 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM12EN
);\

1054 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM12EN
);\

1055 
	`UNUSED
(
tm¥eg
); \

1056 } 0)

	)

1058 
	#__HAL_RCC_TIM13_CLK_ENABLE
() do { \

1059 
__IO
 
uöt32_t
 
tm¥eg
; \

1060 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM13EN
);\

1062 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM13EN
);\

1063 
	`UNUSED
(
tm¥eg
); \

1064 } 0)

	)

1066 
	#__HAL_RCC_TIM14_CLK_ENABLE
() do { \

1067 
__IO
 
uöt32_t
 
tm¥eg
; \

1068 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM14EN
);\

1070 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM14EN
);\

1071 
	`UNUSED
(
tm¥eg
); \

1072 } 0)

	)

1074 
	#__HAL_RCC_TIM12_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM12EN
))

	)

1075 
	#__HAL_RCC_TIM13_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM13EN
))

	)

1076 
	#__HAL_RCC_TIM14_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM14EN
))

	)

1091 #i‡
deföed
(
STM32F103x6
Ë|| deföed(
STM32F103xB
Ë|| deföed(
STM32F103xE
)\

1092 || 
deföed
(
STM32F103xG
Ë|| deföed(
STM32F105xC
Ë||deföed(
STM32F107xC
)

1093 
	#__HAL_RCC_CAN1_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_CAN1EN
)Ë!
RESET
)

	)

1094 
	#__HAL_RCC_CAN1_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_CAN1EN
)Ë=
RESET
)

	)

1096 #i‡
deföed
(
STM32F100xB
Ë|| deföed(
STM32F100xE
Ë|| deföed(
STM32F101xB
)\

1097 || 
deföed
(
STM32F101xE
Ë|| deföed(
STM32F101xG
Ë|| deföed(
STM32F102xB
)\

1098 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)\

1099 || 
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1100 
	#__HAL_RCC_TIM4_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM4EN
)Ë!
RESET
)

	)

1101 
	#__HAL_RCC_TIM4_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM4EN
)Ë=
RESET
)

	)

1102 
	#__HAL_RCC_SPI2_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_SPI2EN
)Ë!
RESET
)

	)

1103 
	#__HAL_RCC_SPI2_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_SPI2EN
)Ë=
RESET
)

	)

1104 
	#__HAL_RCC_USART3_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_USART3EN
)Ë!
RESET
)

	)

1105 
	#__HAL_RCC_USART3_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_USART3EN
)Ë=
RESET
)

	)

1106 
	#__HAL_RCC_I2C2_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_I2C2EN
)Ë!
RESET
)

	)

1107 
	#__HAL_RCC_I2C2_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_I2C2EN
)Ë=
RESET
)

	)

1109 #i‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

1110 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

1111 
	#__HAL_RCC_USB_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_USBEN
)Ë!
RESET
)

	)

1112 
	#__HAL_RCC_USB_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_USBEN
)Ë=
RESET
)

	)

1114 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
)\

1115 || 
deföed
(
STM32F103xG
Ë|| deföed(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1116 
	#__HAL_RCC_TIM5_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM5EN
)Ë!
RESET
)

	)

1117 
	#__HAL_RCC_TIM5_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM5EN
)Ë=
RESET
)

	)

1118 
	#__HAL_RCC_TIM6_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM6EN
)Ë!
RESET
)

	)

1119 
	#__HAL_RCC_TIM6_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM6EN
)Ë=
RESET
)

	)

1120 
	#__HAL_RCC_TIM7_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM7EN
)Ë!
RESET
)

	)

1121 
	#__HAL_RCC_TIM7_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM7EN
)Ë=
RESET
)

	)

1122 
	#__HAL_RCC_SPI3_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_SPI3EN
)Ë!
RESET
)

	)

1123 
	#__HAL_RCC_SPI3_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_SPI3EN
)Ë=
RESET
)

	)

1124 
	#__HAL_RCC_UART4_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART4EN
)Ë!
RESET
)

	)

1125 
	#__HAL_RCC_UART4_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART4EN
)Ë=
RESET
)

	)

1126 
	#__HAL_RCC_UART5_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART5EN
)Ë!
RESET
)

	)

1127 
	#__HAL_RCC_UART5_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART5EN
)Ë=
RESET
)

	)

1128 
	#__HAL_RCC_DAC_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_DACEN
)Ë!
RESET
)

	)

1129 
	#__HAL_RCC_DAC_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_DACEN
)Ë=
RESET
)

	)

1131 #i‡
deföed
(
STM32F100xB
Ë|| deföed (
STM32F100xE
)

1132 
	#__HAL_RCC_TIM6_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM6EN
)Ë!
RESET
)

	)

1133 
	#__HAL_RCC_TIM6_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM6EN
)Ë=
RESET
)

	)

1134 
	#__HAL_RCC_TIM7_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM7EN
)Ë!
RESET
)

	)

1135 
	#__HAL_RCC_TIM7_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM7EN
)Ë=
RESET
)

	)

1136 
	#__HAL_RCC_DAC_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_DACEN
)Ë!
RESET
)

	)

1137 
	#__HAL_RCC_DAC_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_DACEN
)Ë=
RESET
)

	)

1138 
	#__HAL_RCC_CEC_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_CECEN
)Ë!
RESET
)

	)

1139 
	#__HAL_RCC_CEC_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_CECEN
)Ë=
RESET
)

	)

1141 #ifde‡
STM32F100xE


1142 
	#__HAL_RCC_TIM5_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM5EN
)Ë!
RESET
)

	)

1143 
	#__HAL_RCC_TIM5_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM5EN
)Ë=
RESET
)

	)

1144 
	#__HAL_RCC_TIM12_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM12EN
)Ë!
RESET
)

	)

1145 
	#__HAL_RCC_TIM12_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM12EN
)Ë=
RESET
)

	)

1146 
	#__HAL_RCC_TIM13_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM13EN
)Ë!
RESET
)

	)

1147 
	#__HAL_RCC_TIM13_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM13EN
)Ë=
RESET
)

	)

1148 
	#__HAL_RCC_TIM14_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM14EN
)Ë!
RESET
)

	)

1149 
	#__HAL_RCC_TIM14_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM14EN
)Ë=
RESET
)

	)

1150 
	#__HAL_RCC_SPI3_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_SPI3EN
)Ë!
RESET
)

	)

1151 
	#__HAL_RCC_SPI3_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_SPI3EN
)Ë=
RESET
)

	)

1152 
	#__HAL_RCC_UART4_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART4EN
)Ë!
RESET
)

	)

1153 
	#__HAL_RCC_UART4_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART4EN
)Ë=
RESET
)

	)

1154 
	#__HAL_RCC_UART5_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART5EN
)Ë!
RESET
)

	)

1155 
	#__HAL_RCC_UART5_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART5EN
)Ë=
RESET
)

	)

1156 
	#__HAL_RCC_CAN2_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_CAN2EN
)Ë!
RESET
)

	)

1157 
	#__HAL_RCC_CAN2_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_CAN2EN
)Ë=
RESET
)

	)

1159 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1160 
	#__HAL_RCC_TIM12_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM12EN
)Ë!
RESET
)

	)

1161 
	#__HAL_RCC_TIM12_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM12EN
)Ë=
RESET
)

	)

1163 #i‡
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103xG
)

1164 
	#__HAL_RCC_TIM13_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM13EN
)Ë!
RESET
)

	)

1165 
	#__HAL_RCC_TIM13_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM13EN
)Ë=
RESET
)

	)

1166 
	#__HAL_RCC_TIM14_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM14EN
)Ë!
RESET
)

	)

1167 
	#__HAL_RCC_TIM14_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM14EN
)Ë=
RESET
)

	)

1182 #i‡
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103x6
Ë|| deföed(
STM32F103xB
)\

1183 || 
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
Ë|| deföed(
STM32F103xE
)\

1184 || 
deföed
(
STM32F103xG
)

1185 
	#__HAL_RCC_ADC2_CLK_ENABLE
() do { \

1186 
__IO
 
uöt32_t
 
tm¥eg
; \

1187 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC2EN
);\

1189 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC2EN
);\

1190 
	`UNUSED
(
tm¥eg
); \

1191 } 0)

	)

1193 
	#__HAL_RCC_ADC2_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_ADC2EN
))

	)

1196 #i‡
deföed
(
STM32F100xB
Ë|| deföed(
STM32F100xE
)

1197 
	#__HAL_RCC_TIM15_CLK_ENABLE
() do { \

1198 
__IO
 
uöt32_t
 
tm¥eg
; \

1199 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM15EN
);\

1201 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM15EN
);\

1202 
	`UNUSED
(
tm¥eg
); \

1203 } 0)

	)

1205 
	#__HAL_RCC_TIM16_CLK_ENABLE
() do { \

1206 
__IO
 
uöt32_t
 
tm¥eg
; \

1207 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM16EN
);\

1209 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM16EN
);\

1210 
	`UNUSED
(
tm¥eg
); \

1211 } 0)

	)

1213 
	#__HAL_RCC_TIM17_CLK_ENABLE
() do { \

1214 
__IO
 
uöt32_t
 
tm¥eg
; \

1215 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM17EN
);\

1217 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM17EN
);\

1218 
	`UNUSED
(
tm¥eg
); \

1219 } 0)

	)

1221 
	#__HAL_RCC_TIM15_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM15EN
))

	)

1222 
	#__HAL_RCC_TIM16_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM16EN
))

	)

1223 
	#__HAL_RCC_TIM17_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM17EN
))

	)

1226 #i‡
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F101xE
)\

1227 || 
deföed
(
STM32F101xG
Ë|| deföed(
STM32F100xB
Ë|| deföed(
STM32F103xB
)\

1228 || 
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
Ë|| deföed(
STM32F105xC
)\

1229 || 
deföed
(
STM32F107xC
)

1230 
	#__HAL_RCC_GPIOE_CLK_ENABLE
() do { \

1231 
__IO
 
uöt32_t
 
tm¥eg
; \

1232 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPEEN
);\

1234 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPEEN
);\

1235 
	`UNUSED
(
tm¥eg
); \

1236 } 0)

	)

1238 
	#__HAL_RCC_GPIOE_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_IOPEEN
))

	)

1241 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
)\

1242 || 
deföed
(
STM32F103xG
)

1243 
	#__HAL_RCC_GPIOF_CLK_ENABLE
() do { \

1244 
__IO
 
uöt32_t
 
tm¥eg
; \

1245 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPFEN
);\

1247 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPFEN
);\

1248 
	`UNUSED
(
tm¥eg
); \

1249 } 0)

	)

1251 
	#__HAL_RCC_GPIOG_CLK_ENABLE
() do { \

1252 
__IO
 
uöt32_t
 
tm¥eg
; \

1253 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPGEN
);\

1255 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPGEN
);\

1256 
	`UNUSED
(
tm¥eg
); \

1257 } 0)

	)

1259 
	#__HAL_RCC_GPIOF_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_IOPFEN
))

	)

1260 
	#__HAL_RCC_GPIOG_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_IOPGEN
))

	)

1263 #i‡
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

1264 
	#__HAL_RCC_TIM8_CLK_ENABLE
() do { \

1265 
__IO
 
uöt32_t
 
tm¥eg
; \

1266 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM8EN
);\

1268 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM8EN
);\

1269 
	`UNUSED
(
tm¥eg
); \

1270 } 0)

	)

1272 
	#__HAL_RCC_ADC3_CLK_ENABLE
() do { \

1273 
__IO
 
uöt32_t
 
tm¥eg
; \

1274 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC3EN
);\

1276 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC3EN
);\

1277 
	`UNUSED
(
tm¥eg
); \

1278 } 0)

	)

1280 
	#__HAL_RCC_TIM8_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM8EN
))

	)

1281 
	#__HAL_RCC_ADC3_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_ADC3EN
))

	)

1284 #i‡
deföed
(
STM32F100xE
)

1285 
	#__HAL_RCC_GPIOF_CLK_ENABLE
() do { \

1286 
__IO
 
uöt32_t
 
tm¥eg
; \

1287 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPFEN
);\

1289 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPFEN
);\

1290 
	`UNUSED
(
tm¥eg
); \

1291 } 0)

	)

1293 
	#__HAL_RCC_GPIOG_CLK_ENABLE
() do { \

1294 
__IO
 
uöt32_t
 
tm¥eg
; \

1295 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPGEN
);\

1297 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPGEN
);\

1298 
	`UNUSED
(
tm¥eg
); \

1299 } 0)

	)

1301 
	#__HAL_RCC_GPIOF_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_IOPFEN
))

	)

1302 
	#__HAL_RCC_GPIOG_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_IOPGEN
))

	)

1305 #i‡
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103xG
)

1306 
	#__HAL_RCC_TIM9_CLK_ENABLE
() do { \

1307 
__IO
 
uöt32_t
 
tm¥eg
; \

1308 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM9EN
);\

1310 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM9EN
);\

1311 
	`UNUSED
(
tm¥eg
); \

1312 } 0)

	)

1314 
	#__HAL_RCC_TIM10_CLK_ENABLE
() do { \

1315 
__IO
 
uöt32_t
 
tm¥eg
; \

1316 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM10EN
);\

1318 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM10EN
);\

1319 
	`UNUSED
(
tm¥eg
); \

1320 } 0)

	)

1322 
	#__HAL_RCC_TIM11_CLK_ENABLE
() do { \

1323 
__IO
 
uöt32_t
 
tm¥eg
; \

1324 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM11EN
);\

1326 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM11EN
);\

1327 
	`UNUSED
(
tm¥eg
); \

1328 } 0)

	)

1330 
	#__HAL_RCC_TIM9_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM9EN
))

	)

1331 
	#__HAL_RCC_TIM10_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM10EN
))

	)

1332 
	#__HAL_RCC_TIM11_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM11EN
))

	)

1347 #i‡
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103x6
Ë|| deföed(
STM32F103xB
)\

1348 || 
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
Ë|| deföed(
STM32F103xE
)\

1349 || 
deföed
(
STM32F103xG
)

1350 
	#__HAL_RCC_ADC2_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_ADC2EN
)Ë!
RESET
)

	)

1351 
	#__HAL_RCC_ADC2_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_ADC2EN
)Ë=
RESET
)

	)

1353 #i‡
deföed
(
STM32F100xB
Ë|| deföed(
STM32F100xE
)

1354 
	#__HAL_RCC_TIM15_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM15EN
)Ë!
RESET
)

	)

1355 
	#__HAL_RCC_TIM15_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM15EN
)Ë=
RESET
)

	)

1356 
	#__HAL_RCC_TIM16_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM16EN
)Ë!
RESET
)

	)

1357 
	#__HAL_RCC_TIM16_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM16EN
)Ë=
RESET
)

	)

1358 
	#__HAL_RCC_TIM17_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM17EN
)Ë!
RESET
)

	)

1359 
	#__HAL_RCC_TIM17_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM17EN
)Ë=
RESET
)

	)

1361 #i‡
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F101xE
)\

1362 || 
deföed
(
STM32F101xG
Ë|| deföed(
STM32F100xB
Ë|| deföed(
STM32F103xB
)\

1363 || 
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
Ë|| deföed(
STM32F105xC
)\

1364 || 
deföed
(
STM32F107xC
)

1365 
	#__HAL_RCC_GPIOE_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPEEN
)Ë!
RESET
)

	)

1366 
	#__HAL_RCC_GPIOE_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPEEN
)Ë=
RESET
)

	)

1368 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
)\

1369 || 
deföed
(
STM32F103xG
)

1370 
	#__HAL_RCC_GPIOF_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPFEN
)Ë!
RESET
)

	)

1371 
	#__HAL_RCC_GPIOF_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPFEN
)Ë=
RESET
)

	)

1372 
	#__HAL_RCC_GPIOG_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPGEN
)Ë!
RESET
)

	)

1373 
	#__HAL_RCC_GPIOG_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPGEN
)Ë=
RESET
)

	)

1375 #i‡
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

1376 
	#__HAL_RCC_TIM8_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM8EN
)Ë!
RESET
)

	)

1377 
	#__HAL_RCC_TIM8_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM8EN
)Ë=
RESET
)

	)

1378 
	#__HAL_RCC_ADC3_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_ADC3EN
)Ë!
RESET
)

	)

1379 
	#__HAL_RCC_ADC3_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_ADC3EN
)Ë=
RESET
)

	)

1381 #i‡
deföed
(
STM32F100xE
)

1382 
	#__HAL_RCC_GPIOF_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPFEN
)Ë!
RESET
)

	)

1383 
	#__HAL_RCC_GPIOF_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPFEN
)Ë=
RESET
)

	)

1384 
	#__HAL_RCC_GPIOG_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPGEN
)Ë!
RESET
)

	)

1385 
	#__HAL_RCC_GPIOG_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPGEN
)Ë=
RESET
)

	)

1387 #i‡
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103xG
)

1388 
	#__HAL_RCC_TIM9_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM9EN
)Ë!
RESET
)

	)

1389 
	#__HAL_RCC_TIM9_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM9EN
)Ë=
RESET
)

	)

1390 
	#__HAL_RCC_TIM10_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM10EN
)Ë!
RESET
)

	)

1391 
	#__HAL_RCC_TIM10_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM10EN
)Ë=
RESET
)

	)

1392 
	#__HAL_RCC_TIM11_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM11EN
)Ë!
RESET
)

	)

1393 
	#__HAL_RCC_TIM11_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM11EN
)Ë=
RESET
)

	)

1400 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1405 
	#__HAL_RCC_AHB_FORCE_RESET
(Ë(
RCC
->
AHBRSTR
 = 0xFFFFFFFF)

	)

1406 
	#__HAL_RCC_USB_OTG_FS_FORCE_RESET
(Ë(
RCC
->
AHBRSTR
 |(
RCC_AHBRSTR_OTGFSRST
))

	)

1407 #i‡
deföed
(
STM32F107xC
)

1408 
	#__HAL_RCC_ETHMAC_FORCE_RESET
(Ë(
RCC
->
AHBRSTR
 |(
RCC_AHBRSTR_ETHMACRST
))

	)

1411 
	#__HAL_RCC_AHB_RELEASE_RESET
(Ë(
RCC
->
AHBRSTR
 = 0x00)

	)

1412 
	#__HAL_RCC_USB_OTG_FS_RELEASE_RESET
(Ë(
RCC
->
AHBRSTR
 &~(
RCC_AHBRSTR_OTGFSRST
))

	)

1413 #i‡
deföed
(
STM32F107xC
)

1414 
	#__HAL_RCC_ETHMAC_RELEASE_RESET
(Ë(
RCC
->
AHBRSTR
 &~(
RCC_AHBRSTR_ETHMACRST
))

	)

1427 #i‡
deföed
(
STM32F103x6
Ë|| deföed(
STM32F103xB
Ë|| deföed(
STM32F103xE
)\

1428 || 
deföed
(
STM32F103xG
Ë|| deföed(
STM32F105xC
Ë||deföed(
STM32F107xC
)

1429 
	#__HAL_RCC_CAN1_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_CAN1RST
))

	)

1431 
	#__HAL_RCC_CAN1_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_CAN1RST
))

	)

1434 #i‡
deföed
(
STM32F100xB
Ë|| deföed(
STM32F100xE
Ë|| deföed(
STM32F101xB
)\

1435 || 
deföed
(
STM32F101xE
Ë|| deföed(
STM32F101xG
Ë|| deföed(
STM32F102xB
)\

1436 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)\

1437 || 
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1438 
	#__HAL_RCC_TIM4_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM4RST
))

	)

1439 
	#__HAL_RCC_SPI2_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_SPI2RST
))

	)

1440 
	#__HAL_RCC_USART3_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_USART3RST
))

	)

1441 
	#__HAL_RCC_I2C2_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_I2C2RST
))

	)

1443 
	#__HAL_RCC_TIM4_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM4RST
))

	)

1444 
	#__HAL_RCC_SPI2_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_SPI2RST
))

	)

1445 
	#__HAL_RCC_USART3_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_USART3RST
))

	)

1446 
	#__HAL_RCC_I2C2_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_I2C2RST
))

	)

1449 #i‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

1450 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

1451 
	#__HAL_RCC_USB_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_USBRST
))

	)

1452 
	#__HAL_RCC_USB_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_USBRST
))

	)

1455 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
)\

1456 || 
deföed
(
STM32F103xG
Ë|| deföed(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1457 
	#__HAL_RCC_TIM5_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM5RST
))

	)

1458 
	#__HAL_RCC_TIM6_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM6RST
))

	)

1459 
	#__HAL_RCC_TIM7_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM7RST
))

	)

1460 
	#__HAL_RCC_SPI3_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_SPI3RST
))

	)

1461 
	#__HAL_RCC_UART4_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_UART4RST
))

	)

1462 
	#__HAL_RCC_UART5_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_UART5RST
))

	)

1463 
	#__HAL_RCC_DAC_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_DACRST
))

	)

1465 
	#__HAL_RCC_TIM5_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM5RST
))

	)

1466 
	#__HAL_RCC_TIM6_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM6RST
))

	)

1467 
	#__HAL_RCC_TIM7_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM7RST
))

	)

1468 
	#__HAL_RCC_SPI3_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_SPI3RST
))

	)

1469 
	#__HAL_RCC_UART4_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_UART4RST
))

	)

1470 
	#__HAL_RCC_UART5_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_UART5RST
))

	)

1471 
	#__HAL_RCC_DAC_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_DACRST
))

	)

1474 #i‡
deföed
(
STM32F100xB
Ë|| deföed (
STM32F100xE
)

1475 
	#__HAL_RCC_TIM6_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM6RST
))

	)

1476 
	#__HAL_RCC_TIM7_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM7RST
))

	)

1477 
	#__HAL_RCC_DAC_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_DACRST
))

	)

1478 
	#__HAL_RCC_CEC_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_CECRST
))

	)

1480 
	#__HAL_RCC_TIM6_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM6RST
))

	)

1481 
	#__HAL_RCC_TIM7_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM7RST
))

	)

1482 
	#__HAL_RCC_DAC_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_DACRST
))

	)

1483 
	#__HAL_RCC_CEC_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_CECRST
))

	)

1486 #i‡
deföed
 (
STM32F100xE
)

1487 
	#__HAL_RCC_TIM5_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM5RST
))

	)

1488 
	#__HAL_RCC_TIM12_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM12RST
))

	)

1489 
	#__HAL_RCC_TIM13_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM13RST
))

	)

1490 
	#__HAL_RCC_TIM14_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM14RST
))

	)

1491 
	#__HAL_RCC_SPI3_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_SPI3RST
))

	)

1492 
	#__HAL_RCC_UART4_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_UART4RST
))

	)

1493 
	#__HAL_RCC_UART5_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_UART5RST
))

	)

1495 
	#__HAL_RCC_TIM5_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM5RST
))

	)

1496 
	#__HAL_RCC_TIM12_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM12RST
))

	)

1497 
	#__HAL_RCC_TIM13_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM13RST
))

	)

1498 
	#__HAL_RCC_TIM14_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM14RST
))

	)

1499 
	#__HAL_RCC_SPI3_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_SPI3RST
))

	)

1500 
	#__HAL_RCC_UART4_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_UART4RST
))

	)

1501 
	#__HAL_RCC_UART5_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_UART5RST
))

	)

1504 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1505 
	#__HAL_RCC_CAN2_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_CAN2RST
))

	)

1507 
	#__HAL_RCC_CAN2_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_CAN2RST
))

	)

1510 #i‡
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103xG
)

1511 
	#__HAL_RCC_TIM12_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM12RST
))

	)

1512 
	#__HAL_RCC_TIM13_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM13RST
))

	)

1513 
	#__HAL_RCC_TIM14_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM14RST
))

	)

1515 
	#__HAL_RCC_TIM12_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM12RST
))

	)

1516 
	#__HAL_RCC_TIM13_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM13RST
))

	)

1517 
	#__HAL_RCC_TIM14_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM14RST
))

	)

1529 #i‡
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103x6
Ë|| deföed(
STM32F103xB
)\

1530 || 
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
Ë|| deföed(
STM32F103xE
)\

1531 || 
deföed
(
STM32F103xG
)

1532 
	#__HAL_RCC_ADC2_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_ADC2RST
))

	)

1534 
	#__HAL_RCC_ADC2_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_ADC2RST
))

	)

1537 #i‡
deföed
(
STM32F100xB
Ë|| deföed(
STM32F100xE
)

1538 
	#__HAL_RCC_TIM15_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM15RST
))

	)

1539 
	#__HAL_RCC_TIM16_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM16RST
))

	)

1540 
	#__HAL_RCC_TIM17_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM17RST
))

	)

1542 
	#__HAL_RCC_TIM15_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM15RST
))

	)

1543 
	#__HAL_RCC_TIM16_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM16RST
))

	)

1544 
	#__HAL_RCC_TIM17_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM17RST
))

	)

1547 #i‡
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F101xE
)\

1548 || 
deföed
(
STM32F101xG
Ë|| deföed(
STM32F100xB
Ë|| deföed(
STM32F103xB
)\

1549 || 
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
Ë|| deföed(
STM32F105xC
)\

1550 || 
deföed
(
STM32F107xC
)

1551 
	#__HAL_RCC_GPIOE_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_IOPERST
))

	)

1553 
	#__HAL_RCC_GPIOE_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_IOPERST
))

	)

1556 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
)\

1557 || 
deföed
(
STM32F103xG
)

1558 
	#__HAL_RCC_GPIOF_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_IOPFRST
))

	)

1559 
	#__HAL_RCC_GPIOG_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_IOPGRST
))

	)

1561 
	#__HAL_RCC_GPIOF_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_IOPFRST
))

	)

1562 
	#__HAL_RCC_GPIOG_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_IOPGRST
))

	)

1565 #i‡
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

1566 
	#__HAL_RCC_TIM8_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM8RST
))

	)

1567 
	#__HAL_RCC_ADC3_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_ADC3RST
))

	)

1569 
	#__HAL_RCC_TIM8_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM8RST
))

	)

1570 
	#__HAL_RCC_ADC3_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_ADC3RST
))

	)

1573 #i‡
deföed
(
STM32F100xE
)

1574 
	#__HAL_RCC_GPIOF_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_IOPFRST
))

	)

1575 
	#__HAL_RCC_GPIOG_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_IOPGRST
))

	)

1577 
	#__HAL_RCC_GPIOF_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_IOPFRST
))

	)

1578 
	#__HAL_RCC_GPIOG_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_IOPGRST
))

	)

1581 #i‡
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103xG
)

1582 
	#__HAL_RCC_TIM9_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM9RST
))

	)

1583 
	#__HAL_RCC_TIM10_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM10RST
))

	)

1584 
	#__HAL_RCC_TIM11_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM11RST
))

	)

1586 
	#__HAL_RCC_TIM9_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM9RST
))

	)

1587 
	#__HAL_RCC_TIM10_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM10RST
))

	)

1588 
	#__HAL_RCC_TIM11_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM11RST
))

	)

1599 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
Ë|| deföed(
STM32F100xB
)\

1600 || 
deföed
(
STM32F100xE
)

1609 
	#__HAL_RCC_HSE_PREDIV_CONFIG
(
__HSE_PREDIV_VALUE__
Ë
	`MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1
, (
uöt32_t
)(__HSE_PREDIV_VALUE__))

	)

1619 
	#__HAL_RCC_HSE_PREDIV_CONFIG
(
__HSE_PREDIV_VALUE__
) \

1620 
	`MODIFY_REG
(
RCC
->
CFGR
,
RCC_CFGR_PLLXTPRE
, (
uöt32_t
)(
__HSE_PREDIV_VALUE__
))

	)

1624 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
Ë|| deföed(
STM32F100xB
)\

1625 || 
deföed
(
STM32F100xE
)

1629 
	#__HAL_RCC_HSE_GET_PREDIV
(Ë
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1
)

	)

1635 
	#__HAL_RCC_HSE_GET_PREDIV
(Ë
	`READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_PLLXTPRE
)

	)

1643 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1654 
	#__HAL_RCC_PLLI2S_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_PLLI2SON_BB
 = 
ENABLE
)

	)

1659 
	#__HAL_RCC_PLLI2S_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_PLLI2SON_BB
 = 
DISABLE
)

	)

1677 
	#__HAL_RCC_PLLI2S_CONFIG
(
__PLLI2SMUL__
)\

1678 
	`MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_PLL3MUL
,(
__PLLI2SMUL__
))

	)

1691 #i‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

1692 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

1699 
	#__HAL_RCC_USB_CONFIG
(
__USBCLKSOURCE__
) \

1700 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_USBPRE
, (
uöt32_t
)(
__USBCLKSOURCE__
))

	)

1707 
	#__HAL_RCC_GET_USB_SOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_USBPRE
)))

	)

1711 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1719 
	#__HAL_RCC_USB_CONFIG
(
__USBCLKSOURCE__
) \

1720 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_OTGFSPRE
, (
uöt32_t
)(
__USBCLKSOURCE__
))

	)

1727 
	#__HAL_RCC_GET_USB_SOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_OTGFSPRE
)))

	)

1739 
	#__HAL_RCC_ADC_CONFIG
(
__ADCCLKSOURCE__
) \

1740 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_ADCPRE
, (
uöt32_t
)(
__ADCCLKSOURCE__
))

	)

1749 
	#__HAL_RCC_GET_ADC_SOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_ADCPRE
)))

	)

1755 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1769 
	#__HAL_RCC_HSE_PREDIV2_CONFIG
(
__HSE_PREDIV2_VALUE__
) \

1770 
	`MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV2
, (
uöt32_t
)(
__HSE_PREDIV2_VALUE__
))

	)

1775 
	#__HAL_RCC_HSE_GET_PREDIV2
(Ë
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV2
)

	)

1791 
	#__HAL_RCC_PLL2_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_PLL2ON_BB
 = 
ENABLE
)

	)

1797 
	#__HAL_RCC_PLL2_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_PLL2ON_BB
 = 
DISABLE
)

	)

1815 
	#__HAL_RCC_PLL2_CONFIG
(
__PLL2MUL__
)\

1816 
	`MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_PLL2MUL
,(
__PLL2MUL__
))

	)

1833 
	#__HAL_RCC_I2S2_CONFIG
(
__I2S2CLKSOURCE__
) \

1834 
	`MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_I2S2SRC
, (
uöt32_t
)(
__I2S2CLKSOURCE__
))

	)

1841 
	#__HAL_RCC_GET_I2S2_SOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_I2S2SRC
)))

	)

1849 
	#__HAL_RCC_I2S3_CONFIG
(
__I2S2CLKSOURCE__
) \

1850 
	`MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_I2S3SRC
, (
uöt32_t
)(
__I2S2CLKSOURCE__
))

	)

1857 
	#__HAL_RCC_GET_I2S3_SOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_I2S3SRC
)))

	)

1877 
HAL_SètusTy≥Def
 
HAL_RCCEx_PîùhCLKC⁄fig
(
RCC_PîùhCLKInôTy≥Def
 *
PîùhClkInô
);

1878 
HAL_RCCEx_GëPîùhCLKC⁄fig
(
RCC_PîùhCLKInôTy≥Def
 *
PîùhClkInô
);

1879 
uöt32_t
 
HAL_RCCEx_GëPîùhCLKFªq
(uöt32_à
PîùhClk
);

1885 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1889 
HAL_SètusTy≥Def
 
HAL_RCCEx_E«bÀPLLI2S
(
RCC_PLLI2SInôTy≥Def
 *
PLLI2SInô
);

1890 
HAL_SètusTy≥Def
 
HAL_RCCEx_DißbÀPLLI2S
();

1899 
HAL_SètusTy≥Def
 
HAL_RCCEx_E«bÀPLL2
(
RCC_PLL2InôTy≥Def
 *
PLL2Inô
);

1900 
HAL_SètusTy≥Def
 
HAL_RCCEx_DißbÀPLL2
();

1919 #ifde‡
__˝lu•lus


	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Inc\stm32f1xx_ll_usb.h

39 #i‚de‡
__STM32F1xx_LL_USB_H


40 
	#__STM32F1xx_LL_USB_H


	)

42 #ifde‡
__˝lu•lus


46 #i‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
) || \

47 
deföed
(
STM32F103x6
Ë|| deföed(
STM32F103xB
) || \

48 
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
) || \

49 
deföed
(
STM32F105xC
Ë|| 
	$deföed
(
STM32F107xC
)

52 
	~"°m32f1xx_hÆ_def.h
"

71 
USB_DEVICE_MODE
 = 0,

72 
USB_HOST_MODE
 = 1,

73 
USB_DRD_MODE
 = 2

74 }
	tUSB_ModeTy≥Def
;

76 #i‡
	`deföed
 (
USB_OTG_FS
)

81 
URB_IDLE
 = 0,

82 
URB_DONE
,

83 
URB_NOTREADY
,

84 
URB_NYET
,

85 
URB_ERROR
,

86 
URB_STALL


87 }
	tUSB_OTG_URBSèãTy≥Def
;

93 
HC_IDLE
 = 0,

94 
HC_XFRC
,

95 
HC_HALTED
,

96 
HC_NAK
,

97 
HC_NYET
,

98 
HC_STALL
,

99 
HC_XACTERR
,

100 
HC_BBLERR
,

101 
HC_DATATGLERR


102 }
	tUSB_OTG_HCSèãTy≥Def
;

109 
uöt32_t
 
dev_ídpoöts
;

113 
uöt32_t
 
Ho°_ch™√ls
;

117 
uöt32_t
 
•ìd
;

120 
uöt32_t
 
ï0_mps
;

123 
uöt32_t
 
Sof_íabÀ
;

125 
uöt32_t
 
low_powî_íabÀ
;

127 
uöt32_t
 
vbus_£nsög_íabÀ
;

129 
uöt32_t
 
u£_exã∫Æ_vbus
;

130 }
	tUSB_OTG_CfgTy≥Def
;

134 
uöt8_t
 
num
;

137 
uöt8_t
 
is_ö
;

140 
uöt8_t
 
is_°Æl
;

143 
uöt8_t
 
ty≥
;

146 
uöt8_t
 
d©a_pid_°¨t
;

149 
uöt8_t
 
eví_odd_‰ame
;

152 
uöt16_t
 
tx_fifo_num
;

155 
uöt32_t
 
max∑ckë
;

158 
uöt8_t
 *
x„r_buff
;

160 
uöt32_t
 
dma_addr
;

162 
uöt32_t
 
x„r_Àn
;

164 
uöt32_t
 
x„r_cou¡
;

165 }
	tUSB_OTG_EPTy≥Def
;

169 
uöt8_t
 
dev_addr
 ;

172 
uöt8_t
 
ch_num
;

175 
uöt8_t
 
ï_num
;

178 
uöt8_t
 
ï_is_ö
;

181 
uöt8_t
 
•ìd
;

184 
uöt8_t
 
do_pög
;

186 
uöt8_t
 
¥o˚ss_pög
;

188 
uöt8_t
 
ï_ty≥
;

191 
uöt16_t
 
max_∑ckë
;

194 
uöt8_t
 
d©a_pid
;

197 
uöt8_t
 *
x„r_buff
;

199 
uöt32_t
 
x„r_Àn
;

201 
uöt32_t
 
x„r_cou¡
;

203 
uöt8_t
 
toggÀ_ö
;

206 
uöt8_t
 
toggÀ_out
;

209 
uöt32_t
 
dma_addr
;

211 
uöt32_t
 
EºC¡
;

213 
USB_OTG_URBSèãTy≥Def
 
urb_°©e
;

216 
USB_OTG_HCSèãTy≥Def
 
°©e
;

218 }
	tUSB_OTG_HCTy≥Def
;

221 #i‡
	`deföed
 (
USB
)

227 
uöt32_t
 
dev_ídpoöts
;

231 
uöt32_t
 
•ìd
;

234 
uöt32_t
 
ï0_mps
;

237 
uöt32_t
 
phy_ôÁ˚
;

240 
uöt32_t
 
Sof_íabÀ
;

242 
uöt32_t
 
low_powî_íabÀ
;

244 
uöt32_t
 
Õm_íabÀ
;

246 
uöt32_t
 
b©ãry_ch¨gög_íabÀ
;

247 } 
	tUSB_CfgTy≥Def
;

251 
uöt8_t
 
num
;

254 
uöt8_t
 
is_ö
;

257 
uöt8_t
 
is_°Æl
;

260 
uöt8_t
 
ty≥
;

263 
uöt16_t
 
pmØdªss
;

266 
uöt16_t
 
pmØddr0
;

269 
uöt16_t
 
pmØddr1
;

272 
uöt8_t
 
doubÀbuf„r
;

275 
uöt16_t
 
tx_fifo_num
;

279 
uöt32_t
 
max∑ckë
;

282 
uöt8_t
 *
x„r_buff
;

284 
uöt32_t
 
x„r_Àn
;

286 
uöt32_t
 
x„r_cou¡
;

288 } 
	tUSB_EPTy≥Def
;

298 #i‡
	`deföed
 (
USB_OTG_FS
)

302 
	#USB_OTG_MODE_DEVICE
 0

	)

303 
	#USB_OTG_MODE_HOST
 1

	)

304 
	#USB_OTG_MODE_DRD
 2

	)

312 
	#USB_OTG_SPEED_LOW
 2

	)

313 
	#USB_OTG_SPEED_FULL
 3

	)

322 
	#USB_OTG_ULPI_PHY
 1

	)

323 
	#USB_OTG_EMBEDDED_PHY
 2

	)

331 
	#USB_OTG_FS_MAX_PACKET_SIZE
 64

	)

332 
	#USB_OTG_MAX_EP0_SIZE
 64

	)

340 
	#DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ
 (1 << 1)

	)

341 
	#DSTS_ENUMSPD_LS_PHY_6MHZ
 (2 << 1)

	)

342 
	#DSTS_ENUMSPD_FS_PHY_48MHZ
 (3 << 1)

	)

350 
	#DCFG_FRAME_INTERVAL_80
 0

	)

351 
	#DCFG_FRAME_INTERVAL_85
 1

	)

352 
	#DCFG_FRAME_INTERVAL_90
 2

	)

353 
	#DCFG_FRAME_INTERVAL_95
 3

	)

361 
	#DEP0CTL_MPS_64
 0

	)

362 
	#DEP0CTL_MPS_32
 1

	)

363 
	#DEP0CTL_MPS_16
 2

	)

364 
	#DEP0CTL_MPS_8
 3

	)

372 
	#EP_SPEED_LOW
 0

	)

373 
	#EP_SPEED_FULL
 1

	)

374 
	#EP_SPEED_HIGH
 2

	)

382 
	#EP_TYPE_CTRL
 0

	)

383 
	#EP_TYPE_ISOC
 1

	)

384 
	#EP_TYPE_BULK
 2

	)

385 
	#EP_TYPE_INTR
 3

	)

386 
	#EP_TYPE_MSK
 3

	)

394 
	#STS_GOUT_NAK
 1

	)

395 
	#STS_DATA_UPDT
 2

	)

396 
	#STS_XFER_COMP
 3

	)

397 
	#STS_SETUP_COMP
 4

	)

398 
	#STS_SETUP_UPDT
 6

	)

406 
	#HCFG_30_60_MHZ
 0

	)

407 
	#HCFG_48_MHZ
 1

	)

408 
	#HCFG_6_MHZ
 2

	)

416 
	#HPRT0_PRTSPD_HIGH_SPEED
 0

	)

417 
	#HPRT0_PRTSPD_FULL_SPEED
 1

	)

418 
	#HPRT0_PRTSPD_LOW_SPEED
 2

	)

423 
	#HCCHAR_CTRL
 0

	)

424 
	#HCCHAR_ISOC
 1

	)

425 
	#HCCHAR_BULK
 2

	)

426 
	#HCCHAR_INTR
 3

	)

428 
	#HC_PID_DATA0
 0

	)

429 
	#HC_PID_DATA2
 1

	)

430 
	#HC_PID_DATA1
 2

	)

431 
	#HC_PID_SETUP
 3

	)

433 
	#GRXSTS_PKTSTS_IN
 2

	)

434 
	#GRXSTS_PKTSTS_IN_XFER_COMP
 3

	)

435 
	#GRXSTS_PKTSTS_DATA_TOGGLE_ERR
 5

	)

436 
	#GRXSTS_PKTSTS_CH_HALTED
 7

	)

438 
	#USBx_PCGCCTL
 *(
__IO
 
uöt32_t
 *)((uöt32_t)
USBx
 + 
USB_OTG_PCGCCTL_BASE
)

	)

439 
	#USBx_HPRT0
 *(
__IO
 
uöt32_t
 *)((uöt32_t)
USBx
 + 
USB_OTG_HOST_PORT_BASE
)

	)

441 
	#USBx_DEVICE
 ((
USB_OTG_Devi˚Ty≥Def
 *)((
uöt32_t
 )
USBx
 + 
USB_OTG_DEVICE_BASE
))

	)

442 
	#USBx_INEP
(
i
Ë((
USB_OTG_INEndpoötTy≥Def
 *)((
uöt32_t
)
USBx
 + 
USB_OTG_IN_ENDPOINT_BASE
 + (i)*
USB_OTG_EP_REG_SIZE
))

	)

443 
	#USBx_OUTEP
(
i
Ë((
USB_OTG_OUTEndpoötTy≥Def
 *)((
uöt32_t
)
USBx
 + 
USB_OTG_OUT_ENDPOINT_BASE
 + (i)*
USB_OTG_EP_REG_SIZE
))

	)

444 
	#USBx_DFIFO
(
i
Ë*(
__IO
 
uöt32_t
 *)((uöt32_t)
USBx
 + 
USB_OTG_FIFO_BASE
 + (iË* 
USB_OTG_FIFO_SIZE
)

	)

446 
	#USBx_HOST
 ((
USB_OTG_Ho°Ty≥Def
 *)((
uöt32_t
 )
USBx
 + 
USB_OTG_HOST_BASE
))

	)

447 
	#USBx_HC
(
i
Ë((
USB_OTG_Ho°Ch™√lTy≥Def
 *)((
uöt32_t
)
USBx
 + 
USB_OTG_HOST_CHANNEL_BASE
 + (i)*
USB_OTG_HOST_CHANNEL_SIZE
))

	)

450 #i‡
	`deföed
 (
USB
)

454 
	#DEP0CTL_MPS_64
 0

	)

455 
	#DEP0CTL_MPS_32
 1

	)

456 
	#DEP0CTL_MPS_16
 2

	)

457 
	#DEP0CTL_MPS_8
 3

	)

465 
	#EP_TYPE_CTRL
 0

	)

466 
	#EP_TYPE_ISOC
 1

	)

467 
	#EP_TYPE_BULK
 2

	)

468 
	#EP_TYPE_INTR
 3

	)

469 
	#EP_TYPE_MSK
 3

	)

474 
	#BTABLE_ADDRESS
 (0x000)

	)

484 #i‡
	`deföed
 (
USB_OTG_FS
)

485 
	#USB_MASK_INTERRUPT
(
__INSTANCE__
, 
__INTERRUPT__
Ë((__INSTANCE__)->
GINTMSK
 &~(__INTERRUPT__))

	)

486 
	#USB_UNMASK_INTERRUPT
(
__INSTANCE__
, 
__INTERRUPT__
Ë((__INSTANCE__)->
GINTMSK
 |(__INTERRUPT__))

	)

488 
	#CLEAR_IN_EP_INTR
(
__EPNUM__
, 
__INTERRUPT__
Ë(
	`USBx_INEP
(__EPNUM__)->
DIEPINT
 = (__INTERRUPT__))

	)

489 
	#CLEAR_OUT_EP_INTR
(
__EPNUM__
, 
__INTERRUPT__
Ë(
	`USBx_OUTEP
(__EPNUM__)->
DOEPINT
 = (__INTERRUPT__))

	)

502 #i‡
	`deföed
 (
USB_OTG_FS
)

503 
HAL_SètusTy≥Def
 
	`USB_C‹eInô
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_CfgTy≥Def
 
Inô
);

504 
HAL_SètusTy≥Def
 
	`USB_DevInô
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_CfgTy≥Def
 
Inô
);

505 
HAL_SètusTy≥Def
 
	`USB_E«bÀGlobÆI¡
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

506 
HAL_SètusTy≥Def
 
	`USB_DißbÀGlobÆI¡
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

507 
HAL_SètusTy≥Def
 
	`USB_SëCuºítMode
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
USB_ModeTy≥Def
 
mode
);

508 
HAL_SètusTy≥Def
 
	`USB_SëDevS≥ed
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
uöt8_t
 
•ìd
);

509 
HAL_SètusTy≥Def
 
	`USB_FlushRxFifo
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
);

510 
HAL_SètusTy≥Def
 
	`USB_FlushTxFifo
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt32_t
 
num
 );

511 
HAL_SètusTy≥Def
 
	`USB_A˘iv©eEndpoöt
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_EPTy≥Def
 *
ï
);

512 
HAL_SètusTy≥Def
 
	`USB_Dó˘iv©eEndpoöt
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_EPTy≥Def
 *
ï
);

513 
HAL_SètusTy≥Def
 
	`USB_EPSèπX„r
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
USB_OTG_EPTy≥Def
 *
ï
);

514 
HAL_SètusTy≥Def
 
	`USB_EP0SèπX„r
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
USB_OTG_EPTy≥Def
 *
ï
);

515 
HAL_SètusTy≥Def
 
	`USB_WrôePackë
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 *
§c
, uöt8_à
ch_ï_num
, 
uöt16_t
 
Àn
);

516 * 
	`USB_RódPackë
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 *
de°
, 
uöt16_t
 
Àn
);

517 
HAL_SètusTy≥Def
 
	`USB_EPSëSèŒ
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
USB_OTG_EPTy≥Def
 *
ï
);

518 
HAL_SètusTy≥Def
 
	`USB_EPCÀ¨SèŒ
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
USB_OTG_EPTy≥Def
 *
ï
);

519 
HAL_SètusTy≥Def
 
	`USB_SëDevAddªss
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 
addªss
);

520 
HAL_SètusTy≥Def
 
	`USB_DevC⁄√˘
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
);

521 
HAL_SètusTy≥Def
 
	`USB_DevDisc⁄√˘
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
);

522 
HAL_SètusTy≥Def
 
	`USB_St›Devi˚
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

523 
HAL_SètusTy≥Def
 
	`USB_A˘iv©eSëup
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
);

524 
HAL_SètusTy≥Def
 
	`USB_EP0_OutSèπ
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 *
p£tup
);

525 
uöt8_t
 
	`USB_GëDevS≥ed
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

526 
uöt32_t
 
	`USB_GëMode
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

527 
uöt32_t
 
	`USB_RódI¡îru±s
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
);

528 
uöt32_t
 
	`USB_RódDevAŒOutEpI¡îru±
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
);

529 
uöt32_t
 
	`USB_RódDevOutEPI¡îru±
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
uöt8_t
 
ïnum
);

530 
uöt32_t
 
	`USB_RódDevAŒInEpI¡îru±
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
);

531 
uöt32_t
 
	`USB_RódDevInEPI¡îru±
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
uöt8_t
 
ïnum
);

532 
	`USB_CÀ¨I¡îru±s
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt32_t
 
öãºu±
);

534 
HAL_SètusTy≥Def
 
	`USB_Ho°Inô
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_CfgTy≥Def
 
cfg
);

535 
HAL_SètusTy≥Def
 
	`USB_InôFSLSPClkSñ
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
uöt8_t
 
‰eq
);

536 
HAL_SètusTy≥Def
 
	`USB_Re£tP‹t
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

537 
HAL_SètusTy≥Def
 
	`USB_DriveVbus
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 
°©e
);

538 
uöt32_t
 
	`USB_GëHo°S≥ed
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
);

539 
uöt32_t
 
	`USB_GëCuºítFøme
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
);

540 
HAL_SètusTy≥Def
 
	`USB_HC_Inô
(
USB_OTG_GlobÆTy≥Def
 *
USBx
,

541 
uöt8_t
 
ch_num
,

542 
uöt8_t
 
ïnum
,

543 
uöt8_t
 
dev_addªss
,

544 
uöt8_t
 
•ìd
,

545 
uöt8_t
 
ï_ty≥
,

546 
uöt16_t
 
mps
);

547 
HAL_SètusTy≥Def
 
	`USB_HC_SèπX„r
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_HCTy≥Def
 *
hc
);

548 
uöt32_t
 
	`USB_HC_RódI¡îru±
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
);

549 
HAL_SètusTy≥Def
 
	`USB_HC_HÆt
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
uöt8_t
 
hc_num
);

550 
HAL_SètusTy≥Def
 
	`USB_DoPög
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
uöt8_t
 
ch_num
);

551 
HAL_SètusTy≥Def
 
	`USB_St›Ho°
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

552 
HAL_SètusTy≥Def
 
	`USB_A˘iv©eRemŸeWakeup
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

553 
HAL_SètusTy≥Def
 
	`USB_DeA˘iv©eRemŸeWakeup
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

556 #i‡
	`deföed
 (
USB
)

557 
HAL_SètusTy≥Def
 
	`USB_C‹eInô
(
USB_Ty≥Def
 *
USBx
, 
USB_CfgTy≥Def
 
Inô
);

558 
HAL_SètusTy≥Def
 
	`USB_DevInô
(
USB_Ty≥Def
 *
USBx
, 
USB_CfgTy≥Def
 
Inô
);

559 
HAL_SètusTy≥Def
 
	`USB_E«bÀGlobÆI¡
(
USB_Ty≥Def
 *
USBx
);

560 
HAL_SètusTy≥Def
 
	`USB_DißbÀGlobÆI¡
(
USB_Ty≥Def
 *
USBx
);

561 
HAL_SètusTy≥Def
 
	`USB_SëCuºítMode
(
USB_Ty≥Def
 *
USBx
 , 
USB_ModeTy≥Def
 
mode
);

562 
HAL_SètusTy≥Def
 
	`USB_SëDevS≥ed
(
USB_Ty≥Def
 *
USBx
 , 
uöt8_t
 
•ìd
);

563 
HAL_SètusTy≥Def
 
	`USB_FlushRxFifo
 (
USB_Ty≥Def
 *
USBx
);

564 
HAL_SètusTy≥Def
 
	`USB_FlushTxFifo
 (
USB_Ty≥Def
 *
USBx
, 
uöt32_t
 
num
 );

565 
HAL_SètusTy≥Def
 
	`USB_A˘iv©eEndpoöt
(
USB_Ty≥Def
 *
USBx
, 
USB_EPTy≥Def
 *
ï
);

566 
HAL_SètusTy≥Def
 
	`USB_Dó˘iv©eEndpoöt
(
USB_Ty≥Def
 *
USBx
, 
USB_EPTy≥Def
 *
ï
);

567 
HAL_SètusTy≥Def
 
	`USB_EPSèπX„r
(
USB_Ty≥Def
 *
USBx
 , 
USB_EPTy≥Def
 *
ï
);

568 
HAL_SètusTy≥Def
 
	`USB_WrôePackë
(
USB_Ty≥Def
 *
USBx
, 
uöt8_t
 *
§c
, uöt8_à
ch_ï_num
, 
uöt16_t
 
Àn
);

569 * 
	`USB_RódPackë
(
USB_Ty≥Def
 *
USBx
, 
uöt8_t
 *
de°
, 
uöt16_t
 
Àn
);

570 
HAL_SètusTy≥Def
 
	`USB_EPSëSèŒ
(
USB_Ty≥Def
 *
USBx
 , 
USB_EPTy≥Def
 *
ï
);

571 
HAL_SètusTy≥Def
 
	`USB_EPCÀ¨SèŒ
(
USB_Ty≥Def
 *
USBx
 , 
USB_EPTy≥Def
 *
ï
);

572 
HAL_SètusTy≥Def
 
	`USB_SëDevAddªss
 (
USB_Ty≥Def
 *
USBx
, 
uöt8_t
 
addªss
);

573 
HAL_SètusTy≥Def
 
	`USB_DevC⁄√˘
 (
USB_Ty≥Def
 *
USBx
);

574 
HAL_SètusTy≥Def
 
	`USB_DevDisc⁄√˘
 (
USB_Ty≥Def
 *
USBx
);

575 
HAL_SètusTy≥Def
 
	`USB_St›Devi˚
(
USB_Ty≥Def
 *
USBx
);

576 
HAL_SètusTy≥Def
 
	`USB_EP0_OutSèπ
(
USB_Ty≥Def
 *
USBx
, 
uöt8_t
 *
p£tup
);

577 
uöt32_t
 
	`USB_RódI¡îru±s
 (
USB_Ty≥Def
 *
USBx
);

578 
uöt32_t
 
	`USB_RódDevAŒOutEpI¡îru±
 (
USB_Ty≥Def
 *
USBx
);

579 
uöt32_t
 
	`USB_RódDevOutEPI¡îru±
 (
USB_Ty≥Def
 *
USBx
 , 
uöt8_t
 
ïnum
);

580 
uöt32_t
 
	`USB_RódDevAŒInEpI¡îru±
 (
USB_Ty≥Def
 *
USBx
);

581 
uöt32_t
 
	`USB_RódDevInEPI¡îru±
 (
USB_Ty≥Def
 *
USBx
 , 
uöt8_t
 
ïnum
);

582 
	`USB_CÀ¨I¡îru±s
 (
USB_Ty≥Def
 *
USBx
, 
uöt32_t
 
öãºu±
);

584 
HAL_SètusTy≥Def
 
	`USB_A˘iv©eRemŸeWakeup
(
USB_Ty≥Def
 *
USBx
);

585 
HAL_SètusTy≥Def
 
	`USB_DeA˘iv©eRemŸeWakeup
(
USB_Ty≥Def
 *
USBx
);

586 
	`USB_WrôePMA
(
USB_Ty≥Def
 *
USBx
, 
uöt8_t
 *
pbU§Buf
, 
uöt16_t
 
wPMABufAddr
, uöt16_à
wNByãs
);

587 
	`USB_RódPMA
(
USB_Ty≥Def
 *
USBx
, 
uöt8_t
 *
pbU§Buf
, 
uöt16_t
 
wPMABufAddr
, uöt16_à
wNByãs
);

609 #ifde‡
__˝lu•lus


610 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Src\stm32f1xx_hal.c

54 
	~"°m32f1xx_hÆ.h
"

65 #ifde‡
HAL_MODULE_ENABLED


77 
	#__STM32F1xx_HAL_VERSION_MAIN
 (0x01Ë

	)

78 
	#__STM32F1xx_HAL_VERSION_SUB1
 (0x00Ë

	)

79 
	#__STM32F1xx_HAL_VERSION_SUB2
 (0x03Ë

	)

80 
	#__STM32F1xx_HAL_VERSION_RC
 (0x00Ë

	)

81 
	#__STM32F1xx_HAL_VERSION
 ((
__STM32F1xx_HAL_VERSION_MAIN
 << 24)\

82 |(
__STM32F1xx_HAL_VERSION_SUB1
 << 16)\

83 |(
__STM32F1xx_HAL_VERSION_SUB2
 << 8 )\

84 |(
__STM32F1xx_HAL_VERSION_RC
))

	)

86 
	#IDCODE_DEVID_MASK
 ((
uöt32_t
)0x00000FFF)

	)

99 
__IO
 
uöt32_t
 
	guwTick
;

157 
HAL_SètusTy≥Def
 
	$HAL_Inô
()

160 #i‡(
PREFETCH_ENABLE
 != 0)

161 #i‡
	`deföed
(
STM32F101x6
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F101xG
) || \

162 
	`deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
) || \

163 
	`deföed
(
STM32F103x6
Ë|| deföed(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
) || \

164 
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

167 
	`__HAL_FLASH_PREFETCH_BUFFER_ENABLE
();

172 
	`HAL_NVIC_SëPri‹ôyGroupög
(
NVIC_PRIORITYGROUP_4
);

175 
	`HAL_InôTick
(
TICK_INT_PRIORITY
);

178 
	`HAL_M•Inô
();

181  
HAL_OK
;

182 
	}
}

190 
HAL_SètusTy≥Def
 
	$HAL_DeInô
()

193 
	`__HAL_RCC_APB1_FORCE_RESET
();

194 
	`__HAL_RCC_APB1_RELEASE_RESET
();

196 
	`__HAL_RCC_APB2_FORCE_RESET
();

197 
	`__HAL_RCC_APB2_RELEASE_RESET
();

199 #i‡
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

200 
	`__HAL_RCC_AHB_FORCE_RESET
();

201 
	`__HAL_RCC_AHB_RELEASE_RESET
();

205 
	`HAL_M•DeInô
();

208  
HAL_OK
;

209 
	}
}

215 
__wók
 
	$HAL_M•Inô
()

220 
	}
}

226 
__wók
 
	$HAL_M•DeInô
()

231 
	}
}

249 
__wók
 
HAL_SètusTy≥Def
 
	$HAL_InôTick
(
uöt32_t
 
TickPri‹ôy
)

252 
	`HAL_SYSTICK_C⁄fig
(
	`HAL_RCC_GëHCLKFªq
()/1000);

255 
	`HAL_NVIC_SëPri‹ôy
(
SysTick_IRQn
, 
TickPri‹ôy
 ,0);

258  
HAL_OK
;

259 
	}
}

297 
__wók
 
	$HAL_IncTick
()

299 
uwTick
++;

300 
	}
}

308 
__wók
 
uöt32_t
 
	$HAL_GëTick
()

310  
uwTick
;

311 
	}
}

324 
__wók
 
	$HAL_Dñay
(
__IO
 
uöt32_t
 
Dñay
)

326 
uöt32_t
 
tick°¨t
 = 0;

327 
tick°¨t
 = 
	`HAL_GëTick
();

328 (
	`HAL_GëTick
(Ë- 
tick°¨t
Ë< 
Dñay
)

331 
	}
}

343 
__wók
 
	$HAL_Su•ídTick
()

346 
	`CLEAR_BIT
(
SysTick
->
CTRL
,
SysTick_CTRL_TICKINT_Msk
);

347 
	}
}

359 
__wók
 
	$HAL_ResumeTick
()

362 
	`SET_BIT
(
SysTick
->
CTRL
,
SysTick_CTRL_TICKINT_Msk
);

363 
	}
}

369 
uöt32_t
 
	$HAL_GëHÆVîsi⁄
()

371  
__STM32F1xx_HAL_VERSION
;

372 
	}
}

385 
uöt32_t
 
	$HAL_GëREVID
()

387 ((
DBGMCU
->
IDCODE
Ë>> 
	`POSITION_VAL
(
DBGMCU_IDCODE_REV_ID
));

388 
	}
}

401 
uöt32_t
 
	$HAL_GëDEVID
()

403 ((
DBGMCU
->
IDCODE
Ë& 
IDCODE_DEVID_MASK
);

404 
	}
}

410 
	$HAL_DBGMCU_E«bÀDBGSÀïMode
()

412 
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_SLEEP
);

413 
	}
}

426 
	$HAL_DBGMCU_DißbÀDBGSÀïMode
()

428 
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_SLEEP
);

429 
	}
}

456 
	$HAL_DBGMCU_E«bÀDBGSt›Mode
()

458 
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STOP
);

459 
	}
}

472 
	$HAL_DBGMCU_DißbÀDBGSt›Mode
()

474 
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STOP
);

475 
	}
}

488 
	$HAL_DBGMCU_E«bÀDBGSèndbyMode
()

490 
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STANDBY
);

491 
	}
}

504 
	$HAL_DBGMCU_DißbÀDBGSèndbyMode
()

506 
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STANDBY
);

507 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Src\stm32f1xx_hal_cortex.c

123 
	~"°m32f1xx_hÆ.h
"

134 #ifde‡
HAL_CORTEX_MODULE_ENABLED


183 
	$HAL_NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

186 
	`as£π_∑øm
(
	`IS_NVIC_PRIORITY_GROUP
(
Pri‹ôyGroup
));

189 
	`NVIC_SëPri‹ôyGroupög
(
Pri‹ôyGroup
);

190 
	}
}

205 
	$HAL_NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

207 
uöt32_t
 
¥i‹ôygroup
 = 0x00;

210 
	`as£π_∑øm
(
	`IS_NVIC_SUB_PRIORITY
(
SubPri‹ôy
));

211 
	`as£π_∑øm
(
	`IS_NVIC_PREEMPTION_PRIORITY
(
Pªem±Pri‹ôy
));

213 
¥i‹ôygroup
 = 
	`NVIC_GëPri‹ôyGroupög
();

215 
	`NVIC_SëPri‹ôy
(
IRQn
, 
	`NVIC_EncodePri‹ôy
(
¥i‹ôygroup
, 
Pªem±Pri‹ôy
, 
SubPri‹ôy
));

216 
	}
}

227 
	$HAL_NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

230 
	`as£π_∑øm
(
	`IS_NVIC_DEVICE_IRQ
(
IRQn
));

233 
	`NVIC_E«bÀIRQ
(
IRQn
);

234 
	}
}

243 
	$HAL_NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

246 
	`as£π_∑øm
(
	`IS_NVIC_DEVICE_IRQ
(
IRQn
));

250 
	`NVIC_DißbÀIRQ
(
IRQn
);

251 
	}
}

257 
	$HAL_NVIC_Sy°emRe£t
()

260 
	`NVIC_Sy°emRe£t
();

261 
	}
}

270 
uöt32_t
 
	$HAL_SYSTICK_C⁄fig
(
uöt32_t
 
TicksNumb
)

272  
	`SysTick_C⁄fig
(
TicksNumb
);

273 
	}
}

294 #i‡(
__MPU_PRESENT
 == 1)

301 
	$HAL_MPU_C⁄figRegi⁄
(
MPU_Regi⁄_InôTy≥Def
 *
MPU_Inô
)

304 
	`as£π_∑øm
(
	`IS_MPU_REGION_NUMBER
(
MPU_Inô
->
Numbî
));

305 
	`as£π_∑øm
(
	`IS_MPU_REGION_ENABLE
(
MPU_Inô
->
E«bÀ
));

308 
MPU
->
RNR
 = 
MPU_Inô
->
Numbî
;

310 i‡((
MPU_Inô
->
E«bÀ
Ë!
RESET
)

313 
	`as£π_∑øm
(
	`IS_MPU_INSTRUCTION_ACCESS
(
MPU_Inô
->
DißbÀExec
));

314 
	`as£π_∑øm
(
	`IS_MPU_REGION_PERMISSION_ATTRIBUTE
(
MPU_Inô
->
Ac˚ssPîmissi⁄
));

315 
	`as£π_∑øm
(
	`IS_MPU_TEX_LEVEL
(
MPU_Inô
->
Ty≥ExtFõld
));

316 
	`as£π_∑øm
(
	`IS_MPU_ACCESS_SHAREABLE
(
MPU_Inô
->
IsSh¨óbÀ
));

317 
	`as£π_∑øm
(
	`IS_MPU_ACCESS_CACHEABLE
(
MPU_Inô
->
IsCachóbÀ
));

318 
	`as£π_∑øm
(
	`IS_MPU_ACCESS_BUFFERABLE
(
MPU_Inô
->
IsBuf„øbÀ
));

319 
	`as£π_∑øm
(
	`IS_MPU_SUB_REGION_DISABLE
(
MPU_Inô
->
SubRegi⁄DißbÀ
));

320 
	`as£π_∑øm
(
	`IS_MPU_REGION_SIZE
(
MPU_Inô
->
Size
));

322 
MPU
->
RBAR
 = 
MPU_Inô
->
Ba£Addªss
;

323 
MPU
->
RASR
 = ((
uöt32_t
)
MPU_Inô
->
DißbÀExec
 << 
MPU_RASR_XN_Pos
) |

324 ((
uöt32_t
)
MPU_Inô
->
Ac˚ssPîmissi⁄
 << 
MPU_RASR_AP_Pos
) |

325 ((
uöt32_t
)
MPU_Inô
->
Ty≥ExtFõld
 << 
MPU_RASR_TEX_Pos
) |

326 ((
uöt32_t
)
MPU_Inô
->
IsSh¨óbÀ
 << 
MPU_RASR_S_Pos
) |

327 ((
uöt32_t
)
MPU_Inô
->
IsCachóbÀ
 << 
MPU_RASR_C_Pos
) |

328 ((
uöt32_t
)
MPU_Inô
->
IsBuf„øbÀ
 << 
MPU_RASR_B_Pos
) |

329 ((
uöt32_t
)
MPU_Inô
->
SubRegi⁄DißbÀ
 << 
MPU_RASR_SRD_Pos
) |

330 ((
uöt32_t
)
MPU_Inô
->
Size
 << 
MPU_RASR_SIZE_Pos
) |

331 ((
uöt32_t
)
MPU_Inô
->
E«bÀ
 << 
MPU_RASR_ENABLE_Pos
);

335 
MPU
->
RBAR
 = 0x00;

336 
MPU
->
RASR
 = 0x00;

338 
	}
}

345 
uöt32_t
 
	$HAL_NVIC_GëPri‹ôyGroupög
()

348  
	`NVIC_GëPri‹ôyGroupög
();

349 
	}
}

372 
	$HAL_NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
)

375 
	`as£π_∑øm
(
	`IS_NVIC_PRIORITY_GROUP
(
Pri‹ôyGroup
));

377 
	`NVIC_DecodePri‹ôy
(
	`NVIC_GëPri‹ôy
(
IRQn
), 
Pri‹ôyGroup
, 
pPªem±Pri‹ôy
, 
pSubPri‹ôy
);

378 
	}
}

387 
	$HAL_NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

390 
	`NVIC_SëPídögIRQ
(
IRQn
);

391 
	}
}

402 
uöt32_t
 
	$HAL_NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

405  
	`NVIC_GëPídögIRQ
(
IRQn
);

406 
	}
}

415 
	$HAL_NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

418 
	`NVIC_CÀ¨PídögIRQ
(
IRQn
);

419 
	}
}

429 
uöt32_t
 
	$HAL_NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

432  
	`NVIC_GëA˘ive
(
IRQn
);

433 
	}
}

443 
	$HAL_SYSTICK_CLKSour˚C⁄fig
(
uöt32_t
 
CLKSour˚
)

446 
	`as£π_∑øm
(
	`IS_SYSTICK_CLK_SOURCE
(
CLKSour˚
));

447 i‡(
CLKSour˚
 =
SYSTICK_CLKSOURCE_HCLK
)

449 
SysTick
->
CTRL
 |
SYSTICK_CLKSOURCE_HCLK
;

453 
SysTick
->
CTRL
 &~
SYSTICK_CLKSOURCE_HCLK
;

455 
	}
}

461 
	$HAL_SYSTICK_IRQH™dÀr
()

463 
	`HAL_SYSTICK_CÆlback
();

464 
	}
}

470 
__wók
 
	$HAL_SYSTICK_CÆlback
()

475 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Src\stm32f1xx_hal_flash.c

104 
	~"°m32f1xx_hÆ.h
"

110 #ifde‡
HAL_FLASH_MODULE_ENABLED


140 
FLASH_Pro˚ssTy≥Def
 
	gpFœsh
;

149 
FLASH_Progøm_HÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
);

150 
FLASH_SëEº‹Code
();

186 
HAL_SètusTy≥Def
 
	$HAL_FLASH_Progøm
(
uöt32_t
 
Ty≥Progøm
, uöt32_à
Addªss
, 
uöt64_t
 
D©a
)

188 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

189 
uöt8_t
 
ödex
 = 0;

190 
uöt8_t
 
nbôî©i⁄s
 = 0;

193 
	`__HAL_LOCK
(&
pFœsh
);

196 
	`as£π_∑øm
(
	`IS_FLASH_TYPEPROGRAM
(
Ty≥Progøm
));

197 
	`as£π_∑øm
(
	`IS_FLASH_PROGRAM_ADDRESS
(
Addªss
));

199 #i‡
	`deföed
(
FLASH_BANK2_END
)

200 if(
Addªss
 <
FLASH_BANK1_END
)

204 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

205 #i‡
	`deföed
(
FLASH_BANK2_END
)

210 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄B™k2
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

214 if(
°©us
 =
HAL_OK
)

216 if(
Ty≥Progøm
 =
FLASH_TYPEPROGRAM_HALFWORD
)

219 
nbôî©i⁄s
 = 1;

221 if(
Ty≥Progøm
 =
FLASH_TYPEPROGRAM_WORD
)

224 
nbôî©i⁄s
 = 2;

229 
nbôî©i⁄s
 = 4;

232 
ödex
 = 0; index < 
nbôî©i⁄s
; index++)

234 
	`FLASH_Progøm_HÆfW‹d
((
Addªss
 + (2*
ödex
)), (
uöt16_t
)(
D©a
 >> (16*index)));

236 #i‡
	`deföed
(
FLASH_BANK2_END
)

237 if(
Addªss
 <
FLASH_BANK1_END
)

241 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

244 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_PG
);

245 #i‡
	`deföed
(
FLASH_BANK2_END
)

250 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄B™k2
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

253 
	`CLEAR_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_PG
);

257 i‡(
°©us
 !
HAL_OK
)

265 
	`__HAL_UNLOCK
(&
pFœsh
);

267  
°©us
;

268 
	}
}

285 
HAL_SètusTy≥Def
 
	$HAL_FLASH_Progøm_IT
(
uöt32_t
 
Ty≥Progøm
, uöt32_à
Addªss
, 
uöt64_t
 
D©a
)

287 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

290 
	`__HAL_LOCK
(&
pFœsh
);

293 
	`as£π_∑øm
(
	`IS_FLASH_TYPEPROGRAM
(
Ty≥Progøm
));

294 
	`as£π_∑øm
(
	`IS_FLASH_PROGRAM_ADDRESS
(
Addªss
));

296 #i‡
	`deföed
(
FLASH_BANK2_END
)

298 i‡(
pFœsh
.
Pro˚duªOnGoög
 !
FLASH_PROC_NONE
)

300  
HAL_ERROR
;

303 if(
Addªss
 <
FLASH_BANK1_END
)

306 
	`__HAL_FLASH_ENABLE_IT
(
FLASH_IT_EOP_BANK1
 | 
FLASH_IT_ERR_BANK1
);

311 
	`__HAL_FLASH_ENABLE_IT
(
FLASH_IT_EOP_BANK2
 | 
FLASH_IT_ERR_BANK2
);

315 
	`__HAL_FLASH_ENABLE_IT
(
FLASH_IT_EOP
 | 
FLASH_IT_ERR
);

318 
pFœsh
.
Addªss
 = Address;

319 
pFœsh
.
D©a
 = Data;

321 if(
Ty≥Progøm
 =
FLASH_TYPEPROGRAM_HALFWORD
)

323 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_PROGRAMHALFWORD
;

325 
pFœsh
.
D©aRemaöög
 = 1;

327 if(
Ty≥Progøm
 =
FLASH_TYPEPROGRAM_WORD
)

329 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_PROGRAMWORD
;

331 
pFœsh
.
D©aRemaöög
 = 2;

335 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_PROGRAMDOUBLEWORD
;

337 
pFœsh
.
D©aRemaöög
 = 4;

341 
	`FLASH_Progøm_HÆfW‹d
(
Addªss
, (
uöt16_t
)
D©a
);

343  
°©us
;

344 
	}
}

350 
	$HAL_FLASH_IRQH™dÀr
()

352 
uöt32_t
 
addªs°mp
 = 0;

355 #i‡
	`deföed
(
FLASH_BANK2_END
)

356 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR_BANK1
Ë|| __HAL_FLASH_GET_FLAG(
FLASH_FLAG_PGERR_BANK1
) || \

357 (
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR_BANK2
Ë|| __HAL_FLASH_GET_FLAG(
FLASH_FLAG_PGERR_BANK2
)))

359 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR
Ë||__HAL_FLASH_GET_FLAG(
FLASH_FLAG_PGERR
))

363 
addªs°mp
 = 
pFœsh
.
Addªss
;

365 
pFœsh
.
Addªss
 = 0xFFFFFFFF;

368 
	`FLASH_SëEº‹Code
();

371 
	`HAL_FLASH_O≥øti⁄Eº‹CÆlback
(
addªs°mp
);

374 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_NONE
;

378 #i‡
	`deföed
(
FLASH_BANK2_END
)

379 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_EOP_BANK1
))

382 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_EOP_BANK1
);

384 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_EOP
))

387 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_EOP
);

391 if(
pFœsh
.
Pro˚duªOnGoög
 !
FLASH_PROC_NONE
)

393 if(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_PAGEERASE
)

396 
pFœsh
.
D©aRemaöög
--;

399 if(
pFœsh
.
D©aRemaöög
 != 0)

401 
addªs°mp
 = 
pFœsh
.
Addªss
;

403 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
addªs°mp
);

406 
addªs°mp
 = 
pFœsh
.
Addªss
 + 
FLASH_PAGE_SIZE
;

407 
pFœsh
.
Addªss
 = 
addªs°mp
;

410 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_PER
);

412 
	`FLASH_PageEø£
(
addªs°mp
);

418 
pFœsh
.
Addªss
 = 
addªs°mp
 = 0xFFFFFFFF;

419 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_NONE
;

421 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
addªs°mp
);

424 if(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_MASSERASE
)

427 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_MER
);

429 #i‡
	`deföed
(
FLASH_BANK2_END
)

431 i‡(
	`HAL_IS_BIT_CLR
(
FLASH
->
CR2
, 
FLASH_CR2_MER
))

436 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(0);

439 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_NONE
;

441 #i‡
	`deföed
(
FLASH_BANK2_END
)

447 
pFœsh
.
D©aRemaöög
--;

450 if(
pFœsh
.
D©aRemaöög
 != 0)

453 
pFœsh
.
Addªss
 += 2;

454 
addªs°mp
 = 
pFœsh
.
Addªss
;

457 
pFœsh
.
D©a
 = (pFlash.Data >> 16);

460 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_PG
);

463 
	`FLASH_Progøm_HÆfW‹d
(
addªs°mp
, (
uöt16_t
)
pFœsh
.
D©a
);

469 i‡(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_PROGRAMHALFWORD
)

471 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
pFœsh
.
Addªss
);

473 i‡(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_PROGRAMWORD
)

475 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
pFœsh
.
Addªss
 - 2);

479 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
pFœsh
.
Addªss
 - 6);

483 
pFœsh
.
Addªss
 = 0xFFFFFFFF;

484 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_NONE
;

490 #i‡
	`deföed
(
FLASH_BANK2_END
)

492 if(
	`__HAL_FLASH_GET_FLAG
–
FLASH_FLAG_EOP_BANK2
))

495 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_EOP_BANK2
);

498 if(
pFœsh
.
Pro˚duªOnGoög
 !
FLASH_PROC_NONE
)

500 if(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_PAGEERASE
)

503 
pFœsh
.
D©aRemaöög
--;

506 if(
pFœsh
.
D©aRemaöög
 != 0)

509 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
pFœsh
.
Addªss
);

512 
pFœsh
.
Addªss
 +
FLASH_PAGE_SIZE
;

513 
addªs°mp
 = 
pFœsh
.
Addªss
;

516 
	`CLEAR_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_PER
);

518 
	`FLASH_PageEø£
(
addªs°mp
);

525 
pFœsh
.
Addªss
 = 0xFFFFFFFF;

526 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_NONE
;

529 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
pFœsh
.
Addªss
);

532 if(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_MASSERASE
)

535 
	`CLEAR_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_MER
);

537 i‡(
	`HAL_IS_BIT_CLR
(
FLASH
->
CR
, 
FLASH_CR_MER
))

541 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(0);

543 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_NONE
;

549 
pFœsh
.
D©aRemaöög
--;

552 if(
pFœsh
.
D©aRemaöög
 != 0)

555 
pFœsh
.
Addªss
 += 2;

556 
addªs°mp
 = 
pFœsh
.
Addªss
;

559 
pFœsh
.
D©a
 = (pFlash.Data >> 16);

562 
	`CLEAR_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_PG
);

565 
	`FLASH_Progøm_HÆfW‹d
(
addªs°mp
, (
uöt16_t
)
pFœsh
.
D©a
);

571 i‡(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_PROGRAMHALFWORD
)

573 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
pFœsh
.
Addªss
);

575 i‡(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_PROGRAMWORD
)

577 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
pFœsh
.
Addªss
-2);

581 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
pFœsh
.
Addªss
-6);

585 
pFœsh
.
Addªss
 = 0xFFFFFFFF;

586 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_NONE
;

593 if(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_NONE
)

595 #i‡
	`deföed
(
FLASH_BANK2_END
)

597 
	`CLEAR_BIT
(
FLASH
->
CR
, (
FLASH_CR_PG
 | 
FLASH_CR_PER
 | 
FLASH_CR_MER
));

598 
	`CLEAR_BIT
(
FLASH
->
CR2
, (
FLASH_CR2_PG
 | 
FLASH_CR2_PER
 | 
FLASH_CR2_MER
));

601 
	`__HAL_FLASH_DISABLE_IT
(
FLASH_IT_EOP_BANK1
 | 
FLASH_IT_ERR_BANK1
 | 
FLASH_IT_EOP_BANK2
 | 
FLASH_IT_ERR_BANK2
);

604 
	`CLEAR_BIT
(
FLASH
->
CR
, (
FLASH_CR_PG
 | 
FLASH_CR_PER
 | 
FLASH_CR_MER
));

607 
	`__HAL_FLASH_DISABLE_IT
(
FLASH_IT_EOP
 | 
FLASH_IT_ERR
);

611 
	`__HAL_UNLOCK
(&
pFœsh
);

613 
	}
}

625 
__wók
 
	$HAL_FLASH_EndOfO≥øti⁄CÆlback
(
uöt32_t
 
Rëu∫VÆue
)

628 
	`UNUSED
(
Rëu∫VÆue
);

632 
	}
}

642 
__wók
 
	$HAL_FLASH_O≥øti⁄Eº‹CÆlback
(
uöt32_t
 
Rëu∫VÆue
)

645 
	`UNUSED
(
Rëu∫VÆue
);

649 
	}
}

674 
HAL_SètusTy≥Def
 
	$HAL_FLASH_U∆ock
()

676 i‡(
	`HAL_IS_BIT_SET
(
FLASH
->
CR
, 
FLASH_CR_LOCK
))

679 
	`WRITE_REG
(
FLASH
->
KEYR
, 
FLASH_KEY1
);

680 
	`WRITE_REG
(
FLASH
->
KEYR
, 
FLASH_KEY2
);

684  
HAL_ERROR
;

687 #i‡
	`deföed
(
FLASH_BANK2_END
)

688 i‡(
	`HAL_IS_BIT_SET
(
FLASH
->
CR2
, 
FLASH_CR2_LOCK
))

691 
	`WRITE_REG
(
FLASH
->
KEYR2
, 
FLASH_KEY1
);

692 
	`WRITE_REG
(
FLASH
->
KEYR2
, 
FLASH_KEY2
);

696  
HAL_ERROR
;

700  
HAL_OK
;

701 
	}
}

707 
HAL_SètusTy≥Def
 
	$HAL_FLASH_Lock
()

710 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_LOCK
);

712 #i‡
	`deföed
(
FLASH_BANK2_END
)

714 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_LOCK
);

717  
HAL_OK
;

718 
	}
}

725 
HAL_SètusTy≥Def
 
	$HAL_FLASH_OB_U∆ock
()

727 i‡(
	`HAL_IS_BIT_CLR
(
FLASH
->
CR
, 
FLASH_CR_OPTWRE
))

730 
	`WRITE_REG
(
FLASH
->
OPTKEYR
, 
FLASH_OPTKEY1
);

731 
	`WRITE_REG
(
FLASH
->
OPTKEYR
, 
FLASH_OPTKEY2
);

735  
HAL_ERROR
;

738  
HAL_OK
;

739 
	}
}

745 
HAL_SètusTy≥Def
 
	$HAL_FLASH_OB_Lock
()

748 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTWRE
);

750  
HAL_OK
;

751 
	}
}

758 
HAL_SètusTy≥Def
 
	$HAL_FLASH_OB_Launch
()

761 
	`HAL_NVIC_Sy°emRe£t
();

763  
HAL_OK
;

764 
	}
}

789 
uöt32_t
 
	$HAL_FLASH_GëEº‹
()

791  
pFœsh
.
Eº‹Code
;

792 
	}
}

811 
	$FLASH_Progøm_HÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
)

814 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

816 #i‡
	`deföed
(
FLASH_BANK2_END
)

817 if(
Addªss
 <
FLASH_BANK1_END
)

821 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_PG
);

822 #i‡
	`deföed
(
FLASH_BANK2_END
)

827 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_PG
);

832 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

833 
	}
}

840 
HAL_SètusTy≥Def
 
	$FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
)

846 
uöt32_t
 
tick°¨t
 = 
	`HAL_GëTick
();

848 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_BSY
))

850 i‡(
Timeout
 !
HAL_MAX_DELAY
)

852 if((
Timeout
 =0Ë|| ((
	`HAL_GëTick
()-
tick°¨t
) > Timeout))

854  
HAL_TIMEOUT
;

860 i‡(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_EOP
))

863 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_EOP
);

866 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR
) ||

867 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_OPTVERR
) ||

868 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_PGERR
))

871 
	`FLASH_SëEº‹Code
();

872  
HAL_ERROR
;

876  
HAL_OK
;

877 
	}
}

879 #i‡
deföed
(
FLASH_BANK2_END
)

885 
HAL_SètusTy≥Def
 
	$FLASH_WaôF‹La°O≥øti⁄B™k2
(
uöt32_t
 
Timeout
)

891 
uöt32_t
 
tick°¨t
 = 
	`HAL_GëTick
();

893 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_BSY_BANK2
))

895 i‡(
Timeout
 !
HAL_MAX_DELAY
)

897 if((
Timeout
 =0Ë|| ((
	`HAL_GëTick
()-
tick°¨t
) > Timeout))

899  
HAL_TIMEOUT
;

905 i‡(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_EOP_BANK2
))

908 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_EOP_BANK2
);

911 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR_BANK2
Ë|| __HAL_FLASH_GET_FLAG(
FLASH_FLAG_PGERR_BANK2
))

914 
	`FLASH_SëEº‹Code
();

915  
HAL_ERROR
;

919  
HAL_OK
;

921 
	}
}

928 
	$FLASH_SëEº‹Code
()

930 #i‡
	`deföed
(
FLASH_BANK2_END
)

931 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR
Ë|| __HAL_FLASH_GET_FLAG(
FLASH_FLAG_WRPERR_BANK2
))

933 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR
))

936 
pFœsh
.
Eº‹Code
 |
HAL_FLASH_ERROR_WRP
;

938 #i‡
	`deföed
(
FLASH_BANK2_END
)

939 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_PGERR
Ë|| __HAL_FLASH_GET_FLAG(
FLASH_FLAG_PGERR_BANK2
))

941 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_PGERR
))

944 
pFœsh
.
Eº‹Code
 |
HAL_FLASH_ERROR_PROG
;

947 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_OPTVERR
))

949 
pFœsh
.
Eº‹Code
 |
HAL_FLASH_ERROR_OPTV
;

950 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_OPTVERR
);

954 #i‡
	`deföed
(
FLASH_BANK2_END
)

955 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_WRPERR
 | 
FLASH_FLAG_WRPERR_BANK2
 | 
FLASH_FLAG_PGERR
 | 
FLASH_FLAG_PGERR_BANK2
);

957 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_WRPERR
 | 
FLASH_FLAG_PGERR
);

959 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Src\stm32f1xx_hal_flash_ex.c

61 
	~"°m32f1xx_hÆ.h
"

66 #ifde‡
HAL_FLASH_MODULE_ENABLED


75 
FLASH_Pro˚ssTy≥Def
 
pFœsh
;

94 
	#FLASH_POSITION_IWDGSW_BIT
 (
uöt32_t
)
	`POSITION_VAL
(
FLASH_OBR_IWDG_SW
)

	)

95 
	#FLASH_POSITION_OB_USERDATA0_BIT
 (
uöt32_t
)
	`POSITION_VAL
(
FLASH_OBR_DATA0
)

	)

96 
	#FLASH_POSITION_OB_USERDATA1_BIT
 (
uöt32_t
)
	`POSITION_VAL
(
FLASH_OBR_DATA1
)

	)

115 
FLASH_MassEø£
(
uöt32_t
 
B™ks
);

118 
HAL_SètusTy≥Def
 
FLASH_OB_E«bÀWRP
(
uöt32_t
 
WrôePrŸe˘Page
);

119 
HAL_SètusTy≥Def
 
FLASH_OB_DißbÀWRP
(
uöt32_t
 
WrôePrŸe˘Page
);

120 
HAL_SètusTy≥Def
 
FLASH_OB_RDP_LevñC⁄fig
(
uöt8_t
 
RódPrŸe˘Levñ
);

121 
HAL_SètusTy≥Def
 
FLASH_OB_U£rC⁄fig
(
uöt8_t
 
U£rC⁄fig
);

122 
HAL_SètusTy≥Def
 
FLASH_OB_ProgømD©a
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
);

123 
uöt32_t
 
FLASH_OB_GëWRP
();

124 
uöt32_t
 
FLASH_OB_GëRDP
();

125 
uöt8_t
 
FLASH_OB_GëU£r
();

176 
HAL_SètusTy≥Def
 
	$HAL_FLASHEx_Eø£
(
FLASH_Eø£InôTy≥Def
 *
pEø£Inô
, 
uöt32_t
 *
PageEº‹
)

178 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

179 
uöt32_t
 
addªss
 = 0;

182 
	`__HAL_LOCK
(&
pFœsh
);

185 
	`as£π_∑øm
(
	`IS_FLASH_TYPEERASE
(
pEø£Inô
->
Ty≥Eø£
));

187 i‡(
pEø£Inô
->
Ty≥Eø£
 =
FLASH_TYPEERASE_MASSERASE
)

189 #i‡
	`deföed
(
FLASH_BANK2_END
)

190 i‡(
pEø£Inô
->
B™ks
 =
FLASH_BANK_BOTH
)

194 i‡((
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
Ë=
HAL_OK
) && \

195 (
	`FLASH_WaôF‹La°O≥øti⁄B™k2
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
Ë=
HAL_OK
))

198 
	`FLASH_MassEø£
(
FLASH_BANK_BOTH
);

201 i‡((
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
Ë=
HAL_OK
) && \

202 (
	`FLASH_WaôF‹La°O≥øti⁄B™k2
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
Ë=
HAL_OK
))

204 
°©us
 = 
HAL_OK
;

208 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_MER
);

209 
	`CLEAR_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_MER
);

212 i‡(
pEø£Inô
->
B™ks
 =
FLASH_BANK_2
)

216 i‡(
	`FLASH_WaôF‹La°O≥øti⁄B™k2
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
Ë=
HAL_OK
)

219 
	`FLASH_MassEø£
(
FLASH_BANK_2
);

222 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄B™k2
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

225 
	`CLEAR_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_MER
);

233 i‡(
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
Ë=
HAL_OK
)

236 
	`FLASH_MassEø£
(
FLASH_BANK_1
);

239 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

242 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_MER
);

250 
	`as£π_∑øm
(
	`IS_FLASH_PROGRAM_ADDRESS
(
pEø£Inô
->
PageAddªss
));

251 
	`as£π_∑øm
(
	`IS_FLASH_NB_PAGES
(
pEø£Inô
->
PageAddªss
,ÖEø£Inô->
NbPages
));

253 #i‡
	`deföed
(
FLASH_BANK2_END
)

255 if(
pEø£Inô
->
PageAddªss
 > 
FLASH_BANK1_END
)

258 i‡(
	`FLASH_WaôF‹La°O≥øti⁄B™k2
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
Ë=
HAL_OK
)

261 *
PageEº‹
 = 0xFFFFFFFF;

264 
addªss
 = 
pEø£Inô
->
PageAddªss
;

265 
addªss
 < (
pEø£Inô
->
PageAddªss
 + (pEø£Inô->
NbPages
)*
FLASH_PAGE_SIZE
);

266 
addªss
 +
FLASH_PAGE_SIZE
)

268 
	`FLASH_PageEø£
(
addªss
);

271 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄B™k2
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

274 
	`CLEAR_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_PER
);

276 i‡(
°©us
 !
HAL_OK
)

279 *
PageEº‹
 = 
addªss
;

290 i‡(
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
Ë=
HAL_OK
)

293 *
PageEº‹
 = 0xFFFFFFFF;

296 
addªss
 = 
pEø£Inô
->
PageAddªss
;

297 
addªss
 < ((
pEø£Inô
->
NbPages
 * 
FLASH_PAGE_SIZE
Ë+ÖEø£Inô->
PageAddªss
);

298 
addªss
 +
FLASH_PAGE_SIZE
)

300 
	`FLASH_PageEø£
(
addªss
);

303 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

306 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_PER
);

308 i‡(
°©us
 !
HAL_OK
)

311 *
PageEº‹
 = 
addªss
;

320 
	`__HAL_UNLOCK
(&
pFœsh
);

322  
°©us
;

323 
	}
}

336 
HAL_SètusTy≥Def
 
	$HAL_FLASHEx_Eø£_IT
(
FLASH_Eø£InôTy≥Def
 *
pEø£Inô
)

338 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

341 
	`__HAL_LOCK
(&
pFœsh
);

344 i‡(
pFœsh
.
Pro˚duªOnGoög
 !
FLASH_PROC_NONE
)

346  
HAL_ERROR
;

350 
	`as£π_∑øm
(
	`IS_FLASH_TYPEERASE
(
pEø£Inô
->
Ty≥Eø£
));

353 
	`__HAL_FLASH_ENABLE_IT
(
FLASH_IT_EOP
 | 
FLASH_IT_ERR
);

355 #i‡
	`deföed
(
FLASH_BANK2_END
)

357 
	`__HAL_FLASH_ENABLE_IT
(
FLASH_IT_EOP_BANK2
 | 
FLASH_IT_ERR_BANK2
);

360 i‡(
pEø£Inô
->
Ty≥Eø£
 =
FLASH_TYPEERASE_MASSERASE
)

363 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_MASSERASE
;

364 
	`FLASH_MassEø£
(
pEø£Inô
->
B™ks
);

371 
	`as£π_∑øm
(
	`IS_FLASH_PROGRAM_ADDRESS
(
pEø£Inô
->
PageAddªss
));

372 
	`as£π_∑øm
(
	`IS_FLASH_NB_PAGES
(
pEø£Inô
->
PageAddªss
,ÖEø£Inô->
NbPages
));

374 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_PAGEERASE
;

375 
pFœsh
.
D©aRemaöög
 = 
pEø£Inô
->
NbPages
;

376 
pFœsh
.
Addªss
 = 
pEø£Inô
->
PageAddªss
;

379 
	`FLASH_PageEø£
(
pEø£Inô
->
PageAddªss
);

382  
°©us
;

383 
	}
}

414 
HAL_SètusTy≥Def
 
	$HAL_FLASHEx_OBEø£
()

416 
uöt8_t
 
rd±mp
 = 
OB_RDP_LEVEL_0
;

417 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

420 
rd±mp
 = 
	`FLASH_OB_GëRDP
();

423 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

425 if(
°©us
 =
HAL_OK
)

428 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

431 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTER
);

432 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_STRT
);

435 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

438 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTER
);

440 if(
°©us
 =
HAL_OK
)

443 
°©us
 = 
	`FLASH_OB_RDP_LevñC⁄fig
(
rd±mp
);

448  
°©us
;

449 
	}
}

463 
HAL_SètusTy≥Def
 
	$HAL_FLASHEx_OBProgøm
(
FLASH_OBProgømInôTy≥Def
 *
pOBInô
)

465 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

468 
	`__HAL_LOCK
(&
pFœsh
);

471 
	`as£π_∑øm
(
	`IS_OPTIONBYTE
(
pOBInô
->
O±i⁄Ty≥
));

474 if((
pOBInô
->
O±i⁄Ty≥
 & 
OPTIONBYTE_WRP
) == OPTIONBYTE_WRP)

476 
	`as£π_∑øm
(
	`IS_WRPSTATE
(
pOBInô
->
WRPSèã
));

477 i‡(
pOBInô
->
WRPSèã
 =
OB_WRPSTATE_ENABLE
)

480 
°©us
 = 
	`FLASH_OB_E«bÀWRP
(
pOBInô
->
WRPPage
);

485 
°©us
 = 
	`FLASH_OB_DißbÀWRP
(
pOBInô
->
WRPPage
);

487 i‡(
°©us
 !
HAL_OK
)

490 
	`__HAL_UNLOCK
(&
pFœsh
);

491  
°©us
;

496 if((
pOBInô
->
O±i⁄Ty≥
 & 
OPTIONBYTE_RDP
) == OPTIONBYTE_RDP)

498 
°©us
 = 
	`FLASH_OB_RDP_LevñC⁄fig
(
pOBInô
->
RDPLevñ
);

499 i‡(
°©us
 !
HAL_OK
)

502 
	`__HAL_UNLOCK
(&
pFœsh
);

503  
°©us
;

508 if((
pOBInô
->
O±i⁄Ty≥
 & 
OPTIONBYTE_USER
) == OPTIONBYTE_USER)

510 
°©us
 = 
	`FLASH_OB_U£rC⁄fig
(
pOBInô
->
USERC⁄fig
);

511 i‡(
°©us
 !
HAL_OK
)

514 
	`__HAL_UNLOCK
(&
pFœsh
);

515  
°©us
;

520 if((
pOBInô
->
O±i⁄Ty≥
 & 
OPTIONBYTE_DATA
) == OPTIONBYTE_DATA)

522 
°©us
 = 
	`FLASH_OB_ProgømD©a
(
pOBInô
->
DATAAddªss
,ÖOBInô->
DATAD©a
);

523 i‡(
°©us
 !
HAL_OK
)

526 
	`__HAL_UNLOCK
(&
pFœsh
);

527  
°©us
;

532 
	`__HAL_UNLOCK
(&
pFœsh
);

534  
°©us
;

535 
	}
}

544 
	$HAL_FLASHEx_OBGëC⁄fig
(
FLASH_OBProgømInôTy≥Def
 *
pOBInô
)

546 
pOBInô
->
O±i⁄Ty≥
 = 
OPTIONBYTE_WRP
 | 
OPTIONBYTE_RDP
 | 
OPTIONBYTE_USER
;

549 
pOBInô
->
WRPPage
 = 
	`FLASH_OB_GëWRP
();

552 
pOBInô
->
RDPLevñ
 = 
	`FLASH_OB_GëRDP
();

555 
pOBInô
->
USERC⁄fig
 = 
	`FLASH_OB_GëU£r
();

556 
	}
}

566 
uöt32_t
 
	$HAL_FLASHEx_OBGëU£rD©a
(
uöt32_t
 
DATAAdªss
)

568 
uöt32_t
 
vÆue
 = 0;

570 i‡(
DATAAdªss
 =
OB_DATA_ADDRESS_DATA0
)

573 
vÆue
 = 
	`READ_BIT
(
FLASH
->
OBR
, 
FLASH_OBR_DATA0
Ë>> 
FLASH_POSITION_OB_USERDATA0_BIT
;

578 
vÆue
 = 
	`READ_BIT
(
FLASH
->
OBR
, 
FLASH_OBR_DATA1
Ë>> 
FLASH_POSITION_OB_USERDATA1_BIT
;

581  
vÆue
;

582 
	}
}

612 
	$FLASH_MassEø£
(
uöt32_t
 
B™ks
)

615 
	`as£π_∑øm
(
	`IS_FLASH_BANK
(
B™ks
));

618 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

620 #i‡
	`deföed
(
FLASH_BANK2_END
)

621 if(
B™ks
 =
FLASH_BANK_BOTH
)

624 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_MER
);

625 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_MER
);

626 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_STRT
);

627 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_STRT
);

629 if(
B™ks
 =
FLASH_BANK_2
)

632 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_MER
);

633 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_STRT
);

639 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_MER
);

640 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_STRT
);

641 #i‡
	`deföed
(
FLASH_BANK2_END
)

644 
	}
}

657 
HAL_SètusTy≥Def
 
	$FLASH_OB_E«bÀWRP
(
uöt32_t
 
WrôePrŸe˘Page
)

659 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

660 
uöt16_t
 
WRP0_D©a
 = 0xFFFF;

661 #i‡
	`deföed
(
FLASH_WRP1_WRP1
)

662 
uöt16_t
 
WRP1_D©a
 = 0xFFFF;

664 #i‡
	`deföed
(
FLASH_WRP2_WRP2
)

665 
uöt16_t
 
WRP2_D©a
 = 0xFFFF;

667 #i‡
	`deföed
(
FLASH_WRP3_WRP3
)

668 
uöt16_t
 
WRP3_D©a
 = 0xFFFF;

672 
	`as£π_∑øm
(
	`IS_OB_WRP
(
WrôePrŸe˘Page
));

675 
WrôePrŸe˘Page
 = (
uöt32_t
)(~((~
	`FLASH_OB_GëWRP
()) | WriteProtectPage));

677 #i‡
	`deföed
(
OB_WRP_PAGES0TO15MASK
)

678 
WRP0_D©a
 = (
uöt16_t
)(
WrôePrŸe˘Page
 & 
OB_WRP_PAGES0TO15MASK
);

679 #ñi‡
	`deföed
(
OB_WRP_PAGES0TO31MASK
)

680 
WRP0_D©a
 = (
uöt16_t
)(
WrôePrŸe˘Page
 & 
OB_WRP_PAGES0TO31MASK
);

683 #i‡
	`deföed
(
OB_WRP_PAGES16TO31MASK
)

684 
WRP1_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES16TO31MASK
) >> 8);

685 #ñi‡
	`deföed
(
OB_WRP_PAGES32TO63MASK
)

686 
WRP1_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES32TO63MASK
) >> 8);

689 #i‡
	`deföed
(
OB_WRP_PAGES64TO95MASK
)

690 
WRP2_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES64TO95MASK
) >> 16);

692 #i‡
	`deföed
(
OB_WRP_PAGES32TO47MASK
)

693 
WRP2_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES32TO47MASK
) >> 16);

696 #i‡
	`deföed
(
OB_WRP_PAGES96TO127MASK
)

697 
WRP3_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES96TO127MASK
) >> 24);

698 #ñi‡
	`deföed
(
OB_WRP_PAGES48TO255MASK
)

699 
WRP3_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES48TO255MASK
) >> 24);

700 #ñi‡
	`deföed
(
OB_WRP_PAGES48TO511MASK
)

701 
WRP3_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES48TO511MASK
) >> 24);

702 #ñi‡
	`deföed
(
OB_WRP_PAGES48TO127MASK
)

703 
WRP3_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES48TO127MASK
) >> 24);

707 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

709 if(
°©us
 =
HAL_OK
)

712 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

715 
°©us
 = 
	`HAL_FLASHEx_OBEø£
();

716 i‡(
°©us
 =
HAL_OK
)

719 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

721 #i‡
	`deföed
(
FLASH_WRP0_WRP0
)

722 if(
WRP0_D©a
 != 0xFF)

724 
OB
->
WRP0
 &
WRP0_D©a
;

727 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

731 #i‡
	`deföed
(
FLASH_WRP1_WRP1
)

732 if((
°©us
 =
HAL_OK
Ë&& (
WRP1_D©a
 != 0xFF))

734 
OB
->
WRP1
 &
WRP1_D©a
;

737 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

741 #i‡
	`deföed
(
FLASH_WRP2_WRP2
)

742 if((
°©us
 =
HAL_OK
Ë&& (
WRP2_D©a
 != 0xFF))

744 
OB
->
WRP2
 &
WRP2_D©a
;

747 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

751 #i‡
	`deföed
(
FLASH_WRP3_WRP3
)

752 if((
°©us
 =
HAL_OK
Ë&& (
WRP3_D©a
 != 0xFF))

754 
OB
->
WRP3
 &
WRP3_D©a
;

757 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

762 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

766  
°©us
;

767 
	}
}

780 
HAL_SètusTy≥Def
 
	$FLASH_OB_DißbÀWRP
(
uöt32_t
 
WrôePrŸe˘Page
)

782 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

783 
uöt16_t
 
WRP0_D©a
 = 0xFFFF;

784 #i‡
	`deföed
(
FLASH_WRP1_WRP1
)

785 
uöt16_t
 
WRP1_D©a
 = 0xFFFF;

787 #i‡
	`deföed
(
FLASH_WRP2_WRP2
)

788 
uöt16_t
 
WRP2_D©a
 = 0xFFFF;

790 #i‡
	`deföed
(
FLASH_WRP3_WRP3
)

791 
uöt16_t
 
WRP3_D©a
 = 0xFFFF;

795 
	`as£π_∑øm
(
	`IS_OB_WRP
(
WrôePrŸe˘Page
));

798 
WrôePrŸe˘Page
 = (
	`FLASH_OB_GëWRP
() | WriteProtectPage);

800 #i‡
	`deföed
(
OB_WRP_PAGES0TO15MASK
)

801 
WRP0_D©a
 = (
uöt16_t
)(
WrôePrŸe˘Page
 & 
OB_WRP_PAGES0TO15MASK
);

802 #ñi‡
	`deföed
(
OB_WRP_PAGES0TO31MASK
)

803 
WRP0_D©a
 = (
uöt16_t
)(
WrôePrŸe˘Page
 & 
OB_WRP_PAGES0TO31MASK
);

806 #i‡
	`deföed
(
OB_WRP_PAGES16TO31MASK
)

807 
WRP1_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES16TO31MASK
) >> 8);

808 #ñi‡
	`deföed
(
OB_WRP_PAGES32TO63MASK
)

809 
WRP1_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES32TO63MASK
) >> 8);

812 #i‡
	`deföed
(
OB_WRP_PAGES64TO95MASK
)

813 
WRP2_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES64TO95MASK
) >> 16);

815 #i‡
	`deföed
(
OB_WRP_PAGES32TO47MASK
)

816 
WRP2_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES32TO47MASK
) >> 16);

819 #i‡
	`deföed
(
OB_WRP_PAGES96TO127MASK
)

820 
WRP3_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES96TO127MASK
) >> 24);

821 #ñi‡
	`deföed
(
OB_WRP_PAGES48TO255MASK
)

822 
WRP3_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES48TO255MASK
) >> 24);

823 #ñi‡
	`deföed
(
OB_WRP_PAGES48TO511MASK
)

824 
WRP3_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES48TO511MASK
) >> 24);

825 #ñi‡
	`deföed
(
OB_WRP_PAGES48TO127MASK
)

826 
WRP3_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES48TO127MASK
) >> 24);

831 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

833 if(
°©us
 =
HAL_OK
)

836 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

839 
°©us
 = 
	`HAL_FLASHEx_OBEø£
();

840 i‡(
°©us
 =
HAL_OK
)

842 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

844 #i‡
	`deföed
(
FLASH_WRP0_WRP0
)

845 if(
WRP0_D©a
 != 0xFF)

847 
OB
->
WRP0
 |
WRP0_D©a
;

850 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

854 #i‡
	`deföed
(
FLASH_WRP1_WRP1
)

855 if((
°©us
 =
HAL_OK
Ë&& (
WRP1_D©a
 != 0xFF))

857 
OB
->
WRP1
 |
WRP1_D©a
;

860 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

864 #i‡
	`deföed
(
FLASH_WRP2_WRP2
)

865 if((
°©us
 =
HAL_OK
Ë&& (
WRP2_D©a
 != 0xFF))

867 
OB
->
WRP2
 |
WRP2_D©a
;

870 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

874 #i‡
	`deföed
(
FLASH_WRP3_WRP3
)

875 if((
°©us
 =
HAL_OK
Ë&& (
WRP3_D©a
 != 0xFF))

877 
OB
->
WRP3
 |
WRP3_D©a
;

880 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

885 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

888  
°©us
;

889 
	}
}

899 
HAL_SètusTy≥Def
 
	$FLASH_OB_RDP_LevñC⁄fig
(
uöt8_t
 
RódPrŸe˘Levñ
)

901 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

904 
	`as£π_∑øm
(
	`IS_OB_RDP_LEVEL
(
RódPrŸe˘Levñ
));

907 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

909 if(
°©us
 =
HAL_OK
)

912 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

915 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTER
);

916 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_STRT
);

919 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

922 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTER
);

924 if(
°©us
 =
HAL_OK
)

927 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

929 
	`WRITE_REG
(
OB
->
RDP
, 
RódPrŸe˘Levñ
);

932 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

935 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

939  
°©us
;

940 
	}
}

950 
HAL_SètusTy≥Def
 
	$FLASH_OB_U£rC⁄fig
(
uöt8_t
 
U£rC⁄fig
)

952 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

955 
	`as£π_∑øm
(
	`IS_OB_IWDG_SOURCE
((
U£rC⁄fig
&
OB_IWDG_SW
)));

956 
	`as£π_∑øm
(
	`IS_OB_STOP_SOURCE
((
U£rC⁄fig
&
OB_STOP_NO_RST
)));

957 
	`as£π_∑øm
(
	`IS_OB_STDBY_SOURCE
((
U£rC⁄fig
&
OB_STDBY_NO_RST
)));

958 #i‡
	`deföed
(
FLASH_BANK2_END
)

959 
	`as£π_∑øm
(
	`IS_OB_BOOT1
((
U£rC⁄fig
&
OB_BOOT1_SET
)));

963 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

965 if(
°©us
 =
HAL_OK
)

968 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

971 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

973 #i‡
	`deföed
(
FLASH_BANK2_END
)

974 
OB
->
USER
 = (
U£rC⁄fig
 | 0xF0);

976 
OB
->
USER
 = (
U£rC⁄fig
 | 0x88);

980 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

983 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

986  
°©us
;

987 
	}
}

1001 
HAL_SètusTy≥Def
 
	$FLASH_OB_ProgømD©a
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
)

1003 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

1006 
	`as£π_∑øm
(
	`IS_OB_DATA_ADDRESS
(
Addªss
));

1009 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

1011 if(
°©us
 =
HAL_OK
)

1014 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

1017 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

1018 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

1021 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

1024 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

1027  
°©us
;

1028 
	}
}

1034 
uöt32_t
 
	$FLASH_OB_GëWRP
()

1037  (
uöt32_t
)(
	`READ_REG
(
FLASH
->
WRPR
));

1038 
	}
}

1047 
uöt32_t
 
	$FLASH_OB_GëRDP
()

1049 
uöt32_t
 
ªad°©us
 = 
OB_RDP_LEVEL_0
;

1050 
uöt32_t
 
tmp_ªg
 = 0;

1053 
tmp_ªg
 = 
	`READ_BIT
(
FLASH
->
OBR
, 
FLASH_OBR_RDPRT
);

1055 i‡(
tmp_ªg
 =
FLASH_OBR_RDPRT
)

1057 
ªad°©us
 = 
OB_RDP_LEVEL_1
;

1061 
ªad°©us
 = 
OB_RDP_LEVEL_0
;

1064  
ªad°©us
;

1065 
	}
}

1073 
uöt8_t
 
	$FLASH_OB_GëU£r
()

1076  (
uöt8_t
)((
	`READ_REG
(
FLASH
->
OBR
Ë& 
FLASH_OBR_USER
Ë>> 
FLASH_POSITION_IWDGSW_BIT
);

1077 
	}
}

1102 
	$FLASH_PageEø£
(
uöt32_t
 
PageAddªss
)

1105 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

1107 #i‡
	`deföed
(
FLASH_BANK2_END
)

1108 if(
PageAddªss
 > 
FLASH_BANK1_END
)

1111 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_PER
);

1112 
	`WRITE_REG
(
FLASH
->
AR2
, 
PageAddªss
);

1113 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_STRT
);

1119 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_PER
);

1120 
	`WRITE_REG
(
FLASH
->
AR
, 
PageAddªss
);

1121 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_STRT
);

1122 #i‡
	`deföed
(
FLASH_BANK2_END
)

1125 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Src\stm32f1xx_hal_gpio.c

123 
	~"°m32f1xx_hÆ.h
"

134 #ifde‡
HAL_GPIO_MODULE_ENABLED


142 
	#GPIO_MODE
 ((
uöt32_t
)0x00000003)

	)

143 
	#EXTI_MODE
 ((
uöt32_t
)0x10000000)

	)

144 
	#GPIO_MODE_IT
 ((
uöt32_t
)0x00010000)

	)

145 
	#GPIO_MODE_EVT
 ((
uöt32_t
)0x00020000)

	)

146 
	#RISING_EDGE
 ((
uöt32_t
)0x00100000)

	)

147 
	#FALLING_EDGE
 ((
uöt32_t
)0x00200000)

	)

148 
	#GPIO_OUTPUT_TYPE
 ((
uöt32_t
)0x00000010)

	)

149 
	#GPIO_NUMBER
 ((
uöt32_t
)16)

	)

152 
	#GPIO_CR_MODE_INPUT
 ((
uöt32_t
)0x00000000Ë

	)

153 
	#GPIO_CR_CNF_ANALOG
 ((
uöt32_t
)0x00000000Ë

	)

154 
	#GPIO_CR_CNF_INPUT_FLOATING
 ((
uöt32_t
)0x00000004Ë

	)

155 
	#GPIO_CR_CNF_INPUT_PU_PD
 ((
uöt32_t
)0x00000008Ë

	)

156 
	#GPIO_CR_CNF_GP_OUTPUT_PP
 ((
uöt32_t
)0x00000000Ë

	)

157 
	#GPIO_CR_CNF_GP_OUTPUT_OD
 ((
uöt32_t
)0x00000004Ë

	)

158 
	#GPIO_CR_CNF_AF_OUTPUT_PP
 ((
uöt32_t
)0x00000008Ë

	)

159 
	#GPIO_CR_CNF_AF_OUTPUT_OD
 ((
uöt32_t
)0x0000000CË

	)

196 
	$HAL_GPIO_Inô
(
GPIO_Ty≥Def
 *
GPIOx
, 
GPIO_InôTy≥Def
 *
GPIO_Inô
)

198 
uöt32_t
 
posôi⁄
;

199 
uöt32_t
 
i›osôi⁄
 = 0x00;

200 
uöt32_t
 
iocuºít
 = 0x00;

201 
uöt32_t
 
ãmp
 = 0x00;

202 
uöt32_t
 
c⁄fig
 = 0x00;

203 
__IO
 
uöt32_t
 *
c⁄figªgi°î
;

204 
uöt32_t
 
ªgi°îoff£t
 = 0;

207 
	`as£π_∑øm
(
	`IS_GPIO_ALL_INSTANCE
(
GPIOx
));

208 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Inô
->
Pö
));

209 
	`as£π_∑øm
(
	`IS_GPIO_MODE
(
GPIO_Inô
->
Mode
));

212 
posôi⁄
 = 0;Öosôi⁄ < 
GPIO_NUMBER
;Öosition++)

215 
i›osôi⁄
 = ((
uöt32_t
)0x01Ë<< 
posôi⁄
;

218 
iocuºít
 = (
uöt32_t
)(
GPIO_Inô
->
Pö
Ë& 
i›osôi⁄
;

220 i‡(
iocuºít
 =
i›osôi⁄
)

223 
	`as£π_∑øm
(
	`IS_GPIO_AF_INSTANCE
(
GPIOx
));

226 
GPIO_Inô
->
Mode
)

229 
GPIO_MODE_OUTPUT_PP
:

231 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_Inô
->
S≥ed
));

232 
c⁄fig
 = 
GPIO_Inô
->
S≥ed
 + 
GPIO_CR_CNF_GP_OUTPUT_PP
;

236 
GPIO_MODE_OUTPUT_OD
:

238 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_Inô
->
S≥ed
));

239 
c⁄fig
 = 
GPIO_Inô
->
S≥ed
 + 
GPIO_CR_CNF_GP_OUTPUT_OD
;

243 
GPIO_MODE_AF_PP
:

245 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_Inô
->
S≥ed
));

246 
c⁄fig
 = 
GPIO_Inô
->
S≥ed
 + 
GPIO_CR_CNF_AF_OUTPUT_PP
;

250 
GPIO_MODE_AF_OD
:

252 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_Inô
->
S≥ed
));

253 
c⁄fig
 = 
GPIO_Inô
->
S≥ed
 + 
GPIO_CR_CNF_AF_OUTPUT_OD
;

257 
GPIO_MODE_INPUT
:

258 
GPIO_MODE_IT_RISING
:

259 
GPIO_MODE_IT_FALLING
:

260 
GPIO_MODE_IT_RISING_FALLING
:

261 
GPIO_MODE_EVT_RISING
:

262 
GPIO_MODE_EVT_FALLING
:

263 
GPIO_MODE_EVT_RISING_FALLING
:

265 
	`as£π_∑øm
(
	`IS_GPIO_PULL
(
GPIO_Inô
->
PuŒ
));

266 if(
GPIO_Inô
->
PuŒ
 =
GPIO_NOPULL
)

268 
c⁄fig
 = 
GPIO_CR_MODE_INPUT
 + 
GPIO_CR_CNF_INPUT_FLOATING
;

270 if(
GPIO_Inô
->
PuŒ
 =
GPIO_PULLUP
)

272 
c⁄fig
 = 
GPIO_CR_MODE_INPUT
 + 
GPIO_CR_CNF_INPUT_PU_PD
;

275 
GPIOx
->
BSRR
 = 
i›osôi⁄
;

279 
c⁄fig
 = 
GPIO_CR_MODE_INPUT
 + 
GPIO_CR_CNF_INPUT_PU_PD
;

282 
GPIOx
->
BRR
 = 
i›osôi⁄
;

287 
GPIO_MODE_ANALOG
:

288 
c⁄fig
 = 
GPIO_CR_MODE_INPUT
 + 
GPIO_CR_CNF_ANALOG
;

298 
c⁄figªgi°î
 = (
iocuºít
 < 
GPIO_PIN_8
Ë? &
GPIOx
->
CRL
 : &GPIOx->
CRH
;

299 
ªgi°îoff£t
 = (
iocuºít
 < 
GPIO_PIN_8
Ë? (
posôi⁄
 << 2) : ((position - 8) << 2);

302 
	`MODIFY_REG
((*
c⁄figªgi°î
), ((
GPIO_CRL_MODE0
 | 
GPIO_CRL_CNF0
Ë<< 
ªgi°îoff£t
 ), (
c⁄fig
 <<Ñegisteroffset));

306 if((
GPIO_Inô
->
Mode
 & 
EXTI_MODE
) == EXTI_MODE)

309 
	`__HAL_RCC_AFIO_CLK_ENABLE
();

310 
ãmp
 = 
AFIO
->
EXTICR
[
posôi⁄
 >> 2];

311 
	`CLEAR_BIT
(
ãmp
, ((
uöt32_t
)0x0FË<< (4 * (
posôi⁄
 & 0x03)));

312 
	`SET_BIT
(
ãmp
, (
	`GPIO_GET_INDEX
(
GPIOx
)Ë<< (4 * (
posôi⁄
 & 0x03)));

313 
AFIO
->
EXTICR
[
posôi⁄
 >> 2] = 
ãmp
;

317 if((
GPIO_Inô
->
Mode
 & 
GPIO_MODE_IT
) == GPIO_MODE_IT)

319 
	`SET_BIT
(
EXTI
->
IMR
, 
iocuºít
);

323 
	`CLEAR_BIT
(
EXTI
->
IMR
, 
iocuºít
);

327 if((
GPIO_Inô
->
Mode
 & 
GPIO_MODE_EVT
) == GPIO_MODE_EVT)

329 
	`SET_BIT
(
EXTI
->
EMR
, 
iocuºít
);

333 
	`CLEAR_BIT
(
EXTI
->
EMR
, 
iocuºít
);

337 if((
GPIO_Inô
->
Mode
 & 
RISING_EDGE
) == RISING_EDGE)

339 
	`SET_BIT
(
EXTI
->
RTSR
, 
iocuºít
);

343 
	`CLEAR_BIT
(
EXTI
->
RTSR
, 
iocuºít
);

347 if((
GPIO_Inô
->
Mode
 & 
FALLING_EDGE
) == FALLING_EDGE)

349 
	`SET_BIT
(
EXTI
->
FTSR
, 
iocuºít
);

353 
	`CLEAR_BIT
(
EXTI
->
FTSR
, 
iocuºít
);

358 
	}
}

367 
	$HAL_GPIO_DeInô
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt32_t
 
GPIO_Pö
)

369 
uöt32_t
 
posôi⁄
 = 0x00;

370 
uöt32_t
 
iocuºít
 = 0x00;

371 
uöt32_t
 
tmp
 = 0x00;

372 
__IO
 
uöt32_t
 *
c⁄figªgi°î
;

373 
uöt32_t
 
ªgi°îoff£t
 = 0;

376 
	`as£π_∑øm
(
	`IS_GPIO_ALL_INSTANCE
(
GPIOx
));

377 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

380 (
GPIO_Pö
 >> 
posôi⁄
) != 0)

383 
iocuºít
 = (
GPIO_Pö
Ë& ((
uöt32_t
)1 << 
posôi⁄
);

385 i‡(
iocuºít
)

390 
c⁄figªgi°î
 = (
iocuºít
 < 
GPIO_PIN_8
Ë? &
GPIOx
->
CRL
 : &GPIOx->
CRH
;

391 
ªgi°îoff£t
 = (
iocuºít
 < 
GPIO_PIN_8
Ë? (
posôi⁄
 << 2) : ((position - 8) << 2);

394 
	`MODIFY_REG
(*
c⁄figªgi°î
, ((
GPIO_CRL_MODE0
 | 
GPIO_CRL_CNF0
Ë<< 
ªgi°îoff£t
 ), 
GPIO_CRL_CNF0_0
 <<Ñegisteroffset);

397 
	`CLEAR_BIT
(
GPIOx
->
ODR
, 
iocuºít
);

402 
tmp
 = 
AFIO
->
EXTICR
[
posôi⁄
 >> 2];

403 
tmp
 &(((
uöt32_t
)0x0FË<< (4 * (
posôi⁄
 & 0x03)));

404 if(
tmp
 =(
	`GPIO_GET_INDEX
(
GPIOx
Ë<< (4 * (
posôi⁄
 & 0x03))))

406 
tmp
 = ((
uöt32_t
)0x0FË<< (4 * (
posôi⁄
 & 0x03));

407 
	`CLEAR_BIT
(
AFIO
->
EXTICR
[
posôi⁄
 >> 2], 
tmp
);

410 
	`CLEAR_BIT
(
EXTI
->
IMR
, (
uöt32_t
)
iocuºít
);

411 
	`CLEAR_BIT
(
EXTI
->
EMR
, (
uöt32_t
)
iocuºít
);

414 
	`CLEAR_BIT
(
EXTI
->
RTSR
, (
uöt32_t
)
iocuºít
);

415 
	`CLEAR_BIT
(
EXTI
->
FTSR
, (
uöt32_t
)
iocuºít
);

419 
posôi⁄
++;

421 
	}
}

447 
GPIO_PöSèã
 
	$HAL_GPIO_RódPö
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

449 
GPIO_PöSèã
 
bô°©us
;

452 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

454 i‡((
GPIOx
->
IDR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
GPIO_PIN_RESET
)

456 
bô°©us
 = 
GPIO_PIN_SET
;

460 
bô°©us
 = 
GPIO_PIN_RESET
;

462  
bô°©us
;

463 
	}
}

481 
	$HAL_GPIO_WrôePö
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
GPIO_PöSèã
 
PöSèã
)

484 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

485 
	`as£π_∑øm
(
	`IS_GPIO_PIN_ACTION
(
PöSèã
));

487 if(
PöSèã
 !
GPIO_PIN_RESET
)

489 
GPIOx
->
BSRR
 = 
GPIO_Pö
;

493 
GPIOx
->
BSRR
 = (
uöt32_t
)
GPIO_Pö
 << 16;

495 
	}
}

503 
	$HAL_GPIO_ToggÀPö
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

506 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

508 
GPIOx
->
ODR
 ^
GPIO_Pö
;

509 
	}
}

521 
HAL_SètusTy≥Def
 
	$HAL_GPIO_LockPö
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

523 
__IO
 
uöt32_t
 
tmp
 = 
GPIO_LCKR_LCKK
;

526 
	`as£π_∑øm
(
	`IS_GPIO_LOCK_INSTANCE
(
GPIOx
));

527 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

530 
	`SET_BIT
(
tmp
, 
GPIO_Pö
);

532 
GPIOx
->
LCKR
 = 
tmp
;

534 
GPIOx
->
LCKR
 = 
GPIO_Pö
;

536 
GPIOx
->
LCKR
 = 
tmp
;

538 
tmp
 = 
GPIOx
->
LCKR
;

540 if((
uöt32_t
)(
GPIOx
->
LCKR
 & 
GPIO_LCKR_LCKK
))

542  
HAL_OK
;

546  
HAL_ERROR
;

548 
	}
}

555 
	$HAL_GPIO_EXTI_IRQH™dÀr
(
uöt16_t
 
GPIO_Pö
)

558 if(
	`__HAL_GPIO_EXTI_GET_IT
(
GPIO_Pö
Ë!
RESET
)

560 
	`__HAL_GPIO_EXTI_CLEAR_IT
(
GPIO_Pö
);

561 
	`HAL_GPIO_EXTI_CÆlback
(
GPIO_Pö
);

563 
	}
}

570 
__wók
 
	$HAL_GPIO_EXTI_CÆlback
(
uöt16_t
 
GPIO_Pö
)

573 
	`UNUSED
(
GPIO_Pö
);

577 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Src\stm32f1xx_hal_pcd.c

78 
	~"°m32f1xx_hÆ.h
"

86 #ifde‡
HAL_PCD_MODULE_ENABLED


88 #i‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
) || \

89 
deföed
(
STM32F103x6
Ë|| deföed(
STM32F103xB
) || \

90 
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
) || \

91 
deföed
(
STM32F105xC
Ë|| 
	$deföed
(
STM32F107xC
)

105 
	#PCD_MIN
(
a
, 
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

106 
	#PCD_MAX
(
a
, 
b
Ë((◊Ë> (b)Ë? (aË: (b))

	)

115 #i‡
	`deföed
 (
USB_OTG_FS
)

116 
HAL_SètusTy≥Def
 
	`PCD_WrôeEm±yTxFifo
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt32_t
 
ïnum
);

119 #i‡
	`deföed
 (
USB
)

120 
HAL_SètusTy≥Def
 
	`PCD_EP_ISR_H™dÀr
(
PCD_H™dÀTy≥Def
 *
hpcd
);

150 
HAL_SètusTy≥Def
 
	$HAL_PCD_Inô
(
PCD_H™dÀTy≥Def
 *
hpcd
)

152 
uöt32_t
 
ödex
 = 0;

155 if(
hpcd
 =
NULL
)

157  
HAL_ERROR
;

161 
	`as£π_∑øm
(
	`IS_PCD_ALL_INSTANCE
(
hpcd
->
In°™˚
));

163 if(
hpcd
->
Sèã
 =
HAL_PCD_STATE_RESET
)

166 
hpcd
->
Lock
 = 
HAL_UNLOCKED
;

169 
	`HAL_PCD_M•Inô
(
hpcd
);

172 
hpcd
->
Sèã
 = 
HAL_PCD_STATE_BUSY
;

175 
	`__HAL_PCD_DISABLE
(
hpcd
);

178 
	`USB_C‹eInô
(
hpcd
->
In°™˚
, hpcd->
Inô
);

181 
	`USB_SëCuºítMode
(
hpcd
->
In°™˚
 , 
USB_DEVICE_MODE
);

184 
ödex
 = 0; index < 15 ; index++)

187 
hpcd
->
IN_ï
[
ödex
].
is_ö
 = 1;

188 
hpcd
->
IN_ï
[
ödex
].
num
 = index;

189 
hpcd
->
IN_ï
[
ödex
].
tx_fifo_num
 = index;

191 
hpcd
->
IN_ï
[
ödex
].
ty≥
 = 
EP_TYPE_CTRL
;

192 
hpcd
->
IN_ï
[
ödex
].
max∑ckë
 = 0;

193 
hpcd
->
IN_ï
[
ödex
].
x„r_buff
 = 0;

194 
hpcd
->
IN_ï
[
ödex
].
x„r_Àn
 = 0;

197 
ödex
 = 0; index < 15 ; index++)

199 
hpcd
->
OUT_ï
[
ödex
].
is_ö
 = 0;

200 
hpcd
->
OUT_ï
[
ödex
].
num
 = index;

201 
hpcd
->
IN_ï
[
ödex
].
tx_fifo_num
 = index;

203 
hpcd
->
OUT_ï
[
ödex
].
ty≥
 = 
EP_TYPE_CTRL
;

204 
hpcd
->
OUT_ï
[
ödex
].
max∑ckë
 = 0;

205 
hpcd
->
OUT_ï
[
ödex
].
x„r_buff
 = 0;

206 
hpcd
->
OUT_ï
[
ödex
].
x„r_Àn
 = 0;

210 
	`USB_DevInô
(
hpcd
->
In°™˚
, hpcd->
Inô
);

212 
hpcd
->
USB_Addªss
 = 0;

213 
hpcd
->
Sèã

HAL_PCD_STATE_READY
;

215 
	`USB_DevDisc⁄√˘
 (
hpcd
->
In°™˚
);

216  
HAL_OK
;

217 
	}
}

224 
HAL_SètusTy≥Def
 
	$HAL_PCD_DeInô
(
PCD_H™dÀTy≥Def
 *
hpcd
)

227 if(
hpcd
 =
NULL
)

229  
HAL_ERROR
;

232 
hpcd
->
Sèã
 = 
HAL_PCD_STATE_BUSY
;

235 
	`HAL_PCD_St›
(
hpcd
);

238 
	`HAL_PCD_M•DeInô
(
hpcd
);

240 
hpcd
->
Sèã
 = 
HAL_PCD_STATE_RESET
;

242  
HAL_OK
;

243 
	}
}

250 
__wók
 
	$HAL_PCD_M•Inô
(
PCD_H™dÀTy≥Def
 *
hpcd
)

253 
	`UNUSED
(
hpcd
);

257 
	}
}

264 
__wók
 
	$HAL_PCD_M•DeInô
(
PCD_H™dÀTy≥Def
 *
hpcd
)

267 
	`UNUSED
(
hpcd
);

271 
	}
}

297 
HAL_SètusTy≥Def
 
	$HAL_PCD_Sèπ
(
PCD_H™dÀTy≥Def
 *
hpcd
)

299 
	`__HAL_LOCK
(
hpcd
);

300 
	`HAL_PCDEx_SëC⁄√˘i⁄Sèã
 (
hpcd
, 1);

301 
	`USB_DevC⁄√˘
 (
hpcd
->
In°™˚
);

302 
	`__HAL_PCD_ENABLE
(
hpcd
);

303 
	`__HAL_UNLOCK
(
hpcd
);

304  
HAL_OK
;

305 
	}
}

312 
HAL_SètusTy≥Def
 
	$HAL_PCD_St›
(
PCD_H™dÀTy≥Def
 *
hpcd
)

314 
	`__HAL_LOCK
(
hpcd
);

315 
	`__HAL_PCD_DISABLE
(
hpcd
);

316 
	`USB_St›Devi˚
(
hpcd
->
In°™˚
);

317 
	`USB_DevDisc⁄√˘
 (
hpcd
->
In°™˚
);

318 
	`__HAL_UNLOCK
(
hpcd
);

319  
HAL_OK
;

320 
	}
}

322 #i‡
deföed
 (
USB_OTG_FS
)

328 
	$HAL_PCD_IRQH™dÀr
(
PCD_H™dÀTy≥Def
 *
hpcd
)

330 
USB_OTG_GlobÆTy≥Def
 *
USBx
 = 
hpcd
->
In°™˚
;

331 
uöt32_t
 
ödex
 = 0, 
ï_öå
 = 0, 
ïöt
 = 0, 
ïnum
 = 0;

332 
uöt32_t
 
fif€m±ymsk
 = 0, 
ãmp
 = 0;

333 
USB_OTG_EPTy≥Def
 *
ï
 = 
NULL
;

336 i‡(
	`USB_GëMode
(
hpcd
->
In°™˚
Ë=
USB_OTG_MODE_DEVICE
)

339 if(
	`__HAL_PCD_IS_INVALID_INTERRUPT
(
hpcd
))

344 if(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_MMIS
))

347 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_MMIS
);

350 if(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_OEPINT
))

352 
ïnum
 = 0;

355 
ï_öå
 = 
	`USB_RódDevAŒOutEpI¡îru±
(
hpcd
->
In°™˚
);

357  
ï_öå
 )

359 i‡(
ï_öå
 & 0x1)

361 
ïöt
 = 
	`USB_RódDevOutEPI¡îru±
(
hpcd
->
In°™˚
, 
ïnum
);

363 if(–
ïöt
 & 
USB_OTG_DOEPINT_XFRC
) == USB_OTG_DOEPINT_XFRC)

365 
	`CLEAR_OUT_EP_INTR
(
ïnum
, 
USB_OTG_DOEPINT_XFRC
);

367 
	`HAL_PCD_D©aOutSègeCÆlback
(
hpcd
, 
ïnum
);

370 if(–
ïöt
 & 
USB_OTG_DOEPINT_STUP
) == USB_OTG_DOEPINT_STUP)

373 
	`HAL_PCD_SëupSègeCÆlback
(
hpcd
);

374 
	`CLEAR_OUT_EP_INTR
(
ïnum
, 
USB_OTG_DOEPINT_STUP
);

377 if(–
ïöt
 & 
USB_OTG_DOEPINT_OTEPDIS
) == USB_OTG_DOEPINT_OTEPDIS)

379 
	`CLEAR_OUT_EP_INTR
(
ïnum
, 
USB_OTG_DOEPINT_OTEPDIS
);

382 
ïnum
++;

383 
ï_öå
 >>= 1;

387 if(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_IEPINT
))

390 
ï_öå
 = 
	`USB_RódDevAŒInEpI¡îru±
(
hpcd
->
In°™˚
);

392 
ïnum
 = 0;

394  
ï_öå
 )

396 i‡(
ï_öå
 & 0x1)

398 
ïöt
 = 
	`USB_RódDevInEPI¡îru±
(
hpcd
->
In°™˚
, 
ïnum
);

400 if(–
ïöt
 & 
USB_OTG_DIEPINT_XFRC
) == USB_OTG_DIEPINT_XFRC)

402 
fif€m±ymsk
 = 0x1 << 
ïnum
;

403 
USBx_DEVICE
->
DIEPEMPMSK
 &~
fif€m±ymsk
;

405 
	`CLEAR_IN_EP_INTR
(
ïnum
, 
USB_OTG_DIEPINT_XFRC
);

407 
	`HAL_PCD_D©aInSègeCÆlback
(
hpcd
, 
ïnum
);

409 if(–
ïöt
 & 
USB_OTG_DIEPINT_TOC
) == USB_OTG_DIEPINT_TOC)

411 
	`CLEAR_IN_EP_INTR
(
ïnum
, 
USB_OTG_DIEPINT_TOC
);

413 if(–
ïöt
 & 
USB_OTG_DIEPINT_ITTXFE
) == USB_OTG_DIEPINT_ITTXFE)

415 
	`CLEAR_IN_EP_INTR
(
ïnum
, 
USB_OTG_DIEPINT_ITTXFE
);

417 if(–
ïöt
 & 
USB_OTG_DIEPINT_INEPNE
) == USB_OTG_DIEPINT_INEPNE)

419 
	`CLEAR_IN_EP_INTR
(
ïnum
, 
USB_OTG_DIEPINT_INEPNE
);

421 if(–
ïöt
 & 
USB_OTG_DIEPINT_EPDISD
) == USB_OTG_DIEPINT_EPDISD)

423 
	`CLEAR_IN_EP_INTR
(
ïnum
, 
USB_OTG_DIEPINT_EPDISD
);

425 if(–
ïöt
 & 
USB_OTG_DIEPINT_TXFE
) == USB_OTG_DIEPINT_TXFE)

427 
	`PCD_WrôeEm±yTxFifo
(
hpcd
 , 
ïnum
);

430 
ïnum
++;

431 
ï_öå
 >>= 1;

436 if(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_WKUINT
))

439 
USBx_DEVICE
->
DCTL
 &~
USB_OTG_DCTL_RWUSIG
;

441 
	`HAL_PCD_ResumeCÆlback
(
hpcd
);

443 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_WKUINT
);

447 if(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_USBSUSP
))

449 if((
USBx_DEVICE
->
DSTS
 & 
USB_OTG_DSTS_SUSPSTS
) == USB_OTG_DSTS_SUSPSTS)

452 
	`HAL_PCD_Su•ídCÆlback
(
hpcd
);

454 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_USBSUSP
);

458 if(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_USBRST
))

460 
USBx_DEVICE
->
DCTL
 &~
USB_OTG_DCTL_RWUSIG
;

461 
	`USB_FlushTxFifo
(
hpcd
->
In°™˚
 , 0 );

463 
ödex
 = 0; index < 
hpcd
->
Inô
.
dev_ídpoöts
 ; index++)

465 
	`USBx_INEP
(
ödex
)->
DIEPINT
 = 0xFF;

466 
	`USBx_OUTEP
(
ödex
)->
DOEPINT
 = 0xFF;

468 
USBx_DEVICE
->
DAINT
 = 0xFFFFFFFF;

469 
USBx_DEVICE
->
DAINTMSK
 |= 0x10001;

471 
USBx_DEVICE
->
DOEPMSK
 |(
USB_OTG_DOEPMSK_STUPM
 | 
USB_OTG_DOEPMSK_XFRCM
 | 
USB_OTG_DOEPMSK_EPDM
);

472 
USBx_DEVICE
->
DIEPMSK
 |(
USB_OTG_DIEPMSK_TOM
 | 
USB_OTG_DIEPMSK_XFRCM
 | 
USB_OTG_DIEPMSK_EPDM
);

475 
USBx_DEVICE
->
DCFG
 &~
USB_OTG_DCFG_DAD
;

478 
	`USB_EP0_OutSèπ
(
hpcd
->
In°™˚
, (
uöt8_t
 *)hpcd->
Sëup
);

480 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_USBRST
);

484 if(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_ENUMDNE
))

486 
	`USB_A˘iv©eSëup
(
hpcd
->
In°™˚
);

487 
hpcd
->
In°™˚
->
GUSBCFG
 &~
USB_OTG_GUSBCFG_TRDT
;

489 
hpcd
->
Inô
.
•ìd
 = 
USB_OTG_SPEED_FULL
;

490 
hpcd
->
Inô
.
ï0_mps
 = 
USB_OTG_FS_MAX_PACKET_SIZE
 ;

491 
hpcd
->
In°™˚
->
GUSBCFG
 |(
uöt32_t
)((
USBD_FS_TRDT_VALUE
 << 10Ë& 
USB_OTG_GUSBCFG_TRDT
);

493 
	`HAL_PCD_Re£tCÆlback
(
hpcd
);

495 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_ENUMDNE
);

499 if(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_RXFLVL
))

501 
	`USB_MASK_INTERRUPT
(
hpcd
->
In°™˚
, 
USB_OTG_GINTSTS_RXFLVL
);

502 
ãmp
 = 
USBx
->
GRXSTSP
;

503 
ï
 = &
hpcd
->
OUT_ï
[
ãmp
 & 
USB_OTG_GRXSTSP_EPNUM
];

505 if(((
ãmp
 & 
USB_OTG_GRXSTSP_PKTSTS
Ë>> 17Ë=
STS_DATA_UPDT
)

507 if((
ãmp
 & 
USB_OTG_GRXSTSP_BCNT
) != 0)

509 
	`USB_RódPackë
(
USBx
, 
ï
->
x„r_buff
, (
ãmp
 & 
USB_OTG_GRXSTSP_BCNT
) >> 4);

510 
ï
->
x„r_buff
 +(
ãmp
 & 
USB_OTG_GRXSTSP_BCNT
) >> 4;

511 
ï
->
x„r_cou¡
 +(
ãmp
 & 
USB_OTG_GRXSTSP_BCNT
) >> 4;

514 i‡(((
ãmp
 & 
USB_OTG_GRXSTSP_PKTSTS
Ë>> 17Ë=
STS_SETUP_UPDT
)

516 
	`USB_RódPackë
(
USBx
, (
uöt8_t
 *)
hpcd
->
Sëup
, 8);

517 
ï
->
x„r_cou¡
 +(
ãmp
 & 
USB_OTG_GRXSTSP_BCNT
) >> 4;

519 
	`USB_UNMASK_INTERRUPT
(
hpcd
->
In°™˚
, 
USB_OTG_GINTSTS_RXFLVL
);

523 if(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_SOF
))

525 
	`HAL_PCD_SOFCÆlback
(
hpcd
);

526 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_SOF
);

530 if(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_IISOIXFR
))

532 
	`HAL_PCD_ISOINIncom∂ëeCÆlback
(
hpcd
, 
ïnum
);

533 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_IISOIXFR
);

537 if(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_PXFR_INCOMPISOOUT
))

539 
	`HAL_PCD_ISOOUTIncom∂ëeCÆlback
(
hpcd
, 
ïnum
);

540 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_PXFR_INCOMPISOOUT
);

544 if(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_SRQINT
))

546 
	`HAL_PCD_C⁄√˘CÆlback
(
hpcd
);

547 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_SRQINT
);

551 if(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_OTGINT
))

553 
ãmp
 = 
hpcd
->
In°™˚
->
GOTGINT
;

555 if((
ãmp
 & 
USB_OTG_GOTGINT_SEDET
) == USB_OTG_GOTGINT_SEDET)

557 
	`HAL_PCD_Disc⁄√˘CÆlback
(
hpcd
);

559 
hpcd
->
In°™˚
->
GOTGINT
 |
ãmp
;

562 
	}
}

565 #i‡
deföed
 (
USB
)

571 
	$HAL_PCD_IRQH™dÀr
(
PCD_H™dÀTy≥Def
 *
hpcd
)

573 
uöt32_t
 
wI¡îru±_Mask
 = 0;

575 i‡(
	`__HAL_PCD_GET_FLAG
 (
hpcd
, 
USB_ISTR_CTR
))

579 
	`PCD_EP_ISR_H™dÀr
(
hpcd
);

582 i‡(
	`__HAL_PCD_GET_FLAG
 (
hpcd
, 
USB_ISTR_RESET
))

584 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_ISTR_RESET
);

585 
	`HAL_PCD_Re£tCÆlback
(
hpcd
);

586 
	`HAL_PCD_SëAddªss
(
hpcd
, 0);

589 i‡(
	`__HAL_PCD_GET_FLAG
 (
hpcd
, 
USB_ISTR_PMAOVR
))

591 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_ISTR_PMAOVR
);

593 i‡(
	`__HAL_PCD_GET_FLAG
 (
hpcd
, 
USB_ISTR_ERR
))

595 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_ISTR_ERR
);

598 i‡(
	`__HAL_PCD_GET_FLAG
 (
hpcd
, 
USB_ISTR_WKUP
))

600 
hpcd
->
In°™˚
->
CNTR
 &~(
USB_CNTR_LP_MODE
);

603 
wI¡îru±_Mask
 = 
USB_CNTR_CTRM
 | 
USB_CNTR_WKUPM
 | 
USB_CNTR_SUSPM
 | 
USB_CNTR_ERRM
 \

604 | 
USB_CNTR_ESOFM
 | 
USB_CNTR_RESETM
;

607 
hpcd
->
In°™˚
->
CNTR
 = 
wI¡îru±_Mask
;

609 
	`HAL_PCD_ResumeCÆlback
(
hpcd
);

611 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_ISTR_WKUP
);

614 i‡(
	`__HAL_PCD_GET_FLAG
 (
hpcd
, 
USB_ISTR_SUSP
))

617 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_ISTR_SUSP
);

620 
hpcd
->
In°™˚
->
CNTR
 |
USB_CNTR_FSUSP
;

621 
hpcd
->
In°™˚
->
CNTR
 |
USB_CNTR_LP_MODE
;

622 i‡(
	`__HAL_PCD_GET_FLAG
 (
hpcd
, 
USB_ISTR_WKUP
) == 0)

624 
	`HAL_PCD_Su•ídCÆlback
(
hpcd
);

628 i‡(
	`__HAL_PCD_GET_FLAG
 (
hpcd
, 
USB_ISTR_SOF
))

630 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_ISTR_SOF
);

631 
	`HAL_PCD_SOFCÆlback
(
hpcd
);

634 i‡(
	`__HAL_PCD_GET_FLAG
 (
hpcd
, 
USB_ISTR_ESOF
))

637 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_ISTR_ESOF
);

639 
	}
}

648 
__wók
 
	$HAL_PCD_D©aOutSègeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
)

651 
	`UNUSED
(
hpcd
);

652 
	`UNUSED
(
ïnum
);

656 
	}
}

664 
__wók
 
	$HAL_PCD_D©aInSègeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
)

667 
	`UNUSED
(
hpcd
);

668 
	`UNUSED
(
ïnum
);

672 
	}
}

678 
__wók
 
	$HAL_PCD_SëupSègeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

681 
	`UNUSED
(
hpcd
);

685 
	}
}

692 
__wók
 
	$HAL_PCD_SOFCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

695 
	`UNUSED
(
hpcd
);

699 
	}
}

706 
__wók
 
	$HAL_PCD_Re£tCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

709 
	`UNUSED
(
hpcd
);

713 
	}
}

720 
__wók
 
	$HAL_PCD_Su•ídCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

723 
	`UNUSED
(
hpcd
);

727 
	}
}

734 
__wók
 
	$HAL_PCD_ResumeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

737 
	`UNUSED
(
hpcd
);

741 
	}
}

749 
__wók
 
	$HAL_PCD_ISOOUTIncom∂ëeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
)

752 
	`UNUSED
(
hpcd
);

753 
	`UNUSED
(
ïnum
);

757 
	}
}

765 
__wók
 
	$HAL_PCD_ISOINIncom∂ëeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
)

768 
	`UNUSED
(
hpcd
);

769 
	`UNUSED
(
ïnum
);

773 
	}
}

780 
__wók
 
	$HAL_PCD_C⁄√˘CÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

783 
	`UNUSED
(
hpcd
);

787 
	}
}

794 
__wók
 
	$HAL_PCD_Disc⁄√˘CÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

797 
	`UNUSED
(
hpcd
);

801 
	}
}

827 
HAL_SètusTy≥Def
 
	$HAL_PCD_DevC⁄√˘
(
PCD_H™dÀTy≥Def
 *
hpcd
)

829 
	`__HAL_LOCK
(
hpcd
);

830 
	`HAL_PCDEx_SëC⁄√˘i⁄Sèã
 (
hpcd
, 1);

831 
	`USB_DevC⁄√˘
(
hpcd
->
In°™˚
);

832 
	`__HAL_UNLOCK
(
hpcd
);

833  
HAL_OK
;

834 
	}
}

841 
HAL_SètusTy≥Def
 
	$HAL_PCD_DevDisc⁄√˘
(
PCD_H™dÀTy≥Def
 *
hpcd
)

843 
	`__HAL_LOCK
(
hpcd
);

844 
	`HAL_PCDEx_SëC⁄√˘i⁄Sèã
 (
hpcd
, 0);

845 
	`USB_DevDisc⁄√˘
(
hpcd
->
In°™˚
);

846 
	`__HAL_UNLOCK
(
hpcd
);

847  
HAL_OK
;

848 
	}
}

856 
HAL_SètusTy≥Def
 
	$HAL_PCD_SëAddªss
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
addªss
)

858 
	`__HAL_LOCK
(
hpcd
);

859 
hpcd
->
USB_Addªss
 = 
addªss
;

860 
	`USB_SëDevAddªss
(
hpcd
->
In°™˚
, 
addªss
);

861 
	`__HAL_UNLOCK
(
hpcd
);

862  
HAL_OK
;

863 
	}
}

872 
HAL_SètusTy≥Def
 
	$HAL_PCD_EP_O≥n
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
, 
uöt16_t
 
ï_mps
, uöt8_à
ï_ty≥
)

874 
HAL_SètusTy≥Def
 
ªt
 = 
HAL_OK
;

875 
PCD_EPTy≥Def
 *
ï
 = 
NULL
;

877 i‡((
ï_addr
 & 0x80) == 0x80)

879 
ï
 = &
hpcd
->
IN_ï
[
ï_addr
 & 0x7F];

883 
ï
 = &
hpcd
->
OUT_ï
[
ï_addr
 & 0x7F];

885 
ï
->
num
 = 
ï_addr
 & 0x7F;

887 
ï
->
is_ö
 = (0x80 & 
ï_addr
) != 0;

888 
ï
->
max∑ckë
 = 
ï_mps
;

889 
ï
->
ty≥
 = 
ï_ty≥
;

891 
	`__HAL_LOCK
(
hpcd
);

892 
	`USB_A˘iv©eEndpoöt
(
hpcd
->
In°™˚
 , 
ï
);

893 
	`__HAL_UNLOCK
(
hpcd
);

894  
ªt
;

895 
	}
}

903 
HAL_SètusTy≥Def
 
	$HAL_PCD_EP_Clo£
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
)

905 
PCD_EPTy≥Def
 *
ï
 = 
NULL
;

907 i‡((
ï_addr
 & 0x80) == 0x80)

909 
ï
 = &
hpcd
->
IN_ï
[
ï_addr
 & 0x7F];

913 
ï
 = &
hpcd
->
OUT_ï
[
ï_addr
 & 0x7F];

915 
ï
->
num
 = 
ï_addr
 & 0x7F;

917 
ï
->
is_ö
 = (0x80 & 
ï_addr
) != 0;

919 
	`__HAL_LOCK
(
hpcd
);

920 
	`USB_Dó˘iv©eEndpoöt
(
hpcd
->
In°™˚
 , 
ï
);

921 
	`__HAL_UNLOCK
(
hpcd
);

922  
HAL_OK
;

923 
	}
}

934 
HAL_SètusTy≥Def
 
	$HAL_PCD_EP_Re˚ive
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
, uöt8_à*
pBuf
, 
uöt32_t
 
Àn
)

936 
PCD_EPTy≥Def
 *
ï
 = 
NULL
;

938 
ï
 = &
hpcd
->
OUT_ï
[
ï_addr
 & 0x7F];

941 
ï
->
x„r_buff
 = 
pBuf
;

942 
ï
->
x„r_Àn
 = 
Àn
;

943 
ï
->
x„r_cou¡
 = 0;

944 
ï
->
is_ö
 = 0;

945 
ï
->
num
 = 
ï_addr
 & 0x7F;

947 
	`__HAL_LOCK
(
hpcd
);

949 i‡((
ï_addr
 & 0x7F) == 0 )

951 
	`USB_EP0SèπX„r
(
hpcd
->
In°™˚
 , 
ï
);

955 
	`USB_EPSèπX„r
(
hpcd
->
In°™˚
 , 
ï
);

957 
	`__HAL_UNLOCK
(
hpcd
);

959  
HAL_OK
;

960 
	}
}

968 
uöt16_t
 
	$HAL_PCD_EP_GëRxCou¡
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
)

970  
hpcd
->
OUT_ï
[
ï_addr
 & 0x7F].
x„r_cou¡
;

971 
	}
}

980 
HAL_SètusTy≥Def
 
	$HAL_PCD_EP_Tønsmô
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
, uöt8_à*
pBuf
, 
uöt32_t
 
Àn
)

982 
PCD_EPTy≥Def
 *
ï
 = 
NULL
;

984 
ï
 = &
hpcd
->
IN_ï
[
ï_addr
 & 0x7F];

987 
ï
->
x„r_buff
 = 
pBuf
;

988 
ï
->
x„r_Àn
 = 
Àn
;

989 
ï
->
x„r_cou¡
 = 0;

990 
ï
->
is_ö
 = 1;

991 
ï
->
num
 = 
ï_addr
 & 0x7F;

993 
	`__HAL_LOCK
(
hpcd
);

995 i‡((
ï_addr
 & 0x7F) == 0 )

997 
	`USB_EP0SèπX„r
(
hpcd
->
In°™˚
 , 
ï
);

1001 
	`USB_EPSèπX„r
(
hpcd
->
In°™˚
 , 
ï
);

1004 
	`__HAL_UNLOCK
(
hpcd
);

1006  
HAL_OK
;

1007 
	}
}

1015 
HAL_SètusTy≥Def
 
	$HAL_PCD_EP_SëSèŒ
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
)

1017 
PCD_EPTy≥Def
 *
ï
 = 
NULL
;

1019 i‡((0x80 & 
ï_addr
) == 0x80)

1021 
ï
 = &
hpcd
->
IN_ï
[
ï_addr
 & 0x7F];

1025 
ï
 = &
hpcd
->
OUT_ï
[
ï_addr
];

1028 
ï
->
is_°Æl
 = 1;

1029 
ï
->
num
 = 
ï_addr
 & 0x7F;

1030 
ï
->
is_ö
 = ((
ï_addr
 & 0x80) == 0x80);

1032 
	`__HAL_LOCK
(
hpcd
);

1033 
	`USB_EPSëSèŒ
(
hpcd
->
In°™˚
 , 
ï
);

1034 if((
ï_addr
 & 0x7F) == 0)

1036 
	`USB_EP0_OutSèπ
(
hpcd
->
In°™˚
, (
uöt8_t
 *)hpcd->
Sëup
);

1038 
	`__HAL_UNLOCK
(
hpcd
);

1040  
HAL_OK
;

1041 
	}
}

1049 
HAL_SètusTy≥Def
 
	$HAL_PCD_EP_CÃSèŒ
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
)

1051 
PCD_EPTy≥Def
 *
ï
 = 
NULL
;

1053 i‡((0x80 & 
ï_addr
) == 0x80)

1055 
ï
 = &
hpcd
->
IN_ï
[
ï_addr
 & 0x7F];

1059 
ï
 = &
hpcd
->
OUT_ï
[
ï_addr
];

1062 
ï
->
is_°Æl
 = 0;

1063 
ï
->
num
 = 
ï_addr
 & 0x7F;

1064 
ï
->
is_ö
 = ((
ï_addr
 & 0x80) == 0x80);

1066 
	`__HAL_LOCK
(
hpcd
);

1067 
	`USB_EPCÀ¨SèŒ
(
hpcd
->
In°™˚
 , 
ï
);

1068 
	`__HAL_UNLOCK
(
hpcd
);

1070  
HAL_OK
;

1071 
	}
}

1079 
HAL_SètusTy≥Def
 
	$HAL_PCD_EP_Flush
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
)

1081 
	`__HAL_LOCK
(
hpcd
);

1083 i‡((
ï_addr
 & 0x80) == 0x80)

1085 
	`USB_FlushTxFifo
(
hpcd
->
In°™˚
, 
ï_addr
 & 0x7F);

1089 
	`USB_FlushRxFifo
(
hpcd
->
In°™˚
);

1092 
	`__HAL_UNLOCK
(
hpcd
);

1094  
HAL_OK
;

1095 
	}
}

1102 
HAL_SètusTy≥Def
 
	$HAL_PCD_A˘iv©eRemŸeWakeup
(
PCD_H™dÀTy≥Def
 *
hpcd
)

1104 (
	`USB_A˘iv©eRemŸeWakeup
(
hpcd
->
In°™˚
));

1105 
	}
}

1112 
HAL_SètusTy≥Def
 
	$HAL_PCD_DeA˘iv©eRemŸeWakeup
(
PCD_H™dÀTy≥Def
 *
hpcd
)

1114 (
	`USB_DeA˘iv©eRemŸeWakeup
(
hpcd
->
In°™˚
));

1115 
	}
}

1140 
PCD_SèãTy≥Def
 
	$HAL_PCD_GëSèã
(
PCD_H™dÀTy≥Def
 *
hpcd
)

1142  
hpcd
->
Sèã
;

1143 
	}
}

1156 #i‡
deföed
 (
USB_OTG_FS
)

1165 
HAL_SètusTy≥Def
 
	$PCD_WrôeEm±yTxFifo
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt32_t
 
ïnum
)

1167 
USB_OTG_GlobÆTy≥Def
 *
USBx
 = 
hpcd
->
In°™˚
;

1168 
USB_OTG_EPTy≥Def
 *
ï
 = 
NULL
;

1169 
öt32_t
 
Àn
 = 0;

1170 
uöt32_t
 
Àn32b
 = 0;

1171 
uöt32_t
 
fif€m±ymsk
 = 0;

1173 
ï
 = &
hpcd
->
IN_ï
[
ïnum
];

1174 
Àn
 = 
ï
->
x„r_Àn
 -Ép->
x„r_cou¡
;

1176 i‡(
Àn
 > 
ï
->
max∑ckë
)

1178 
Àn
 = 
ï
->
max∑ckë
;

1181 
Àn32b
 = (
Àn
 + 3) / 4;

1183 (
	`USBx_INEP
(
ïnum
)->
DTXFSTS
 & 
USB_OTG_DTXFSTS_INEPTFSAV
Ë> 
Àn32b
 &&

1184 
ï
->
x„r_cou¡
 <Ép->
x„r_Àn
 &&

1185 
ï
->
x„r_Àn
 != 0)

1188 
Àn
 = 
ï
->
x„r_Àn
 -Ép->
x„r_cou¡
;

1190 i‡(
Àn
 > 
ï
->
max∑ckë
)

1192 
Àn
 = 
ï
->
max∑ckë
;

1194 
Àn32b
 = (
Àn
 + 3) / 4;

1196 
	`USB_WrôePackë
(
USBx
, 
ï
->
x„r_buff
, 
ïnum
, 
Àn
);

1198 
ï
->
x„r_buff
 +
Àn
;

1199 
ï
->
x„r_cou¡
 +
Àn
;

1202 if(
Àn
 <= 0)

1204 
fif€m±ymsk
 = 0x1 << 
ïnum
;

1205 
USBx_DEVICE
->
DIEPEMPMSK
 &~
fif€m±ymsk
;

1209  
HAL_OK
;

1210 
	}
}

1213 #i‡
deföed
 (
USB
)

1219 
HAL_SètusTy≥Def
 
	$PCD_EP_ISR_H™dÀr
(
PCD_H™dÀTy≥Def
 *
hpcd
)

1221 
PCD_EPTy≥Def
 *
ï
 = 
NULL
;

1222 
uöt16_t
 
cou¡
 = 0;

1223 
uöt8_t
 
ïödex
 = 0;

1224 
__IO
 
uöt16_t
 
wI°r
 = 0;

1225 
__IO
 
uöt16_t
 
wEPVÆ
 = 0;

1228 ((
wI°r
 = 
hpcd
->
In°™˚
->
ISTR
Ë& 
USB_ISTR_CTR
) != 0)

1231 
ïödex
 = (
uöt8_t
)(
wI°r
 & 
USB_ISTR_EP_ID
);

1233 i‡(
ïödex
 == 0)

1238 i‡((
wI°r
 & 
USB_ISTR_DIR
) == 0)

1244 
	`PCD_CLEAR_TX_EP_CTR
(
hpcd
->
In°™˚
, 
PCD_ENDP0
);

1245 
ï
 = &
hpcd
->
IN_ï
[0];

1247 
ï
->
x„r_cou¡
 = 
	`PCD_GET_EP_TX_CNT
(
hpcd
->
In°™˚
,Ép->
num
);

1248 
ï
->
x„r_buff
 +ï->
x„r_cou¡
;

1251 
	`HAL_PCD_D©aInSègeCÆlback
(
hpcd
, 0);

1254 if((
hpcd
->
USB_Addªss
 > 0)&& ( 
ï
->
x„r_Àn
 == 0))

1256 
hpcd
->
In°™˚
->
DADDR
 = (hpcd->
USB_Addªss
 | 
USB_DADDR_EF
);

1257 
hpcd
->
USB_Addªss
 = 0;

1267 
ï
 = &
hpcd
->
OUT_ï
[0];

1268 
wEPVÆ
 = 
	`PCD_GET_ENDPOINT
(
hpcd
->
In°™˚
, 
PCD_ENDP0
);

1270 i‡((
wEPVÆ
 & 
USB_EP_SETUP
) != 0)

1273 
ï
->
x„r_cou¡
 = 
	`PCD_GET_EP_RX_CNT
(
hpcd
->
In°™˚
,Ép->
num
);

1274 
	`USB_RódPMA
(
hpcd
->
In°™˚
, (
uöt8_t
*)hpcd->
Sëup
 ,
ï
->
pmØdªss
 ,Ép->
x„r_cou¡
);

1276 
	`PCD_CLEAR_RX_EP_CTR
(
hpcd
->
In°™˚
, 
PCD_ENDP0
);

1279 
	`HAL_PCD_SëupSègeCÆlback
(
hpcd
);

1282 i‡((
wEPVÆ
 & 
USB_EP_CTR_RX
) != 0)

1284 
	`PCD_CLEAR_RX_EP_CTR
(
hpcd
->
In°™˚
, 
PCD_ENDP0
);

1286 
ï
->
x„r_cou¡
 = 
	`PCD_GET_EP_RX_CNT
(
hpcd
->
In°™˚
,Ép->
num
);

1288 i‡(
ï
->
x„r_cou¡
 != 0)

1290 
	`USB_RódPMA
(
hpcd
->
In°™˚
, 
ï
->
x„r_buff
,Ép->
pmØdªss
,Ép->
x„r_cou¡
);

1291 
ï
->
x„r_buff
+Ûp->
x„r_cou¡
;

1295 
	`HAL_PCD_D©aOutSègeCÆlback
(
hpcd
, 0);

1297 
	`PCD_SET_EP_RX_CNT
(
hpcd
->
In°™˚
, 
PCD_ENDP0
, 
ï
->
max∑ckë
);

1298 
	`PCD_SET_EP_RX_STATUS
(
hpcd
->
In°™˚
, 
PCD_ENDP0
, 
USB_EP_RX_VALID
);

1307 
wEPVÆ
 = 
	`PCD_GET_ENDPOINT
(
hpcd
->
In°™˚
, 
ïödex
);

1308 i‡((
wEPVÆ
 & 
USB_EP_CTR_RX
) != 0)

1311 
	`PCD_CLEAR_RX_EP_CTR
(
hpcd
->
In°™˚
, 
ïödex
);

1312 
ï
 = &
hpcd
->
OUT_ï
[
ïödex
];

1315 i‡(
ï
->
doubÀbuf„r
 == 0)

1317 
cou¡
 = 
	`PCD_GET_EP_RX_CNT
(
hpcd
->
In°™˚
, 
ï
->
num
);

1318 i‡(
cou¡
 != 0)

1320 
	`USB_RódPMA
(
hpcd
->
In°™˚
, 
ï
->
x„r_buff
,Ép->
pmØdªss
, 
cou¡
);

1325 i‡(
	`PCD_GET_ENDPOINT
(
hpcd
->
In°™˚
, 
ï
->
num
Ë& 
USB_EP_DTOG_RX
)

1328 
cou¡
 = 
	`PCD_GET_EP_DBUF0_CNT
(
hpcd
->
In°™˚
, 
ï
->
num
);

1329 i‡(
cou¡
 != 0)

1331 
	`USB_RódPMA
(
hpcd
->
In°™˚
, 
ï
->
x„r_buff
,Ép->
pmØddr0
, 
cou¡
);

1337 
cou¡
 = 
	`PCD_GET_EP_DBUF1_CNT
(
hpcd
->
In°™˚
, 
ï
->
num
);

1338 i‡(
cou¡
 != 0)

1340 
	`USB_RódPMA
(
hpcd
->
In°™˚
, 
ï
->
x„r_buff
,Ép->
pmØddr1
, 
cou¡
);

1343 
	`PCD_FªeU£rBuf„r
(
hpcd
->
In°™˚
, 
ï
->
num
, 
PCD_EP_DBUF_OUT
);

1346 
ï
->
x„r_cou¡
+=
cou¡
;

1347 
ï
->
x„r_buff
+=
cou¡
;

1349 i‡((
ï
->
x„r_Àn
 =0Ë|| (
cou¡
 <Ép->
max∑ckë
))

1352 
	`HAL_PCD_D©aOutSègeCÆlback
(
hpcd
, 
ï
->
num
);

1356 
	`HAL_PCD_EP_Re˚ive
(
hpcd
, 
ï
->
num
,Ép->
x„r_buff
,Ép->
x„r_Àn
);

1361 i‡((
wEPVÆ
 & 
USB_EP_CTR_TX
) != 0)

1363 
ï
 = &
hpcd
->
IN_ï
[
ïödex
];

1366 
	`PCD_CLEAR_TX_EP_CTR
(
hpcd
->
In°™˚
, 
ïödex
);

1369 i‡(
ï
->
doubÀbuf„r
 == 0)

1371 
ï
->
x„r_cou¡
 = 
	`PCD_GET_EP_TX_CNT
(
hpcd
->
In°™˚
,Ép->
num
);

1372 i‡(
ï
->
x„r_cou¡
 != 0)

1374 
	`USB_WrôePMA
(
hpcd
->
In°™˚
, 
ï
->
x„r_buff
,Ép->
pmØdªss
,Ép->
x„r_cou¡
);

1379 i‡(
	`PCD_GET_ENDPOINT
(
hpcd
->
In°™˚
, 
ï
->
num
Ë& 
USB_EP_DTOG_TX
)

1382 
ï
->
x„r_cou¡
 = 
	`PCD_GET_EP_DBUF0_CNT
(
hpcd
->
In°™˚
,Ép->
num
);

1383 i‡(
ï
->
x„r_cou¡
 != 0)

1385 
	`USB_WrôePMA
(
hpcd
->
In°™˚
, 
ï
->
x„r_buff
,Ép->
pmØddr0
,Ép->
x„r_cou¡
);

1391 
ï
->
x„r_cou¡
 = 
	`PCD_GET_EP_DBUF1_CNT
(
hpcd
->
In°™˚
,Ép->
num
);

1392 i‡(
ï
->
x„r_cou¡
 != 0)

1394 
	`USB_WrôePMA
(
hpcd
->
In°™˚
, 
ï
->
x„r_buff
,Ép->
pmØddr1
,Ép->
x„r_cou¡
);

1397 
	`PCD_FªeU£rBuf„r
(
hpcd
->
In°™˚
, 
ï
->
num
, 
PCD_EP_DBUF_IN
);

1400 
ï
->
x„r_cou¡
 = 
	`PCD_GET_EP_TX_CNT
(
hpcd
->
In°™˚
,Ép->
num
);

1401 
ï
->
x„r_buff
+Ûp->
x„r_cou¡
;

1404 i‡(
ï
->
x„r_Àn
 == 0)

1407 
	`HAL_PCD_D©aInSègeCÆlback
(
hpcd
, 
ï
->
num
);

1411 
	`HAL_PCD_EP_Tønsmô
(
hpcd
, 
ï
->
num
,Ép->
x„r_buff
,Ép->
x„r_Àn
);

1416  
HAL_OK
;

1417 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Src\stm32f1xx_hal_pcd_ex.c

44 
	~"°m32f1xx_hÆ.h
"

50 #ifde‡
HAL_PCD_MODULE_ENABLED


52 #i‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
) || \

53 
deföed
(
STM32F103x6
Ë|| deföed(
STM32F103xB
) || \

54 
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
) || \

55 
deföed
(
STM32F105xC
Ë|| 
	$deföed
(
STM32F107xC
)

89 #i‡
	`deföed
 (
USB_OTG_FS
)

97 
HAL_SètusTy≥Def
 
	$HAL_PCDEx_SëTxFiFo
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
fifo
, 
uöt16_t
 
size
)

99 
uöt8_t
 
ödex
 = 0;

100 
uöt32_t
 
Tx_Off£t
 = 0;

112 
Tx_Off£t
 = 
hpcd
->
In°™˚
->
GRXFSIZ
;

114 if(
fifo
 == 0)

116 
hpcd
->
In°™˚
->
DIEPTXF0_HNPTXFSIZ
 = (
size
 << 16Ë| 
Tx_Off£t
;

120 
Tx_Off£t
 +(
hpcd
->
In°™˚
->
DIEPTXF0_HNPTXFSIZ
) >> 16;

121 
ödex
 = 0; index < (
fifo
 - 1); index++)

123 
Tx_Off£t
 +(
hpcd
->
In°™˚
->
DIEPTXF
[
ödex
] >> 16);

127 
hpcd
->
In°™˚
->
DIEPTXF
[
fifo
 - 1] = (
size
 << 16Ë| 
Tx_Off£t
;

131  
HAL_OK
;

132 
	}
}

140 
HAL_SètusTy≥Def
 
	$HAL_PCDEx_SëRxFiFo
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt16_t
 
size
)

142 
hpcd
->
In°™˚
->
GRXFSIZ
 = 
size
;

143  
HAL_OK
;

144 
	}
}

147 #i‡
deföed
 (
USB
)

165 
HAL_SètusTy≥Def
 
	$HAL_PCDEx_PMAC⁄fig
(
PCD_H™dÀTy≥Def
 *
hpcd
,

166 
uöt16_t
 
ï_addr
,

167 
uöt16_t
 
ï_köd
,

168 
uöt32_t
 
pmØdªss
)

171 
PCD_EPTy≥Def
 *
ï
 = 
NULL
;

174 i‡((0x80 & 
ï_addr
) == 0x80)

176 
ï
 = &
hpcd
->
IN_ï
[
ï_addr
 & 0x7F];

180 
ï
 = &
hpcd
->
OUT_ï
[
ï_addr
];

184 i‡(
ï_köd
 =
PCD_SNG_BUF
)

187 
ï
->
doubÀbuf„r
 = 0;

189 
ï
->
pmØdªss
 = (
uöt16_t
)pmaadress;

194 
ï
->
doubÀbuf„r
 = 1;

196 
ï
->
pmØddr0
 = 
pmØdªss
 & 0xFFFF;

197 
ï
->
pmØddr1
 = (
pmØdªss
 & 0xFFFF0000) >> 16;

200  
HAL_OK
;

201 
	}
}

219 
__wók
 
	$HAL_PCDEx_SëC⁄√˘i⁄Sèã
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
°©e
)

222 
	`UNUSED
(
hpcd
);

223 
	`UNUSED
(
°©e
);

227 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Src\stm32f1xx_hal_pwr.c

45 
	~"°m32f1xx_hÆ.h
"

56 #ifde‡
HAL_PWR_MODULE_ENABLED


68 
	#PVD_MODE_IT
 ((
uöt32_t
)0x00010000)

	)

69 
	#PVD_MODE_EVT
 ((
uöt32_t
)0x00020000)

	)

70 
	#PVD_RISING_EDGE
 ((
uöt32_t
)0x00000001)

	)

71 
	#PVD_FALLING_EDGE
 ((
uöt32_t
)0x00000002)

	)

81 
	#PWR_OFFSET
 (
PWR_BASE
 - 
PERIPH_BASE
)

	)

82 
	#PWR_CR_OFFSET
 0x00

	)

83 
	#PWR_CSR_OFFSET
 0x04

	)

84 
	#PWR_CR_OFFSET_BB
 (
PWR_OFFSET
 + 
PWR_CR_OFFSET
)

	)

85 
	#PWR_CSR_OFFSET_BB
 (
PWR_OFFSET
 + 
PWR_CSR_OFFSET
)

	)

95 
	#LPSDSR_BIT_NUMBER
 
	`POSITION_VAL
(
PWR_CR_LPDS
)

	)

96 
	#CR_LPSDSR_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
PWR_CR_OFFSET_BB
 * 32Ë+ (
LPSDSR_BIT_NUMBER
 * 4)))

	)

99 
	#DBP_BIT_NUMBER
 
	`POSITION_VAL
(
PWR_CR_DBP
)

	)

100 
	#CR_DBP_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
PWR_CR_OFFSET_BB
 * 32Ë+ (
DBP_BIT_NUMBER
 * 4)))

	)

103 
	#PVDE_BIT_NUMBER
 
	`POSITION_VAL
(
PWR_CR_PVDE
)

	)

104 
	#CR_PVDE_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
PWR_CR_OFFSET_BB
 * 32Ë+ (
PVDE_BIT_NUMBER
 * 4)))

	)

116 
	#CSR_EWUP_BB
(
VAL
Ë((
uöt32_t
)(
PERIPH_BB_BASE
 + (
PWR_CSR_OFFSET_BB
 * 32Ë+ (
	`POSITION_VAL
(VALË* 4)))

	)

131 
PWR_OvîlﬂdW„
();

134 
__NOINLINE


135 
	$PWR_OvîlﬂdW„
()

137 
__asm
 volatile( "wfe" );

138 
__asm
 volatile( "nop" );

139 
	}
}

174 
	$HAL_PWR_DeInô
()

176 
	`__HAL_RCC_PWR_FORCE_RESET
();

177 
	`__HAL_RCC_PWR_RELEASE_RESET
();

178 
	}
}

187 
	$HAL_PWR_E«bÀBkUpAc˚ss
()

190 *(
__IO
 
uöt32_t
 *Ë
CR_DBP_BB
 = (uöt32_t)
ENABLE
;

191 
	}
}

200 
	$HAL_PWR_DißbÀBkUpAc˚ss
()

203 *(
__IO
 
uöt32_t
 *Ë
CR_DBP_BB
 = (uöt32_t)
DISABLE
;

204 
	}
}

334 
	$HAL_PWR_C⁄figPVD
(
PWR_PVDTy≥Def
 *
sC⁄figPVD
)

337 
	`as£π_∑øm
(
	`IS_PWR_PVD_LEVEL
(
sC⁄figPVD
->
PVDLevñ
));

338 
	`as£π_∑øm
(
	`IS_PWR_PVD_MODE
(
sC⁄figPVD
->
Mode
));

341 
	`MODIFY_REG
(
PWR
->
CR
, 
PWR_CR_PLS
, 
sC⁄figPVD
->
PVDLevñ
);

344 
	`__HAL_PWR_PVD_EXTI_DISABLE_EVENT
();

345 
	`__HAL_PWR_PVD_EXTI_DISABLE_IT
();

346 
	`__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE
();

347 
	`__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE
();

350 if((
sC⁄figPVD
->
Mode
 & 
PVD_MODE_IT
) == PVD_MODE_IT)

352 
	`__HAL_PWR_PVD_EXTI_ENABLE_IT
();

356 if((
sC⁄figPVD
->
Mode
 & 
PVD_MODE_EVT
) == PVD_MODE_EVT)

358 
	`__HAL_PWR_PVD_EXTI_ENABLE_EVENT
();

362 if((
sC⁄figPVD
->
Mode
 & 
PVD_RISING_EDGE
) == PVD_RISING_EDGE)

364 
	`__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE
();

367 if((
sC⁄figPVD
->
Mode
 & 
PVD_FALLING_EDGE
) == PVD_FALLING_EDGE)

369 
	`__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE
();

371 
	}
}

377 
	$HAL_PWR_E«bÀPVD
()

380 *(
__IO
 
uöt32_t
 *Ë
CR_PVDE_BB
 = (uöt32_t)
ENABLE
;

381 
	}
}

387 
	$HAL_PWR_DißbÀPVD
()

390 *(
__IO
 
uöt32_t
 *Ë
CR_PVDE_BB
 = (uöt32_t)
DISABLE
;

391 
	}
}

400 
	$HAL_PWR_E«bÀWakeUpPö
(
uöt32_t
 
WakeUpPöx
)

403 
	`as£π_∑øm
(
	`IS_PWR_WAKEUP_PIN
(
WakeUpPöx
));

405 *(
__IO
 
uöt32_t
 *Ë
	`CSR_EWUP_BB
(
WakeUpPöx
Ë(uöt32_t)
ENABLE
;

406 
	}
}

415 
	$HAL_PWR_DißbÀWakeUpPö
(
uöt32_t
 
WakeUpPöx
)

418 
	`as£π_∑øm
(
	`IS_PWR_WAKEUP_PIN
(
WakeUpPöx
));

420 *(
__IO
 
uöt32_t
 *Ë
	`CSR_EWUP_BB
(
WakeUpPöx
Ë(uöt32_t)
DISABLE
;

421 
	}
}

435 
	$HAL_PWR_E¡îSLEEPMode
(
uöt32_t
 
Reguœt‹
, 
uöt8_t
 
SLEEPE¡ry
)

439 
	`as£π_∑øm
(
	`IS_PWR_SLEEP_ENTRY
(
SLEEPE¡ry
));

442 
	`CLEAR_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPDEEP_Msk
));

445 if(
SLEEPE¡ry
 =
PWR_SLEEPENTRY_WFI
)

448 
	`__WFI
();

453 
	`__SEV
();

454 
	`__WFE
();

455 
	`__WFE
();

457 
	}
}

478 
	$HAL_PWR_E¡îSTOPMode
(
uöt32_t
 
Reguœt‹
, 
uöt8_t
 
STOPE¡ry
)

481 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR
(
Reguœt‹
));

482 
	`as£π_∑øm
(
	`IS_PWR_STOP_ENTRY
(
STOPE¡ry
));

485 
	`CLEAR_BIT
(
PWR
->
CR
, 
PWR_CR_PDDS
);

488 
	`MODIFY_REG
(
PWR
->
CR
, 
PWR_CR_LPDS
, 
Reguœt‹
);

491 
	`SET_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPDEEP_Msk
));

494 if(
STOPE¡ry
 =
PWR_STOPENTRY_WFI
)

497 
	`__WFI
();

502 
	`__SEV
();

503 
	`PWR_OvîlﬂdW„
();

504 
	`PWR_OvîlﬂdW„
();

507 
	`CLEAR_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPDEEP_Msk
));

508 
	}
}

518 
	$HAL_PWR_E¡îSTANDBYMode
()

521 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_PDDS
);

524 
	`SET_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPDEEP_Msk
));

527 #i‡
	`deföed
 ( 
__CC_ARM
)

528 
	`__f‹˚_°‹es
();

531 
	`__WFI
();

532 
	}
}

543 
	$HAL_PWR_E«bÀSÀïOnExô
()

546 
	`SET_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPONEXIT_Msk
));

547 
	}
}

556 
	$HAL_PWR_DißbÀSÀïOnExô
()

559 
	`CLEAR_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPONEXIT_Msk
));

560 
	}
}

569 
	$HAL_PWR_E«bÀSEVOnPíd
()

572 
	`SET_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SEVONPEND_Msk
));

573 
	}
}

582 
	$HAL_PWR_DißbÀSEVOnPíd
()

585 
	`CLEAR_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SEVONPEND_Msk
));

586 
	}
}

595 
	$HAL_PWR_PVD_IRQH™dÀr
()

598 if(
	`__HAL_PWR_PVD_EXTI_GET_FLAG
(Ë!
RESET
)

601 
	`HAL_PWR_PVDCÆlback
();

604 
	`__HAL_PWR_PVD_EXTI_CLEAR_FLAG
();

606 
	}
}

612 
__wók
 
	$HAL_PWR_PVDCÆlback
()

617 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Src\stm32f1xx_hal_rcc.c

81 
	~"°m32f1xx_hÆ.h
"

92 #ifde‡
HAL_RCC_MODULE_ENABLED


107 
	#MCO1_CLK_ENABLE
(Ë
	`__HAL_RCC_GPIOA_CLK_ENABLE
()

	)

108 
	#MCO1_GPIO_PORT
 
GPIOA


	)

109 
	#MCO1_PIN
 
GPIO_PIN_8


	)

119 c⁄° 
uöt8_t
 
	gaAPBAHBPªscTabÀ
[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};

214 
	$HAL_RCC_DeInô
()

217 
	`CLEAR_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_SW
);

220 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEON
 | 
RCC_CR_CSSON
 | 
RCC_CR_PLLON
);

223 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEBYP
);

226 
	`CLEAR_REG
(
RCC
->
CFGR
);

229 
	`MODIFY_REG
(
RCC
->
CR
, 
RCC_CR_HSITRIM
, ((
uöt32_t
)0x10 << 
	`POSITION_VAL
(RCC_CR_HSITRIM)));

231 #i‡(
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
Ë|| deföed (
STM32F100xB
Ë|| deföed (
STM32F100xE
))

233 
	`CLEAR_REG
(
RCC
->
CFGR2
);

237 
	`CLEAR_REG
(
RCC
->
CIR
);

238 
	}
}

249 
HAL_SètusTy≥Def
 
	$HAL_RCC_OscC⁄fig
(
RCC_OscInôTy≥Def
 *
RCC_OscInôSåu˘
)

251 
uöt32_t
 
tick°¨t
 = 0;

254 
	`as£π_∑øm
(
RCC_OscInôSåu˘
 !
NULL
);

255 
	`as£π_∑øm
(
	`IS_RCC_OSCILLATORTYPE
(
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
));

258 if(((
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
Ë& 
RCC_OSCILLATORTYPE_HSE
) == RCC_OSCILLATORTYPE_HSE)

261 
	`as£π_∑øm
(
	`IS_RCC_HSE
(
RCC_OscInôSåu˘
->
HSESèã
));

264 if((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_SYSCLKSOURCE_STATUS_HSE
)

265 || ((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_SYSCLKSOURCE_STATUS_PLLCLK
Ë&& (
	`__HAL_RCC_GET_PLL_OSCSOURCE
(Ë=
RCC_PLLSOURCE_HSE
)))

267 if((
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë!
RESET
Ë&& (
RCC_OscInôSåu˘
->
HSESèã
 =
RCC_HSE_OFF
))

269  
HAL_ERROR
;

275 
	`__HAL_RCC_HSE_CONFIG
(
RCC_HSE_OFF
);

278 
tick°¨t
 = 
	`HAL_GëTick
();

281 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë!
RESET
)

283 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
HSE_TIMEOUT_VALUE
)

285  
HAL_TIMEOUT
;

290 
	`__HAL_RCC_HSE_CONFIG
(
RCC_OscInôSåu˘
->
HSESèã
);

294 if(
RCC_OscInôSåu˘
->
HSESèã
 !
RCC_HSE_OFF
)

297 
tick°¨t
 = 
	`HAL_GëTick
();

300 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë=
RESET
)

302 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
HSE_TIMEOUT_VALUE
)

304  
HAL_TIMEOUT
;

311 
tick°¨t
 = 
	`HAL_GëTick
();

314 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë!
RESET
)

316 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
HSE_TIMEOUT_VALUE
)

318  
HAL_TIMEOUT
;

325 if(((
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
Ë& 
RCC_OSCILLATORTYPE_HSI
) == RCC_OSCILLATORTYPE_HSI)

328 
	`as£π_∑øm
(
	`IS_RCC_HSI
(
RCC_OscInôSåu˘
->
HSISèã
));

329 
	`as£π_∑øm
(
	`IS_RCC_CALIBRATION_VALUE
(
RCC_OscInôSåu˘
->
HSICÆibøti⁄VÆue
));

332 if((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_SYSCLKSOURCE_STATUS_HSI
)

333 || ((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_SYSCLKSOURCE_STATUS_PLLCLK
Ë&& (
	`__HAL_RCC_GET_PLL_OSCSOURCE
(Ë=
RCC_PLLSOURCE_HSI_DIV2
)))

336 if((
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
Ë!
RESET
Ë&& (
RCC_OscInôSåu˘
->
HSISèã
 !
RCC_HSI_ON
))

338  
HAL_ERROR
;

344 
	`__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST
(
RCC_OscInôSåu˘
->
HSICÆibøti⁄VÆue
);

350 if(
RCC_OscInôSåu˘
->
HSISèã
 !
RCC_HSI_OFF
)

353 
	`__HAL_RCC_HSI_ENABLE
();

356 
tick°¨t
 = 
	`HAL_GëTick
();

359 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
Ë=
RESET
)

361 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
HSI_TIMEOUT_VALUE
)

363  
HAL_TIMEOUT
;

368 
	`__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST
(
RCC_OscInôSåu˘
->
HSICÆibøti⁄VÆue
);

373 
	`__HAL_RCC_HSI_DISABLE
();

376 
tick°¨t
 = 
	`HAL_GëTick
();

379 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
Ë!
RESET
)

381 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
HSI_TIMEOUT_VALUE
)

383  
HAL_TIMEOUT
;

390 if(((
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
Ë& 
RCC_OSCILLATORTYPE_LSI
) == RCC_OSCILLATORTYPE_LSI)

393 
	`as£π_∑øm
(
	`IS_RCC_LSI
(
RCC_OscInôSåu˘
->
LSISèã
));

396 if(
RCC_OscInôSåu˘
->
LSISèã
 !
RCC_LSI_OFF
)

399 
	`__HAL_RCC_LSI_ENABLE
();

402 
tick°¨t
 = 
	`HAL_GëTick
();

405 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSIRDY
Ë=
RESET
)

407 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
LSI_TIMEOUT_VALUE
)

409  
HAL_TIMEOUT
;

414 
	`HAL_Dñay
(1);

419 
	`__HAL_RCC_LSI_DISABLE
();

422 
tick°¨t
 = 
	`HAL_GëTick
();

425 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSIRDY
Ë!
RESET
)

427 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
LSI_TIMEOUT_VALUE
)

429  
HAL_TIMEOUT
;

435 if(((
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
Ë& 
RCC_OSCILLATORTYPE_LSE
) == RCC_OSCILLATORTYPE_LSE)

438 
	`as£π_∑øm
(
	`IS_RCC_LSE
(
RCC_OscInôSåu˘
->
LSESèã
));

441 
	`__HAL_RCC_PWR_CLK_ENABLE
();

444 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_DBP
);

447 
tick°¨t
 = 
	`HAL_GëTick
();

449 (
PWR
->
CR
 & 
PWR_CR_DBP
Ë=
RESET
)

451 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RCC_DBP_TIMEOUT_VALUE
)

453  
HAL_TIMEOUT
;

458 
	`__HAL_RCC_LSE_CONFIG
(
RCC_LSE_OFF
);

461 
tick°¨t
 = 
	`HAL_GëTick
();

464 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSERDY
Ë!
RESET
)

466 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RCC_LSE_TIMEOUT_VALUE
)

468  
HAL_TIMEOUT
;

473 
	`__HAL_RCC_LSE_CONFIG
(
RCC_OscInôSåu˘
->
LSESèã
);

475 if(
RCC_OscInôSåu˘
->
LSESèã
 !
RCC_LSE_OFF
)

478 
tick°¨t
 = 
	`HAL_GëTick
();

481 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSERDY
Ë=
RESET
)

483 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RCC_LSE_TIMEOUT_VALUE
)

485  
HAL_TIMEOUT
;

492 
tick°¨t
 = 
	`HAL_GëTick
();

495 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSERDY
Ë!
RESET
)

497 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RCC_LSE_TIMEOUT_VALUE
)

499  
HAL_TIMEOUT
;

505 #i‡
	`deföed
(
RCC_CR_PLL2ON
)

508 
	`as£π_∑øm
(
	`IS_RCC_PLL2
(
RCC_OscInôSåu˘
->
PLL2
.
PLL2Sèã
));

509 i‡((
RCC_OscInôSåu˘
->
PLL2
.
PLL2Sèã
Ë!
RCC_PLL2_NONE
)

513 if((
	`__HAL_RCC_GET_PLL_OSCSOURCE
(Ë=
RCC_PLLSOURCE_HSE
) && \

514 (
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_SYSCLKSOURCE_STATUS_PLLCLK
) && \

515 ((
	`READ_BIT
(
RCC
->
CFGR2
,
RCC_CFGR2_PREDIV1SRC
)Ë=
RCC_CFGR2_PREDIV1SRC_PLL2
))

517  
HAL_ERROR
;

521 if((
RCC_OscInôSåu˘
->
PLL2
.
PLL2Sèã
Ë=
RCC_PLL2_ON
)

524 
	`as£π_∑øm
(
	`IS_RCC_PLL2_MUL
(
RCC_OscInôSåu˘
->
PLL2
.
PLL2MUL
));

525 
	`as£π_∑øm
(
	`IS_RCC_HSE_PREDIV2
(
RCC_OscInôSåu˘
->
PLL2
.
HSEPªdiv2VÆue
));

529 i‡(
	`HAL_IS_BIT_SET
(
RCC
->
CR
,
RCC_CR_PLL3ON
) && \

530 (
	`__HAL_RCC_HSE_GET_PREDIV2
(Ë!
RCC_OscInôSåu˘
->
PLL2
.
HSEPªdiv2VÆue
))

532  
HAL_ERROR
;

536 
	`__HAL_RCC_PLL2_DISABLE
();

539 
tick°¨t
 = 
	`HAL_GëTick
();

542 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLL2RDY
Ë!
RESET
)

544 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLL2_TIMEOUT_VALUE
)

546  
HAL_TIMEOUT
;

551 
	`__HAL_RCC_HSE_PREDIV2_CONFIG
(
RCC_OscInôSåu˘
->
PLL2
.
HSEPªdiv2VÆue
);

554 
	`__HAL_RCC_PLL2_CONFIG
(
RCC_OscInôSåu˘
->
PLL2
.
PLL2MUL
);

557 
	`__HAL_RCC_PLL2_ENABLE
();

560 
tick°¨t
 = 
	`HAL_GëTick
();

563 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLL2RDY
Ë=
RESET
)

565 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLL2_TIMEOUT_VALUE
)

567  
HAL_TIMEOUT
;

574 
	`CLEAR_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1SRC
);

577 
	`__HAL_RCC_PLL2_DISABLE
();

580 
tick°¨t
 = 
	`HAL_GëTick
();

583 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLL2RDY
Ë!
RESET
)

585 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLL2_TIMEOUT_VALUE
)

587  
HAL_TIMEOUT
;

597 
	`as£π_∑øm
(
	`IS_RCC_PLL
(
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
));

598 i‡((
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
Ë!
RCC_PLL_NONE
)

601 if(
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!
RCC_SYSCLKSOURCE_STATUS_PLLCLK
)

603 if((
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
Ë=
RCC_PLL_ON
)

606 
	`as£π_∑øm
(
	`IS_RCC_PLLSOURCE
(
RCC_OscInôSåu˘
->
PLL
.
PLLSour˚
));

607 
	`as£π_∑øm
(
	`IS_RCC_PLL_MUL
(
RCC_OscInôSåu˘
->
PLL
.
PLLMUL
));

610 
	`__HAL_RCC_PLL_DISABLE
();

613 
tick°¨t
 = 
	`HAL_GëTick
();

616 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
Ë!
RESET
)

618 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLL_TIMEOUT_VALUE
)

620  
HAL_TIMEOUT
;

626 if(
RCC_OscInôSåu˘
->
PLL
.
PLLSour˚
 =
RCC_PLLSOURCE_HSE
)

629 
	`as£π_∑øm
(
	`IS_RCC_HSE_PREDIV
(
RCC_OscInôSåu˘
->
HSEPªdivVÆue
));

630 #i‡
	`deföed
(
RCC_CFGR2_PREDIV1SRC
)

631 
	`as£π_∑øm
(
	`IS_RCC_PREDIV1_SOURCE
(
RCC_OscInôSåu˘
->
Pªdiv1Sour˚
));

634 
	`SET_BIT
(
RCC
->
CFGR2
, 
RCC_OscInôSåu˘
->
Pªdiv1Sour˚
);

638 
	`__HAL_RCC_HSE_PREDIV_CONFIG
(
RCC_OscInôSåu˘
->
HSEPªdivVÆue
);

642 
	`__HAL_RCC_PLL_CONFIG
(
RCC_OscInôSåu˘
->
PLL
.
PLLSour˚
,

643 
RCC_OscInôSåu˘
->
PLL
.
PLLMUL
);

645 
	`__HAL_RCC_PLL_ENABLE
();

648 
tick°¨t
 = 
	`HAL_GëTick
();

651 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
Ë=
RESET
)

653 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLL_TIMEOUT_VALUE
)

655  
HAL_TIMEOUT
;

662 
	`__HAL_RCC_PLL_DISABLE
();

665 
tick°¨t
 = 
	`HAL_GëTick
();

668 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
Ë!
RESET
)

670 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLL_TIMEOUT_VALUE
)

672  
HAL_TIMEOUT
;

679  
HAL_ERROR
;

683  
HAL_OK
;

684 
	}
}

709 
HAL_SètusTy≥Def
 
	$HAL_RCC_ClockC⁄fig
(
RCC_ClkInôTy≥Def
 *
RCC_ClkInôSåu˘
, 
uöt32_t
 
FL©ícy
)

711 
uöt32_t
 
tick°¨t
 = 0;

714 
	`as£π_∑øm
(
RCC_ClkInôSåu˘
 !
NULL
);

715 
	`as£π_∑øm
(
	`IS_RCC_CLOCKTYPE
(
RCC_ClkInôSåu˘
->
ClockTy≥
));

716 
	`as£π_∑øm
(
	`IS_FLASH_LATENCY
(
FL©ícy
));

722 #i‡
	`deföed
(
FLASH_ACR_LATENCY
)

724 if(
FL©ícy
 > (
FLASH
->
ACR
 & 
FLASH_ACR_LATENCY
))

727 
	`__HAL_FLASH_SET_LATENCY
(
FL©ícy
);

731 if((
FLASH
->
ACR
 & 
FLASH_ACR_LATENCY
Ë!
FL©ícy
)

733  
HAL_ERROR
;

738 if(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_HCLK
) == RCC_CLOCKTYPE_HCLK)

740 
	`as£π_∑øm
(
	`IS_RCC_HCLK
(
RCC_ClkInôSåu˘
->
AHBCLKDividî
));

741 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_HPRE
, 
RCC_ClkInôSåu˘
->
AHBCLKDividî
);

745 if(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_SYSCLK
) == RCC_CLOCKTYPE_SYSCLK)

747 
	`as£π_∑øm
(
	`IS_RCC_SYSCLKSOURCE
(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
));

750 if(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_HSE
)

753 if(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë=
RESET
)

755  
HAL_ERROR
;

759 if(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_PLLCLK
)

762 if(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
Ë=
RESET
)

764  
HAL_ERROR
;

771 if(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
Ë=
RESET
)

773  
HAL_ERROR
;

776 
	`__HAL_RCC_SYSCLK_CONFIG
(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
);

779 
tick°¨t
 = 
	`HAL_GëTick
();

781 if(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_HSE
)

783 
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!
RCC_SYSCLKSOURCE_STATUS_HSE
)

785 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CLOCKSWITCH_TIMEOUT_VALUE
)

787  
HAL_TIMEOUT
;

791 if(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_PLLCLK
)

793 
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!
RCC_SYSCLKSOURCE_STATUS_PLLCLK
)

795 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CLOCKSWITCH_TIMEOUT_VALUE
)

797  
HAL_TIMEOUT
;

803 
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!
RCC_SYSCLKSOURCE_STATUS_HSI
)

805 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CLOCKSWITCH_TIMEOUT_VALUE
)

807  
HAL_TIMEOUT
;

812 #i‡
	`deföed
(
FLASH_ACR_LATENCY
)

818 if(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_HCLK
) == RCC_CLOCKTYPE_HCLK)

820 
	`as£π_∑øm
(
	`IS_RCC_HCLK
(
RCC_ClkInôSåu˘
->
AHBCLKDividî
));

821 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_HPRE
, 
RCC_ClkInôSåu˘
->
AHBCLKDividî
);

825 if(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_SYSCLK
) == RCC_CLOCKTYPE_SYSCLK)

827 
	`as£π_∑øm
(
	`IS_RCC_SYSCLKSOURCE
(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
));

830 if(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_HSE
)

833 if(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë=
RESET
)

835  
HAL_ERROR
;

839 if(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_PLLCLK
)

842 if(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
Ë=
RESET
)

844  
HAL_ERROR
;

851 if(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
Ë=
RESET
)

853  
HAL_ERROR
;

856 
	`__HAL_RCC_SYSCLK_CONFIG
(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
);

859 
tick°¨t
 = 
	`HAL_GëTick
();

861 if(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_HSE
)

863 
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!
RCC_SYSCLKSOURCE_STATUS_HSE
)

865 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CLOCKSWITCH_TIMEOUT_VALUE
)

867  
HAL_TIMEOUT
;

871 if(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_PLLCLK
)

873 
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!
RCC_SYSCLKSOURCE_STATUS_PLLCLK
)

875 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CLOCKSWITCH_TIMEOUT_VALUE
)

877  
HAL_TIMEOUT
;

883 
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!
RCC_SYSCLKSOURCE_STATUS_HSI
)

885 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CLOCKSWITCH_TIMEOUT_VALUE
)

887  
HAL_TIMEOUT
;

894 
	`__HAL_FLASH_SET_LATENCY
(
FL©ícy
);

898 if((
FLASH
->
ACR
 & 
FLASH_ACR_LATENCY
Ë!
FL©ícy
)

900  
HAL_ERROR
;

906 if(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_PCLK1
) == RCC_CLOCKTYPE_PCLK1)

908 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_ClkInôSåu˘
->
APB1CLKDividî
));

909 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_PPRE1
, 
RCC_ClkInôSåu˘
->
APB1CLKDividî
);

913 if(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_PCLK2
) == RCC_CLOCKTYPE_PCLK2)

915 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_ClkInôSåu˘
->
APB2CLKDividî
));

916 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_PPRE2
, ((
RCC_ClkInôSåu˘
->
APB2CLKDividî
) << 3));

920 
	`HAL_InôTick
 (
TICK_INT_PRIORITY
);

922  
HAL_OK
;

923 
	}
}

975 
	$HAL_RCC_MCOC⁄fig
(
uöt32_t
 
RCC_MCOx
, uöt32_à
RCC_MCOSour˚
, uöt32_à
RCC_MCODiv
)

977 
GPIO_InôTy≥Def
 
gpio
 = {0};

980 
	`as£π_∑øm
(
	`IS_RCC_MCO
(
RCC_MCOx
));

981 
	`as£π_∑øm
(
	`IS_RCC_MCODIV
(
RCC_MCODiv
));

982 
	`as£π_∑øm
(
	`IS_RCC_MCO1SOURCE
(
RCC_MCOSour˚
));

985 
	`MCO1_CLK_ENABLE
();

988 
gpio
.
Pö
 = 
MCO1_PIN
;

989 
gpio
.
Mode
 = 
GPIO_MODE_AF_PP
;

990 
gpio
.
S≥ed
 = 
GPIO_SPEED_FREQ_HIGH
;

991 
gpio
.
PuŒ
 = 
GPIO_NOPULL
;

992 
	`HAL_GPIO_Inô
(
MCO1_GPIO_PORT
, &
gpio
);

995 
	`__HAL_RCC_MCO1_CONFIG
(
RCC_MCOSour˚
, 
RCC_MCODiv
);

996 
	}
}

1007 
	$HAL_RCC_E«bÀCSS
()

1009 *(
__IO
 
uöt32_t
 *Ë
RCC_CR_CSSON_BB
 = (uöt32_t)
ENABLE
;

1010 
	}
}

1016 
	$HAL_RCC_DißbÀCSS
()

1018 *(
__IO
 
uöt32_t
 *Ë
RCC_CR_CSSON_BB
 = (uöt32_t)
DISABLE
;

1019 
	}
}

1050 
uöt32_t
 
	$HAL_RCC_GëSysClockFªq
()

1052 #i‡ 
	`deföed
(
RCC_CFGR2_PREDIV1SRC
)

1053 c⁄° 
uöt8_t
 
aPLLMULFa˘‹TabÀ
[12] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 13};

1054 c⁄° 
uöt8_t
 
aPªdivFa˘‹TabÀ
[16] = { 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16};

1056 c⁄° 
uöt8_t
 
aPLLMULFa˘‹TabÀ
[16] = { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};

1057 #i‡
	`deföed
(
RCC_CFGR2_PREDIV1
)

1058 c⁄° 
uöt8_t
 
aPªdivFa˘‹TabÀ
[16] = { 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16};

1060 c⁄° 
uöt8_t
 
aPªdivFa˘‹TabÀ
[2] = { 1, 2};

1064 
uöt32_t
 
tm¥eg
 = 0, 
¥ediv
 = 0, 
∂l˛k
 = 0, 
∂lmul
 = 0;

1065 
uöt32_t
 
sys˛ock‰eq
 = 0;

1066 #i‡
	`deföed
(
RCC_CFGR2_PREDIV1SRC
)

1067 
uöt32_t
 
¥ediv2
 = 0, 
∂l2mul
 = 0;

1070 
tm¥eg
 = 
RCC
->
CFGR
;

1073 
tm¥eg
 & 
RCC_CFGR_SWS
)

1075 
RCC_SYSCLKSOURCE_STATUS_HSE
:

1077 
sys˛ock‰eq
 = 
HSE_VALUE
;

1080 
RCC_SYSCLKSOURCE_STATUS_PLLCLK
:

1082 
∂lmul
 = 
aPLLMULFa˘‹TabÀ
[(
uöt32_t
)(
tm¥eg
 & 
RCC_CFGR_PLLMULL
Ë>> 
	`POSITION_VAL
(RCC_CFGR_PLLMULL)];

1083 i‡((
tm¥eg
 & 
RCC_CFGR_PLLSRC
Ë!
RCC_PLLSOURCE_HSI_DIV2
)

1085 #i‡
	`deföed
(
RCC_CFGR2_PREDIV1
)

1086 
¥ediv
 = 
aPªdivFa˘‹TabÀ
[(
uöt32_t
)(
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1
Ë>> 
	`POSITION_VAL
(RCC_CFGR2_PREDIV1)];

1088 
¥ediv
 = 
aPªdivFa˘‹TabÀ
[(
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_PLLXTPRE
Ë>> 
	`POSITION_VAL
(RCC_CFGR_PLLXTPRE)];

1090 #i‡
	`deföed
(
RCC_CFGR2_PREDIV1SRC
)

1092 if(
	`HAL_IS_BIT_SET
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1SRC
))

1096 
¥ediv2
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV2
Ë>> 
	`POSITION_VAL
(RCC_CFGR2_PREDIV2)) + 1;

1097 
∂l2mul
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PLL2MUL
Ë>> 
	`POSITION_VAL
(RCC_CFGR2_PLL2MUL)) + 2;

1098 
∂l˛k
 = (
uöt32_t
)((((
HSE_VALUE
 / 
¥ediv2
Ë* 
∂l2mul
Ë/ 
¥ediv
Ë* 
∂lmul
);

1103 
∂l˛k
 = (
uöt32_t
)((
HSE_VALUE
 / 
¥ediv
Ë* 
∂lmul
);

1108 i‡(
∂lmul
 =
aPLLMULFa˘‹TabÀ
[(
uöt32_t
)(
RCC_CFGR_PLLMULL6_5
Ë>> 
	`POSITION_VAL
(
RCC_CFGR_PLLMULL
)])

1110 
∂l˛k
 =Öllclk / 2;

1114 
∂l˛k
 = (
uöt32_t
)((
HSE_VALUE
 / 
¥ediv
Ë* 
∂lmul
);

1120 
∂l˛k
 = (
uöt32_t
)((
HSI_VALUE
 >> 1Ë* 
∂lmul
);

1122 
sys˛ock‰eq
 = 
∂l˛k
;

1125 
RCC_SYSCLKSOURCE_STATUS_HSI
:

1128 
sys˛ock‰eq
 = 
HSI_VALUE
;

1132  
sys˛ock‰eq
;

1133 
	}
}

1144 
uöt32_t
 
	$HAL_RCC_GëHCLKFªq
()

1146 
Sy°emC‹eClock
 = 
	`HAL_RCC_GëSysClockFªq
(Ë>> 
aAPBAHBPªscTabÀ
[(
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
)>> 
	`POSITION_VAL
(RCC_CFGR_HPRE)];

1147  
Sy°emC‹eClock
;

1148 
	}
}

1156 
uöt32_t
 
	$HAL_RCC_GëPCLK1Fªq
()

1159  (
	`HAL_RCC_GëHCLKFªq
(Ë>> 
aAPBAHBPªscTabÀ
[(
RCC
->
CFGR
 & 
RCC_CFGR_PPRE1
)>> 
	`POSITION_VAL
(RCC_CFGR_PPRE1)]);

1160 
	}
}

1168 
uöt32_t
 
	$HAL_RCC_GëPCLK2Fªq
()

1171  (
	`HAL_RCC_GëHCLKFªq
()>> 
aAPBAHBPªscTabÀ
[(
RCC
->
CFGR
 & 
RCC_CFGR_PPRE2
)>> 
	`POSITION_VAL
(RCC_CFGR_PPRE2)]);

1172 
	}
}

1181 
	$HAL_RCC_GëOscC⁄fig
(
RCC_OscInôTy≥Def
 *
RCC_OscInôSåu˘
)

1184 
	`as£π_∑øm
(
RCC_OscInôSåu˘
 !
NULL
);

1187 
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
 = 
RCC_OSCILLATORTYPE_HSE
 | 
RCC_OSCILLATORTYPE_HSI
 \

1188 | 
RCC_OSCILLATORTYPE_LSE
 | 
RCC_OSCILLATORTYPE_LSI
;

1190 #i‡
	`deföed
(
RCC_CFGR2_PREDIV1SRC
)

1192 
RCC_OscInôSåu˘
->
Pªdiv1Sour˚
 = 
	`READ_BIT
(
RCC
->
CFGR2
,
RCC_CFGR2_PREDIV1SRC
);

1196 if((
RCC
->
CR
 &
RCC_CR_HSEBYP
) == RCC_CR_HSEBYP)

1198 
RCC_OscInôSåu˘
->
HSESèã
 = 
RCC_HSE_BYPASS
;

1200 if((
RCC
->
CR
 &
RCC_CR_HSEON
) == RCC_CR_HSEON)

1202 
RCC_OscInôSåu˘
->
HSESèã
 = 
RCC_HSE_ON
;

1206 
RCC_OscInôSåu˘
->
HSESèã
 = 
RCC_HSE_OFF
;

1208 
RCC_OscInôSåu˘
->
HSEPªdivVÆue
 = 
	`__HAL_RCC_HSE_GET_PREDIV
();

1211 if((
RCC
->
CR
 &
RCC_CR_HSION
) == RCC_CR_HSION)

1213 
RCC_OscInôSåu˘
->
HSISèã
 = 
RCC_HSI_ON
;

1217 
RCC_OscInôSåu˘
->
HSISèã
 = 
RCC_HSI_OFF
;

1220 
RCC_OscInôSåu˘
->
HSICÆibøti⁄VÆue
 = (
uöt32_t
)((
RCC
->
CR
 & 
RCC_CR_HSITRIM
Ë>> 
	`POSITION_VAL
(RCC_CR_HSITRIM));

1223 if((
RCC
->
BDCR
 &
RCC_BDCR_LSEBYP
) == RCC_BDCR_LSEBYP)

1225 
RCC_OscInôSåu˘
->
LSESèã
 = 
RCC_LSE_BYPASS
;

1227 if((
RCC
->
BDCR
 &
RCC_BDCR_LSEON
) == RCC_BDCR_LSEON)

1229 
RCC_OscInôSåu˘
->
LSESèã
 = 
RCC_LSE_ON
;

1233 
RCC_OscInôSåu˘
->
LSESèã
 = 
RCC_LSE_OFF
;

1237 if((
RCC
->
CSR
 &
RCC_CSR_LSION
) == RCC_CSR_LSION)

1239 
RCC_OscInôSåu˘
->
LSISèã
 = 
RCC_LSI_ON
;

1243 
RCC_OscInôSåu˘
->
LSISèã
 = 
RCC_LSI_OFF
;

1247 if((
RCC
->
CR
 &
RCC_CR_PLLON
) == RCC_CR_PLLON)

1249 
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
 = 
RCC_PLL_ON
;

1253 
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
 = 
RCC_PLL_OFF
;

1255 
RCC_OscInôSåu˘
->
PLL
.
PLLSour˚
 = (
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_PLLSRC
);

1256 
RCC_OscInôSåu˘
->
PLL
.
PLLMUL
 = (
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_PLLMULL
);

1257 #i‡
	`deföed
(
RCC_CR_PLL2ON
)

1259 if((
RCC
->
CR
 &
RCC_CR_PLL2ON
) == RCC_CR_PLL2ON)

1261 
RCC_OscInôSåu˘
->
PLL2
.
PLL2Sèã
 = 
RCC_PLL2_ON
;

1265 
RCC_OscInôSåu˘
->
PLL2
.
PLL2Sèã
 = 
RCC_PLL2_OFF
;

1267 
RCC_OscInôSåu˘
->
PLL2
.
HSEPªdiv2VÆue
 = 
	`__HAL_RCC_HSE_GET_PREDIV2
();

1268 
RCC_OscInôSåu˘
->
PLL2
.
PLL2MUL
 = (
uöt32_t
)(
RCC
->
CFGR2
 & 
RCC_CFGR2_PLL2MUL
);

1270 
	}
}

1280 
	$HAL_RCC_GëClockC⁄fig
(
RCC_ClkInôTy≥Def
 *
RCC_ClkInôSåu˘
, 
uöt32_t
 *
pFL©ícy
)

1283 
	`as£π_∑øm
(
RCC_ClkInôSåu˘
 !
NULL
);

1284 
	`as£π_∑øm
(
pFL©ícy
 !
NULL
);

1287 
RCC_ClkInôSåu˘
->
ClockTy≥
 = 
RCC_CLOCKTYPE_SYSCLK
 | 
RCC_CLOCKTYPE_HCLK
 | 
RCC_CLOCKTYPE_PCLK1
 | 
RCC_CLOCKTYPE_PCLK2
;

1290 
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 = (
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_SW
);

1293 
RCC_ClkInôSåu˘
->
AHBCLKDividî
 = (
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
);

1296 
RCC_ClkInôSåu˘
->
APB1CLKDividî
 = (
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_PPRE1
);

1299 
RCC_ClkInôSåu˘
->
APB2CLKDividî
 = (
uöt32_t
)((
RCC
->
CFGR
 & 
RCC_CFGR_PPRE2
) >> 3);

1301 #i‡ 
	`deföed
(
FLASH_ACR_LATENCY
)

1303 *
pFL©ícy
 = (
uöt32_t
)(
FLASH
->
ACR
 & 
FLASH_ACR_LATENCY
);

1306 *
pFL©ícy
 = (
uöt32_t
)
FLASH_LATENCY_0
;

1308 
	}
}

1315 
	$HAL_RCC_NMI_IRQH™dÀr
()

1318 if(
	`__HAL_RCC_GET_IT
(
RCC_IT_CSS
))

1321 
	`HAL_RCC_CSSCÆlback
();

1324 
	`__HAL_RCC_CLEAR_IT
(
RCC_IT_CSS
);

1326 
	}
}

1332 
__wók
 
	$HAL_RCC_CSSCÆlback
()

1337 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Src\stm32f1xx_hal_rcc_ex.c

43 
	~"°m32f1xx_hÆ.h
"

49 #ifde‡
HAL_RCC_MODULE_ENABLED


118 
HAL_SètusTy≥Def
 
	$HAL_RCCEx_PîùhCLKC⁄fig
(
RCC_PîùhCLKInôTy≥Def
 *
PîùhClkInô
)

120 
uöt32_t
 
tick°¨t
 = 0, 
ãmp_ªg
 = 0;

121 #i‡
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

122 
uöt32_t
 
∂œ˘ive
 = 0;

126 
	`as£π_∑øm
(
	`IS_RCC_PERIPHCLOCK
(
PîùhClkInô
->
PîùhClockSñe˘i⁄
));

129 i‡((((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_RTC
) == RCC_PERIPHCLK_RTC))

132 
	`as£π_∑øm
(
	`IS_RCC_RTCCLKSOURCE
(
PîùhClkInô
->
RTCClockSñe˘i⁄
));

135 
	`__HAL_RCC_PWR_CLK_ENABLE
();

138 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_DBP
);

141 
tick°¨t
 = 
	`HAL_GëTick
();

143 (
PWR
->
CR
 & 
PWR_CR_DBP
Ë=
RESET
)

145 if((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
RCC_DBP_TIMEOUT_VALUE
)

147  
HAL_TIMEOUT
;

152 if((
RCC
->
BDCR
 & 
RCC_BDCR_RTCSEL
Ë!(
PîùhClkInô
->
RTCClockSñe˘i⁄
 & RCC_BDCR_RTCSEL))

155 
ãmp_ªg
 = (
RCC
->
BDCR
 & ~(
RCC_BDCR_RTCSEL
));

157 
	`__HAL_RCC_BACKUPRESET_FORCE
();

158 
	`__HAL_RCC_BACKUPRESET_RELEASE
();

160 
RCC
->
BDCR
 = 
ãmp_ªg
;

163 i‡(
	`HAL_IS_BIT_SET
(
ãmp_ªg
, 
RCC_BDCR_LSERDY
))

166 
tick°¨t
 = 
	`HAL_GëTick
();

169 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSERDY
Ë=
RESET
)

171 if((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
RCC_LSE_TIMEOUT_VALUE
)

173  
HAL_TIMEOUT
;

177 
	`__HAL_RCC_RTC_CONFIG
(
PîùhClkInô
->
RTCClockSñe˘i⁄
);

182 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_ADC
) == RCC_PERIPHCLK_ADC)

185 
	`as£π_∑øm
(
	`IS_RCC_ADCPLLCLK_DIV
(
PîùhClkInô
->
AdcClockSñe˘i⁄
));

188 
	`__HAL_RCC_ADC_CONFIG
(
PîùhClkInô
->
AdcClockSñe˘i⁄
);

191 #i‡
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

193 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_I2S2
) == RCC_PERIPHCLK_I2S2)

196 
	`as£π_∑øm
(
	`IS_RCC_I2S2CLKSOURCE
(
PîùhClkInô
->
I2s2ClockSñe˘i⁄
));

199 
	`__HAL_RCC_I2S2_CONFIG
(
PîùhClkInô
->
I2s2ClockSñe˘i⁄
);

203 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_I2S3
) == RCC_PERIPHCLK_I2S3)

206 
	`as£π_∑øm
(
	`IS_RCC_I2S3CLKSOURCE
(
PîùhClkInô
->
I2s3ClockSñe˘i⁄
));

209 
	`__HAL_RCC_I2S3_CONFIG
(
PîùhClkInô
->
I2s3ClockSñe˘i⁄
);

214 i‡(
	`HAL_IS_BIT_SET
(
RCC
->
CFGR2
, 
RCC_CFGR2_I2S2SRC
Ë|| HAL_IS_BIT_SET(RCC->CFGR2, 
RCC_CFGR2_I2S3SRC
))

217 
∂œ˘ive
 = 1;

221 i‡(
∂œ˘ive
 == 1)

224 i‡(
	`HAL_IS_BIT_CLR
(
RCC
->
CR
, 
RCC_CR_PLL3ON
))

227 
	`as£π_∑øm
(
	`IS_RCC_PLLI2S_MUL
(
PîùhClkInô
->
PLLI2S
.
PLLI2SMUL
));

228 
	`as£π_∑øm
(
	`IS_RCC_HSE_PREDIV2
(
PîùhClkInô
->
PLLI2S
.
HSEPªdiv2VÆue
));

232 i‡(
	`HAL_IS_BIT_SET
(
RCC
->
CR
,
RCC_CR_PLL2ON
) && \

233 (
	`__HAL_RCC_HSE_GET_PREDIV2
(Ë!
PîùhClkInô
->
PLLI2S
.
HSEPªdiv2VÆue
))

235  
HAL_ERROR
;

239 
	`__HAL_RCC_HSE_PREDIV2_CONFIG
(
PîùhClkInô
->
PLLI2S
.
HSEPªdiv2VÆue
);

242 
	`__HAL_RCC_PLLI2S_CONFIG
(
PîùhClkInô
->
PLLI2S
.
PLLI2SMUL
);

245 
	`__HAL_RCC_PLLI2S_ENABLE
();

248 
tick°¨t
 = 
	`HAL_GëTick
();

251 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLI2SRDY
Ë=
RESET
)

253 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLLI2S_TIMEOUT_VALUE
)

255  
HAL_TIMEOUT
;

262 i‡(
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PLL3MUL
Ë!
PîùhClkInô
->
PLLI2S
.
PLLI2SMUL
)

264  
HAL_ERROR
;

270 #i‡
	`deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

271 || 
	`deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)\

272 || 
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

274 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_USB
) == RCC_PERIPHCLK_USB)

277 
	`as£π_∑øm
(
	`IS_RCC_USBPLLCLK_DIV
(
PîùhClkInô
->
UsbClockSñe˘i⁄
));

280 
	`__HAL_RCC_USB_CONFIG
(
PîùhClkInô
->
UsbClockSñe˘i⁄
);

284  
HAL_OK
;

285 
	}
}

294 
	$HAL_RCCEx_GëPîùhCLKC⁄fig
(
RCC_PîùhCLKInôTy≥Def
 *
PîùhClkInô
)

296 
uöt32_t
 
§c˛k
 = 0;

299 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 = 
RCC_PERIPHCLK_RTC
;

302 
§c˛k
 = 
	`__HAL_RCC_GET_RTC_SOURCE
();

304 
PîùhClkInô
->
RTCClockSñe˘i⁄
 = 
§c˛k
;

307 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 |
RCC_PERIPHCLK_ADC
;

308 
PîùhClkInô
->
AdcClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_ADC_SOURCE
();

310 #i‡
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

312 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 |
RCC_PERIPHCLK_I2S2
;

313 
PîùhClkInô
->
I2s2ClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_I2S2_SOURCE
();

316 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 |
RCC_PERIPHCLK_I2S3
;

317 
PîùhClkInô
->
I2s3ClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_I2S3_SOURCE
();

321 #i‡
	`deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

323 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 |
RCC_PERIPHCLK_I2S2
;

324 
PîùhClkInô
->
I2s2ClockSñe˘i⁄
 = 
RCC_I2S2CLKSOURCE_SYSCLK
;

327 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 |
RCC_PERIPHCLK_I2S3
;

328 
PîùhClkInô
->
I2s3ClockSñe˘i⁄
 = 
RCC_I2S3CLKSOURCE_SYSCLK
;

332 #i‡
	`deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

333 || 
	`deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)\

334 || 
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

336 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 |
RCC_PERIPHCLK_USB
;

337 
PîùhClkInô
->
UsbClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_USB_SOURCE
();

339 
	}
}

387 
uöt32_t
 
	$HAL_RCCEx_GëPîùhCLKFªq
(
uöt32_t
 
PîùhClk
)

389 #i‡
	`deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

390 || 
	`deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)\

391 || 
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

392 #i‡
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

393 c⁄° 
uöt8_t
 
aPLLMULFa˘‹TabÀ
[12] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 13};

394 c⁄° 
uöt8_t
 
aPªdivFa˘‹TabÀ
[16] = { 1, 2, 3, 4, 5, 6, 7, 8, 9,10, 11, 12, 13, 14, 15, 16};

396 c⁄° 
uöt8_t
 
aPLLMULFa˘‹TabÀ
[16] = { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};

397 c⁄° 
uöt8_t
 
aPªdivFa˘‹TabÀ
[2] = { 1, 2};

400 
uöt32_t
 
ãmp_ªg
 = 0, 
‰equícy
 = 0;

401 #i‡
	`deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

402 || 
	`deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)\

403 || 
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

404 
uöt32_t
 
¥ediv1
 = 0, 
∂l˛k
 = 0, 
∂lmul
 = 0;

406 #i‡
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

407 
uöt32_t
 
∂l2mul
 = 0, 
∂l3mul
 = 0, 
¥ediv2
 = 0;

411 
	`as£π_∑øm
(
	`IS_RCC_PERIPHCLOCK
(
PîùhClk
));

413 
PîùhClk
)

415 #i‡
	`deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

416 || 
	`deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)\

417 || 
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

418 
RCC_PERIPHCLK_USB
:

421 
ãmp_ªg
 = 
RCC
->
CFGR
;

424 i‡(
	`HAL_IS_BIT_SET
(
RCC
->
CR
,
RCC_CR_PLLON
))

426 
∂lmul
 = 
aPLLMULFa˘‹TabÀ
[(
uöt32_t
)(
ãmp_ªg
 & 
RCC_CFGR_PLLMULL
Ë>> 
	`POSITION_VAL
(RCC_CFGR_PLLMULL)];

427 i‡((
ãmp_ªg
 & 
RCC_CFGR_PLLSRC
Ë!
RCC_PLLSOURCE_HSI_DIV2
)

429 #i‡
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
Ë|| deföed(
STM32F100xB
)\

430 || 
	`deföed
(
STM32F100xE
)

431 
¥ediv1
 = 
aPªdivFa˘‹TabÀ
[(
uöt32_t
)(
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1
Ë>> 
	`POSITION_VAL
(RCC_CFGR2_PREDIV1)];

433 
¥ediv1
 = 
aPªdivFa˘‹TabÀ
[(
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_PLLXTPRE
Ë>> 
	`POSITION_VAL
(RCC_CFGR_PLLXTPRE)];

436 #i‡
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

437 if(
	`HAL_IS_BIT_SET
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1SRC
))

441 
¥ediv2
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV2
Ë>> 
	`POSITION_VAL
(RCC_CFGR2_PREDIV2)) + 1;

442 
∂l2mul
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PLL2MUL
Ë>> 
	`POSITION_VAL
(RCC_CFGR2_PLL2MUL)) + 2;

443 
∂l˛k
 = (
uöt32_t
)((((
HSE_VALUE
 / 
¥ediv2
Ë* 
∂l2mul
Ë/ 
¥ediv1
Ë* 
∂lmul
);

448 
∂l˛k
 = (
uöt32_t
)((
HSE_VALUE
 / 
¥ediv1
Ë* 
∂lmul
);

453 i‡(
∂lmul
 =
aPLLMULFa˘‹TabÀ
[(
uöt32_t
)(
RCC_CFGR_PLLMULL6_5
Ë>> 
	`POSITION_VAL
(
RCC_CFGR_PLLMULL
)])

455 
∂l˛k
 =Öllclk / 2;

458 i‡((
ãmp_ªg
 & 
RCC_CFGR_PLLSRC
Ë!
RCC_PLLSOURCE_HSI_DIV2
)

461 
∂l˛k
 = (
uöt32_t
)((
HSE_VALUE
 / 
¥ediv1
Ë* 
∂lmul
);

468 
∂l˛k
 = (
uöt32_t
)((
HSI_VALUE
 >> 1Ë* 
∂lmul
);

472 #i‡
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

474 i‡(
	`__HAL_RCC_GET_USB_SOURCE
(Ë=
RCC_USBCLKSOURCE_PLL_DIV2
)

477 
‰equícy
 = 
∂l˛k
;

482 
‰equícy
 = (2 * 
∂l˛k
) / 3;

486 i‡(
	`__HAL_RCC_GET_USB_SOURCE
(Ë=
RCC_USBCLKSOURCE_PLL
)

489 
‰equícy
 = 
∂l˛k
;

494 
‰equícy
 = (
∂l˛k
 * 2) / 3;

501 #i‡
	`deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
Ë|| deföed(
STM32F105xC
)\

502 || 
	`deföed
(
STM32F107xC
)

503 
RCC_PERIPHCLK_I2S2
:

505 #i‡
	`deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

507 
‰equícy
 = 
	`HAL_RCC_GëSysClockFªq
();

509 i‡(
	`__HAL_RCC_GET_I2S2_SOURCE
(Ë=
RCC_I2S2CLKSOURCE_SYSCLK
)

512 
‰equícy
 = 
	`HAL_RCC_GëSysClockFªq
();

517 i‡(
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_PLL3ON
))

520 
¥ediv2
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV2
Ë>> 
	`POSITION_VAL
(RCC_CFGR2_PREDIV2)) + 1;

521 
∂l3mul
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PLL3MUL
Ë>> 
	`POSITION_VAL
(RCC_CFGR2_PLL3MUL)) + 2;

522 
‰equícy
 = (
uöt32_t
)(2 * ((
HSE_VALUE
 / 
¥ediv2
Ë* 
∂l3mul
));

528 
RCC_PERIPHCLK_I2S3
:

530 #i‡
	`deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

532 
‰equícy
 = 
	`HAL_RCC_GëSysClockFªq
();

534 i‡(
	`__HAL_RCC_GET_I2S3_SOURCE
(Ë=
RCC_I2S3CLKSOURCE_SYSCLK
)

537 
‰equícy
 = 
	`HAL_RCC_GëSysClockFªq
();

542 i‡(
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_PLL3ON
))

545 
¥ediv2
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV2
Ë>> 
	`POSITION_VAL
(RCC_CFGR2_PREDIV2)) + 1;

546 
∂l3mul
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PLL3MUL
Ë>> 
	`POSITION_VAL
(RCC_CFGR2_PLL3MUL)) + 2;

547 
‰equícy
 = (
uöt32_t
)(2 * ((
HSE_VALUE
 / 
¥ediv2
Ë* 
∂l3mul
));

554 
RCC_PERIPHCLK_RTC
:

557 
ãmp_ªg
 = 
RCC
->
BDCR
;

560 i‡(((
ãmp_ªg
 & 
RCC_BDCR_RTCSEL
Ë=
RCC_RTCCLKSOURCE_LSE
Ë&& (
	`HAL_IS_BIT_SET
—emp_ªg, 
RCC_BDCR_LSERDY
)))

562 
‰equícy
 = 
LSE_VALUE
;

565 i‡(((
ãmp_ªg
 & 
RCC_BDCR_RTCSEL
Ë=
RCC_RTCCLKSOURCE_LSI
Ë&& (
	`HAL_IS_BIT_SET
(
RCC
->
CSR
, 
RCC_CSR_LSIRDY
)))

567 
‰equícy
 = 
LSI_VALUE
;

569 i‡(((
ãmp_ªg
 & 
RCC_BDCR_RTCSEL
Ë=
RCC_RTCCLKSOURCE_HSE_DIV128
Ë&& (
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_HSERDY
)))

571 
‰equícy
 = 
HSE_VALUE
 / 128;

576 
‰equícy
 = 0;

580 
RCC_PERIPHCLK_ADC
:

582 
‰equícy
 = 
	`HAL_RCC_GëPCLK2Fªq
(Ë/ (((
	`__HAL_RCC_GET_ADC_SOURCE
(Ë>> 
	`POSITION_VAL
(
RCC_CFGR_ADCPRE_DIV4
)) + 1) * 2);

590 (
‰equícy
);

591 
	}
}

597 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

619 
HAL_SètusTy≥Def
 
	$HAL_RCCEx_E«bÀPLLI2S
(
RCC_PLLI2SInôTy≥Def
 *
PLLI2SInô
)

621 
uöt32_t
 
tick°¨t
 = 0;

624 i‡(
	`HAL_IS_BIT_CLR
(
RCC
->
CFGR2
, 
RCC_CFGR2_I2S2SRC
Ë&& HAL_IS_BIT_CLR(RCC->CFGR2, 
RCC_CFGR2_I2S3SRC
))

627 
	`as£π_∑øm
(
	`IS_RCC_PLLI2S_MUL
(
PLLI2SInô
->
PLLI2SMUL
));

628 
	`as£π_∑øm
(
	`IS_RCC_HSE_PREDIV2
(
PLLI2SInô
->
HSEPªdiv2VÆue
));

632 i‡(
	`HAL_IS_BIT_SET
(
RCC
->
CR
,
RCC_CR_PLL2ON
) && \

633 (
	`__HAL_RCC_HSE_GET_PREDIV2
(Ë!
PLLI2SInô
->
HSEPªdiv2VÆue
))

635  
HAL_ERROR
;

639 
	`__HAL_RCC_PLLI2S_DISABLE
();

642 
tick°¨t
 = 
	`HAL_GëTick
();

645 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLI2SRDY
Ë!
RESET
)

647 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLLI2S_TIMEOUT_VALUE
)

649  
HAL_TIMEOUT
;

654 
	`__HAL_RCC_HSE_PREDIV2_CONFIG
(
PLLI2SInô
->
HSEPªdiv2VÆue
);

658 
	`__HAL_RCC_PLLI2S_CONFIG
(
PLLI2SInô
->
PLLI2SMUL
);

661 
	`__HAL_RCC_PLLI2S_ENABLE
();

664 
tick°¨t
 = 
	`HAL_GëTick
();

667 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLI2SRDY
Ë=
RESET
)

669 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLLI2S_TIMEOUT_VALUE
)

671  
HAL_TIMEOUT
;

678  
HAL_ERROR
;

681  
HAL_OK
;

682 
	}
}

689 
HAL_SètusTy≥Def
 
	$HAL_RCCEx_DißbÀPLLI2S
()

691 
uöt32_t
 
tick°¨t
 = 0;

694 i‡(
	`HAL_IS_BIT_CLR
(
RCC
->
CFGR2
, 
RCC_CFGR2_I2S2SRC
Ë&& HAL_IS_BIT_CLR(RCC->CFGR2, 
RCC_CFGR2_I2S3SRC
))

697 
	`__HAL_RCC_PLLI2S_DISABLE
();

700 
tick°¨t
 = 
	`HAL_GëTick
();

703 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLI2SRDY
Ë!
RESET
)

705 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLLI2S_TIMEOUT_VALUE
)

707  
HAL_TIMEOUT
;

714  
HAL_ERROR
;

717  
HAL_OK
;

718 
	}
}

745 
HAL_SètusTy≥Def
 
	$HAL_RCCEx_E«bÀPLL2
(
RCC_PLL2InôTy≥Def
 *
PLL2Inô
)

747 
uöt32_t
 
tick°¨t
 = 0;

751 if((
	`__HAL_RCC_GET_PLL_OSCSOURCE
(Ë=
RCC_PLLSOURCE_HSE
) && \

752 (
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_SYSCLKSOURCE_STATUS_PLLCLK
) && \

753 ((
	`READ_BIT
(
RCC
->
CFGR2
,
RCC_CFGR2_PREDIV1SRC
)Ë=
RCC_CFGR2_PREDIV1SRC_PLL2
))

755  
HAL_ERROR
;

760 
	`as£π_∑øm
(
	`IS_RCC_PLL2_MUL
(
PLL2Inô
->
PLL2MUL
));

761 
	`as£π_∑øm
(
	`IS_RCC_HSE_PREDIV2
(
PLL2Inô
->
HSEPªdiv2VÆue
));

765 i‡(
	`HAL_IS_BIT_SET
(
RCC
->
CR
,
RCC_CR_PLL3ON
) && \

766 (
	`__HAL_RCC_HSE_GET_PREDIV2
(Ë!
PLL2Inô
->
HSEPªdiv2VÆue
))

768  
HAL_ERROR
;

772 
	`__HAL_RCC_PLL2_DISABLE
();

775 
tick°¨t
 = 
	`HAL_GëTick
();

778 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLL2RDY
Ë!
RESET
)

780 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLL2_TIMEOUT_VALUE
)

782  
HAL_TIMEOUT
;

787 
	`__HAL_RCC_HSE_PREDIV2_CONFIG
(
PLL2Inô
->
HSEPªdiv2VÆue
);

790 
	`__HAL_RCC_PLL2_CONFIG
(
PLL2Inô
->
PLL2MUL
);

793 
	`__HAL_RCC_PLL2_ENABLE
();

796 
tick°¨t
 = 
	`HAL_GëTick
();

799 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLL2RDY
Ë=
RESET
)

801 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLL2_TIMEOUT_VALUE
)

803  
HAL_TIMEOUT
;

808  
HAL_OK
;

809 
	}
}

816 
HAL_SètusTy≥Def
 
	$HAL_RCCEx_DißbÀPLL2
()

818 
uöt32_t
 
tick°¨t
 = 0;

822 if((
	`__HAL_RCC_GET_PLL_OSCSOURCE
(Ë=
RCC_PLLSOURCE_HSE
) && \

823 (
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_SYSCLKSOURCE_STATUS_PLLCLK
) && \

824 ((
	`READ_BIT
(
RCC
->
CFGR2
,
RCC_CFGR2_PREDIV1SRC
)Ë=
RCC_CFGR2_PREDIV1SRC_PLL2
))

826  
HAL_ERROR
;

831 
	`__HAL_RCC_PLL2_DISABLE
();

834 
tick°¨t
 = 
	`HAL_GëTick
();

837 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLL2RDY
Ë!
RESET
)

839 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLL2_TIMEOUT_VALUE
)

841  
HAL_TIMEOUT
;

846  
HAL_OK
;

847 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Src\stm32f1xx_ll_usb.c

59 
	~"°m32f1xx_hÆ.h
"

70 #i‡
deföed
 (
HAL_PCD_MODULE_ENABLED
Ë|| deföed (
HAL_HCD_MODULE_ENABLED
)

72 #i‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
) || \

73 
deföed
(
STM32F103x6
Ë|| deföed(
STM32F103xB
) || \

74 
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
) || \

75 
deföed
(
STM32F105xC
Ë|| 
	$deföed
(
STM32F107xC
)

82 #i‡
	`deföed
 (
USB_OTG_FS
)

86 
HAL_SètusTy≥Def
 
	`USB_C‹eRe£t
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

115 #i‡
	`deföed
 (
USB_OTG_FS
)

124 
HAL_SètusTy≥Def
 
	$USB_C‹eInô
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_CfgTy≥Def
 
cfg
)

127 
USBx
->
GUSBCFG
 |
USB_OTG_GUSBCFG_PHYSEL
;

130 
	`USB_C‹eRe£t
(
USBx
);

133 
USBx
->
GCCFG
 = 
USB_OTG_GCCFG_PWRDWN
;

135  
HAL_OK
;

136 
	}
}

144 
HAL_SètusTy≥Def
 
	$USB_E«bÀGlobÆI¡
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

146 
USBx
->
GAHBCFG
 |
USB_OTG_GAHBCFG_GINT
;

147  
HAL_OK
;

148 
	}
}

156 
HAL_SètusTy≥Def
 
	$USB_DißbÀGlobÆI¡
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

158 
USBx
->
GAHBCFG
 &~
USB_OTG_GAHBCFG_GINT
;

159  
HAL_OK
;

160 
	}
}

172 
HAL_SètusTy≥Def
 
	$USB_SëCuºítMode
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
USB_ModeTy≥Def
 
mode
)

174 
USBx
->
GUSBCFG
 &~(
USB_OTG_GUSBCFG_FHMOD
 | 
USB_OTG_GUSBCFG_FDMOD
);

176 i‡–
mode
 =
USB_HOST_MODE
)

178 
USBx
->
GUSBCFG
 |
USB_OTG_GUSBCFG_FHMOD
;

180 i‡–
mode
 =
USB_DEVICE_MODE
)

182 
USBx
->
GUSBCFG
 |
USB_OTG_GUSBCFG_FDMOD
;

184 
	`HAL_Dñay
(50);

186  
HAL_OK
;

187 
	}
}

197 
HAL_SètusTy≥Def
 
	$USB_DevInô
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_CfgTy≥Def
 
cfg
)

199 
uöt32_t
 
ödex
 = 0;

201 
ödex
 = 0; index < 15 ; index++)

203 
USBx
->
DIEPTXF
[
ödex
] = 0;

207 
USBx
->
GCCFG
 |
USB_OTG_GCCFG_VBUSBSEN
;

210 
USBx_PCGCCTL
 = 0;

213 
USBx_DEVICE
->
DCFG
 |
DCFG_FRAME_INTERVAL_80
;

216 
	`USB_SëDevS≥ed
 (
USBx
 , 
USB_OTG_SPEED_FULL
);

219 
	`USB_FlushTxFifo
(
USBx
 , 0x10);

220 
	`USB_FlushRxFifo
(
USBx
);

223 
USBx_DEVICE
->
DIEPMSK
 = 0;

224 
USBx_DEVICE
->
DOEPMSK
 = 0;

225 
USBx_DEVICE
->
DAINT
 = 0xFFFFFFFF;

226 
USBx_DEVICE
->
DAINTMSK
 = 0;

228 
ödex
 = 0; index < 
cfg
.
dev_ídpoöts
; index++)

230 i‡((
	`USBx_INEP
(
ödex
)->
DIEPCTL
 & 
USB_OTG_DIEPCTL_EPENA
) == USB_OTG_DIEPCTL_EPENA)

232 
	`USBx_INEP
(
ödex
)->
DIEPCTL
 = (
USB_OTG_DIEPCTL_EPDIS
 | 
USB_OTG_DIEPCTL_SNAK
);

236 
	`USBx_INEP
(
ödex
)->
DIEPCTL
 = 0;

239 
	`USBx_INEP
(
ödex
)->
DIEPTSIZ
 = 0;

240 
	`USBx_INEP
(
ödex
)->
DIEPINT
 = 0xFF;

243 
ödex
 = 0; index < 
cfg
.
dev_ídpoöts
; index++)

245 i‡((
	`USBx_OUTEP
(
ödex
)->
DOEPCTL
 & 
USB_OTG_DOEPCTL_EPENA
) == USB_OTG_DOEPCTL_EPENA)

247 
	`USBx_OUTEP
(
ödex
)->
DOEPCTL
 = (
USB_OTG_DOEPCTL_EPDIS
 | 
USB_OTG_DOEPCTL_SNAK
);

251 
	`USBx_OUTEP
(
ödex
)->
DOEPCTL
 = 0;

254 
	`USBx_OUTEP
(
ödex
)->
DOEPTSIZ
 = 0;

255 
	`USBx_OUTEP
(
ödex
)->
DOEPINT
 = 0xFF;

258 
USBx_DEVICE
->
DIEPMSK
 &~(
USB_OTG_DIEPMSK_TXFURM
);

261 
USBx
->
GINTMSK
 = 0;

264 
USBx
->
GINTSTS
 = 0xBFFFFFFF;

267 
USBx
->
GINTMSK
 |
USB_OTG_GINTMSK_RXFLVLM
;

270 
USBx
->
GINTMSK
 |(
USB_OTG_GINTMSK_USBSUSPM
 | 
USB_OTG_GINTMSK_USBRST
 |\

271 
USB_OTG_GINTMSK_ENUMDNEM
 | 
USB_OTG_GINTMSK_IEPINT
 |\

272 
USB_OTG_GINTMSK_OEPINT
 | 
USB_OTG_GINTMSK_IISOIXFRM
|\

273 
USB_OTG_GINTMSK_PXFRM_IISOOXFRM
 | 
USB_OTG_GINTMSK_WUIM
);

275 if(
cfg
.
Sof_íabÀ
)

277 
USBx
->
GINTMSK
 |
USB_OTG_GINTMSK_SOFM
;

280 i‡(
cfg
.
vbus_£nsög_íabÀ
 =
ENABLE
)

282 
USBx
->
GINTMSK
 |(
USB_OTG_GINTMSK_SRQIM
 | 
USB_OTG_GINTMSK_OTGINT
);

285  
HAL_OK
;

286 
	}
}

296 
HAL_SètusTy≥Def
 
	$USB_FlushTxFifo
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt32_t
 
num
 )

298 
uöt32_t
 
cou¡
 = 0;

300 
USBx
->
GRSTCTL
 = ( 
USB_OTG_GRSTCTL_TXFFLSH
 |(
uöt32_t
)–
num
 << 6));

304 i‡(++
cou¡
 > 200000)

306  
HAL_TIMEOUT
;

309 (
USBx
->
GRSTCTL
 & 
USB_OTG_GRSTCTL_TXFFLSH
) == USB_OTG_GRSTCTL_TXFFLSH);

311  
HAL_OK
;

312 
	}
}

319 
HAL_SètusTy≥Def
 
	$USB_FlushRxFifo
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

321 
uöt32_t
 
cou¡
 = 0;

323 
USBx
->
GRSTCTL
 = 
USB_OTG_GRSTCTL_RXFFLSH
;

327 i‡(++
cou¡
 > 200000)

329  
HAL_TIMEOUT
;

332 (
USBx
->
GRSTCTL
 & 
USB_OTG_GRSTCTL_RXFFLSH
) == USB_OTG_GRSTCTL_RXFFLSH);

334  
HAL_OK
;

335 
	}
}

347 
HAL_SètusTy≥Def
 
	$USB_SëDevS≥ed
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
uöt8_t
 
•ìd
)

349 
USBx_DEVICE
->
DCFG
 |
•ìd
;

350  
HAL_OK
;

351 
	}
}

361 
uöt8_t
 
	$USB_GëDevS≥ed
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

363 
uöt8_t
 
•ìd
 = 0;

365 i‡(((
USBx_DEVICE
->
DSTS
 & 
USB_OTG_DSTS_ENUMSPD
Ë=
DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ
)||

366 ((
USBx_DEVICE
->
DSTS
 & 
USB_OTG_DSTS_ENUMSPD
Ë=
DSTS_ENUMSPD_FS_PHY_48MHZ
))

368 
•ìd
 = 
USB_OTG_SPEED_FULL
;

370 if((
USBx_DEVICE
->
DSTS
 & 
USB_OTG_DSTS_ENUMSPD
Ë=
DSTS_ENUMSPD_LS_PHY_6MHZ
)

372 
•ìd
 = 
USB_OTG_SPEED_LOW
;

375  
•ìd
;

376 
	}
}

384 
HAL_SètusTy≥Def
 
	$USB_A˘iv©eEndpoöt
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_EPTy≥Def
 *
ï
)

386 i‡(
ï
->
is_ö
)

389 
ï
->
tx_fifo_num
 =Ép->
num
;

392 i‡(
ï
->
ty≥
 =
EP_TYPE_BULK
 )

394 
ï
->
d©a_pid_°¨t
 = 0;

397 i‡(
ï
->
is_ö
 == 1)

399 
USBx_DEVICE
->
DAINTMSK
 |
USB_OTG_DAINTMSK_IEPM
 & ((1 << (
ï
->
num
)));

401 i‡(((
	`USBx_INEP
(
ï
->
num
)->
DIEPCTL
Ë& 
USB_OTG_DIEPCTL_USBAEP
) == 0)

403 
	`USBx_INEP
(
ï
->
num
)->
DIEPCTL
 |(”p->
max∑ckë
 & 
USB_OTG_DIEPCTL_MPSIZ
 ) | (ï->
ty≥
 << 18 ) |\

404 ((
ï
->
num
Ë<< 22 ) | (
USB_OTG_DIEPCTL_SD0PID_SEVNFRM
Ë| (
USB_OTG_DIEPCTL_USBAEP
));

409 
USBx_DEVICE
->
DAINTMSK
 |
USB_OTG_DAINTMSK_OEPM
 & ((1 << (
ï
->
num
)) << 16);

411 i‡(((
	`USBx_OUTEP
(
ï
->
num
)->
DOEPCTL
Ë& 
USB_OTG_DOEPCTL_USBAEP
) == 0)

413 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPCTL
 |(”p->
max∑ckë
 & 
USB_OTG_DOEPCTL_MPSIZ
 ) | (ï->
ty≥
 << 18 ) |\

414 (
USB_OTG_DIEPCTL_SD0PID_SEVNFRM
)| (
USB_OTG_DOEPCTL_USBAEP
));

418  
HAL_OK
;

419 
	}
}

427 
HAL_SètusTy≥Def
 
	$USB_Dó˘iv©eEndpoöt
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_EPTy≥Def
 *
ï
)

430 i‡(
ï
->
is_ö
 == 1)

432 
USBx_DEVICE
->
DEACHMSK
 &~(
USB_OTG_DAINTMSK_IEPM
 & ((1 << (
ï
->
num
))));

433 
USBx_DEVICE
->
DAINTMSK
 &~(
USB_OTG_DAINTMSK_IEPM
 & ((1 << (
ï
->
num
))));

434 
	`USBx_INEP
(
ï
->
num
)->
DIEPCTL
 &~ 
USB_OTG_DIEPCTL_USBAEP
;

438 
USBx_DEVICE
->
DEACHMSK
 &~(
USB_OTG_DAINTMSK_OEPM
 & ((1 << (
ï
->
num
)) << 16));

439 
USBx_DEVICE
->
DAINTMSK
 &~(
USB_OTG_DAINTMSK_OEPM
 & ((1 << (
ï
->
num
)) << 16));

440 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPCTL
 &~
USB_OTG_DOEPCTL_USBAEP
;

442  
HAL_OK
;

443 
	}
}

451 
HAL_SètusTy≥Def
 
	$USB_EPSèπX„r
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
USB_OTG_EPTy≥Def
 *
ï
)

453 
uöt16_t
 
pkt˙t
 = 0;

456 i‡(
ï
->
is_ö
 == 1)

459 i‡(
ï
->
x„r_Àn
 == 0)

461 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 &~(
USB_OTG_DIEPTSIZ_PKTCNT
);

462 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 |(
USB_OTG_DIEPTSIZ_PKTCNT
 & (1 << 19)) ;

463 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 &~(
USB_OTG_DIEPTSIZ_XFRSIZ
);

472 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 &~(
USB_OTG_DIEPTSIZ_XFRSIZ
);

473 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 &~(
USB_OTG_DIEPTSIZ_PKTCNT
);

474 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 |(
USB_OTG_DIEPTSIZ_PKTCNT
 & ((”p->
x„r_Àn
 +Ép->
max∑ckë
 -1)/Ép->maxpacket) << 19)) ;

475 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 |(
USB_OTG_DIEPTSIZ_XFRSIZ
 &Ép->
x„r_Àn
);

477 i‡(
ï
->
ty≥
 =
EP_TYPE_ISOC
)

479 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 &~(
USB_OTG_DIEPTSIZ_MULCNT
);

480 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 |(
USB_OTG_DIEPTSIZ_MULCNT
 & (1 << 29));

484 i‡(
ï
->
ty≥
 !
EP_TYPE_ISOC
)

487 i‡(
ï
->
x„r_Àn
 > 0)

489 
USBx_DEVICE
->
DIEPEMPMSK
 |1 << 
ï
->
num
;

493 i‡(
ï
->
ty≥
 =
EP_TYPE_ISOC
)

495 i‡((
USBx_DEVICE
->
DSTS
 & ( 1 << 8 )) == 0)

497 
	`USBx_INEP
(
ï
->
num
)->
DIEPCTL
 |
USB_OTG_DIEPCTL_SODDFRM
;

501 
	`USBx_INEP
(
ï
->
num
)->
DIEPCTL
 |
USB_OTG_DIEPCTL_SD0PID_SEVNFRM
;

506 
	`USBx_INEP
(
ï
->
num
)->
DIEPCTL
 |(
USB_OTG_DIEPCTL_CNAK
 | 
USB_OTG_DIEPCTL_EPENA
);

508 i‡(
ï
->
ty≥
 =
EP_TYPE_ISOC
)

510 
	`USB_WrôePackë
(
USBx
, 
ï
->
x„r_buff
,Ép->
num
,Ép->
x„r_Àn
);

519 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPTSIZ
 &~(
USB_OTG_DOEPTSIZ_XFRSIZ
);

520 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPTSIZ
 &~(
USB_OTG_DOEPTSIZ_PKTCNT
);

522 i‡(
ï
->
x„r_Àn
 == 0)

524 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPTSIZ
 |(
USB_OTG_DOEPTSIZ_XFRSIZ
 &Ép->
max∑ckë
);

525 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPTSIZ
 |(
USB_OTG_DOEPTSIZ_PKTCNT
 & (1 << 19));

529 
pkt˙t
 = (
ï
->
x„r_Àn
 +Ép->
max∑ckë
 -1)/Ép->maxpacket;

530 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPTSIZ
 |(
USB_OTG_DOEPTSIZ_PKTCNT
 & (
pkt˙t
 << 19));

531 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPTSIZ
 |(
USB_OTG_DOEPTSIZ_XFRSIZ
 & (ï->
max∑ckë
 * 
pkt˙t
));

534 i‡(
ï
->
ty≥
 =
EP_TYPE_ISOC
)

536 i‡((
USBx_DEVICE
->
DSTS
 & ( 1 << 8 )) == 0)

538 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPCTL
 |
USB_OTG_DOEPCTL_SODDFRM
;

542 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPCTL
 |
USB_OTG_DOEPCTL_SD0PID_SEVNFRM
;

546 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPCTL
 |(
USB_OTG_DOEPCTL_CNAK
 | 
USB_OTG_DOEPCTL_EPENA
);

549  
HAL_OK
;

550 
	}
}

558 
HAL_SètusTy≥Def
 
	$USB_EP0SèπX„r
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
USB_OTG_EPTy≥Def
 *
ï
)

561 i‡(
ï
->
is_ö
 == 1)

564 i‡(
ï
->
x„r_Àn
 == 0)

566 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 &~(
USB_OTG_DIEPTSIZ_PKTCNT
);

567 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 |(
USB_OTG_DIEPTSIZ_PKTCNT
 & (1 << 19));

568 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 &~(
USB_OTG_DIEPTSIZ_XFRSIZ
);

577 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 &~(
USB_OTG_DIEPTSIZ_XFRSIZ
);

578 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 &~(
USB_OTG_DIEPTSIZ_PKTCNT
);

580 if(
ï
->
x„r_Àn
 >Ép->
max∑ckë
)

582 
ï
->
x„r_Àn
 =Ép->
max∑ckë
;

584 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 |(
USB_OTG_DIEPTSIZ_PKTCNT
 & (1 << 19));

585 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 |(
USB_OTG_DIEPTSIZ_XFRSIZ
 &Ép->
x„r_Àn
);

589 i‡(
ï
->
x„r_Àn
 > 0)

591 
USBx_DEVICE
->
DIEPEMPMSK
 |1 << (
ï
->
num
);

595 
	`USBx_INEP
(
ï
->
num
)->
DIEPCTL
 |(
USB_OTG_DIEPCTL_CNAK
 | 
USB_OTG_DIEPCTL_EPENA
);

603 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPTSIZ
 &~(
USB_OTG_DOEPTSIZ_XFRSIZ
);

604 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPTSIZ
 &~(
USB_OTG_DOEPTSIZ_PKTCNT
);

606 i‡(
ï
->
x„r_Àn
 > 0)

608 
ï
->
x„r_Àn
 =Ép->
max∑ckë
;

611 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPTSIZ
 |(
USB_OTG_DOEPTSIZ_PKTCNT
 & (1 << 19));

612 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPTSIZ
 |(
USB_OTG_DOEPTSIZ_XFRSIZ
 & (ï->
max∑ckë
));

615 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPCTL
 |(
USB_OTG_DOEPCTL_CNAK
 | 
USB_OTG_DOEPCTL_EPENA
);

618  
HAL_OK
;

619 
	}
}

630 
HAL_SètusTy≥Def
 
	$USB_WrôePackë
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 *
§c
, uöt8_à
ch_ï_num
, 
uöt16_t
 
Àn
)

632 
uöt32_t
 
cou¡32b
 = 0 , 
ödex
 = 0;

634 
cou¡32b
 = (
Àn
 + 3) / 4;

635 
ödex
 = 0; index < 
cou¡32b
; index++, 
§c
 += 4)

637 
	`USBx_DFIFO
(
ch_ï_num
Ë*((
__∑cked
 
uöt32_t
 *)
§c
);

639  
HAL_OK
;

640 
	}
}

650 *
	$USB_RódPackë
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 *
de°
, 
uöt16_t
 
Àn
)

652 
uöt32_t
 
ödex
 = 0;

653 
uöt32_t
 
cou¡32b
 = (
Àn
 + 3) / 4;

655  
ödex
 = 0; index < 
cou¡32b
; index++, 
de°
 += 4 )

657 *(
__∑cked
 
uöt32_t
 *)
de°
 = 
	`USBx_DFIFO
(0);

660  ((*)
de°
);

661 
	}
}

669 
HAL_SètusTy≥Def
 
	$USB_EPSëSèŒ
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
USB_OTG_EPTy≥Def
 *
ï
)

671 i‡(
ï
->
is_ö
 == 1)

673 i‡(((
	`USBx_INEP
(
ï
->
num
)->
DIEPCTL
Ë& 
USB_OTG_DIEPCTL_EPENA
) == 0)

675 
	`USBx_INEP
(
ï
->
num
)->
DIEPCTL
 &~(
USB_OTG_DIEPCTL_EPDIS
);

677 
	`USBx_INEP
(
ï
->
num
)->
DIEPCTL
 |
USB_OTG_DIEPCTL_STALL
;

681 i‡(((
	`USBx_OUTEP
(
ï
->
num
)->
DOEPCTL
Ë& 
USB_OTG_DOEPCTL_EPENA
) == 0)

683 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPCTL
 &~(
USB_OTG_DOEPCTL_EPDIS
);

685 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPCTL
 |
USB_OTG_DOEPCTL_STALL
;

687  
HAL_OK
;

688 
	}
}

696 
HAL_SètusTy≥Def
 
	$USB_EPCÀ¨SèŒ
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_EPTy≥Def
 *
ï
)

698 i‡(
ï
->
is_ö
 == 1)

700 
	`USBx_INEP
(
ï
->
num
)->
DIEPCTL
 &~
USB_OTG_DIEPCTL_STALL
;

701 i‡(
ï
->
ty≥
 =
EP_TYPE_INTR
 ||Ép->ty≥ =
EP_TYPE_BULK
)

703 
	`USBx_INEP
(
ï
->
num
)->
DIEPCTL
 |
USB_OTG_DIEPCTL_SD0PID_SEVNFRM
;

708 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPCTL
 &~
USB_OTG_DOEPCTL_STALL
;

709 i‡(
ï
->
ty≥
 =
EP_TYPE_INTR
 ||Ép->ty≥ =
EP_TYPE_BULK
)

711 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPCTL
 |
USB_OTG_DOEPCTL_SD0PID_SEVNFRM
;

714  
HAL_OK
;

715 
	}
}

722 
HAL_SètusTy≥Def
 
	$USB_St›Devi˚
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

724 
uöt32_t
 
ödex
 = 0;

727 
ödex
 = 0; index < 15 ; index++)

729 
	`USBx_INEP
(
ödex
)->
DIEPINT
 = 0xFF;

730 
	`USBx_OUTEP
(
ödex
)->
DOEPINT
 = 0xFF;

732 
USBx_DEVICE
->
DAINT
 = 0xFFFFFFFF;

735 
USBx_DEVICE
->
DIEPMSK
 = 0;

736 
USBx_DEVICE
->
DOEPMSK
 = 0;

737 
USBx_DEVICE
->
DAINTMSK
 = 0;

740 
	`USB_FlushRxFifo
(
USBx
);

741 
	`USB_FlushTxFifo
(
USBx
 , 0x10 );

743  
HAL_OK
;

744 
	}
}

753 
HAL_SètusTy≥Def
 
	$USB_SëDevAddªss
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 
addªss
)

755 
USBx_DEVICE
->
DCFG
 &~ (
USB_OTG_DCFG_DAD
);

756 
USBx_DEVICE
->
DCFG
 |(
addªss
 << 4Ë& 
USB_OTG_DCFG_DAD
;

758  
HAL_OK
;

759 
	}
}

766 
HAL_SètusTy≥Def
 
	$USB_DevC⁄√˘
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
)

768 
USBx_DEVICE
->
DCTL
 &~
USB_OTG_DCTL_SDIS
 ;

769 
	`HAL_Dñay
(3);

771  
HAL_OK
;

772 
	}
}

779 
HAL_SètusTy≥Def
 
	$USB_DevDisc⁄√˘
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
)

781 
USBx_DEVICE
->
DCTL
 |
USB_OTG_DCTL_SDIS
;

782 
	`HAL_Dñay
(3);

784  
HAL_OK
;

785 
	}
}

792 
uöt32_t
 
	$USB_RódI¡îru±s
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
)

794 
uöt32_t
 
tm¥eg
 = 0;

796 
tm¥eg
 = 
USBx
->
GINTSTS
;

797 
tm¥eg
 &
USBx
->
GINTMSK
;

798  
tm¥eg
;

799 
	}
}

806 
uöt32_t
 
	$USB_RódDevAŒOutEpI¡îru±
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
)

808 
uöt32_t
 
tm¥eg
 = 0;

809 
tm¥eg
 = 
USBx_DEVICE
->
DAINT
;

810 
tm¥eg
 &
USBx_DEVICE
->
DAINTMSK
;

811  ((
tm¥eg
 & 0xffff0000) >> 16);

812 
	}
}

819 
uöt32_t
 
	$USB_RódDevAŒInEpI¡îru±
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
)

821 
uöt32_t
 
tm¥eg
 = 0;

822 
tm¥eg
 = 
USBx_DEVICE
->
DAINT
;

823 
tm¥eg
 &
USBx_DEVICE
->
DAINTMSK
;

824  ((
tm¥eg
 & 0xFFFF));

825 
	}
}

834 
uöt32_t
 
	$USB_RódDevOutEPI¡îru±
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
uöt8_t
 
ïnum
)

836 
uöt32_t
 
tm¥eg
 = 0;

837 
tm¥eg
 = 
	`USBx_OUTEP
(
ïnum
)->
DOEPINT
;

838 
tm¥eg
 &
USBx_DEVICE
->
DOEPMSK
;

839  
tm¥eg
;

840 
	}
}

849 
uöt32_t
 
	$USB_RódDevInEPI¡îru±
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
uöt8_t
 
ïnum
)

851 
uöt32_t
 
tm¥eg
 = 0, 
msk
 = 0, 
emp
 = 0;

853 
msk
 = 
USBx_DEVICE
->
DIEPMSK
;

854 
emp
 = 
USBx_DEVICE
->
DIEPEMPMSK
;

855 
msk
 |((
emp
 >> 
ïnum
) & 0x1) << 7;

856 
tm¥eg
 = 
	`USBx_INEP
(
ïnum
)->
DIEPINT
 & 
msk
;

857  
tm¥eg
;

858 
	}
}

866 
	$USB_CÀ¨I¡îru±s
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt32_t
 
öãºu±
)

868 
USBx
->
GINTSTS
 |
öãºu±
;

869 
	}
}

879 
uöt32_t
 
	$USB_GëMode
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

881  ((
USBx
->
GINTSTS
 ) & 0x1);

882 
	}
}

889 
HAL_SètusTy≥Def
 
	$USB_A˘iv©eSëup
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
)

892 
	`USBx_INEP
(0)->
DIEPCTL
 &~
USB_OTG_DIEPCTL_MPSIZ
;

894 if((
USBx_DEVICE
->
DSTS
 & 
USB_OTG_DSTS_ENUMSPD
Ë=
DSTS_ENUMSPD_LS_PHY_6MHZ
)

896 
	`USBx_INEP
(0)->
DIEPCTL
 |= 3;

898 
USBx_DEVICE
->
DCTL
 |
USB_OTG_DCTL_CGINAK
;

900  
HAL_OK
;

901 
	}
}

909 
HAL_SètusTy≥Def
 
	$USB_EP0_OutSèπ
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 *
p£tup
)

911 
	`USBx_OUTEP
(0)->
DOEPTSIZ
 = 0;

912 
	`USBx_OUTEP
(0)->
DOEPTSIZ
 |(
USB_OTG_DOEPTSIZ_PKTCNT
 & (1 << 19));

913 
	`USBx_OUTEP
(0)->
DOEPTSIZ
 |= (3 * 8);

914 
	`USBx_OUTEP
(0)->
DOEPTSIZ
 |
USB_OTG_DOEPTSIZ_STUPCNT
;

916  
HAL_OK
;

917 
	}
}

927 
HAL_SètusTy≥Def
 
	$USB_Ho°Inô
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_CfgTy≥Def
 
cfg
)

929 
uöt32_t
 
ödex
 = 0;

932 
USBx_PCGCCTL
 = 0;

935 
USBx
->
GCCFG
 &=~ (
USB_OTG_GCCFG_VBUSASEN
);

936 
USBx
->
GCCFG
 &=~ (
USB_OTG_GCCFG_VBUSBSEN
);

939 if((
cfg
.
•ìd
 =
USB_OTG_SPEED_FULL
)&&

940 (
USBx
 !
USB_OTG_FS
))

942 
USBx_HOST
->
HCFG
 |
USB_OTG_HCFG_FSLSS
;

946 
USBx_HOST
->
HCFG
 &~(
USB_OTG_HCFG_FSLSS
);

950 
	`USB_FlushTxFifo
(
USBx
, 0x10 );

951 
	`USB_FlushRxFifo
(
USBx
);

954 
ödex
 = 0; index < 
cfg
.
Ho°_ch™√ls
; index++)

956 
	`USBx_HC
(
ödex
)->
HCINT
 = 0xFFFFFFFF;

957 
	`USBx_HC
(
ödex
)->
HCINTMSK
 = 0;

961 
	`USB_DriveVbus
(
USBx
, 1);

963 
	`HAL_Dñay
(200);

966 
USBx
->
GINTMSK
 = 0;

969 
USBx
->
GINTSTS
 = 0xFFFFFFFF;

971 if(
USBx
 =
USB_OTG_FS
)

974 
USBx
->
GRXFSIZ
 = (
uöt32_t
 )0x80;

975 
USBx
->
DIEPTXF0_HNPTXFSIZ
 = (
uöt32_t
 )(((0x60 << 16)& 
USB_OTG_NPTXFD
) | 0x80);

976 
USBx
->
HPTXFSIZ
 = (
uöt32_t
 )(((0x40 << 16)& 
USB_OTG_HPTXFSIZ_PTXFD
) | 0xE0);

980 
USBx
->
GINTMSK
 |
USB_OTG_GINTMSK_RXFLVLM
;

983 
USBx
->
GINTMSK
 |(
USB_OTG_GINTMSK_PRTIM
 | 
USB_OTG_GINTMSK_HCIM
 |\

984 
USB_OTG_GINTMSK_SOFM
 |
USB_OTG_GINTSTS_DISCINT
|\

985 
USB_OTG_GINTMSK_PXFRM_IISOOXFRM
 | 
USB_OTG_GINTMSK_WUIM
);

987  
HAL_OK
;

988 
	}
}

1000 
HAL_SètusTy≥Def
 
	$USB_InôFSLSPClkSñ
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
uöt8_t
 
‰eq
)

1002 
USBx_HOST
->
HCFG
 &~(
USB_OTG_HCFG_FSLSPCS
);

1003 
USBx_HOST
->
HCFG
 |(
‰eq
 & 
USB_OTG_HCFG_FSLSPCS
);

1005 i‡(
‰eq
 =
HCFG_48_MHZ
)

1007 
USBx_HOST
->
HFIR
 = (
uöt32_t
)48000;

1009 i‡(
‰eq
 =
HCFG_6_MHZ
)

1011 
USBx_HOST
->
HFIR
 = (
uöt32_t
)6000;

1013  
HAL_OK
;

1014 
	}
}

1023 
HAL_SètusTy≥Def
 
	$USB_Re£tP‹t
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

1025 
__IO
 
uöt32_t
 
h¥t0
 = 0;

1027 
h¥t0
 = 
USBx_HPRT0
;

1029 
h¥t0
 &~(
USB_OTG_HPRT_PENA
 | 
USB_OTG_HPRT_PCDET
 |\

1030 
USB_OTG_HPRT_PENCHNG
 | 
USB_OTG_HPRT_POCCHNG
 );

1032 
USBx_HPRT0
 = (
USB_OTG_HPRT_PRST
 | 
h¥t0
);

1033 
	`HAL_Dñay
 (10);

1034 
USBx_HPRT0
 = ((~
USB_OTG_HPRT_PRST
Ë& 
h¥t0
);

1035  
HAL_OK
;

1036 
	}
}

1046 
HAL_SètusTy≥Def
 
	$USB_DriveVbus
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 
°©e
)

1048 
__IO
 
uöt32_t
 
h¥t0
 = 0;

1050 
h¥t0
 = 
USBx_HPRT0
;

1051 
h¥t0
 &~(
USB_OTG_HPRT_PENA
 | 
USB_OTG_HPRT_PCDET
 |\

1052 
USB_OTG_HPRT_PENCHNG
 | 
USB_OTG_HPRT_POCCHNG
 );

1054 i‡(((
h¥t0
 & 
USB_OTG_HPRT_PPWR
Ë=0 ) && (
°©e
 == 1 ))

1056 
USBx_HPRT0
 = (
USB_OTG_HPRT_PPWR
 | 
h¥t0
);

1058 i‡(((
h¥t0
 & 
USB_OTG_HPRT_PPWR
Ë=USB_OTG_HPRT_PPWRË&& (
°©e
 == 0 ))

1060 
USBx_HPRT0
 = ((~
USB_OTG_HPRT_PPWR
Ë& 
h¥t0
);

1062  
HAL_OK
;

1063 
	}
}

1073 
uöt32_t
 
	$USB_GëHo°S≥ed
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
)

1075 
__IO
 
uöt32_t
 
h¥t0
 = 0;

1077 
h¥t0
 = 
USBx_HPRT0
;

1078  ((
h¥t0
 & 
USB_OTG_HPRT_PSPD
) >> 17);

1079 
	}
}

1086 
uöt32_t
 
	$USB_GëCuºítFøme
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
)

1088  (
USBx_HOST
->
HFNUM
 & 
USB_OTG_HFNUM_FRNUM
);

1089 
	}
}

1114 
HAL_SètusTy≥Def
 
	$USB_HC_Inô
(
USB_OTG_GlobÆTy≥Def
 *
USBx
,

1115 
uöt8_t
 
ch_num
,

1116 
uöt8_t
 
ïnum
,

1117 
uöt8_t
 
dev_addªss
,

1118 
uöt8_t
 
•ìd
,

1119 
uöt8_t
 
ï_ty≥
,

1120 
uöt16_t
 
mps
)

1123 
	`USBx_HC
(
ch_num
)->
HCINT
 = 0xFFFFFFFF;

1126 
ï_ty≥
)

1128 
EP_TYPE_CTRL
:

1129 
EP_TYPE_BULK
:

1130 
	`USBx_HC
(
ch_num
)->
HCINTMSK
 = 
USB_OTG_HCINTMSK_XFRCM
 |\

1131 
USB_OTG_HCINTMSK_STALLM
 |\

1132 
USB_OTG_HCINTMSK_TXERRM
 |\

1133 
USB_OTG_HCINTMSK_DTERRM
 |\

1134 
USB_OTG_HCINTMSK_AHBERR
 |\

1135 
USB_OTG_HCINTMSK_NAKM
 ;

1137 i‡(
ïnum
 & 0x80)

1139 
	`USBx_HC
(
ch_num
)->
HCINTMSK
 |
USB_OTG_HCINTMSK_BBERRM
;

1143 
EP_TYPE_INTR
:

1144 
	`USBx_HC
(
ch_num
)->
HCINTMSK
 = 
USB_OTG_HCINTMSK_XFRCM
 |\

1145 
USB_OTG_HCINTMSK_STALLM
 |\

1146 
USB_OTG_HCINTMSK_TXERRM
 |\

1147 
USB_OTG_HCINTMSK_DTERRM
 |\

1148 
USB_OTG_HCINTMSK_NAKM
 |\

1149 
USB_OTG_HCINTMSK_AHBERR
 |\

1150 
USB_OTG_HCINTMSK_FRMORM
 ;

1152 i‡(
ïnum
 & 0x80)

1154 
	`USBx_HC
(
ch_num
)->
HCINTMSK
 |
USB_OTG_HCINTMSK_BBERRM
;

1159 
EP_TYPE_ISOC
:

1160 
	`USBx_HC
(
ch_num
)->
HCINTMSK
 = 
USB_OTG_HCINTMSK_XFRCM
 |\

1161 
USB_OTG_HCINTMSK_ACKM
 |\

1162 
USB_OTG_HCINTMSK_AHBERR
 |\

1163 
USB_OTG_HCINTMSK_FRMORM
 ;

1165 i‡(
ïnum
 & 0x80)

1167 
	`USBx_HC
(
ch_num
)->
HCINTMSK
 |(
USB_OTG_HCINTMSK_TXERRM
 | 
USB_OTG_HCINTMSK_BBERRM
);

1173 
USBx_HOST
->
HAINTMSK
 |(1 << 
ch_num
);

1176 
USBx
->
GINTMSK
 |
USB_OTG_GINTMSK_HCIM
;

1179 
	`USBx_HC
(
ch_num
)->
HCCHAR
 = (((
dev_addªss
 << 22Ë& 
USB_OTG_HCCHAR_DAD
) |\

1180 (((
ïnum
 & 0x7F)<< 11Ë& 
USB_OTG_HCCHAR_EPNUM
)|\

1181 ((((
ïnum
 & 0x80Ë=0x80)<< 15Ë& 
USB_OTG_HCCHAR_EPDIR
)|\

1182 (((
•ìd
 =
HPRT0_PRTSPD_LOW_SPEED
)<< 17Ë& 
USB_OTG_HCCHAR_LSDEV
)|\

1183 ((
ï_ty≥
 << 18Ë& 
USB_OTG_HCCHAR_EPTYP
)|\

1184 (
mps
 & 
USB_OTG_HCCHAR_MPSIZ
));

1186 i‡(
ï_ty≥
 =
EP_TYPE_INTR
)

1188 
	`USBx_HC
(
ch_num
)->
HCCHAR
 |
USB_OTG_HCCHAR_ODDFRM
 ;

1191  
HAL_OK
;

1192 
	}
}

1200 #i‡
deföed
 (
__CC_ARM
)

1201 #¥agm®
O0


1202 #ñi‡
deföed
 (
__GNUC__
)

1203 #¥agm®
GCC
 
›timize
 ("O0")

1205 
HAL_SètusTy≥Def
 
	$USB_HC_SèπX„r
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_HCTy≥Def
 *
hc
)

1207 
uöt8_t
 
is_odd‰ame
 = 0;

1208 
uöt16_t
 
Àn_w‹ds
 = 0;

1209 
uöt16_t
 
num_∑ckës
 = 0;

1210 
uöt16_t
 
max_hc_pkt_cou¡
 = 256;

1211 
uöt32_t
 
tm¥eg
 = 0;

1214 i‡(
hc
->
x„r_Àn
 > 0)

1216 
num_∑ckës
 = (
hc
->
x„r_Àn
 + hc->
max_∑ckë
 - 1) / hc->max_packet;

1218 i‡(
num_∑ckës
 > 
max_hc_pkt_cou¡
)

1220 
num_∑ckës
 = 
max_hc_pkt_cou¡
;

1221 
hc
->
x„r_Àn
 = 
num_∑ckës
 * hc->
max_∑ckë
;

1226 
num_∑ckës
 = 1;

1228 i‡(
hc
->
ï_is_ö
)

1230 
hc
->
x„r_Àn
 = 
num_∑ckës
 * hc->
max_∑ckë
;

1234 
	`USBx_HC
(
hc
->
ch_num
)->
HCTSIZ
 = (((hc->
x„r_Àn
Ë& 
USB_OTG_HCTSIZ_XFRSIZ
)) |\

1235 ((
num_∑ckës
 << 19Ë& 
USB_OTG_HCTSIZ_PKTCNT
) |\

1236 (((
hc
->
d©a_pid
Ë<< 29Ë& 
USB_OTG_HCTSIZ_DPID
);

1238 
is_odd‰ame
 = (
USBx_HOST
->
HFNUM
 & 0x01) ? 0 : 1;

1239 
	`USBx_HC
(
hc
->
ch_num
)->
HCCHAR
 &~
USB_OTG_HCCHAR_ODDFRM
;

1240 
	`USBx_HC
(
hc
->
ch_num
)->
HCCHAR
 |(
is_odd‰ame
 << 29);

1243 
tm¥eg
 = 
	`USBx_HC
(
hc
->
ch_num
)->
HCCHAR
;

1244 
tm¥eg
 &~
USB_OTG_HCCHAR_CHDIS
;

1245 
tm¥eg
 |
USB_OTG_HCCHAR_CHENA
;

1246 
	`USBx_HC
(
hc
->
ch_num
)->
HCCHAR
 = 
tm¥eg
;

1248 if((
hc
->
ï_is_ö
 =0Ë&& (hc->
x„r_Àn
 > 0))

1250 
hc
->
ï_ty≥
)

1253 
EP_TYPE_CTRL
:

1254 
EP_TYPE_BULK
:

1255 
Àn_w‹ds
 = (
hc
->
x„r_Àn
 + 3) / 4;

1258 if(
Àn_w‹ds
 > (
USBx
->
HNPTXSTS
 & 0xFFFF))

1261 
USBx
->
GINTMSK
 |
USB_OTG_GINTMSK_NPTXFEM
;

1266 
EP_TYPE_INTR
:

1267 
EP_TYPE_ISOC
:

1268 
Àn_w‹ds
 = (
hc
->
x„r_Àn
 + 3) / 4;

1270 if(
Àn_w‹ds
 > (
USBx_HOST
->
HPTXSTS
 & 0xFFFF))

1273 
USBx
->
GINTMSK
 |
USB_OTG_GINTMSK_PTXFEM
;

1282 
	`USB_WrôePackë
(
USBx
, 
hc
->
x„r_buff
, hc->
ch_num
, hc->
x„r_Àn
);

1285  
HAL_OK
;

1286 
	}
}

1293 
uöt32_t
 
	$USB_HC_RódI¡îru±
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
)

1295  ((
USBx_HOST
->
HAINT
) & 0xFFFF);

1296 
	}
}

1305 
HAL_SètusTy≥Def
 
	$USB_HC_HÆt
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
uöt8_t
 
hc_num
)

1307 
uöt32_t
 
cou¡
 = 0;

1310 i‡(((
	`USBx_HC
(
hc_num
)->
HCCHAR
Ë& (
HCCHAR_CTRL
 << 18)Ë|| ((USBx_HC(hc_num)->HCCHARË& (
HCCHAR_BULK
 << 18)))

1312 
	`USBx_HC
(
hc_num
)->
HCCHAR
 |
USB_OTG_HCCHAR_CHDIS
;

1314 i‡((
USBx
->
HNPTXSTS
 & 0xFFFF) == 0)

1316 
	`USBx_HC
(
hc_num
)->
HCCHAR
 &~
USB_OTG_HCCHAR_CHENA
;

1317 
	`USBx_HC
(
hc_num
)->
HCCHAR
 |
USB_OTG_HCCHAR_CHENA
;

1318 
	`USBx_HC
(
hc_num
)->
HCCHAR
 &~
USB_OTG_HCCHAR_EPDIR
;

1321 i‡(++
cou¡
 > 1000)

1326 (
	`USBx_HC
(
hc_num
)->
HCCHAR
 & 
USB_OTG_HCCHAR_CHENA
) == USB_OTG_HCCHAR_CHENA);

1330 
	`USBx_HC
(
hc_num
)->
HCCHAR
 |
USB_OTG_HCCHAR_CHENA
;

1335 
	`USBx_HC
(
hc_num
)->
HCCHAR
 |
USB_OTG_HCCHAR_CHDIS
;

1337 i‡((
USBx_HOST
->
HPTXSTS
 & 0xFFFF) == 0)

1339 
	`USBx_HC
(
hc_num
)->
HCCHAR
 &~
USB_OTG_HCCHAR_CHENA
;

1340 
	`USBx_HC
(
hc_num
)->
HCCHAR
 |
USB_OTG_HCCHAR_CHENA
;

1341 
	`USBx_HC
(
hc_num
)->
HCCHAR
 &~
USB_OTG_HCCHAR_EPDIR
;

1344 i‡(++
cou¡
 > 1000)

1349 (
	`USBx_HC
(
hc_num
)->
HCCHAR
 & 
USB_OTG_HCCHAR_CHENA
) == USB_OTG_HCCHAR_CHENA);

1353 
	`USBx_HC
(
hc_num
)->
HCCHAR
 |
USB_OTG_HCCHAR_CHENA
;

1357  
HAL_OK
;

1358 
	}
}

1367 
HAL_SètusTy≥Def
 
	$USB_DoPög
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
uöt8_t
 
ch_num
)

1369 
uöt8_t
 
num_∑ckës
 = 1;

1370 
uöt32_t
 
tm¥eg
 = 0;

1372 
	`USBx_HC
(
ch_num
)->
HCTSIZ
 = ((
num_∑ckës
 << 19Ë& 
USB_OTG_HCTSIZ_PKTCNT
) |\

1373 
USB_OTG_HCTSIZ_DOPING
;

1376 
tm¥eg
 = 
	`USBx_HC
(
ch_num
)->
HCCHAR
;

1377 
tm¥eg
 &~
USB_OTG_HCCHAR_CHDIS
;

1378 
tm¥eg
 |
USB_OTG_HCCHAR_CHENA
;

1379 
	`USBx_HC
(
ch_num
)->
HCCHAR
 = 
tm¥eg
;

1381  
HAL_OK
;

1382 
	}
}

1389 
HAL_SètusTy≥Def
 
	$USB_St›Ho°
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

1391 
uöt8_t
 
ödex
;

1392 
uöt32_t
 
cou¡
 = 0;

1393 
uöt32_t
 
vÆue
 = 0;

1395 
	`USB_DißbÀGlobÆI¡
(
USBx
);

1398 
	`USB_FlushTxFifo
(
USBx
, 0x10);

1399 
	`USB_FlushRxFifo
(
USBx
);

1402 
ödex
 = 0; index <= 15; index++)

1404 
vÆue
 = 
	`USBx_HC
(
ödex
)->
HCCHAR
;

1405 
vÆue
 |
USB_OTG_HCCHAR_CHDIS
;

1406 
vÆue
 &~
USB_OTG_HCCHAR_CHENA
;

1407 
vÆue
 &~
USB_OTG_HCCHAR_EPDIR
;

1408 
	`USBx_HC
(
ödex
)->
HCCHAR
 = 
vÆue
;

1412 
ödex
 = 0; index <= 15; index++)

1414 
vÆue
 = 
	`USBx_HC
(
ödex
)->
HCCHAR
 ;

1415 
vÆue
 |
USB_OTG_HCCHAR_CHDIS
;

1416 
vÆue
 |
USB_OTG_HCCHAR_CHENA
;

1417 
vÆue
 &~
USB_OTG_HCCHAR_EPDIR
;

1418 
	`USBx_HC
(
ödex
)->
HCCHAR
 = 
vÆue
;

1422 i‡(++
cou¡
 > 1000)

1427 (
	`USBx_HC
(
ödex
)->
HCCHAR
 & 
USB_OTG_HCCHAR_CHENA
) == USB_OTG_HCCHAR_CHENA);

1431 
USBx_HOST
->
HAINT
 = 0xFFFFFFFF;

1432 
USBx
->
GINTSTS
 = 0xFFFFFFFF;

1433 
	`USB_E«bÀGlobÆI¡
(
USBx
);

1435  
HAL_OK
;

1436 
	}
}

1443 
HAL_SètusTy≥Def
 
	$USB_A˘iv©eRemŸeWakeup
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

1445 if((
USBx_DEVICE
->
DSTS
 & 
USB_OTG_DSTS_SUSPSTS
) == USB_OTG_DSTS_SUSPSTS)

1448 
USBx_DEVICE
->
DCTL
 |
USB_OTG_DCTL_RWUSIG
;

1450  
HAL_OK
;

1451 
	}
}

1458 
HAL_SètusTy≥Def
 
	$USB_DeA˘iv©eRemŸeWakeup
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

1461 
USBx_DEVICE
->
DCTL
 &~(
USB_OTG_DCTL_RWUSIG
);

1462  
HAL_OK
;

1463 
	}
}

1470 #i‡
deföed
 (
USB
)

1478 
HAL_SètusTy≥Def
 
	$USB_C‹eInô
(
USB_Ty≥Def
 *
USBx
, 
USB_CfgTy≥Def
 
cfg
)

1484  
HAL_OK
;

1485 
	}
}

1493 
HAL_SètusTy≥Def
 
	$USB_E«bÀGlobÆI¡
(
USB_Ty≥Def
 *
USBx
)

1495 
uöt32_t
 
wöãºu±mask
 = 0;

1498 
wöãºu±mask
 = 
USB_CNTR_CTRM
 | 
USB_CNTR_WKUPM
 | 
USB_CNTR_SUSPM
 | 
USB_CNTR_ERRM
 \

1499 | 
USB_CNTR_ESOFM
 | 
USB_CNTR_RESETM
;

1502 
USBx
->
CNTR
 |
wöãºu±mask
;

1504  
HAL_OK
;

1505 
	}
}

1513 
HAL_SètusTy≥Def
 
	$USB_DißbÀGlobÆI¡
(
USB_Ty≥Def
 *
USBx
)

1515 
uöt32_t
 
wöãºu±mask
 = 0;

1518 
wöãºu±mask
 = 
USB_CNTR_CTRM
 | 
USB_CNTR_WKUPM
 | 
USB_CNTR_SUSPM
 | 
USB_CNTR_ERRM
 \

1519 | 
USB_CNTR_ESOFM
 | 
USB_CNTR_RESETM
;

1522 
USBx
->
CNTR
 &~
wöãºu±mask
;

1524  
HAL_OK
;

1525 
	}
}

1535 
HAL_SètusTy≥Def
 
	$USB_SëCuºítMode
(
USB_Ty≥Def
 *
USBx
 , 
USB_ModeTy≥Def
 
mode
)

1541  
HAL_OK
;

1542 
	}
}

1552 
HAL_SètusTy≥Def
 
	$USB_DevInô
 (
USB_Ty≥Def
 *
USBx
, 
USB_CfgTy≥Def
 
cfg
)

1556 
USBx
->
CNTR
 = 
USB_CNTR_FRES
;

1559 
USBx
->
CNTR
 = 0;

1562 
USBx
->
ISTR
 = 0;

1565 
USBx
->
BTABLE
 = 
BTABLE_ADDRESS
;

1567  
HAL_OK
;

1568 
	}
}

1578 
HAL_SètusTy≥Def
 
	$USB_FlushTxFifo
 (
USB_Ty≥Def
 *
USBx
, 
uöt32_t
 
num
 )

1584  
HAL_OK
;

1585 
	}
}

1592 
HAL_SètusTy≥Def
 
	$USB_FlushRxFifo
(
USB_Ty≥Def
 *
USBx
)

1598  
HAL_OK
;

1599 
	}
}

1607 
HAL_SètusTy≥Def
 
	$USB_A˘iv©eEndpoöt
(
USB_Ty≥Def
 *
USBx
, 
USB_EPTy≥Def
 *
ï
)

1610 
ï
->
ty≥
)

1612 
EP_TYPE_CTRL
:

1613 
	`PCD_SET_EPTYPE
(
USBx
, 
ï
->
num
, 
USB_EP_CONTROL
);

1615 
EP_TYPE_BULK
:

1616 
	`PCD_SET_EPTYPE
(
USBx
, 
ï
->
num
, 
USB_EP_BULK
);

1618 
EP_TYPE_INTR
:

1619 
	`PCD_SET_EPTYPE
(
USBx
, 
ï
->
num
, 
USB_EP_INTERRUPT
);

1621 
EP_TYPE_ISOC
:

1622 
	`PCD_SET_EPTYPE
(
USBx
, 
ï
->
num
, 
USB_EP_ISOCHRONOUS
);

1628 
	`PCD_SET_EP_ADDRESS
(
USBx
, 
ï
->
num
,Ép->num);

1630 i‡(
ï
->
doubÀbuf„r
 == 0)

1632 i‡(
ï
->
is_ö
)

1635 
	`PCD_SET_EP_TX_ADDRESS
(
USBx
, 
ï
->
num
,Ép->
pmØdªss
);

1636 
	`PCD_CLEAR_TX_DTOG
(
USBx
, 
ï
->
num
);

1638 
	`PCD_SET_EP_TX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_TX_NAK
);

1643 
	`PCD_SET_EP_RX_ADDRESS
(
USBx
, 
ï
->
num
,Ép->
pmØdªss
);

1645 
	`PCD_SET_EP_RX_CNT
(
USBx
, 
ï
->
num
,Ép->
max∑ckë
);

1646 
	`PCD_CLEAR_RX_DTOG
(
USBx
, 
ï
->
num
);

1648 
	`PCD_SET_EP_RX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_RX_VALID
);

1655 
	`PCD_SET_EP_DBUF
(
USBx
, 
ï
->
num
);

1657 
	`PCD_SET_EP_DBUF_ADDR
(
USBx
, 
ï
->
num
,ï->
pmØddr0
,Ép->
pmØddr1
);

1659 i‡(
ï
->
is_ö
==0)

1662 
	`PCD_CLEAR_RX_DTOG
(
USBx
, 
ï
->
num
);

1663 
	`PCD_CLEAR_TX_DTOG
(
USBx
, 
ï
->
num
);

1666 
	`PCD_TX_DTOG
(
USBx
, 
ï
->
num
);

1668 
	`PCD_SET_EP_RX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_RX_VALID
);

1669 
	`PCD_SET_EP_TX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_TX_DIS
);

1674 
	`PCD_CLEAR_RX_DTOG
(
USBx
, 
ï
->
num
);

1675 
	`PCD_CLEAR_TX_DTOG
(
USBx
, 
ï
->
num
);

1676 
	`PCD_RX_DTOG
(
USBx
, 
ï
->
num
);

1678 
	`PCD_SET_EP_TX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_TX_DIS
);

1679 
	`PCD_SET_EP_RX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_RX_DIS
);

1683  
HAL_OK
;

1684 
	}
}

1692 
HAL_SètusTy≥Def
 
	$USB_Dó˘iv©eEndpoöt
(
USB_Ty≥Def
 *
USBx
, 
USB_EPTy≥Def
 *
ï
)

1694 i‡(
ï
->
doubÀbuf„r
 == 0)

1696 i‡(
ï
->
is_ö
)

1698 
	`PCD_CLEAR_TX_DTOG
(
USBx
, 
ï
->
num
);

1700 
	`PCD_SET_EP_TX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_TX_DIS
);

1704 
	`PCD_CLEAR_RX_DTOG
(
USBx
, 
ï
->
num
);

1706 
	`PCD_SET_EP_RX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_RX_DIS
);

1712 i‡(
ï
->
is_ö
==0)

1715 
	`PCD_CLEAR_RX_DTOG
(
USBx
, 
ï
->
num
);

1716 
	`PCD_CLEAR_TX_DTOG
(
USBx
, 
ï
->
num
);

1719 
	`PCD_TX_DTOG
(
USBx
, 
ï
->
num
);

1721 
	`PCD_SET_EP_RX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_RX_DIS
);

1722 
	`PCD_SET_EP_TX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_TX_DIS
);

1727 
	`PCD_CLEAR_RX_DTOG
(
USBx
, 
ï
->
num
);

1728 
	`PCD_CLEAR_TX_DTOG
(
USBx
, 
ï
->
num
);

1729 
	`PCD_RX_DTOG
(
USBx
, 
ï
->
num
);

1731 
	`PCD_SET_EP_TX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_TX_DIS
);

1732 
	`PCD_SET_EP_RX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_RX_DIS
);

1736  
HAL_OK
;

1737 
	}
}

1745 
HAL_SètusTy≥Def
 
	$USB_EPSèπX„r
(
USB_Ty≥Def
 *
USBx
 , 
USB_EPTy≥Def
 *
ï
)

1747 
uöt16_t
 
pmabuf„r
 = 0;

1748 
uöt32_t
 
Àn
 = 
ï
->
x„r_Àn
;

1751 i‡(
ï
->
is_ö
 == 1)

1754 i‡(
ï
->
x„r_Àn
 >Ép->
max∑ckë
)

1756 
Àn
=
ï
->
max∑ckë
;

1757 
ï
->
x„r_Àn
-=
Àn
;

1761 
Àn
=
ï
->
x„r_Àn
;

1762 
ï
->
x„r_Àn
 =0;

1766 i‡(
ï
->
doubÀbuf„r
 == 0)

1768 
	`USB_WrôePMA
(
USBx
, 
ï
->
x„r_buff
,Ép->
pmØdªss
, 
Àn
);

1769 
	`PCD_SET_EP_TX_CNT
(
USBx
, 
ï
->
num
, 
Àn
);

1774 i‡(
	`PCD_GET_ENDPOINT
(
USBx
, 
ï
->
num
)& 
USB_EP_DTOG_TX
)

1777 
	`PCD_SET_EP_DBUF1_CNT
(
USBx
, 
ï
->
num
,Ép->
is_ö
, 
Àn
);

1778 
pmabuf„r
 = 
ï
->
pmØddr1
;

1783 
	`PCD_SET_EP_DBUF0_CNT
(
USBx
, 
ï
->
num
,Ép->
is_ö
, 
Àn
);

1784 
pmabuf„r
 = 
ï
->
pmØddr0
;

1786 
	`USB_WrôePMA
(
USBx
, 
ï
->
x„r_buff
, 
pmabuf„r
, 
Àn
);

1787 
	`PCD_FªeU£rBuf„r
(
USBx
, 
ï
->
num
,Ép->
is_ö
);

1790 
	`PCD_SET_EP_TX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_TX_VALID
);

1795 i‡(
ï
->
x„r_Àn
 >Ép->
max∑ckë
)

1797 
Àn
=
ï
->
max∑ckë
;

1798 
ï
->
x„r_Àn
-=
Àn
;

1802 
Àn
=
ï
->
x„r_Àn
;

1803 
ï
->
x„r_Àn
 =0;

1807 i‡(
ï
->
doubÀbuf„r
 == 0)

1810 
	`PCD_SET_EP_RX_CNT
(
USBx
, 
ï
->
num
, 
Àn
);

1815 
	`PCD_SET_EP_DBUF_CNT
(
USBx
, 
ï
->
num
,Ép->
is_ö
, 
Àn
);

1818 
	`PCD_SET_EP_RX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_RX_VALID
);

1821  
HAL_OK
;

1822 
	}
}

1833 
HAL_SètusTy≥Def
 
	$USB_WrôePackë
(
USB_Ty≥Def
 *
USBx
, 
uöt8_t
 *
§c
, uöt8_à
ch_ï_num
, 
uöt16_t
 
Àn
)

1839  
HAL_OK
;

1840 
	}
}

1850 *
	$USB_RódPackë
(
USB_Ty≥Def
 *
USBx
, 
uöt8_t
 *
de°
, 
uöt16_t
 
Àn
)

1856  ((*)
NULL
);

1857 
	}
}

1865 
HAL_SètusTy≥Def
 
	$USB_EPSëSèŒ
(
USB_Ty≥Def
 *
USBx
 , 
USB_EPTy≥Def
 *
ï
)

1867 i‡(
ï
->
num
 == 0)

1870 
	`PCD_SET_EP_TXRX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_RX_STALL
, 
USB_EP_TX_STALL
);

1874 i‡(
ï
->
is_ö
)

1876 
	`PCD_SET_EP_TX_STATUS
(
USBx
, 
ï
->
num
 , 
USB_EP_TX_STALL
);

1880 
	`PCD_SET_EP_RX_STATUS
(
USBx
, 
ï
->
num
 , 
USB_EP_RX_STALL
);

1883  
HAL_OK
;

1884 
	}
}

1892 
HAL_SètusTy≥Def
 
	$USB_EPCÀ¨SèŒ
(
USB_Ty≥Def
 *
USBx
, 
USB_EPTy≥Def
 *
ï
)

1894 i‡(
ï
->
is_ö
)

1896 
	`PCD_CLEAR_TX_DTOG
(
USBx
, 
ï
->
num
);

1897 
	`PCD_SET_EP_TX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_TX_VALID
);

1901 
	`PCD_CLEAR_RX_DTOG
(
USBx
, 
ï
->
num
);

1902 
	`PCD_SET_EP_RX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_RX_VALID
);

1904  
HAL_OK
;

1905 
	}
}

1912 
HAL_SètusTy≥Def
 
	$USB_St›Devi˚
(
USB_Ty≥Def
 *
USBx
)

1915 
USBx
->
CNTR
 = 
USB_CNTR_FRES
;

1918 
USBx
->
ISTR
 = 0;

1921 
USBx
->
CNTR
 = (
USB_CNTR_FRES
 | 
USB_CNTR_PDWN
);

1923  
HAL_OK
;

1924 
	}
}

1933 
HAL_SètusTy≥Def
 
	$USB_SëDevAddªss
 (
USB_Ty≥Def
 *
USBx
, 
uöt8_t
 
addªss
)

1935 if(
addªss
 == 0)

1938 
USBx
->
DADDR
 = 
USB_DADDR_EF
;

1941  
HAL_OK
;

1942 
	}
}

1949 
HAL_SètusTy≥Def
 
	$USB_DevC⁄√˘
 (
USB_Ty≥Def
 *
USBx
)

1955  
HAL_OK
;

1956 
	}
}

1963 
HAL_SètusTy≥Def
 
	$USB_DevDisc⁄√˘
 (
USB_Ty≥Def
 *
USBx
)

1969  
HAL_OK
;

1970 
	}
}

1977 
uöt32_t
 
	$USB_RódI¡îru±s
 (
USB_Ty≥Def
 *
USBx
)

1979 
uöt32_t
 
tm¥eg
 = 0;

1981 
tm¥eg
 = 
USBx
->
ISTR
;

1982  
tm¥eg
;

1983 
	}
}

1990 
uöt32_t
 
	$USB_RódDevAŒOutEpI¡îru±
 (
USB_Ty≥Def
 *
USBx
)

1997 
	}
}

2004 
uöt32_t
 
	$USB_RódDevAŒInEpI¡îru±
 (
USB_Ty≥Def
 *
USBx
)

2011 
	}
}

2020 
uöt32_t
 
	$USB_RódDevOutEPI¡îru±
 (
USB_Ty≥Def
 *
USBx
 , 
uöt8_t
 
ïnum
)

2027 
	}
}

2036 
uöt32_t
 
	$USB_RódDevInEPI¡îru±
 (
USB_Ty≥Def
 *
USBx
 , 
uöt8_t
 
ïnum
)

2043 
	}
}

2051 
	$USB_CÀ¨I¡îru±s
 (
USB_Ty≥Def
 *
USBx
, 
uöt32_t
 
öãºu±
)

2057 
	}
}

2065 
HAL_SètusTy≥Def
 
	$USB_EP0_OutSèπ
(
USB_Ty≥Def
 *
USBx
, 
uöt8_t
 *
p£tup
)

2071  
HAL_OK
;

2072 
	}
}

2079 
HAL_SètusTy≥Def
 
	$USB_A˘iv©eRemŸeWakeup
(
USB_Ty≥Def
 *
USBx
)

2081 
USBx
->
CNTR
 |
USB_CNTR_RESUME
;

2083  
HAL_OK
;

2084 
	}
}

2091 
HAL_SètusTy≥Def
 
	$USB_DeA˘iv©eRemŸeWakeup
(
USB_Ty≥Def
 *
USBx
)

2093 
USBx
->
CNTR
 &~(
USB_CNTR_RESUME
);

2094  
HAL_OK
;

2095 
	}
}

2105 
	$USB_WrôePMA
(
USB_Ty≥Def
 *
USBx
, 
uöt8_t
 *
pbU§Buf
, 
uöt16_t
 
wPMABufAddr
, uöt16_à
wNByãs
)

2107 
uöt32_t
 
nbyãs
 = (
wNByãs
 + 1) >> 1;

2108 
uöt32_t
 
ödex
 = 0, 
ãmp1
 = 0, 
ãmp2
 = 0;

2109 
uöt16_t
 *
pdwVÆ
 = 
NULL
;

2111 
pdwVÆ
 = (
uöt16_t
 *)(
wPMABufAddr
 * 2 + (
uöt32_t
)
USBx
 + 0x400);

2112 
ödex
 = 
nbyãs
; index != 0; index--)

2114 
ãmp1
 = (
uöt16_t
Ë* 
pbU§Buf
;

2115 
pbU§Buf
++;

2116 
ãmp2
 = 
ãmp1
 | (
uöt16_t
Ë* 
pbU§Buf
 << 8;

2117 *
pdwVÆ
++ = 
ãmp2
;

2118 
pdwVÆ
++;

2119 
pbU§Buf
++;

2121 
	}
}

2131 
	$USB_RódPMA
(
USB_Ty≥Def
 *
USBx
, 
uöt8_t
 *
pbU§Buf
, 
uöt16_t
 
wPMABufAddr
, uöt16_à
wNByãs
)

2133 
uöt32_t
 
nbyãs
 = (
wNByãs
 + 1) >> 1;

2134 
uöt32_t
 
ödex
 = 0;

2135 
uöt32_t
 *
pdwVÆ
 = 
NULL
;

2137 
pdwVÆ
 = (
uöt32_t
 *)(
wPMABufAddr
 * 2 + (uöt32_t)
USBx
 + 0x400);

2138 
ödex
 = 
nbyãs
; index != 0; index--)

2140 *(
uöt16_t
*)
pbU§Buf
++ = *
pdwVÆ
++;

2141 
pbU§Buf
++;

2143 
	}
}

2154 #i‡
deföed
 (
USB_OTG_FS
)

2163 
HAL_SètusTy≥Def
 
	$USB_C‹eRe£t
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

2165 
uöt32_t
 
cou¡
 = 0;

2170 i‡(++
cou¡
 > 200000)

2172  
HAL_TIMEOUT
;

2175 (
USBx
->
GRSTCTL
 & 
USB_OTG_GRSTCTL_AHBIDL
) == 0);

2178 
cou¡
 = 0;

2179 
USBx
->
GRSTCTL
 |
USB_OTG_GRSTCTL_CSRST
;

2183 i‡(++
cou¡
 > 200000)

2185  
HAL_TIMEOUT
;

2188 (
USBx
->
GRSTCTL
 & 
USB_OTG_GRSTCTL_CSRST
) == USB_OTG_GRSTCTL_CSRST);

2190  
HAL_OK
;

2191 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\STM32F105RB_FLASH.ld

31 
	$ENTRY
(
Re£t_H™dÀr
)

34 
_e°ack
 = 0x20010000;

37 
_Mö_Hóp_Size
 = 0;

38 
_Mö_Sèck_Size
 = 0x400;

41 
MEMORY


43 
	`FLASH
 (
rx
Ë: 
ORIGIN
 = 0x8000000, 
LENGTH
 = 128
K


44 
	`RAM
 (
xrw
Ë: 
ORIGIN
 = 0x20000000, 
LENGTH
 = 64
K


45 
	}
}

48 
	gSECTIONS


51 .
	gi§_ve˘‹
 :

53 . = 
ALIGN
(4);

54 
KEEP
(*(.
i§_ve˘‹
))

55 . = 
ALIGN
(4);

56 } >
	gFLASH


59 .
	gãxt
 :

61 . = 
ALIGN
(4);

62 *(.
	gãxt
)

63 *(.
	gãxt
*)

64 *(.
	gglue_7
)

65 *(.
	gglue_7t
)

66 *(.
	geh_‰ame
)

68 
KEEP
 (*(.
öô
))

69 
KEEP
 (*(.
föi
))

71 . = 
ALIGN
(4);

72 
	g_ëext
 = .;

73 } >
	gFLASH


76 .
	grod©a
 :

78 . = 
ALIGN
(4);

79 *(.
	grod©a
)

80 *(.
	grod©a
*)

81 . = 
ALIGN
(4);

82 } >
	gFLASH


84 .
	gARM
.
	gexèb
 : { *(.
ARM
.
exèb
* .
gnu
.
lök⁄˚
.
¨mexèb
.*Ë} >
FLASH


85 .
ARM
 : {

86 
__exidx_°¨t
 = .;

87 *(.
	gARM
.
	gexidx
*)

88 
	g__exidx_íd
 = .;

89 } >
	gFLASH


91 .
	g¥eöô_¨øy
 :

93 
PROVIDE_HIDDEN
 (
__¥eöô_¨øy_°¨t
 = .);

94 
KEEP
 (*(.
¥eöô_¨øy
*))

95 
PROVIDE_HIDDEN
 (
__¥eöô_¨øy_íd
 = .);

96 } >
	gFLASH


97 .
	göô_¨øy
 :

99 
PROVIDE_HIDDEN
 (
__öô_¨øy_°¨t
 = .);

100 
KEEP
 (*(
SORT
(.
öô_¨øy
.*)))

101 
KEEP
 (*(.
öô_¨øy
*))

102 
PROVIDE_HIDDEN
 (
__öô_¨øy_íd
 = .);

103 } >
	gFLASH


104 .
	gföi_¨øy
 :

106 
PROVIDE_HIDDEN
 (
__föi_¨øy_°¨t
 = .);

107 
KEEP
 (*(
SORT
(.
föi_¨øy
.*)))

108 
KEEP
 (*(.
föi_¨øy
*))

109 
PROVIDE_HIDDEN
 (
__föi_¨øy_íd
 = .);

110 } >
FLASH


113 
	g_sid©a
 = 
LOADADDR
(.
d©a
);

116 .
	gd©a
 :

118 . = 
ALIGN
(4);

119 
	g_sd©a
 = .;

120 *(.
	gd©a
)

121 *(.
	gd©a
*)

123 . = 
ALIGN
(4);

124 
	g_ed©a
 = .;

125 } >
RAM
 
	gAT
> 
	gFLASH


129 . = 
ALIGN
(4);

130 .
	gbss
 :

133 
_sbss
 = .;

134 
	g__bss_°¨t__
 = 
_sbss
;

135 *(.
	gbss
)

136 *(.
	gbss
*)

137 *(
	gCOMMON
)

139 . = 
ALIGN
(4);

140 
	g_ebss
 = .;

141 
	g__bss_íd__
 = 
_ebss
;

142 } >
	gRAM


145 .
	g_u£r_hóp_°ack
 :

147 . = 
ALIGN
(4);

148 
PROVIDE
 ( 
íd
 = . );

149 
PROVIDE
 ( 
_íd
 = . );

150 . = . + 
_Mö_Hóp_Size
;

151 . = . + 
_Mö_Sèck_Size
;

152 . = 
ALIGN
(4);

153 } >
	gRAM


158 /
	gDISCARD
/ :

160 
libc
.
a
 ( * )

161 
libm
.
a
 ( * )

162 
libgcc
.
a
 ( * )

165 .
ARM
.
©åibuãs
 0 : { *(.ARM.attributes) }

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\STM32_USB_Device_Library\Class\HID\Inc\usbd_hid.h

29 #i‚de‡
__USB_HID_H


30 
	#__USB_HID_H


	)

32 #ifde‡
__˝lu•lus


37 
	~"usbd_i‹eq.h
"

52 
	#HID_EPIN_ADDR
 0x81

	)

53 
	#HID_EPIN_SIZE
 0x04

	)

55 
	#USB_HID_CONFIG_DESC_SIZ
 34

	)

56 
	#USB_HID_DESC_SIZ
 9

	)

57 
	#HID_MOUSE_REPORT_DESC_SIZE
 56

	)

59 
	#HID_DESCRIPTOR_TYPE
 0x21

	)

60 
	#HID_REPORT_DESC
 0x22

	)

62 
	#HID_HS_BINTERVAL
 0x07

	)

63 
	#HID_FS_BINTERVAL
 0x0A

	)

64 
	#HID_POLLING_INTERVAL
 0x0A

	)

66 
	#HID_REQ_SET_PROTOCOL
 0x0B

	)

67 
	#HID_REQ_GET_PROTOCOL
 0x03

	)

69 
	#HID_REQ_SET_IDLE
 0x0A

	)

70 
	#HID_REQ_GET_IDLE
 0x02

	)

72 
	#HID_REQ_SET_REPORT
 0x09

	)

73 
	#HID_REQ_GET_REPORT
 0x01

	)

84 
HID_IDLE
 = 0,

85 
HID_BUSY
,

87 
	tHID_SèãTy≥Def
;

92 
uöt32_t
 
PrŸocﬁ
;

93 
uöt32_t
 
IdÀSèã
;

94 
uöt32_t
 
A…Sëtög
;

95 
HID_SèãTy≥Def
 
°©e
;

97 
	tUSBD_HID_H™dÀTy≥Def
;

116 
USBD_CœssTy≥Def
 
USBD_HID
;

117 
	#USBD_HID_CLASS
 &
USBD_HID


	)

125 
uöt8_t
 
USBD_HID_SídRï‹t
 (
USBD_H™dÀTy≥Def
 *
pdev
,

126 
uöt8_t
 *
ªp‹t
,

127 
uöt16_t
 
Àn
);

129 
uöt32_t
 
USBD_HID_GëPﬁlögI¡îvÆ
 (
USBD_H™dÀTy≥Def
 *
pdev
);

135 #ifde‡
__˝lu•lus


	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\STM32_USB_Device_Library\Class\HID\Src\usbd_hid.c

50 
	~"usbd_hid.h
"

51 
	~"usbd_desc.h
"

52 
	~"usbd_˘Ãeq.h
"

97 
uöt8_t
 
USBD_HID_Inô
 (
USBD_H™dÀTy≥Def
 *
pdev
,

98 
uöt8_t
 
cfgidx
);

100 
uöt8_t
 
USBD_HID_DeInô
 (
USBD_H™dÀTy≥Def
 *
pdev
,

101 
uöt8_t
 
cfgidx
);

103 
uöt8_t
 
USBD_HID_Sëup
 (
USBD_H™dÀTy≥Def
 *
pdev
,

104 
USBD_SëupReqTy≥def
 *
ªq
);

106 
uöt8_t
 *
USBD_HID_GëCfgDesc
 (
uöt16_t
 *
Àngth
);

108 
uöt8_t
 *
USBD_HID_GëDevi˚QuÆifõrDesc
 (
uöt16_t
 *
Àngth
);

110 
uöt8_t
 
USBD_HID_D©aIn
 (
USBD_H™dÀTy≥Def
 *
pdev
, uöt8_à
ïnum
);

119 
USBD_CœssTy≥Def
 
	gUSBD_HID
 =

121 
USBD_HID_Inô
,

122 
USBD_HID_DeInô
,

123 
USBD_HID_Sëup
,

124 
NULL
,

125 
NULL
,

126 
USBD_HID_D©aIn
,

127 
NULL
,

128 
NULL
,

129 
NULL
,

130 
NULL
,

131 
USBD_HID_GëCfgDesc
,

132 
USBD_HID_GëCfgDesc
,

133 
USBD_HID_GëCfgDesc
,

134 
USBD_HID_GëDevi˚QuÆifõrDesc
,

138 
__ALIGN_BEGIN
 
uöt8_t
 
	gUSBD_HID_CfgDesc
[
USB_HID_CONFIG_DESC_SIZ
] 
	g__ALIGN_END
 =

141 
USB_DESC_TYPE_CONFIGURATION
,

142 
USB_HID_CONFIG_DESC_SIZ
,

155 
USB_DESC_TYPE_INTERFACE
,

166 
HID_DESCRIPTOR_TYPE
,

172 
HID_MOUSE_REPORT_DESC_SIZE
,

177 
USB_DESC_TYPE_ENDPOINT
,

179 
HID_EPIN_ADDR
,

181 
HID_EPIN_SIZE
,

183 
HID_FS_BINTERVAL
,

188 
__ALIGN_BEGIN
 
uöt8_t
 
	gUSBD_HID_Desc
[
USB_HID_DESC_SIZ
] 
	g__ALIGN_END
 =

192 
HID_DESCRIPTOR_TYPE
,

198 
HID_MOUSE_REPORT_DESC_SIZE
,

203 
__ALIGN_BEGIN
 
uöt8_t
 
	gUSBD_HID_Devi˚QuÆifõrDesc
[
USB_LEN_DEV_QUALIFIER_DESC
] 
	g__ALIGN_END
 =

205 
USB_LEN_DEV_QUALIFIER_DESC
,

206 
USB_DESC_TYPE_DEVICE_QUALIFIER
,

217 
__ALIGN_BEGIN
 
uöt8_t
 
	gHID_MOUSE_Rï‹tDesc
[
HID_MOUSE_REPORT_DESC_SIZE
] 
	g__ALIGN_END
 =

265 
uöt8_t
 
	$USBD_HID_Inô
 (
USBD_H™dÀTy≥Def
 *
pdev
,

266 
uöt8_t
 
cfgidx
)

268 
uöt8_t
 
ªt
 = 0;

271 
	`USBD_LL_O≥nEP
(
pdev
,

272 
HID_EPIN_ADDR
,

273 
USBD_EP_TYPE_INTR
,

274 
HID_EPIN_SIZE
);

276 
pdev
->
pCœssD©a
 = 
	`USBD_mÆloc
( (
USBD_HID_H™dÀTy≥Def
));

278 if(
pdev
->
pCœssD©a
 =
NULL
)

280 
ªt
 = 1;

284 ((
USBD_HID_H™dÀTy≥Def
 *)
pdev
->
pCœssD©a
)->
°©e
 = 
HID_IDLE
;

286  
ªt
;

287 
	}
}

296 
uöt8_t
 
	$USBD_HID_DeInô
 (
USBD_H™dÀTy≥Def
 *
pdev
,

297 
uöt8_t
 
cfgidx
)

300 
	`USBD_LL_Clo£EP
(
pdev
,

301 
HID_EPIN_ADDR
);

304 if(
pdev
->
pCœssD©a
 !
NULL
)

306 
	`USBD_‰ì
(
pdev
->
pCœssD©a
);

307 
pdev
->
pCœssD©a
 = 
NULL
;

310  
USBD_OK
;

311 
	}
}

320 
uöt8_t
 
	$USBD_HID_Sëup
 (
USBD_H™dÀTy≥Def
 *
pdev
,

321 
USBD_SëupReqTy≥def
 *
ªq
)

323 
uöt16_t
 
Àn
 = 0;

324 
uöt8_t
 *
pbuf
 = 
NULL
;

325 
USBD_HID_H™dÀTy≥Def
 *
hhid
 = (USBD_HID_H™dÀTy≥Def*Ë
pdev
->
pCœssD©a
;

327 
ªq
->
bmReque°
 & 
USB_REQ_TYPE_MASK
)

329 
USB_REQ_TYPE_CLASS
 :

330 
ªq
->
bReque°
)

334 
HID_REQ_SET_PROTOCOL
:

335 
hhid
->
PrŸocﬁ
 = (
uöt8_t
)(
ªq
->
wVÆue
);

338 
HID_REQ_GET_PROTOCOL
:

339 
	`USBD_CéSídD©a
 (
pdev
,

340 (
uöt8_t
 *)&
hhid
->
PrŸocﬁ
,

344 
HID_REQ_SET_IDLE
:

345 
hhid
->
IdÀSèã
 = (
uöt8_t
)(
ªq
->
wVÆue
 >> 8);

348 
HID_REQ_GET_IDLE
:

349 
	`USBD_CéSídD©a
 (
pdev
,

350 (
uöt8_t
 *)&
hhid
->
IdÀSèã
,

355 
	`USBD_CéEº‹
 (
pdev
, 
ªq
);

356  
USBD_FAIL
;

360 
USB_REQ_TYPE_STANDARD
:

361 
ªq
->
bReque°
)

363 
USB_REQ_GET_DESCRIPTOR
:

364 if–
ªq
->
wVÆue
 >> 8 =
HID_REPORT_DESC
)

366 
Àn
 = 
	`MIN
(
HID_MOUSE_REPORT_DESC_SIZE
 , 
ªq
->
wLígth
);

367 
pbuf
 = 
HID_MOUSE_Rï‹tDesc
;

369 if–
ªq
->
wVÆue
 >> 8 =
HID_DESCRIPTOR_TYPE
)

371 
pbuf
 = 
USBD_HID_Desc
;

372 
Àn
 = 
	`MIN
(
USB_HID_DESC_SIZ
 , 
ªq
->
wLígth
);

375 
	`USBD_CéSídD©a
 (
pdev
,

376 
pbuf
,

377 
Àn
);

381 
USB_REQ_GET_INTERFACE
 :

382 
	`USBD_CéSídD©a
 (
pdev
,

383 (
uöt8_t
 *)&
hhid
->
A…Sëtög
,

387 
USB_REQ_SET_INTERFACE
 :

388 
hhid
->
A…Sëtög
 = (
uöt8_t
)(
ªq
->
wVÆue
);

392  
USBD_OK
;

393 
	}
}

402 
uöt8_t
 
	$USBD_HID_SídRï‹t
 (
USBD_H™dÀTy≥Def
 *
pdev
,

403 
uöt8_t
 *
ªp‹t
,

404 
uöt16_t
 
Àn
)

406 
USBD_HID_H™dÀTy≥Def
 *
hhid
 = (USBD_HID_H™dÀTy≥Def*)
pdev
->
pCœssD©a
;

408 i‡(
pdev
->
dev_°©e
 =
USBD_STATE_CONFIGURED
 )

410 if(
hhid
->
°©e
 =
HID_IDLE
)

412 
hhid
->
°©e
 = 
HID_BUSY
;

413 
	`USBD_LL_Tønsmô
 (
pdev
,

414 
HID_EPIN_ADDR
,

415 
ªp‹t
,

416 
Àn
);

419  
USBD_OK
;

420 
	}
}

428 
uöt32_t
 
	$USBD_HID_GëPﬁlögI¡îvÆ
 (
USBD_H™dÀTy≥Def
 *
pdev
)

430 
uöt32_t
 
pﬁlög_öãrvÆ
 = 0;

433 if(
pdev
->
dev_•ìd
 =
USBD_SPEED_HIGH
)

438 
pﬁlög_öãrvÆ
 = (((1 <<(
HID_HS_BINTERVAL
 - 1)))/8);

444 
pﬁlög_öãrvÆ
 = 
HID_FS_BINTERVAL
;

447  ((
uöt32_t
)(
pﬁlög_öãrvÆ
));

448 
	}
}

457 
uöt8_t
 *
	$USBD_HID_GëCfgDesc
 (
uöt16_t
 *
Àngth
)

459 *
Àngth
 =  (
USBD_HID_CfgDesc
);

460  
USBD_HID_CfgDesc
;

461 
	}
}

471 
uöt8_t
 
	$USBD_HID_D©aIn
 (
USBD_H™dÀTy≥Def
 *
pdev
,

472 
uöt8_t
 
ïnum
)

477 ((
USBD_HID_H™dÀTy≥Def
 *)
pdev
->
pCœssD©a
)->
°©e
 = 
HID_IDLE
;

478  
USBD_OK
;

479 
	}
}

488 
uöt8_t
 *
	$USBD_HID_GëDevi˚QuÆifõrDesc
 (
uöt16_t
 *
Àngth
)

490 *
Àngth
 =  (
USBD_HID_Devi˚QuÆifõrDesc
);

491  
USBD_HID_Devi˚QuÆifõrDesc
;

492 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\STM32_USB_Device_Library\Core\Inc\usbd_core.h

29 #i‚de‡
__USBD_CORE_H


30 
	#__USBD_CORE_H


	)

32 #ifde‡
__˝lu•lus


37 
	~"usbd_c⁄f.h
"

38 
	~"usbd_def.h
"

39 
	~"usbd_i‹eq.h
"

40 
	~"usbd_˘Ãeq.h
"

83 
	#USBD_SOF
 
USBD_LL_SOF


	)

91 
USBD_SètusTy≥Def
 
USBD_Inô
(
USBD_H™dÀTy≥Def
 *
pdev
, 
USBD_Des¸ùt‹sTy≥Def
 *
pdesc
, 
uöt8_t
 
id
);

92 
USBD_SètusTy≥Def
 
USBD_DeInô
(
USBD_H™dÀTy≥Def
 *
pdev
);

93 
USBD_SètusTy≥Def
 
USBD_Sèπ
 (
USBD_H™dÀTy≥Def
 *
pdev
);

94 
USBD_SètusTy≥Def
 
USBD_St›
 (
USBD_H™dÀTy≥Def
 *
pdev
);

95 
USBD_SètusTy≥Def
 
USBD_Regi°îCœss
(
USBD_H™dÀTy≥Def
 *
pdev
, 
USBD_CœssTy≥Def
 *
p˛ass
);

97 
USBD_SètusTy≥Def
 
USBD_RunTe°Mode
 (
USBD_H™dÀTy≥Def
 *
pdev
);

98 
USBD_SètusTy≥Def
 
USBD_SëCœssC⁄fig
(
USBD_H™dÀTy≥Def
 *
pdev
, 
uöt8_t
 
cfgidx
);

99 
USBD_SètusTy≥Def
 
USBD_CÃCœssC⁄fig
(
USBD_H™dÀTy≥Def
 *
pdev
, 
uöt8_t
 
cfgidx
);

101 
USBD_SètusTy≥Def
 
USBD_LL_SëupSège
(
USBD_H™dÀTy≥Def
 *
pdev
, 
uöt8_t
 *
p£tup
);

102 
USBD_SètusTy≥Def
 
USBD_LL_D©aOutSège
(
USBD_H™dÀTy≥Def
 *
pdev
 , 
uöt8_t
 
ïnum
, uöt8_à*
pd©a
);

103 
USBD_SètusTy≥Def
 
USBD_LL_D©aInSège
(
USBD_H™dÀTy≥Def
 *
pdev
 , 
uöt8_t
 
ïnum
, uöt8_à*
pd©a
);

105 
USBD_SètusTy≥Def
 
USBD_LL_Re£t
(
USBD_H™dÀTy≥Def
 *
pdev
);

106 
USBD_SètusTy≥Def
 
USBD_LL_SëS≥ed
(
USBD_H™dÀTy≥Def
 *
pdev
, 
USBD_S≥edTy≥Def
 
•ìd
);

107 
USBD_SètusTy≥Def
 
USBD_LL_Su•íd
(
USBD_H™dÀTy≥Def
 *
pdev
);

108 
USBD_SètusTy≥Def
 
USBD_LL_Resume
(
USBD_H™dÀTy≥Def
 *
pdev
);

110 
USBD_SètusTy≥Def
 
USBD_LL_SOF
(
USBD_H™dÀTy≥Def
 *
pdev
);

111 
USBD_SètusTy≥Def
 
USBD_LL_IsoINIncom∂ëe
(
USBD_H™dÀTy≥Def
 *
pdev
, 
uöt8_t
 
ïnum
);

112 
USBD_SètusTy≥Def
 
USBD_LL_IsoOUTIncom∂ëe
(
USBD_H™dÀTy≥Def
 *
pdev
, 
uöt8_t
 
ïnum
);

114 
USBD_SètusTy≥Def
 
USBD_LL_DevC⁄√˘ed
(
USBD_H™dÀTy≥Def
 *
pdev
);

115 
USBD_SètusTy≥Def
 
USBD_LL_DevDisc⁄√˘ed
(
USBD_H™dÀTy≥Def
 *
pdev
);

118 
USBD_SètusTy≥Def
 
USBD_LL_Inô
 (
USBD_H™dÀTy≥Def
 *
pdev
);

119 
USBD_SètusTy≥Def
 
USBD_LL_DeInô
 (
USBD_H™dÀTy≥Def
 *
pdev
);

120 
USBD_SètusTy≥Def
 
USBD_LL_Sèπ
(
USBD_H™dÀTy≥Def
 *
pdev
);

121 
USBD_SètusTy≥Def
 
USBD_LL_St›
 (
USBD_H™dÀTy≥Def
 *
pdev
);

122 
USBD_SètusTy≥Def
 
USBD_LL_O≥nEP
 (
USBD_H™dÀTy≥Def
 *
pdev
,

123 
uöt8_t
 
ï_addr
,

124 
uöt8_t
 
ï_ty≥
,

125 
uöt16_t
 
ï_mps
);

127 
USBD_SètusTy≥Def
 
USBD_LL_Clo£EP
 (
USBD_H™dÀTy≥Def
 *
pdev
, 
uöt8_t
 
ï_addr
);

128 
USBD_SètusTy≥Def
 
USBD_LL_FlushEP
 (
USBD_H™dÀTy≥Def
 *
pdev
, 
uöt8_t
 
ï_addr
);

129 
USBD_SètusTy≥Def
 
USBD_LL_SèŒEP
 (
USBD_H™dÀTy≥Def
 *
pdev
, 
uöt8_t
 
ï_addr
);

130 
USBD_SètusTy≥Def
 
USBD_LL_CÀ¨SèŒEP
 (
USBD_H™dÀTy≥Def
 *
pdev
, 
uöt8_t
 
ï_addr
);

131 
uöt8_t
 
USBD_LL_IsSèŒEP
 (
USBD_H™dÀTy≥Def
 *
pdev
, uöt8_à
ï_addr
);

132 
USBD_SètusTy≥Def
 
USBD_LL_SëUSBAddªss
 (
USBD_H™dÀTy≥Def
 *
pdev
, 
uöt8_t
 
dev_addr
);

133 
USBD_SètusTy≥Def
 
USBD_LL_Tønsmô
 (
USBD_H™dÀTy≥Def
 *
pdev
,

134 
uöt8_t
 
ï_addr
,

135 
uöt8_t
 *
pbuf
,

136 
uöt16_t
 
size
);

138 
USBD_SètusTy≥Def
 
USBD_LL_Pª∑ªRe˚ive
(
USBD_H™dÀTy≥Def
 *
pdev
,

139 
uöt8_t
 
ï_addr
,

140 
uöt8_t
 *
pbuf
,

141 
uöt16_t
 
size
);

143 
uöt32_t
 
USBD_LL_GëRxD©aSize
 (
USBD_H™dÀTy≥Def
 *
pdev
, 
uöt8_t
 
ï_addr
);

144 
USBD_LL_Dñay
 (
uöt32_t
 
Dñay
);

150 #ifde‡
__˝lu•lus


	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\STM32_USB_Device_Library\Core\Inc\usbd_ctlreq.h

29 #i‚de‡
__USB_REQUEST_H


30 
	#__USB_REQUEST_H


	)

32 #ifde‡
__˝lu•lus


37 
	~"usbd_def.h
"

84 
USBD_SètusTy≥Def
 
USBD_StdDevReq
 (
USBD_H™dÀTy≥Def
 *
pdev
, 
USBD_SëupReqTy≥def
 *
ªq
);

85 
USBD_SètusTy≥Def
 
USBD_StdItfReq
 (
USBD_H™dÀTy≥Def
 *
pdev
, 
USBD_SëupReqTy≥def
 *
ªq
);

86 
USBD_SètusTy≥Def
 
USBD_StdEPReq
 (
USBD_H™dÀTy≥Def
 *
pdev
, 
USBD_SëupReqTy≥def
 *
ªq
);

89 
USBD_CéEº‹
 (
USBD_H™dÀTy≥Def
 *
pdev
, 
USBD_SëupReqTy≥def
 *
ªq
);

91 
USBD_P¨£SëupReque°
 (
USBD_SëupReqTy≥def
 *
ªq
, 
uöt8_t
 *
pd©a
);

93 
USBD_GëSåög
 (
uöt8_t
 *
desc
, uöt8_à*
unicode
, 
uöt16_t
 *
Àn
);

98 #ifde‡
__˝lu•lus


	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\STM32_USB_Device_Library\Core\Inc\usbd_def.h

29 #i‚de‡
__USBD_DEF_H


30 
	#__USBD_DEF_H


	)

32 #ifde‡
__˝lu•lus


37 
	~"usbd_c⁄f.h
"

52 #i‚de‡
NULL


53 
	#NULL
 0

	)

57 
	#USB_LEN_DEV_QUALIFIER_DESC
 0x0A

	)

58 
	#USB_LEN_DEV_DESC
 0x12

	)

59 
	#USB_LEN_CFG_DESC
 0x09

	)

60 
	#USB_LEN_IF_DESC
 0x09

	)

61 
	#USB_LEN_EP_DESC
 0x07

	)

62 
	#USB_LEN_OTG_DESC
 0x03

	)

63 
	#USB_LEN_LANGID_STR_DESC
 0x04

	)

64 
	#USB_LEN_OTHER_SPEED_DESC_SIZ
 0x09

	)

66 
	#USBD_IDX_LANGID_STR
 0x00

	)

67 
	#USBD_IDX_MFC_STR
 0x01

	)

68 
	#USBD_IDX_PRODUCT_STR
 0x02

	)

69 
	#USBD_IDX_SERIAL_STR
 0x03

	)

70 
	#USBD_IDX_CONFIG_STR
 0x04

	)

71 
	#USBD_IDX_INTERFACE_STR
 0x05

	)

73 
	#USB_REQ_TYPE_STANDARD
 0x00

	)

74 
	#USB_REQ_TYPE_CLASS
 0x20

	)

75 
	#USB_REQ_TYPE_VENDOR
 0x40

	)

76 
	#USB_REQ_TYPE_MASK
 0x60

	)

78 
	#USB_REQ_RECIPIENT_DEVICE
 0x00

	)

79 
	#USB_REQ_RECIPIENT_INTERFACE
 0x01

	)

80 
	#USB_REQ_RECIPIENT_ENDPOINT
 0x02

	)

81 
	#USB_REQ_RECIPIENT_MASK
 0x03

	)

83 
	#USB_REQ_GET_STATUS
 0x00

	)

84 
	#USB_REQ_CLEAR_FEATURE
 0x01

	)

85 
	#USB_REQ_SET_FEATURE
 0x03

	)

86 
	#USB_REQ_SET_ADDRESS
 0x05

	)

87 
	#USB_REQ_GET_DESCRIPTOR
 0x06

	)

88 
	#USB_REQ_SET_DESCRIPTOR
 0x07

	)

89 
	#USB_REQ_GET_CONFIGURATION
 0x08

	)

90 
	#USB_REQ_SET_CONFIGURATION
 0x09

	)

91 
	#USB_REQ_GET_INTERFACE
 0x0A

	)

92 
	#USB_REQ_SET_INTERFACE
 0x0B

	)

93 
	#USB_REQ_SYNCH_FRAME
 0x0C

	)

95 
	#USB_DESC_TYPE_DEVICE
 1

	)

96 
	#USB_DESC_TYPE_CONFIGURATION
 2

	)

97 
	#USB_DESC_TYPE_STRING
 3

	)

98 
	#USB_DESC_TYPE_INTERFACE
 4

	)

99 
	#USB_DESC_TYPE_ENDPOINT
 5

	)

100 
	#USB_DESC_TYPE_DEVICE_QUALIFIER
 6

	)

101 
	#USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION
 7

	)

102 
	#USB_DESC_TYPE_BOS
 0x0F

	)

104 
	#USB_CONFIG_REMOTE_WAKEUP
 2

	)

105 
	#USB_CONFIG_SELF_POWERED
 1

	)

107 
	#USB_FEATURE_EP_HALT
 0

	)

108 
	#USB_FEATURE_REMOTE_WAKEUP
 1

	)

109 
	#USB_FEATURE_TEST_MODE
 2

	)

111 
	#USB_DEVICE_CAPABITY_TYPE
 0x10

	)

113 
	#USB_HS_MAX_PACKET_SIZE
 512

	)

114 
	#USB_FS_MAX_PACKET_SIZE
 64

	)

115 
	#USB_MAX_EP0_SIZE
 64

	)

118 
	#USBD_STATE_DEFAULT
 1

	)

119 
	#USBD_STATE_ADDRESSED
 2

	)

120 
	#USBD_STATE_CONFIGURED
 3

	)

121 
	#USBD_STATE_SUSPENDED
 4

	)

125 
	#USBD_EP0_IDLE
 0

	)

126 
	#USBD_EP0_SETUP
 1

	)

127 
	#USBD_EP0_DATA_IN
 2

	)

128 
	#USBD_EP0_DATA_OUT
 3

	)

129 
	#USBD_EP0_STATUS_IN
 4

	)

130 
	#USBD_EP0_STATUS_OUT
 5

	)

131 
	#USBD_EP0_STALL
 6

	)

133 
	#USBD_EP_TYPE_CTRL
 0

	)

134 
	#USBD_EP_TYPE_ISOC
 1

	)

135 
	#USBD_EP_TYPE_BULK
 2

	)

136 
	#USBD_EP_TYPE_INTR
 3

	)

148 
	susb_£tup_ªq


151 
uöt8_t
 
bmReque°
;

152 
uöt8_t
 
bReque°
;

153 
uöt16_t
 
wVÆue
;

154 
uöt16_t
 
wIndex
;

155 
uöt16_t
 
wLígth
;

156 }
	tUSBD_SëupReqTy≥def
;

158 
_USBD_H™dÀTy≥Def
;

160 
	s_Devi˚_cb


162 
uöt8_t
 (*
Inô
Ë(
_USBD_H™dÀTy≥Def
 *
pdev
 , uöt8_à
cfgidx
);

163 
uöt8_t
 (*
DeInô
Ë(
_USBD_H™dÀTy≥Def
 *
pdev
 , uöt8_à
cfgidx
);

165 
uöt8_t
 (*
Sëup
Ë(
_USBD_H™dÀTy≥Def
 *
pdev
 , 
USBD_SëupReqTy≥def
 *
ªq
);

166 
uöt8_t
 (*
EP0_TxSít
Ë(
_USBD_H™dÀTy≥Def
 *
pdev
 );

167 
uöt8_t
 (*
EP0_RxRódy
Ë(
_USBD_H™dÀTy≥Def
 *
pdev
 );

169 
uöt8_t
 (*
D©aIn
Ë(
_USBD_H™dÀTy≥Def
 *
pdev
 , uöt8_à
ïnum
);

170 
uöt8_t
 (*
D©aOut
Ë(
_USBD_H™dÀTy≥Def
 *
pdev
 , uöt8_à
ïnum
);

171 
uöt8_t
 (*
SOF
Ë(
_USBD_H™dÀTy≥Def
 *
pdev
);

172 
uöt8_t
 (*
IsoINIncom∂ëe
Ë(
_USBD_H™dÀTy≥Def
 *
pdev
 , uöt8_à
ïnum
);

173 
uöt8_t
 (*
IsoOUTIncom∂ëe
Ë(
_USBD_H™dÀTy≥Def
 *
pdev
 , uöt8_à
ïnum
);

175 
uöt8_t
 *(*
GëHSC⁄figDes¸ùt‹
)(
uöt16_t
 *
Àngth
);

176 
uöt8_t
 *(*
GëFSC⁄figDes¸ùt‹
)(
uöt16_t
 *
Àngth
);

177 
uöt8_t
 *(*
GëOthîS≥edC⁄figDes¸ùt‹
)(
uöt16_t
 *
Àngth
);

178 
uöt8_t
 *(*
GëDevi˚QuÆifõrDes¸ùt‹
)(
uöt16_t
 *
Àngth
);

179 #i‡(
USBD_SUPPORT_USER_STRING
 == 1)

180 
uöt8_t
 *(*
GëU§SåDes¸ùt‹
)(
_USBD_H™dÀTy≥Def
 *
pdev
 ,uöt8_à
ödex
, 
uöt16_t
 *
Àngth
);

183 } 
	tUSBD_CœssTy≥Def
;

188 
USBD_SPEED_HIGH
 = 0,

189 
USBD_SPEED_FULL
 = 1,

190 
USBD_SPEED_LOW
 = 2,

191 }
	tUSBD_S≥edTy≥Def
;

195 
USBD_OK
 = 0,

196 
USBD_BUSY
,

197 
USBD_FAIL
,

198 }
	tUSBD_SètusTy≥Def
;

203 
uöt8_t
 *(*
GëDevi˚Des¸ùt‹
)–
USBD_S≥edTy≥Def
 
•ìd
 , 
uöt16_t
 *
Àngth
);

204 
uöt8_t
 *(*
GëL™gIDSåDes¸ùt‹
)–
USBD_S≥edTy≥Def
 
•ìd
 , 
uöt16_t
 *
Àngth
);

205 
uöt8_t
 *(*
GëM™uÁ˘uªrSåDes¸ùt‹
)–
USBD_S≥edTy≥Def
 
•ìd
 , 
uöt16_t
 *
Àngth
);

206 
uöt8_t
 *(*
GëProdu˘SåDes¸ùt‹
)–
USBD_S≥edTy≥Def
 
•ìd
 , 
uöt16_t
 *
Àngth
);

207 
uöt8_t
 *(*
GëSîülSåDes¸ùt‹
)–
USBD_S≥edTy≥Def
 
•ìd
 , 
uöt16_t
 *
Àngth
);

208 
uöt8_t
 *(*
GëC⁄figuøti⁄SåDes¸ùt‹
)–
USBD_S≥edTy≥Def
 
•ìd
 , 
uöt16_t
 *
Àngth
);

209 
uöt8_t
 *(*
GëI¡îÁ˚SåDes¸ùt‹
)–
USBD_S≥edTy≥Def
 
•ìd
 , 
uöt16_t
 *
Àngth
);

210 #i‡(
USBD_LPM_ENABLED
 == 1)

211 
uöt8_t
 *(*
GëBOSDes¸ùt‹
)–
USBD_S≥edTy≥Def
 
•ìd
 , 
uöt16_t
 *
Àngth
);

213 } 
	tUSBD_Des¸ùt‹sTy≥Def
;

218 
uöt32_t
 
°©us
;

219 
uöt32_t
 
tŸÆ_Àngth
;

220 
uöt32_t
 
ªm_Àngth
;

221 
uöt32_t
 
max∑ckë
;

222 } 
	tUSBD_EndpoötTy≥Def
;

225 
	s_USBD_H™dÀTy≥Def


227 
uöt8_t
 
id
;

228 
uöt32_t
 
dev_c⁄fig
;

229 
uöt32_t
 
dev_deÁu…_c⁄fig
;

230 
uöt32_t
 
dev_c⁄fig_°©us
;

231 
USBD_S≥edTy≥Def
 
dev_•ìd
;

232 
USBD_EndpoötTy≥Def
 
ï_ö
[15];

233 
USBD_EndpoötTy≥Def
 
ï_out
[15];

234 
uöt32_t
 
ï0_°©e
;

235 
uöt32_t
 
ï0_d©a_Àn
;

236 
uöt8_t
 
dev_°©e
;

237 
uöt8_t
 
dev_ﬁd_°©e
;

238 
uöt8_t
 
dev_addªss
;

239 
uöt8_t
 
dev_c⁄√˘i⁄_°©us
;

240 
uöt8_t
 
dev_ã°_mode
;

241 
uöt32_t
 
dev_ªmŸe_wakeup
;

243 
USBD_SëupReqTy≥def
 
ªque°
;

244 
USBD_Des¸ùt‹sTy≥Def
 *
pDesc
;

245 
USBD_CœssTy≥Def
 *
pCœss
;

246 *
pCœssD©a
;

247 *
pU£rD©a
;

248 *
pD©a
;

249 } 
	tUSBD_H™dÀTy≥Def
;

260 
	#SWAPBYTE
(
addr
Ë(((
uöt16_t
)(*((
uöt8_t
 *)(addr)))) + \

261 (((
uöt16_t
)(*(((
uöt8_t
 *)(
addr
)Ë+ 1))Ë<< 8))

	)

263 
	#LOBYTE
(
x
Ë((
uöt8_t
)(x & 0x00FF))

	)

264 
	#HIBYTE
(
x
Ë((
uöt8_t
)((x & 0xFF00Ë>>8))

	)

265 
	#MIN
(
a
, 
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

266 
	#MAX
(
a
, 
b
Ë((◊Ë> (b)Ë? (aË: (b))

	)

269 #i‡ 
deföed
 ( 
__GNUC__
 )

270 #i‚de‡
__wók


271 
	#__wók
 
	`__©åibuã__
((
wók
))

	)

273 #i‚de‡
__∑cked


274 
	#__∑cked
 
	`__©åibuã__
((
__∑cked__
))

	)

282 #i‡
deföed
 (
__GNUC__
)

283 
	#__ALIGN_END
 
	`__©åibuã__
 ((
	`Æig√d
 (4)))

	)

284 
	#__ALIGN_BEGIN


	)

286 
	#__ALIGN_END


	)

287 #i‡
deföed
 (
__CC_ARM
)

288 
	#__ALIGN_BEGIN
 
	`__Æign
(4)

	)

289 #ñi‡
deföed
 (
__ICCARM__
)

290 
	#__ALIGN_BEGIN


	)

291 #ñi‡
deföed
 (
__TASKING__
)

292 
	#__ALIGN_BEGIN
 
	`__Æign
(4)

	)

317 #ifde‡
__˝lu•lus


	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\STM32_USB_Device_Library\Core\Inc\usbd_ioreq.h

29 #i‚de‡
__USBD_IOREQ_H


30 
	#__USBD_IOREQ_H


	)

32 #ifde‡
__˝lu•lus


37 
	~"usbd_def.h
"

38 
	~"usbd_c‹e.h
"

88 
USBD_SètusTy≥Def
 
USBD_CéSídD©a
 (
USBD_H™dÀTy≥Def
 *
pdev
,

89 
uöt8_t
 *
buf
,

90 
uöt16_t
 
Àn
);

92 
USBD_SètusTy≥Def
 
USBD_CéC⁄töueSídD©a
 (
USBD_H™dÀTy≥Def
 *
pdev
,

93 
uöt8_t
 *
pbuf
,

94 
uöt16_t
 
Àn
);

96 
USBD_SètusTy≥Def
 
USBD_CéPª∑ªRx
 (
USBD_H™dÀTy≥Def
 *
pdev
,

97 
uöt8_t
 *
pbuf
,

98 
uöt16_t
 
Àn
);

100 
USBD_SètusTy≥Def
 
USBD_CéC⁄töueRx
 (
USBD_H™dÀTy≥Def
 *
pdev
,

101 
uöt8_t
 *
pbuf
,

102 
uöt16_t
 
Àn
);

104 
USBD_SètusTy≥Def
 
USBD_CéSídSètus
 (
USBD_H™dÀTy≥Def
 *
pdev
);

106 
USBD_SètusTy≥Def
 
USBD_CéRe˚iveSètus
 (
USBD_H™dÀTy≥Def
 *
pdev
);

108 
uöt16_t
 
USBD_GëRxCou¡
 (
USBD_H™dÀTy≥Def
 *
pdev
 ,

109 
uöt8_t
 
ïnum
);

115 #ifde‡
__˝lu•lus


	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\STM32_USB_Device_Library\Core\Src\usbd_core.c

29 
	~"usbd_c‹e.h
"

96 
USBD_SètusTy≥Def
 
	$USBD_Inô
(
USBD_H™dÀTy≥Def
 *
pdev
, 
USBD_Des¸ùt‹sTy≥Def
 *
pdesc
, 
uöt8_t
 
id
)

99 if(
pdev
 =
NULL
)

101 
	`USBD_EºLog
("Invalid Device handle");

102  
USBD_FAIL
;

106 if(
pdev
->
pCœss
 !
NULL
)

108 
pdev
->
pCœss
 = 
NULL
;

112 if(
pdesc
 !
NULL
)

114 
pdev
->
pDesc
 = 
pdesc
;

118 
pdev
->
dev_°©e
 = 
USBD_STATE_DEFAULT
;

119 
pdev
->
id
 = id;

121 
	`USBD_LL_Inô
(
pdev
);

123  
USBD_OK
;

124 
	}
}

132 
USBD_SètusTy≥Def
 
	$USBD_DeInô
(
USBD_H™dÀTy≥Def
 *
pdev
)

135 
pdev
->
dev_°©e
 = 
USBD_STATE_DEFAULT
;

138 
pdev
->
pCœss
->
	`DeInô
’dev,Ödev->
dev_c⁄fig
);

141 
	`USBD_LL_St›
(
pdev
);

144 
	`USBD_LL_DeInô
(
pdev
);

146  
USBD_OK
;

147 
	}
}

157 
USBD_SètusTy≥Def
 
	$USBD_Regi°îCœss
(
USBD_H™dÀTy≥Def
 *
pdev
, 
USBD_CœssTy≥Def
 *
p˛ass
)

159 
USBD_SètusTy≥Def
 
°©us
 = 
USBD_OK
;

160 if(
p˛ass
 != 0)

163 
pdev
->
pCœss
 = 
p˛ass
;

164 
°©us
 = 
USBD_OK
;

168 
	`USBD_EºLog
("Invalid Class handle");

169 
°©us
 = 
USBD_FAIL
;

172  
°©us
;

173 
	}
}

181 
USBD_SètusTy≥Def
 
	$USBD_Sèπ
 (
USBD_H™dÀTy≥Def
 *
pdev
)

185 
	`USBD_LL_Sèπ
(
pdev
);

187  
USBD_OK
;

188 
	}
}

196 
USBD_SètusTy≥Def
 
	$USBD_St›
 (
USBD_H™dÀTy≥Def
 *
pdev
)

199 
pdev
->
pCœss
->
	`DeInô
’dev,Ödev->
dev_c⁄fig
);

202 
	`USBD_LL_St›
(
pdev
);

204  
USBD_OK
;

205 
	}
}

213 
USBD_SètusTy≥Def
 
	$USBD_RunTe°Mode
 (
USBD_H™dÀTy≥Def
 *
pdev
)

215  
USBD_OK
;

216 
	}
}

227 
USBD_SètusTy≥Def
 
	$USBD_SëCœssC⁄fig
(
USBD_H™dÀTy≥Def
 *
pdev
, 
uöt8_t
 
cfgidx
)

229 
USBD_SètusTy≥Def
 
ªt
 = 
USBD_FAIL
;

231 if(
pdev
->
pCœss
 !
NULL
)

234 if(
pdev
->
pCœss
->
	`Inô
’dev, 
cfgidx
) == 0)

236 
ªt
 = 
USBD_OK
;

239  
ªt
;

240 
	}
}

249 
USBD_SètusTy≥Def
 
	$USBD_CÃCœssC⁄fig
(
USBD_H™dÀTy≥Def
 *
pdev
, 
uöt8_t
 
cfgidx
)

252 
pdev
->
pCœss
->
	`DeInô
’dev, 
cfgidx
);

253  
USBD_OK
;

254 
	}
}

263 
USBD_SètusTy≥Def
 
	$USBD_LL_SëupSège
(
USBD_H™dÀTy≥Def
 *
pdev
, 
uöt8_t
 *
p£tup
)

266 
	`USBD_P¨£SëupReque°
(&
pdev
->
ªque°
, 
p£tup
);

268 
pdev
->
ï0_°©e
 = 
USBD_EP0_SETUP
;

269 
pdev
->
ï0_d©a_Àn
 =Ödev->
ªque°
.
wLígth
;

271 
pdev
->
ªque°
.
bmReque°
 & 0x1F)

273 
USB_REQ_RECIPIENT_DEVICE
:

274 
	`USBD_StdDevReq
 (
pdev
, &pdev->
ªque°
);

277 
USB_REQ_RECIPIENT_INTERFACE
:

278 
	`USBD_StdItfReq
(
pdev
, &pdev->
ªque°
);

281 
USB_REQ_RECIPIENT_ENDPOINT
:

282 
	`USBD_StdEPReq
(
pdev
, &pdev->
ªque°
);

286 
	`USBD_LL_SèŒEP
(
pdev
 ,Ödev->
ªque°
.
bmReque°
 & 0x80);

289  
USBD_OK
;

290 
	}
}

299 
USBD_SètusTy≥Def
 
	$USBD_LL_D©aOutSège
(
USBD_H™dÀTy≥Def
 *
pdev
 , 
uöt8_t
 
ïnum
, uöt8_à*
pd©a
)

301 
USBD_EndpoötTy≥Def
 *
≥p
;

303 if(
ïnum
 == 0)

305 
≥p
 = &
pdev
->
ï_out
[0];

307 i‡–
pdev
->
ï0_°©e
 =
USBD_EP0_DATA_OUT
)

309 if(
≥p
->
ªm_Àngth
 >Öï->
max∑ckë
)

311 
≥p
->
ªm_Àngth
 -≥p->
max∑ckë
;

313 
	`USBD_CéC⁄töueRx
 (
pdev
,

314 
pd©a
,

315 
	`MIN
(
≥p
->
ªm_Àngth
 ,≥p->
max∑ckë
));

319 if((
pdev
->
pCœss
->
EP0_RxRódy
 !
NULL
)&&

320 (
pdev
->
dev_°©e
 =
USBD_STATE_CONFIGURED
))

322 
pdev
->
pCœss
->
	`EP0_RxRódy
(pdev);

324 
	`USBD_CéSídSètus
(
pdev
);

328 if((
pdev
->
pCœss
->
D©aOut
 !
NULL
)&&

329 (
pdev
->
dev_°©e
 =
USBD_STATE_CONFIGURED
))

331 
pdev
->
pCœss
->
	`D©aOut
’dev, 
ïnum
);

333  
USBD_OK
;

334 
	}
}

343 
USBD_SètusTy≥Def
 
	$USBD_LL_D©aInSège
(
USBD_H™dÀTy≥Def
 *
pdev
 ,
uöt8_t
 
ïnum
, uöt8_à*
pd©a
)

345 
USBD_EndpoötTy≥Def
 *
≥p
;

347 if(
ïnum
 == 0)

349 
≥p
 = &
pdev
->
ï_ö
[0];

351 i‡–
pdev
->
ï0_°©e
 =
USBD_EP0_DATA_IN
)

353 if(
≥p
->
ªm_Àngth
 >Öï->
max∑ckë
)

355 
≥p
->
ªm_Àngth
 -≥p->
max∑ckë
;

357 
	`USBD_CéC⁄töueSídD©a
 (
pdev
,

358 
pd©a
,

359 
≥p
->
ªm_Àngth
);

362 
	`USBD_LL_Pª∑ªRe˚ive
 (
pdev
,

364 
NULL
,

369 if((
≥p
->
tŸÆ_Àngth
 %Öï->
max∑ckë
 == 0) &&

370 (
≥p
->
tŸÆ_Àngth
 >≥p->
max∑ckë
) &&

371 (
≥p
->
tŸÆ_Àngth
 < 
pdev
->
ï0_d©a_Àn
 ))

374 
	`USBD_CéC⁄töueSídD©a
(
pdev
 , 
NULL
, 0);

375 
pdev
->
ï0_d©a_Àn
 = 0;

378 
	`USBD_LL_Pª∑ªRe˚ive
 (
pdev
,

380 
NULL
,

385 if((
pdev
->
pCœss
->
EP0_TxSít
 !
NULL
)&&

386 (
pdev
->
dev_°©e
 =
USBD_STATE_CONFIGURED
))

388 
pdev
->
pCœss
->
	`EP0_TxSít
(pdev);

390 
	`USBD_CéRe˚iveSètus
(
pdev
);

394 i‡(
pdev
->
dev_ã°_mode
 == 1)

396 
	`USBD_RunTe°Mode
(
pdev
);

397 
pdev
->
dev_ã°_mode
 = 0;

400 if((
pdev
->
pCœss
->
D©aIn
 !
NULL
)&&

401 (
pdev
->
dev_°©e
 =
USBD_STATE_CONFIGURED
))

403 
pdev
->
pCœss
->
	`D©aIn
’dev, 
ïnum
);

405  
USBD_OK
;

406 
	}
}

415 
USBD_SètusTy≥Def
 
	$USBD_LL_Re£t
(
USBD_H™dÀTy≥Def
 *
pdev
)

418 
	`USBD_LL_O≥nEP
(
pdev
,

420 
USBD_EP_TYPE_CTRL
,

421 
USB_MAX_EP0_SIZE
);

423 
pdev
->
ï_out
[0].
max∑ckë
 = 
USB_MAX_EP0_SIZE
;

426 
	`USBD_LL_O≥nEP
(
pdev
,

428 
USBD_EP_TYPE_CTRL
,

429 
USB_MAX_EP0_SIZE
);

431 
pdev
->
ï_ö
[0].
max∑ckë
 = 
USB_MAX_EP0_SIZE
;

433 
pdev
->
dev_°©e
 = 
USBD_STATE_DEFAULT
;

435 i‡(
pdev
->
pCœssD©a
)

436 
pdev
->
pCœss
->
	`DeInô
’dev,Ödev->
dev_c⁄fig
);

439  
USBD_OK
;

440 
	}
}

451 
USBD_SètusTy≥Def
 
	$USBD_LL_SëS≥ed
(
USBD_H™dÀTy≥Def
 *
pdev
, 
USBD_S≥edTy≥Def
 
•ìd
)

453 
pdev
->
dev_•ìd
 = 
•ìd
;

454  
USBD_OK
;

455 
	}
}

464 
USBD_SètusTy≥Def
 
	$USBD_LL_Su•íd
(
USBD_H™dÀTy≥Def
 *
pdev
)

466 
pdev
->
dev_ﬁd_°©e
 =Ödev->
dev_°©e
;

467 
pdev
->
dev_°©e
 = 
USBD_STATE_SUSPENDED
;

468  
USBD_OK
;

469 
	}
}

478 
USBD_SètusTy≥Def
 
	$USBD_LL_Resume
(
USBD_H™dÀTy≥Def
 *
pdev
)

480 
pdev
->
dev_°©e
 =Ödev->
dev_ﬁd_°©e
;

481  
USBD_OK
;

482 
	}
}

491 
USBD_SètusTy≥Def
 
	$USBD_LL_SOF
(
USBD_H™dÀTy≥Def
 *
pdev
)

493 if(
pdev
->
dev_°©e
 =
USBD_STATE_CONFIGURED
)

495 if(
pdev
->
pCœss
->
SOF
 !
NULL
)

497 
pdev
->
pCœss
->
	`SOF
(pdev);

500  
USBD_OK
;

501 
	}
}

509 
USBD_SètusTy≥Def
 
	$USBD_LL_IsoINIncom∂ëe
(
USBD_H™dÀTy≥Def
 *
pdev
, 
uöt8_t
 
ïnum
)

511  
USBD_OK
;

512 
	}
}

520 
USBD_SètusTy≥Def
 
	$USBD_LL_IsoOUTIncom∂ëe
(
USBD_H™dÀTy≥Def
 *
pdev
, 
uöt8_t
 
ïnum
)

522  
USBD_OK
;

523 
	}
}

531 
USBD_SètusTy≥Def
 
	$USBD_LL_DevC⁄√˘ed
(
USBD_H™dÀTy≥Def
 *
pdev
)

533  
USBD_OK
;

534 
	}
}

542 
USBD_SètusTy≥Def
 
	$USBD_LL_DevDisc⁄√˘ed
(
USBD_H™dÀTy≥Def
 *
pdev
)

545 
pdev
->
dev_°©e
 = 
USBD_STATE_DEFAULT
;

546 
pdev
->
pCœss
->
	`DeInô
’dev,Ödev->
dev_c⁄fig
);

548  
USBD_OK
;

549 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\STM32_USB_Device_Library\Core\Src\usbd_ctlreq.c

29 
	~"usbd_˘Ãeq.h
"

30 
	~"usbd_i‹eq.h
"

79 
USBD_GëDes¸ùt‹
(
USBD_H™dÀTy≥Def
 *
pdev
 ,

80 
USBD_SëupReqTy≥def
 *
ªq
);

82 
USBD_SëAddªss
(
USBD_H™dÀTy≥Def
 *
pdev
 ,

83 
USBD_SëupReqTy≥def
 *
ªq
);

85 
USBD_SëC⁄fig
(
USBD_H™dÀTy≥Def
 *
pdev
 ,

86 
USBD_SëupReqTy≥def
 *
ªq
);

88 
USBD_GëC⁄fig
(
USBD_H™dÀTy≥Def
 *
pdev
 ,

89 
USBD_SëupReqTy≥def
 *
ªq
);

91 
USBD_GëSètus
(
USBD_H™dÀTy≥Def
 *
pdev
 ,

92 
USBD_SëupReqTy≥def
 *
ªq
);

94 
USBD_SëFótuª
(
USBD_H™dÀTy≥Def
 *
pdev
 ,

95 
USBD_SëupReqTy≥def
 *
ªq
);

97 
USBD_CÃFótuª
(
USBD_H™dÀTy≥Def
 *
pdev
 ,

98 
USBD_SëupReqTy≥def
 *
ªq
);

100 
uöt8_t
 
USBD_GëLí
(uöt8_à*
buf
);

119 
USBD_SètusTy≥Def
 
	$USBD_StdDevReq
 (
USBD_H™dÀTy≥Def
 *
pdev
 , 
USBD_SëupReqTy≥def
 *
ªq
)

121 
USBD_SètusTy≥Def
 
ªt
 = 
USBD_OK
;

123 
ªq
->
bReque°
)

125 
USB_REQ_GET_DESCRIPTOR
:

127 
	`USBD_GëDes¸ùt‹
 (
pdev
, 
ªq
) ;

130 
USB_REQ_SET_ADDRESS
:

131 
	`USBD_SëAddªss
(
pdev
, 
ªq
);

134 
USB_REQ_SET_CONFIGURATION
:

135 
	`USBD_SëC⁄fig
 (
pdev
 , 
ªq
);

138 
USB_REQ_GET_CONFIGURATION
:

139 
	`USBD_GëC⁄fig
 (
pdev
 , 
ªq
);

142 
USB_REQ_GET_STATUS
:

143 
	`USBD_GëSètus
 (
pdev
 , 
ªq
);

147 
USB_REQ_SET_FEATURE
:

148 
	`USBD_SëFótuª
 (
pdev
 , 
ªq
);

151 
USB_REQ_CLEAR_FEATURE
:

152 
	`USBD_CÃFótuª
 (
pdev
 , 
ªq
);

156 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

160  
ªt
;

161 
	}
}

170 
USBD_SètusTy≥Def
 
	$USBD_StdItfReq
 (
USBD_H™dÀTy≥Def
 *
pdev
 , 
USBD_SëupReqTy≥def
 *
ªq
)

172 
USBD_SètusTy≥Def
 
ªt
 = 
USBD_OK
;

174 
pdev
->
dev_°©e
)

176 
USBD_STATE_CONFIGURED
:

178 i‡(
	`LOBYTE
(
ªq
->
wIndex
Ë<
USBD_MAX_NUM_INTERFACES
)

180 
pdev
->
pCœss
->
	`Sëup
 (pdev, 
ªq
);

182 if((
ªq
->
wLígth
 =0)&& (
ªt
 =
USBD_OK
))

184 
	`USBD_CéSídSètus
(
pdev
);

189 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

194 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

197  
USBD_OK
;

198 
	}
}

207 
USBD_SètusTy≥Def
 
	$USBD_StdEPReq
 (
USBD_H™dÀTy≥Def
 *
pdev
 , 
USBD_SëupReqTy≥def
 *
ªq
)

210 
uöt8_t
 
ï_addr
;

211 
USBD_SètusTy≥Def
 
ªt
 = 
USBD_OK
;

212 
USBD_EndpoötTy≥Def
 *
≥p
;

213 
ï_addr
 = 
	`LOBYTE
(
ªq
->
wIndex
);

216 i‡((
ªq
->
bmReque°
 & 0x60) == 0x20)

218 
pdev
->
pCœss
->
	`Sëup
 (pdev, 
ªq
);

220  
USBD_OK
;

223 
ªq
->
bReque°
)

226 
USB_REQ_SET_FEATURE
 :

228 
pdev
->
dev_°©e
)

230 
USBD_STATE_ADDRESSED
:

231 i‡((
ï_addr
 != 0x00) && (ep_addr != 0x80))

233 
	`USBD_LL_SèŒEP
(
pdev
 , 
ï_addr
);

237 
USBD_STATE_CONFIGURED
:

238 i‡(
ªq
->
wVÆue
 =
USB_FEATURE_EP_HALT
)

240 i‡((
ï_addr
 != 0x00) && (ep_addr != 0x80))

242 
	`USBD_LL_SèŒEP
(
pdev
 , 
ï_addr
);

246 
pdev
->
pCœss
->
	`Sëup
 (pdev, 
ªq
);

247 
	`USBD_CéSídSètus
(
pdev
);

252 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

257 
USB_REQ_CLEAR_FEATURE
 :

259 
pdev
->
dev_°©e
)

261 
USBD_STATE_ADDRESSED
:

262 i‡((
ï_addr
 != 0x00) && (ep_addr != 0x80))

264 
	`USBD_LL_SèŒEP
(
pdev
 , 
ï_addr
);

268 
USBD_STATE_CONFIGURED
:

269 i‡(
ªq
->
wVÆue
 =
USB_FEATURE_EP_HALT
)

271 i‡((
ï_addr
 & 0x7F) != 0x00)

273 
	`USBD_LL_CÀ¨SèŒEP
(
pdev
 , 
ï_addr
);

274 
pdev
->
pCœss
->
	`Sëup
 (pdev, 
ªq
);

276 
	`USBD_CéSídSètus
(
pdev
);

281 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

286 
USB_REQ_GET_STATUS
:

287 
pdev
->
dev_°©e
)

289 
USBD_STATE_ADDRESSED
:

290 i‡((
ï_addr
 & 0x7F) != 0x00)

292 
	`USBD_LL_SèŒEP
(
pdev
 , 
ï_addr
);

296 
USBD_STATE_CONFIGURED
:

297 
≥p
 = ((
ï_addr
 & 0x80Ë=0x80Ë? &
pdev
->
ï_ö
[ep_addr & 0x7F]:\

298 &
pdev
->
ï_out
[
ï_addr
 & 0x7F];

299 if(
	`USBD_LL_IsSèŒEP
(
pdev
, 
ï_addr
))

301 
≥p
->
°©us
 = 0x0001;

305 
≥p
->
°©us
 = 0x0000;

308 
	`USBD_CéSídD©a
 (
pdev
,

309 (
uöt8_t
 *)&
≥p
->
°©us
,

314 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

322  
ªt
;

323 
	}
}

331 
	$USBD_GëDes¸ùt‹
(
USBD_H™dÀTy≥Def
 *
pdev
 ,

332 
USBD_SëupReqTy≥def
 *
ªq
)

334 
uöt16_t
 
Àn
;

335 
uöt8_t
 *
pbuf
;

338 
ªq
->
wVÆue
 >> 8)

340 #i‡(
USBD_LPM_ENABLED
 == 1)

341 
USB_DESC_TYPE_BOS
:

342 
pbuf
 = 
pdev
->
pDesc
->
	`GëBOSDes¸ùt‹
’dev->
dev_•ìd
, &
Àn
);

345 
USB_DESC_TYPE_DEVICE
:

346 
pbuf
 = 
pdev
->
pDesc
->
	`GëDevi˚Des¸ùt‹
’dev->
dev_•ìd
, &
Àn
);

349 
USB_DESC_TYPE_CONFIGURATION
:

350 if(
pdev
->
dev_•ìd
 =
USBD_SPEED_HIGH
 )

352 
pbuf
 = (
uöt8_t
 *)
pdev
->
pCœss
->
	`GëHSC⁄figDes¸ùt‹
(&
Àn
);

353 
pbuf
[1] = 
USB_DESC_TYPE_CONFIGURATION
;

357 
pbuf
 = (
uöt8_t
 *)
pdev
->
pCœss
->
	`GëFSC⁄figDes¸ùt‹
(&
Àn
);

358 
pbuf
[1] = 
USB_DESC_TYPE_CONFIGURATION
;

362 
USB_DESC_TYPE_STRING
:

363 (
uöt8_t
)(
ªq
->
wVÆue
))

365 
USBD_IDX_LANGID_STR
:

366 
pbuf
 = 
pdev
->
pDesc
->
	`GëL™gIDSåDes¸ùt‹
’dev->
dev_•ìd
, &
Àn
);

369 
USBD_IDX_MFC_STR
:

370 
pbuf
 = 
pdev
->
pDesc
->
	`GëM™uÁ˘uªrSåDes¸ùt‹
’dev->
dev_•ìd
, &
Àn
);

373 
USBD_IDX_PRODUCT_STR
:

374 
pbuf
 = 
pdev
->
pDesc
->
	`GëProdu˘SåDes¸ùt‹
’dev->
dev_•ìd
, &
Àn
);

377 
USBD_IDX_SERIAL_STR
:

378 
pbuf
 = 
pdev
->
pDesc
->
	`GëSîülSåDes¸ùt‹
’dev->
dev_•ìd
, &
Àn
);

381 
USBD_IDX_CONFIG_STR
:

382 
pbuf
 = 
pdev
->
pDesc
->
	`GëC⁄figuøti⁄SåDes¸ùt‹
’dev->
dev_•ìd
, &
Àn
);

385 
USBD_IDX_INTERFACE_STR
:

386 
pbuf
 = 
pdev
->
pDesc
->
	`GëI¡îÁ˚SåDes¸ùt‹
’dev->
dev_•ìd
, &
Àn
);

390 #i‡(
USBD_SUPPORT_USER_STRING
 == 1)

391 
pbuf
 = 
pdev
->
pCœss
->
	`GëU§SåDes¸ùt‹
’dev, (
ªq
->
wVÆue
Ë, &
Àn
);

394 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

399 
USB_DESC_TYPE_DEVICE_QUALIFIER
:

401 if(
pdev
->
dev_•ìd
 =
USBD_SPEED_HIGH
 )

403 
pbuf
 = (
uöt8_t
 *)
pdev
->
pCœss
->
	`GëDevi˚QuÆifõrDes¸ùt‹
(&
Àn
);

408 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

412 
USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION
:

413 if(
pdev
->
dev_•ìd
 =
USBD_SPEED_HIGH
 )

415 
pbuf
 = (
uöt8_t
 *)
pdev
->
pCœss
->
	`GëOthîS≥edC⁄figDes¸ùt‹
(&
Àn
);

416 
pbuf
[1] = 
USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION
;

421 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

426 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

430 if((
Àn
 !0)&& (
ªq
->
wLígth
 != 0))

433 
Àn
 = 
	`MIN
÷í , 
ªq
->
wLígth
);

435 
	`USBD_CéSídD©a
 (
pdev
,

436 
pbuf
,

437 
Àn
);

440 
	}
}

449 
	$USBD_SëAddªss
(
USBD_H™dÀTy≥Def
 *
pdev
 ,

450 
USBD_SëupReqTy≥def
 *
ªq
)

452 
uöt8_t
 
dev_addr
;

454 i‡((
ªq
->
wIndex
 =0Ë&& (ªq->
wLígth
 == 0))

456 
dev_addr
 = (
uöt8_t
)(
ªq
->
wVÆue
) & 0x7F;

458 i‡(
pdev
->
dev_°©e
 =
USBD_STATE_CONFIGURED
)

460 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

464 
pdev
->
dev_addªss
 = 
dev_addr
;

465 
	`USBD_LL_SëUSBAddªss
(
pdev
, 
dev_addr
);

466 
	`USBD_CéSídSètus
(
pdev
);

468 i‡(
dev_addr
 != 0)

470 
pdev
->
dev_°©e
 = 
USBD_STATE_ADDRESSED
;

474 
pdev
->
dev_°©e
 = 
USBD_STATE_DEFAULT
;

480 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

482 
	}
}

491 
	$USBD_SëC⁄fig
(
USBD_H™dÀTy≥Def
 *
pdev
 ,

492 
USBD_SëupReqTy≥def
 *
ªq
)

495 
uöt8_t
 
cfgidx
;

497 
cfgidx
 = (
uöt8_t
)(
ªq
->
wVÆue
);

499 i‡(
cfgidx
 > 
USBD_MAX_NUM_CONFIGURATION
 )

501 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

505 
pdev
->
dev_°©e
)

507 
USBD_STATE_ADDRESSED
:

508 i‡(
cfgidx
)

510 
pdev
->
dev_c⁄fig
 = 
cfgidx
;

511 
pdev
->
dev_°©e
 = 
USBD_STATE_CONFIGURED
;

512 if(
	`USBD_SëCœssC⁄fig
(
pdev
 , 
cfgidx
Ë=
USBD_FAIL
)

514 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

517 
	`USBD_CéSídSètus
(
pdev
);

521 
	`USBD_CéSídSètus
(
pdev
);

525 
USBD_STATE_CONFIGURED
:

526 i‡(
cfgidx
 == 0)

528 
pdev
->
dev_°©e
 = 
USBD_STATE_ADDRESSED
;

529 
pdev
->
dev_c⁄fig
 = 
cfgidx
;

530 
	`USBD_CÃCœssC⁄fig
(
pdev
 , 
cfgidx
);

531 
	`USBD_CéSídSètus
(
pdev
);

534 i‡(
cfgidx
 !
pdev
->
dev_c⁄fig
)

537 
	`USBD_CÃCœssC⁄fig
(
pdev
 ,Ödev->
dev_c⁄fig
);

540 
pdev
->
dev_c⁄fig
 = 
cfgidx
;

541 if(
	`USBD_SëCœssC⁄fig
(
pdev
 , 
cfgidx
Ë=
USBD_FAIL
)

543 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

546 
	`USBD_CéSídSètus
(
pdev
);

550 
	`USBD_CéSídSètus
(
pdev
);

555 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

559 
	}
}

568 
	$USBD_GëC⁄fig
(
USBD_H™dÀTy≥Def
 *
pdev
 ,

569 
USBD_SëupReqTy≥def
 *
ªq
)

572 i‡(
ªq
->
wLígth
 != 1)

574 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

578 
pdev
->
dev_°©e
 )

580 
USBD_STATE_ADDRESSED
:

581 
pdev
->
dev_deÁu…_c⁄fig
 = 0;

582 
	`USBD_CéSídD©a
 (
pdev
,

583 (
uöt8_t
 *)&
pdev
->
dev_deÁu…_c⁄fig
,

587 
USBD_STATE_CONFIGURED
:

589 
	`USBD_CéSídD©a
 (
pdev
,

590 (
uöt8_t
 *)&
pdev
->
dev_c⁄fig
,

595 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

599 
	}
}

608 
	$USBD_GëSètus
(
USBD_H™dÀTy≥Def
 *
pdev
 ,

609 
USBD_SëupReqTy≥def
 *
ªq
)

613 
pdev
->
dev_°©e
)

615 
USBD_STATE_ADDRESSED
:

616 
USBD_STATE_CONFIGURED
:

618 #i‡–
USBD_SELF_POWERED
 == 1)

619 
pdev
->
dev_c⁄fig_°©us
 = 
USB_CONFIG_SELF_POWERED
;

621 
pdev
->
dev_c⁄fig_°©us
 = 0;

624 i‡(
pdev
->
dev_ªmŸe_wakeup
)

626 
pdev
->
dev_c⁄fig_°©us
 |
USB_CONFIG_REMOTE_WAKEUP
;

629 
	`USBD_CéSídD©a
 (
pdev
,

630 (
uöt8_t
 *)& 
pdev
->
dev_c⁄fig_°©us
,

635 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

638 
	}
}

648 
	$USBD_SëFótuª
(
USBD_H™dÀTy≥Def
 *
pdev
 ,

649 
USBD_SëupReqTy≥def
 *
ªq
)

652 i‡(
ªq
->
wVÆue
 =
USB_FEATURE_REMOTE_WAKEUP
)

654 
pdev
->
dev_ªmŸe_wakeup
 = 1;

655 
pdev
->
pCœss
->
	`Sëup
 (pdev, 
ªq
);

656 
	`USBD_CéSídSètus
(
pdev
);

659 
	}
}

669 
	$USBD_CÃFótuª
(
USBD_H™dÀTy≥Def
 *
pdev
 ,

670 
USBD_SëupReqTy≥def
 *
ªq
)

672 
pdev
->
dev_°©e
)

674 
USBD_STATE_ADDRESSED
:

675 
USBD_STATE_CONFIGURED
:

676 i‡(
ªq
->
wVÆue
 =
USB_FEATURE_REMOTE_WAKEUP
)

678 
pdev
->
dev_ªmŸe_wakeup
 = 0;

679 
pdev
->
pCœss
->
	`Sëup
 (pdev, 
ªq
);

680 
	`USBD_CéSídSètus
(
pdev
);

685 
	`USBD_CéEº‹
(
pdev
 , 
ªq
);

688 
	}
}

698 
	$USBD_P¨£SëupReque°
(
USBD_SëupReqTy≥def
 *
ªq
, 
uöt8_t
 *
pd©a
)

700 
ªq
->
bmReque°
 = *(
uöt8_t
 *Ë(
pd©a
);

701 
ªq
->
bReque°
 = *(
uöt8_t
 *Ë(
pd©a
 + 1);

702 
ªq
->
wVÆue
 = 
	`SWAPBYTE
 (
pd©a
 + 2);

703 
ªq
->
wIndex
 = 
	`SWAPBYTE
 (
pd©a
 + 4);

704 
ªq
->
wLígth
 = 
	`SWAPBYTE
 (
pd©a
 + 6);

706 
	}
}

716 
	$USBD_CéEº‹
–
USBD_H™dÀTy≥Def
 *
pdev
 ,

717 
USBD_SëupReqTy≥def
 *
ªq
)

719 
	`USBD_LL_SèŒEP
(
pdev
 , 0x80);

720 
	`USBD_LL_SèŒEP
(
pdev
 , 0);

721 
	}
}

732 
	$USBD_GëSåög
(
uöt8_t
 *
desc
, uöt8_à*
unicode
, 
uöt16_t
 *
Àn
)

734 
uöt8_t
 
idx
 = 0;

736 i‡(
desc
 !
NULL
)

738 *
Àn
 = 
	`USBD_GëLí
(
desc
) * 2 + 2;

739 
unicode
[
idx
++] = *
Àn
;

740 
unicode
[
idx
++] = 
USB_DESC_TYPE_STRING
;

742 *
desc
 != '\0')

744 
unicode
[
idx
++] = *
desc
++;

745 
unicode
[
idx
++] = 0x00;

748 
	}
}

756 
uöt8_t
 
	$USBD_GëLí
(
uöt8_t
 *
buf
)

758 
uöt8_t
 
Àn
 = 0;

760 *
buf
 != '\0')

762 
Àn
++;

763 
buf
++;

766  
Àn
;

767 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\STM32_USB_Device_Library\Core\Src\usbd_ioreq.c

29 
	~"usbd_i‹eq.h
"

95 
USBD_SètusTy≥Def
 
	$USBD_CéSídD©a
 (
USBD_H™dÀTy≥Def
 *
pdev
,

96 
uöt8_t
 *
pbuf
,

97 
uöt16_t
 
Àn
)

100 
pdev
->
ï0_°©e
 = 
USBD_EP0_DATA_IN
;

101 
pdev
->
ï_ö
[0].
tŸÆ_Àngth
 = 
Àn
;

102 
pdev
->
ï_ö
[0].
ªm_Àngth
 = 
Àn
;

104 
	`USBD_LL_Tønsmô
 (
pdev
, 0x00, 
pbuf
, 
Àn
);

106  
USBD_OK
;

107 
	}
}

117 
USBD_SètusTy≥Def
 
	$USBD_CéC⁄töueSídD©a
 (
USBD_H™dÀTy≥Def
 *
pdev
,

118 
uöt8_t
 *
pbuf
,

119 
uöt16_t
 
Àn
)

122 
	`USBD_LL_Tønsmô
 (
pdev
, 0x00, 
pbuf
, 
Àn
);

124  
USBD_OK
;

125 
	}
}

135 
USBD_SètusTy≥Def
 
	$USBD_CéPª∑ªRx
 (
USBD_H™dÀTy≥Def
 *
pdev
,

136 
uöt8_t
 *
pbuf
,

137 
uöt16_t
 
Àn
)

140 
pdev
->
ï0_°©e
 = 
USBD_EP0_DATA_OUT
;

141 
pdev
->
ï_out
[0].
tŸÆ_Àngth
 = 
Àn
;

142 
pdev
->
ï_out
[0].
ªm_Àngth
 = 
Àn
;

144 
	`USBD_LL_Pª∑ªRe˚ive
 (
pdev
,

146 
pbuf
,

147 
Àn
);

149  
USBD_OK
;

150 
	}
}

160 
USBD_SètusTy≥Def
 
	$USBD_CéC⁄töueRx
 (
USBD_H™dÀTy≥Def
 *
pdev
,

161 
uöt8_t
 *
pbuf
,

162 
uöt16_t
 
Àn
)

165 
	`USBD_LL_Pª∑ªRe˚ive
 (
pdev
,

167 
pbuf
,

168 
Àn
);

169  
USBD_OK
;

170 
	}
}

177 
USBD_SètusTy≥Def
 
	$USBD_CéSídSètus
 (
USBD_H™dÀTy≥Def
 *
pdev
)

181 
pdev
->
ï0_°©e
 = 
USBD_EP0_STATUS_IN
;

184 
	`USBD_LL_Tønsmô
 (
pdev
, 0x00, 
NULL
, 0);

186  
USBD_OK
;

187 
	}
}

195 
USBD_SètusTy≥Def
 
	$USBD_CéRe˚iveSètus
 (
USBD_H™dÀTy≥Def
 *
pdev
)

198 
pdev
->
ï0_°©e
 = 
USBD_EP0_STATUS_OUT
;

201 
	`USBD_LL_Pª∑ªRe˚ive
 ( 
pdev
,

203 
NULL
,

206  
USBD_OK
;

207 
	}
}

217 
uöt16_t
 
	$USBD_GëRxCou¡
 (
USBD_H™dÀTy≥Def
 *
pdev
 , 
uöt8_t
 
ï_addr
)

219  
	`USBD_LL_GëRxD©aSize
(
pdev
, 
ï_addr
);

220 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\Src\ADC.c

1 
	~"ADC.h
"

2 
	~<MyLib.h
>

3 
	~"PPMSig.h
"

5 
öt16_t
 
CÆibøã
 (öt16_à
vÆ
, 
uöt8_t
 
ödex
);

7 
xQueueH™dÀ
 
	gadc_queue
;

8 
uöt32_t
 
	gadc_buf„r
[
ADC_CHANNELS
];

9 
öt32_t
 
	gADC_d©a
 [
ADC_CHANNELS
];

10 
öt32_t
 
	gADC_d©a_ˇlibøãd
 [
ADC_CHANNELS
];

12 
ADC_P¨amëîs
 * 
	gADC_P¨ams
;

13 
uöt8_t
 
	gCÆibøãMode
 = 0;

18 
	$ADC_SèπCÆibøti⁄
 ()

20 
CÆibøãMode
 = 1;

21 
	}
}

23 
	$ADC_St›CÆibøti⁄
 ()

25 
CÆibøãMode
 = 0;

26 
	}
}

28 
	$ADC_SëDeÁu…P¨amëîs
 (
ADC_P¨amëîs
 * 
∑øms
)

30 
i
=0;i<
ADC_CHANNELS
;i++)

32 
∑øms
->
CÆibøti⁄
 [0][
i
] = 0x7FFF;

33 
∑øms
->
CÆibøti⁄
 [1][
i
] = 0;

34 
∑øms
->
CÆibøti⁄
 [2][
i
] = -0x7FFF;

36 
∑øms
->
SˇÀFa˘‹
 [
i
] = 1000;

37 
∑øms
->
Tønsf‹m
 [
i
] = 1;

38 
∑øms
->
DódZ⁄e
 [
i
] = 0;

39 
∑øms
->
Trimmîs
 [
i
] = 0;

40 
∑øms
->
SˇÀDividî
[
i
] = 1;

42 
	}
}

44 
	$ADC_Ródî
–*
pvP¨amëîs
 )

46 
uöt32_t
 
cur_adc
 [
ADC_CHANNELS
];

51 
	`ADC_ªad
 ();

52 
	`xQueueRe˚ive
 (
adc_queue
, 
cur_adc
, 
p‹tMAX_DELAY
);

53 
i
 = 0;i<
ADC_CHANNELS
;i++)

55 
ADC_d©a
[
i
] = (Ë(
A_EMA
*
cur_adc
[i] + (1-A_EMA)* ADC_data[i]);

57 i‡(
CÆibøãMode
)

59 i‡(
ADC_d©a
[
i
]+
ADC_P¨ams
->
CÆibøti⁄
[1][i] < ADC_Params->Calibration[0][i]) ADC_Params->Calibration[0][i] = ADC_data[i] + ADC_Params->Calibration[1][i];

60 i‡(
ADC_d©a
[
i
]+
ADC_P¨ams
->
CÆibøti⁄
[1][i] > ADC_Params->Calibration[2][i]) ADC_Params->Calibration[2][i] = ADC_data[i] + ADC_Params->Calibration[1][i];

64 
ADC_d©a_ˇlibøãd
 [
i
] = 
	`CÆibøã
 (
ADC_d©a
[i],i);

67 
	`PPMupd©e
–
ADC_d©a
, &
P¨amëîs
);

69 
	`vTaskDñay
–
ADC_READ_INTERVAL
 / 
p‹tTICK_RATE_MS
 );

71 
	}
}

75 
öt16_t
 
	$CÆibøã
 (
öt16_t
 
vÆ
, 
uöt8_t
 
ödex
)

77 
öt16_t
 
sˇÀdVÆ
 = 0;

78 
sˇÀdVÆ
 = 
vÆ
 + 
ADC_P¨ams
->
CÆibøti⁄
 [1][
ödex
];

79 i‡((
sˇÀdVÆ
 < 
ADC_P¨ams
->
DódZ⁄e
[
ödex
]) && (scaledVal > -ADC_Params->DeadZone[index])) scaledVal = 0;

80 
sˇÀdVÆ
 +
ADC_P¨ams
->
Trimmîs
 [
ödex
];

82 i‡(
sˇÀdVÆ
 > 0)

84 
sˇÀdVÆ
 = 
	`m≠
 (sˇÀdVÆ,0,
ADC_P¨ams
->
CÆibøti⁄
 [2][
ödex
],0,ADC_P¨ams->
SˇÀFa˘‹
[ödex]/ADC_P¨ams->
SˇÀDividî
[index]);

85 i‡(
sˇÀdVÆ
 > 
ADC_P¨ams
->
SˇÀFa˘‹
[
ödex
]ËsˇÀdVÆ = ADC_P¨ams->SˇÀFa˘‹[ödex]/ADC_P¨ams->
SˇÀDividî
[index];

90 
sˇÀdVÆ
 = 
	`m≠
 (sˇÀdVÆ, 
ADC_P¨ams
->
CÆibøti⁄
 [0][
ödex
],0,-ADC_P¨ams->
SˇÀFa˘‹
[ödex]/ADC_P¨ams->
SˇÀDividî
[index],0);

91 i‡(
sˇÀdVÆ
 < -
ADC_P¨ams
->
SˇÀFa˘‹
[
ödex
]ËsˇÀdVÆ = -ADC_P¨ams->SˇÀFa˘‹[ödex]/ADC_P¨ams->
SˇÀDividî
[index];

94 
sˇÀdVÆ
 *
ADC_P¨ams
->
Tønsf‹m
[
ödex
];

95  
sˇÀdVÆ
;

96 
	}
}

98 
	$ADC_GëZîoLevñ
()

100 
i
=0;i<
ADC_CHANNELS
;i++)

102 
ADC_P¨ams
->
CÆibøti⁄
 [1][
i
] = -
ADC_d©a
[i];

104 
	}
}

107 
	$ADC1_2_IRQH™dÀr
 ()

109 i‡(
ADC1
->
SR
 & 
ADC_SR_EOC
)

111 
ADC1
->
SR
 &~(
ADC_SR_EOC
);

115 
p‹tBASE_TYPE
 
q_ªs
 = 
pdFALSE
;

118 
p‹tBASE_TYPE
 
xHighîPri‹ôyTaskWokí
;

120 
xHighîPri‹ôyTaskWokí
 = 
pdFALSE
;

121 
q_ªs
 = 
	`xQueueSídToBackFromISR
(
adc_queue
, &
adc_buf„r
, &
xHighîPri‹ôyTaskWokí
);

126 i‡(
q_ªs
 !
pdPASS
)

129 
	`xQueueOvîwrôeFromISR
(
adc_queue
, &
adc_buf„r
, &
xHighîPri‹ôyTaskWokí
);

131 
	`p‹tEND_SWITCHING_ISR
(
xHighîPri‹ôyTaskWokí
 =
pdTRUE
);

135 
	}
}

138 
	$DMA1_Ch™√l1_IRQH™dÀr
 ()

141 if(
DMA1
->
ISR
 & 
DMA_ISR_TCIF1
)

144 
p‹tBASE_TYPE
 
q_ªs
 = 
pdFALSE
;

146 
DMA1
->
IFCR
 = 
DMA_IFCR_CTCIF1
;

150 
p‹tBASE_TYPE
 
xHighîPri‹ôyTaskWokí
;

152 
xHighîPri‹ôyTaskWokí
 = 
pdFALSE
;

153 
q_ªs
 = 
	`xQueueSídToBackFromISR
(
adc_queue
, &
adc_buf„r
, &
xHighîPri‹ôyTaskWokí
);

157 i‡(
q_ªs
 !
pdPASS
)

160 
	`xQueueOvîwrôeFromISR
(
adc_queue
, &
adc_buf„r
, &
xHighîPri‹ôyTaskWokí
);

162 
	`p‹tEND_SWITCHING_ISR
(
xHighîPri‹ôyTaskWokí
 =
pdTRUE
);

164 
DMA1_Ch™√l1
->
CCR
 &~
DMA_CCR_EN
;

168 if(
DMA1
->
ISR
 & 
DMA_ISR_HTIF1
)

170 
DMA1
->
IFCR
 |
DMA_IFCR_CHTIF1
;

174 if(
DMA1
->
ISR
 & 
DMA_ISR_TEIF1
)

176 
DMA1
->
IFCR
 |
DMA_IFCR_CTEIF1
;

179 
DMA1
->
IFCR
 |
DMA_IFCR_CGIF1
;

180 
	}
}

184 
	$ADC_ªad
 ()

188 
DMA1_Ch™√l1
->
CNDTR
 = 
ADC_CHANNELS
;

189 
DMA1_Ch™√l1
->
CCR
 |
DMA_CCR_EN
;

190 
ADC1
->
CR2
 |
ADC_CR2_SWSTART
;

191 
	}
}

195 
	$ADC_DMA_Inô
()

198 i‡((
RCC
->
AHBENR
 & 
RCC_AHBENR_DMA1EN
) != RCC_AHBENR_DMA1EN)

199 
RCC
->
AHBENR
 |
RCC_AHBENR_DMA1EN
;

201 
DMA1_Ch™√l1
->
CPAR
 = (
uöt32_t
)&
ADC1
->
DR
;

202 
DMA1_Ch™√l1
->
CMAR
 = (
uöt32_t
)
adc_buf„r
;

203 
DMA1_Ch™√l1
->
CNDTR
 = 
ADC_CHANNELS
;

206 
DMA1_Ch™√l1
->
CCR
 = 0;

207 
DMA1_Ch™√l1
->
CCR
 &(
uöt16_t
Ë(~
DMA_CCR_CIRC
);

209 
DMA1_Ch™√l1
->
CCR
 &(
uöt16_t
Ë(~
DMA_CCR_DIR
);

212 
DMA1_Ch™√l1
->
CCR
 |
DMA_CCR_PSIZE_1
;

213 
DMA1_Ch™√l1
->
CCR
 &(
uöt16_t
)(~
DMA_CCR_PINC
);

215 
DMA1_Ch™√l1
->
CCR
 |
DMA_CCR_MSIZE_1
;

216 
DMA1_Ch™√l1
->
CCR
 |
DMA_CCR_MINC
;

219 
DMA1_Ch™√l1
->
CCR
 |
DMA_CCR_TCIE
;

220 
	`NVIC_E«bÀIRQ
 (
DMA1_Ch™√l1_IRQn
);

221 
	`NVIC_SëPri‹ôy
 (
DMA1_Ch™√l1_IRQn
, 15);

222 
ADC1
->
CR2
 |
ADC_CR2_DMA
;

224 
	}
}

226 
	$ADC_InôProc
 (
ADC_P¨amëîs
 * 
∑øms
)

229 
ADC_P¨ams
 = 
∑øms
;

231 
adc_queue
 = 
	`xQueueCª©e
 (
ADC_QUEUE_LEN
,(
adc_buf„r
));

235 
RCC
->
APB2ENR
 |
RCC_APB2ENR_IOPAEN
;

236 
RCC
->
APB2ENR
 |
RCC_APB2ENR_IOPBEN
;

237 
RCC
->
APB2ENR
 |
RCC_APB2ENR_ADC1EN
;

242 
GPIOA
->
CRL
 &~(
GPIO_CRL_MODE0
 | 
GPIO_CRL_MODE1
 | 
GPIO_CRL_MODE2
 | 
GPIO_CRL_MODE3
 | 
GPIO_CRL_MODE4
 | 
GPIO_CRL_MODE5
 | 
GPIO_CRL_MODE6
 | 
GPIO_CRL_MODE7
);

243 
GPIOA
->
CRL
 &~(
GPIO_CRL_CNF0
 | 
GPIO_CRL_CNF1
 | 
GPIO_CRL_CNF2
 | 
GPIO_CRL_CNF3
 | 
GPIO_CRL_CNF4
 | 
GPIO_CRL_CNF5
 | 
GPIO_CRL_CNF6
 | 
GPIO_CRL_CNF7
);

245 
GPIOB
->
CRL
 &~(
GPIO_CRL_MODE0
 | 
GPIO_CRL_MODE1
);

246 
GPIOB
->
CRL
 &~(
GPIO_CRL_CNF0
 | 
GPIO_CRL_CNF1
);

249 
ADC1
->
CR1
 &~(
ADC_CR1_DUALMOD
);

250 
ADC1
->
CR1
 |
ADC_CR1_SCAN
;

251 
ADC1
->
CR2
 &~(
ADC_CR2_CONT
);

253 
ADC1
->
CR2
 &~(
ADC_CR2_ALIGN
);

254 
ADC1
->
CR2
 |
ADC_CR2_EXTTRIG
;

255 
ADC1
->
CR2
 |
ADC_CR2_EXTSEL
;

259 
ADC1
->
SQR1
 |
ADC_SQR1_L_0
 | 
ADC_SQR1_L_3
;

264 
ADC1
->
SQR3
 &~(
ADC_SQR3_SQ1_0
 | 
ADC_SQR3_SQ1_1
 | 
ADC_SQR3_SQ1_2
 | 
ADC_SQR3_SQ1_3
);

265 
ADC1
->
SQR3
 |=
ADC_SQR3_SQ2_0
;

266 
ADC1
->
SQR3
 |=
ADC_SQR3_SQ3_1
;

267 
ADC1
->
SQR3
 |=
ADC_SQR3_SQ4_0
 | 
ADC_SQR3_SQ4_1
;

268 
ADC1
->
SQR3
 |=
ADC_SQR3_SQ5_2
;

269 
ADC1
->
SQR3
 |=
ADC_SQR3_SQ6_2
 | 
ADC_SQR3_SQ6_0
;

270 
ADC1
->
SQR2
 |=
ADC_SQR2_SQ7_2
 | 
ADC_SQR2_SQ7_1
;

271 
ADC1
->
SQR2
 |=
ADC_SQR2_SQ8_2
 | 
ADC_SQR2_SQ8_1
 | 
ADC_SQR2_SQ8_0
;

272 
ADC1
->
SQR2
 |=
ADC_SQR2_SQ9_3
;

273 
ADC1
->
SQR2
 |=
ADC_SQR2_SQ10_3
 | 
ADC_SQR2_SQ10_0
;

287 
ADC1
->
SMPR2
 |(
ADC_SMPR2_SMP0_0
 | 
ADC_SMPR2_SMP0_2
);

288 
ADC1
->
SMPR2
 |(
ADC_SMPR2_SMP1_0
 | 
ADC_SMPR2_SMP1_2
);

289 
ADC1
->
SMPR2
 |(
ADC_SMPR2_SMP2_0
 | 
ADC_SMPR2_SMP2_2
);

290 
ADC1
->
SMPR2
 |(
ADC_SMPR2_SMP3_0
 | 
ADC_SMPR2_SMP3_2
);

291 
ADC1
->
SMPR2
 |(
ADC_SMPR2_SMP4_0
 | 
ADC_SMPR2_SMP4_2
);

292 
ADC1
->
SMPR2
 |(
ADC_SMPR2_SMP5_0
 | 
ADC_SMPR2_SMP5_2
);

293 
ADC1
->
SMPR2
 |(
ADC_SMPR2_SMP6_0
 | 
ADC_SMPR2_SMP6_2
);

294 
ADC1
->
SMPR2
 |(
ADC_SMPR2_SMP7_0
 | 
ADC_SMPR2_SMP7_2
);

295 
ADC1
->
SMPR2
 |(
ADC_SMPR2_SMP8_0
 | 
ADC_SMPR2_SMP8_2
);

296 
ADC1
->
SMPR2
 |(
ADC_SMPR2_SMP9_0
 | 
ADC_SMPR2_SMP9_2
);

306 
ADC1
->
CR2
 |
ADC_CR2_ADON
;

312 
ADC1
->
CR2
 |
ADC_CR2_CAL
;

314 
ADC1
->
CR2
 & 
ADC_CR2_CAL
);

316 
	`ADC_DMA_Inô
();

318 
	`xTaskCª©e
–
ADC_Ródî
, "ADC_Ródî", 
c⁄figMINIMAL_STACK_SIZE
, 
NULL
, 
ADC_Ródî_PRIORITY
, NULL );

319 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\Src\Buttons.c

1 
	~"Buâ⁄s.h
"

6 
uöt32_t
 
	gBuâ⁄s
;

13 
	$Buâ⁄sTask
 ( *
pvP¨amëîs
 )

17 
Buâ⁄s
 &~
BUTTONS_RESET_MASK
;

20 i‡(!
	`HAL_GPIO_RódPö
(
GPIOB
,
GPIO_PIN_8
)Ë
Buâ⁄s
 |= 0x01000000;

21 if(!
	`HAL_GPIO_RódPö
(
GPIOD
,
GPIO_PIN_2
)Ë
Buâ⁄s
 |= 0x02000000;

22 i‡(!
	`HAL_GPIO_RódPö
(
GPIOB
,
GPIO_PIN_9
)Ë
Buâ⁄s
 |= 0x04000000;

23 i‡(!
	`HAL_GPIO_RódPö
(
GPIOB
,
GPIO_PIN_4
)Ë
Buâ⁄s
 |= 0x08000000;

26 
i
=1;i<6;i++)

29 
GPIOC
->
CRH
 &~(
GPIO_CRH_CNF8
 << 4*(
i
+2));

30 
GPIOC
->
CRH
 |(
GPIO_CRH_MODE8_1
 << 4*(
i
+2));

32 
	`HAL_GPIO_WrôePö
(
GPIOC
,
GPIO_PIN_0
<<(
i
+10),
GPIO_PIN_SET
);

33 
j
=1;j<6;j++)

35 i‡(
	`HAL_GPIO_RódPö
(
GPIOC
,
GPIO_PIN_0
<<(
j
-1)))

37 
Buâ⁄s
 |(1<<((
i
-1)*5 + (
j
-1)));

40 
	`HAL_GPIO_WrôePö
(
GPIOC
,
GPIO_PIN_0
<<(
i
+10),
GPIO_PIN_RESET
);

42 
GPIOC
->
CRH
 |(
GPIO_CRH_CNF8_0
 << 4*(
i
+2));

43 
GPIOC
->
CRH
 &~(
GPIO_CRH_MODE8_1
 << 4*(
i
+2));

48 
	`HAL_Dñay
–
BTN_READ_INTERVAL
 );

51 
	}
}

54 
	$Buâ⁄sInô
()

57 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘
;

59 
	`__HAL_RCC_GPIOC_CLK_ENABLE
();

60 
	`__HAL_RCC_GPIOB_CLK_ENABLE
();

61 
	`__HAL_RCC_GPIOD_CLK_ENABLE
();

70 
GPIO_InôSåu˘
.
Pö
 = (
GPIO_PIN_0
 | 
GPIO_PIN_1
 | 
GPIO_PIN_2
 | 
GPIO_PIN_3
 | 
GPIO_PIN_4
);

71 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_INPUT
;

72 
GPIO_InôSåu˘
.
S≥ed
 = 
GPIO_SPEED_LOW
;

73 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_PULLDOWN
;

74 
	`HAL_GPIO_Inô
(
GPIOC
, &
GPIO_InôSåu˘
);

79 
GPIO_InôSåu˘
.
Pö
 = (
GPIO_PIN_4
 | 
GPIO_PIN_8
 | 
GPIO_PIN_9
);

80 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_INPUT
;

81 
GPIO_InôSåu˘
.
S≥ed
 = 
GPIO_SPEED_LOW
;

82 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_PULLUP
;

83 
	`HAL_GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘
);

85 
GPIO_InôSåu˘
.
Pö
 = (
GPIO_PIN_2
);

86 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_INPUT
;

87 
GPIO_InôSåu˘
.
S≥ed
 = 
GPIO_SPEED_LOW
;

88 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_PULLUP
;

89 
	`HAL_GPIO_Inô
(
GPIOD
, &
GPIO_InôSåu˘
);

91 
	`xTaskCª©e
–
Buâ⁄sTask
,"Buâ⁄sTask", 
c⁄figMINIMAL_STACK_SIZE
, 
NULL
, 
tskIDLE_PRIORITY
, NULL );

92 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\Src\LCD.c

1 
	~"LCD.h
"

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

5 
	~"FªeRTOS.h
"

6 
	~"queue.h
"

7 
	~"£mphr.h
"

8 
	~"èsk.h
"

10 
	~"LcdF⁄t.h
"

17 
WrôeSpiComm™d
(
comm™d
);

18 
WrôeSpiD©a
(
d©a
);

21 
uöt8_t
 
	gSPI_DMA_TX_Buf„r
[2][9];

22 
uöt8_t
 
	gCuºítBuf„r
 = 0;

23 
uöt8_t
 
	göbuf
 = 0;

24 
PöTy≥
 
	gRe£tPö
;

25 vﬁ©ûê
uöt8_t
 
	gbusy_Êag
 = 0;

27 vﬁ©ûê
öt8_t
 
	gS¸ìnDúe˘oö
 = 0;

31 
	$SPI_SèπDMA_TX
 (
uöt8_t
 
LígthBu„r
, uöt8_à* 
¨
)

33 
busy_Êag
 = 1;

35 
DMA1_Ch™√l5
->
CCR
 &(
uöt16_t
)(~
DMA_CCR_EN
);

36 
DMA1_Ch™√l5
->
CMAR
 = (
uöt32_t
)
¨
;

37 
DMA1_Ch™√l5
->
CNDTR
 = 
LígthBu„r
;

38 
DMA1
->
IFCR
 |
DMA_IFCR_CTCIF5
;

39 
GPIOB
->
BRR
 = (
LCD_CS_PIN
);

40 
DMA1_Ch™√l5
->
CCR
 |
DMA_CCR_EN
;

41 
	}
}

43 
	$LCDSëRŸ©i⁄
 (
uöt8_t
 
rŸ
)

45 i‡(
rŸ
 > 1) ;

46 
S¸ìnDúe˘oö
 = 
rŸ
;

48 
	}
}

50 
	$LCDSëMADCTL
 (
uöt8_t
 
vÆ
)

52 
	`WrôeSpiComm™d
(
MADCTL
);

53 
	`WrôeSpiD©a
(
vÆ
);

54 
	}
}

56 
	$SpiSíd
(
uöt16_t
 
bôs9
)

58 
SPI_DMA_TX_Buf„r
[
CuºítBuf„r
][
öbuf
] |(
uöt8_t
Ë–
bôs9
 >> (1 + inbuf));

59 
SPI_DMA_TX_Buf„r
[
CuºítBuf„r
][
öbuf
 + 1] = (
uöt8_t
Ë(
bôs9
 << (7 - inbuf));

60 
öbuf
++;

61 i‡(
öbuf
 == 8)

65 
busy_Êag
==1);

71 
	`SPI_SèπDMA_TX
(9,
SPI_DMA_TX_Buf„r
[
CuºítBuf„r
]);

72 
CuºítBuf„r
++;

73 
CuºítBuf„r
 &= 1;

74 
öbuf
=0;

76 
	`mem£t
(
SPI_DMA_TX_Buf„r
[
CuºítBuf„r
], 0, 9);

78 
	}
}

80 
	$LCDFlushTxBuf„r
()

82 
öbuf
 != 0)

84 
	`SpiSíd
(0x00);

86 
	}
}

88 
	$WrôeSpiComm™d
(
comm™d
)

90 
uöt16_t
 
a
 = (uöt16_t)(
comm™d
 & ~0x0100);

91 
	`SpiSíd
 (
a
);

92 
	}
}

94 
	$WrôeSpiD©a
(
d©a
)

96 
uöt16_t
 
a
 = (uöt16_t)(
d©a
 | 0x0100);

97 
	`SpiSíd
(
a
);

98 
	}
}

109 
	$DMA1_Ch™√l5_IRQH™dÀr
 ()

112 if(
DMA1
->
ISR
 & 
DMA_ISR_TCIF5
)

116 
DMA1
->
IFCR
 = 
DMA_IFCR_CTCIF5
;

120 
SPI2
->
SR
 & 
SPI_SR_BSY
);

123 
busy_Êag
 = 0;

124 
GPIOB
->
BSRR
 = (
LCD_CS_PIN
);

129 if(
DMA1
->
ISR
 & 
DMA_ISR_HTIF5
)

131 
DMA1
->
IFCR
 |
DMA_IFCR_CHTIF5
;

135 if(
DMA1
->
ISR
 & 
DMA_ISR_TEIF5
)

139 
DMA1
->
IFCR
 |
DMA_IFCR_CTEIF5
;

142 
DMA1
->
IFCR
 |
DMA_IFCR_CGIF5
;

143 
	}
}

145 
	$SPI_DrvInô
 ()

148 
RCC
->
APB2ENR
 |
RCC_APB2ENR_AFIOEN
 | 
RCC_APB2ENR_IOPBEN
;

149 
RCC
->
APB1ENR
 |
RCC_APB1ENR_SPI2EN
;

153 
GPIOB
->
CRH
 &~(
GPIO_CRH_MODE13
 | 
GPIO_CRH_MODE15
 | 
GPIO_CRH_CNF13
 | 
GPIO_CRH_CNF15
);

154 
GPIOB
->
CRH
 |(
GPIO_CRH_MODE13
 | 
GPIO_CRH_MODE15
);

155 
GPIOB
->
CRH
 |(
GPIO_CRH_CNF13_1
 | 
GPIO_CRH_CNF15_1
);

160 
GPIOB
->
CRL
 &~(
GPIO_CRL_MODE6
 | 
GPIO_CRL_MODE7
 | 
GPIO_CRL_CNF6
 | 
GPIO_CRL_CNF7
);

161 
GPIOB
->
CRL
 |(
GPIO_CRL_MODE6_1
 | 
GPIO_CRL_MODE7_1
);

163 
GPIOB
->
BRR
 = (
LCD_CS_PIN
);

164 
GPIOB
->
BSRR
 = 
LCD_RESET_PIN
;

167 i‡((
RCC
->
AHBENR
 & 
RCC_AHBENR_DMA1EN
) != RCC_AHBENR_DMA1EN)

168 
RCC
->
AHBENR
 |
RCC_AHBENR_DMA1EN
;

170 
DMA1_Ch™√l5
->
CPAR
 = (
uöt32_t
)&
SPI2
->
DR
;

171 
DMA1_Ch™√l5
->
CMAR
 = 0;

172 
DMA1_Ch™√l5
->
CNDTR
 = 9;

175 
DMA1_Ch™√l5
->
CCR
 = 0;

176 
DMA1_Ch™√l5
->
CCR
 &(
uöt16_t
Ë(~
DMA_CCR_CIRC
);

178 
DMA1_Ch™√l5
->
CCR
 |
DMA_CCR_DIR
;

180 
DMA1_Ch™√l5
->
CCR
 &(
uöt16_t
)(~
DMA_CCR_PSIZE
);

181 
DMA1_Ch™√l5
->
CCR
 &(
uöt16_t
)(~
DMA_CCR_PINC
);

183 
DMA1_Ch™√l5
->
CCR
 &(
uöt16_t
)(~
DMA_CCR_MSIZE
);

184 
DMA1_Ch™√l5
->
CCR
 |
DMA_CCR_MINC
;

188 
DMA1_Ch™√l5
->
CCR
 |
DMA_CCR_TCIE
;

189 
	`NVIC_E«bÀIRQ
 (
DMA1_Ch™√l5_IRQn
);

190 
	`NVIC_SëPri‹ôy
 (
DMA1_Ch™√l5_IRQn
, 15);

194 
SPI2
->
CR1
 |
SPI_CR1_MSTR
;

196 
SPI2
->
CR1
 |
SPI_CR1_BR_1
 | 
SPI_CR1_BR_0
;

197 
SPI2
->
CR1
 |
SPI_CR1_BIDIOE
;

201 
SPI2
->
CR2
 |
SPI_CR2_SSOE
;

202 
SPI2
->
CR2
 |
SPI_CR2_TXDMAEN
;

205 
SPI2
->
CR1
 |
SPI_CR1_SPE
;

215 
	`mem£t
(
SPI_DMA_TX_Buf„r
, 0, 18);

219 
	}
}

221 
	$LCD_Sídî
–*
pvP¨amëîs
 )

228 
	}
}

238 
	$LCDInô
(
öt8_t
 
S¸Dú
, 
uöt8_t
 
∑øms
)

241 
S¸ìnDúe˘oö
 = 
S¸Dú
;

244 
	`SPI_DrvInô
 ();

249 
GPIOB
->
BRR
 = 
LCD_RESET_PIN
;

251 
	`vTaskDñay
–1000 / 
p‹tTICK_RATE_MS
 );

252 
GPIOB
->
BSRR
 = 
LCD_RESET_PIN
;

253 
	`vTaskDñay
–1000 / 
p‹tTICK_RATE_MS
 );

255 
	`WrôeSpiComm™d
(
SLEEPOUT
);

259 
	`WrôeSpiComm™d
(
COLMOD
);

260 
	`WrôeSpiD©a
(0x03);

263 
	`WrôeSpiComm™d
(
MADCTL
);

265 
	`WrôeSpiD©a
(
∑øms
);

268 
	`WrôeSpiComm™d
(
SETCON
);

269 
	`WrôeSpiD©a
(0x3F);

272 
	`WrôeSpiComm™d
(
DISPON
);

273 
	`LCDFlushTxBuf„r
();

276 
	}
}

286 
	$LCDCÀ¨S¸ìn
() {

287 
i
;

289 
	`WrôeSpiComm™d
(
PASET
);

290 
	`WrôeSpiD©a
(0);

291 
	`WrôeSpiD©a
(131);

293 
	`WrôeSpiComm™d
(
CASET
);

294 
	`WrôeSpiD©a
(0);

295 
	`WrôeSpiD©a
(131);

297 
	`WrôeSpiComm™d
(
RAMWR
);

298 
i
 = 0; i < ((131 * 131) / 2); i++)

300 
	`WrôeSpiD©a
((
BLACK
 >> 4) & 0xFF);

301 
	`WrôeSpiD©a
(((
BLACK
 & 0xF) << 4) | ((BLACK >> 8) & 0xF));

302 
	`WrôeSpiD©a
(
BLACK
 & 0xFF);

304 
	`LCDFlushTxBuf„r
();

305 
	}
}

318 
	$LCDSëXY
(
x
, 
y
)

321 
	`WrôeSpiComm™d
(
PASET
);

322 
	`WrôeSpiD©a
(
x
);

323 
	`WrôeSpiD©a
(
x
);

325 
	`WrôeSpiComm™d
(
CASET
);

326 
	`WrôeSpiD©a
(
y
);

327 
	`WrôeSpiD©a
(
y
);

328 
	}
}

354 
	$LCDSëPixñ
(
x
, 
y
, 
cﬁ‹
)

356 
ãmp
;

357 i‡(
S¸ìnDúe˘oö
 == 1)

359 
ãmp
 = 
x
;

360 
x
 = 
y
;

361 
y
 = 131 - 
ãmp
;

363 
	`LCDSëXY
(
x
, 
y
);

364 
	`WrôeSpiComm™d
(
RAMWR
);

365 
	`WrôeSpiD©a
(()((
cﬁ‹
 >> 4) & 0xFFFF));

366 
	`WrôeSpiD©a
(()(((
cﬁ‹
 & 0x0F) << 4) | 0x00));

367 
	`WrôeSpiComm™d
(
NOP
);

368 
	}
}

401 
	$LCDSëLöe
(
x0
, 
y0
, 
x1
, 
y1
, 
cﬁ‹
)

403 
ãmp
;

404 i‡(
S¸ìnDúe˘oö
 == 1)

406 
ãmp
 = 
x0
;

407 
x0
 = 
y0
;

408 
y0
 = 
ãmp
;

409 
ãmp
 = 
x1
;

410 
x1
 = 
y1
;

411 
y1
 = 
ãmp
;

414 
dy
 = 
y1
 - 
y0
;

415 
dx
 = 
x1
 - 
x0
;

416 
°ïx
, 
°ïy
;

418 i‡(
dy
 < 0Ë{ dy = -dy; 
°ïy
 = -1; } { stepy = 1; }

419 i‡(
dx
 < 0Ë{ dx = -dx; 
°ïx
 = -1; } { stepx = 1; }

420 
dy
 <<= 1;

421 
dx
 <<= 1;

422 
	`LCDSëPixñ
(
x0
, 
y0
, 
cﬁ‹
);

423 i‡(
dx
 > 
dy
)

425 
‰a˘i⁄
 = 
dy
 - (
dx
 >> 1);

426 
x0
 !
x1
)

428 i‡(
‰a˘i⁄
 >= 0)

430 
y0
 +
°ïy
;

431 
‰a˘i⁄
 -
dx
;

433 
x0
 +
°ïx
;

434 
‰a˘i⁄
 +
dy
;

435 
	`LCDSëPixñ
(
x0
, 
y0
, 
cﬁ‹
);

440 
‰a˘i⁄
 = 
dx
 - (
dy
 >> 1);

441 
y0
 !
y1
)

443 i‡(
‰a˘i⁄
 >= 0)

445 
x0
 +
°ïx
;

446 
‰a˘i⁄
 -
dy
;

448 
y0
 +
°ïy
;

449 
‰a˘i⁄
 +
dx
;

450 
	`LCDSëPixñ
(
x0
, 
y0
, 
cﬁ‹
);

453 
	}
}

527 
	$LCDSëRe˘
(
x0
, 
y0
, 
x1
, 
y1
, 
fûl
, 
cﬁ‹
)

529 
xmö
, 
xmax
, 
ymö
, 
ymax
;

530 
i
;

531 
ãmp
;

533 i‡(
fûl
 =
FILL
)

535 i‡(
S¸ìnDúe˘oö
 == 1)

537 
ãmp
 = 
x0
;

538 
x0
 = 
y0
;

539 
y0
 = 131 - 
ãmp
;

540 
ãmp
 = 
x1
;

541 
x1
 = 
y1
;

542 
y1
 = 131 - 
ãmp
;

547 
xmö
 = (
x0
 <
x1
) ? x0 : x1;

548 
xmax
 = (
x0
 > 
x1
) ? x0 : x1;

549 
ymö
 = (
y0
 <
y1
) ? y0 : y1;

550 
ymax
 = (
y0
 > 
y1
) ? y0 : y1;

553 
	`WrôeSpiComm™d
(
PASET
);

554 
	`WrôeSpiD©a
(
xmö
);

555 
	`WrôeSpiD©a
(
xmax
);

557 
	`WrôeSpiComm™d
(
CASET
);

558 
	`WrôeSpiD©a
(
ymö
);

559 
	`WrôeSpiD©a
(
ymax
);

561 
	`WrôeSpiComm™d
(
RAMWR
);

563 
i
 = 0; i < ((((
xmax
 - 
xmö
 + 1Ë* (
ymax
 - 
ymö
 + 1)) / 2) + 1); i++)

566 
	`WrôeSpiD©a
((
cﬁ‹
 >> 4) & 0xFF);

567 
	`WrôeSpiD©a
(((
cﬁ‹
 & 0xF) << 4) | ((color >> 8) & 0xF));

568 
	`WrôeSpiD©a
(
cﬁ‹
 & 0xFF);

574 
	`LCDSëLöe
(
x0
, 
y0
, 
x1
, y0, 
cﬁ‹
);

575 
	`LCDSëLöe
(
x0
, 
y1
, 
x1
, y1, 
cﬁ‹
);

576 
	`LCDSëLöe
(
x0
, 
y0
, x0, 
y1
, 
cﬁ‹
);

577 
	`LCDSëLöe
(
x1
, 
y0
, x1, 
y1
, 
cﬁ‹
);

579 
	}
}

599 
	$LCDSëCú˛e
(
x0
, 
y0
, 
ødius
, 
cﬁ‹
)

601 
f
 = 1 - 
ødius
;

602 
ddF_x
 = 0;

603 
ddF_y
 = -2 * 
ødius
;

604 
x
 = 0;

605 
y
 = 
ødius
;

606 
	`LCDSëPixñ
(
x0
, 
y0
 + 
ødius
, 
cﬁ‹
);

607 
	`LCDSëPixñ
(
x0
, 
y0
 - 
ødius
, 
cﬁ‹
);

608 
	`LCDSëPixñ
(
x0
 + 
ødius
, 
y0
, 
cﬁ‹
);

609 
	`LCDSëPixñ
(
x0
 - 
ødius
, 
y0
, 
cﬁ‹
);

610 
x
 < 
y
)

612 i‡(
f
 >= 0)

614 
y
--;

615 
ddF_y
 += 2;

616 
f
 +
ddF_y
;

618 
x
++;

619 
ddF_x
 += 2;

620 
f
 +
ddF_x
 + 1;

621 
	`LCDSëPixñ
(
x0
 + 
x
, 
y0
 + 
y
, 
cﬁ‹
);

622 
	`LCDSëPixñ
(
x0
 - 
x
, 
y0
 + 
y
, 
cﬁ‹
);

623 
	`LCDSëPixñ
(
x0
 + 
x
, 
y0
 - 
y
, 
cﬁ‹
);

624 
	`LCDSëPixñ
(
x0
 - 
x
, 
y0
 - 
y
, 
cﬁ‹
);

625 
	`LCDSëPixñ
(
x0
 + 
y
, 
y0
 + 
x
, 
cﬁ‹
);

626 
	`LCDSëPixñ
(
x0
 - 
y
, 
y0
 + 
x
, 
cﬁ‹
);

627 
	`LCDSëPixñ
(
x0
 + 
y
, 
y0
 - 
x
, 
cﬁ‹
);

628 
	`LCDSëPixñ
(
x0
 - 
y
, 
y0
 - 
x
, 
cﬁ‹
);

630 
	}
}

709 
	$LCDPutCh¨
(
c
, 
x
, 
y
, 
size
, 
fCﬁ‹
, 
bCﬁ‹
)

711 c⁄° 
FONT6x8
[97][8];

712 c⁄° 
FONT8x8
[97][8];

713 c⁄° 
FONT8x16
[97][16];

714 
i
,
j
;

715 
nCﬁs
;

716 
nRows
;

717 
nByãs
;

718 
PixñRow
;

719 
Mask
;

720 
W‹d0
;

721 
W‹d1
;

722 *
pF⁄t
;

723 *
pCh¨
;

725 *
F⁄tTabÀ
[] =

727 (*)
FONT6x8
,

728 (*)
FONT8x8
,

729 (*)
FONT8x16


732 
pF⁄t
 = (*)
F⁄tTabÀ
[
size
];

734 
nCﬁs
 = *
pF⁄t
;

735 
nRows
 = *(
pF⁄t
 + 1);

736 
nByãs
 = *(
pF⁄t
 + 2);

739 
pCh¨
 = 
pF⁄t
 + (
nByãs
 * (
c
 - 0x1F)) +ÇBytes - 1;

741 
	`WrôeSpiComm™d
(
PASET
);

742 
	`WrôeSpiD©a
(
x
);

743 
	`WrôeSpiD©a
(
x
 + 
nRows
 - 1);

745 
	`WrôeSpiComm™d
(
CASET
);

746 
	`WrôeSpiD©a
(
y
);

747 
	`WrôeSpiD©a
(
y
 + 
nCﬁs
 - 1);

749 
	`WrôeSpiComm™d
(
RAMWR
);

751 
i
 = 
nRows
 - 1; i >= 0; i--)

754 
PixñRow
 = *
pCh¨
--;

757 
Mask
 = 0x80;

758 
j
 = 0; j < 
nCﬁs
; j += 2)

762 i‡((
PixñRow
 & 
Mask
) == 0)

763 
W‹d0
 = 
bCﬁ‹
;

765 
W‹d0
 = 
fCﬁ‹
;

766 
Mask
 = Mask >> 1;

767 i‡((
PixñRow
 & 
Mask
) == 0)

768 
W‹d1
 = 
bCﬁ‹
;

770 
W‹d1
 = 
fCﬁ‹
;

771 
Mask
 = Mask >> 1;

773 
	`WrôeSpiD©a
((
W‹d0
 >> 4) & 0xFF);

774 
	`WrôeSpiD©a
(((
W‹d0
 & 0xFË<< 4Ë| ((
W‹d1
 >> 8) & 0xF));

775 
	`WrôeSpiD©a
(
W‹d1
 & 0xFF);

780 
	}
}

782 
	$LCDPutCh¨RŸ©e
(
c
, 
x
, 
y
, 
size
, 
fCﬁ‹
, 
bCﬁ‹
)

784 c⁄° 
FONT6x8
[97][8];

785 c⁄° 
FONT8x8
[97][8];

786 c⁄° 
FONT8x16
[97][16];

787 
i
,
j
;

788 
nCﬁs
;

789 
nRows
;

790 
nByãs
;

791 
W‹d0
;

792 
W‹d1
;

793 *
pF⁄t
;

794 *
pCh¨
;

795 
uöt16_t
 
t
;

796 *
F⁄tTabÀ
[] =

798 (*)
FONT6x8
,

799 (*)
FONT8x8
,

800 (*)
FONT8x16


803 
pF⁄t
 = (*)
F⁄tTabÀ
[
size
];

805 
nCﬁs
 = *
pF⁄t
;

806 
nRows
 = *(
pF⁄t
 + 1);

807 
nByãs
 = *(
pF⁄t
 + 2);

810 
pCh¨
 = 
pF⁄t
 + (
nByãs
 * (
c
 - 0x1F));

812 
	`WrôeSpiComm™d
(
PASET
);

813 
	`WrôeSpiD©a
(
y
);

814 
	`WrôeSpiD©a
(
y
 + 
nCﬁs
 - 1);

816 
	`WrôeSpiComm™d
(
CASET
);

817 
	`WrôeSpiD©a
(132 - 
x
 - 
nRows
);

818 
	`WrôeSpiD©a
(132 - 
x
 - 1);

820 
	`WrôeSpiComm™d
(
RAMWR
);

822 
i
 = 0; i < 
nCﬁs
; i++)

824 
j
 = 0; j < 
nRows
; j += 2)

828 
t
 = *(
pCh¨
 + 
j
);

830 i‡((
t
 & (128>>
i
)) == 0)

831 
W‹d0
 = 
bCﬁ‹
;

833 
W‹d0
 = 
fCﬁ‹
;

835 i‡((*(
pCh¨
 + 
j
 + 1Ë& (128>>
i
)) == 0)

836 
W‹d1
 = 
bCﬁ‹
;

838 
W‹d1
 = 
fCﬁ‹
;

841 
	`WrôeSpiD©a
((
W‹d0
 >> 4) & 0xFF);

842 
	`WrôeSpiD©a
(((
W‹d0
 & 0xFË<< 4Ë| ((
W‹d1
 >> 8) & 0xF));

843 
	`WrôeSpiD©a
(
W‹d1
 & 0xFF);

848 
	}
}

870 
	$LCDPutSå
(*
pSåög
, 
x
, 
y
, 
Size
, 
fCﬁ‹
, 
bCﬁ‹
) {

872 *
pSåög
 != 0x00)

875 i‡(
S¸ìnDúe˘oö
 ==0Ë
	`LCDPutCh¨
(*
pSåög
++, 
x
, 
y
, 
Size
, 
fCﬁ‹
, 
bCﬁ‹
);

876 
	`LCDPutCh¨RŸ©e
 (*
pSåög
++, 
x
, 
y
, 
Size
, 
fCﬁ‹
, 
bCﬁ‹
);

878 i‡(
Size
 =
SMALL
)

879 
y
 = y + 6;

880 i‡(
Size
 =
MEDIUM
)

881 
y
 = y + 8;

883 
y
 = y + 8;

885 i‡(
y
 > 131) ;

887 
	}
}

888 
	$LCDPutSåROM
(c⁄° *
pSåög
, 
x
, 
y
, 
Size
, 
fCﬁ‹
, 
bCﬁ‹
) {

890 *
pSåög
 != 0x00)

893 i‡(
S¸ìnDúe˘oö
 ==0Ë
	`LCDPutCh¨
(*
pSåög
++, 
x
, 
y
, 
Size
, 
fCﬁ‹
, 
bCﬁ‹
);

894 
	`LCDPutCh¨RŸ©e
 (*
pSåög
++, 
x
, 
y
, 
Size
, 
fCﬁ‹
, 
bCﬁ‹
);

896 i‡(
Size
 =
SMALL
)

897 
y
 = y + 6;

898 i‡(
Size
 =
MEDIUM
)

899 
y
 = y + 8;

901 
y
 = y + 8;

903 i‡(
y
 > 131) ;

905 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\Src\PPMsig.c

1 
	~"PPMsig.h
"

2 
	~<MyLib.h
>

4 
uöt16_t
 
	gVÆues
 [2][17] = {{
MIN_PWM_VAL
,

5 
PPM_PAUSE_VAL
, 
MIN_PWM_VAL
,

6 
PPM_PAUSE_VAL
, 
MIN_PWM_VAL
,

7 
PPM_PAUSE_VAL
, 
MIN_PWM_VAL
,

8 
PPM_PAUSE_VAL
, 
MIN_PWM_VAL
,

9 
PPM_PAUSE_VAL
, 
MIN_PWM_VAL
,

10 
PPM_PAUSE_VAL
, 
MIN_PWM_VAL
,

11 
PPM_PAUSE_VAL
, 
MIN_PWM_VAL
,

12 
PPM_PAUSE_VAL
, 
PPM_SYNC_PULSE
},

13 {
MIN_PWM_VAL
,

14 
PPM_PAUSE_VAL
, 
MIN_PWM_VAL
,

15 
PPM_PAUSE_VAL
, 
MIN_PWM_VAL
,

16 
PPM_PAUSE_VAL
, 
MIN_PWM_VAL
,

17 
PPM_PAUSE_VAL
, 
MIN_PWM_VAL
,

18 
PPM_PAUSE_VAL
, 
MIN_PWM_VAL
,

19 
PPM_PAUSE_VAL
, 
MIN_PWM_VAL
,

20 
PPM_PAUSE_VAL
, 
MIN_PWM_VAL
,

21 
PPM_PAUSE_VAL
, 
PPM_SYNC_PULSE
}};

22 
uöt8_t
 
	gCuºítCh™√l
 = 0;

23 
uöt8_t
 
	gCuºítAºay
 = 0;

24 
uöt16_t
 
	gCou¡îVÆ
 = 0;

30 
öt16_t
 
	$PPM_CÆibøã
 (
öt16_t
 
vÆ
, 
SaveDomaö
 * 
P¨ams
, 
uöt8_t
 
ödex
)

32 
öt16_t
 
sˇÀdVÆ
 = 0;

33 
sˇÀdVÆ
 = 
vÆ
 + 
P¨ams
->
ADC_P¨ams
.
CÆibøti⁄
 [1][
ödex
];

34 i‡((
sˇÀdVÆ
 < 
P¨ams
->
ADC_P¨ams
.
DódZ⁄e
[
ödex
]) && (scaledVal > -Params->ADC_Params.DeadZone[index])) scaledVal = 0;

35 
sˇÀdVÆ
 +
P¨ams
->
ADC_P¨ams
.
Trimmîs
 [
ödex
];

37 i‡(
sˇÀdVÆ
 > 0)

39 
sˇÀdVÆ
 = 
	`m≠
 (sˇÀdVÆ,0,
P¨ams
->
ADC_P¨ams
.
CÆibøti⁄
 [2][
ödex
],0,
SCALE_FACTOR
);

40 i‡(
sˇÀdVÆ
 > 
SCALE_FACTOR
) scaledVal = SCALE_FACTOR;

44 
sˇÀdVÆ
 = 
	`m≠
 (sˇÀdVÆ, 
P¨ams
->
ADC_P¨ams
.
CÆibøti⁄
 [0][
ödex
],0,-
SCALE_FACTOR
,0);

45 i‡(
sˇÀdVÆ
 < -
SCALE_FACTOR
) scaledVal = -SCALE_FACTOR;

48  
sˇÀdVÆ
;

49 
	}
}

52 
	$TIM1_CC_IRQH™dÀr
 ()

55 
uöt32_t
 
tmp
 = 
TIM1
->
SR
;

56 
tmp
 &
TIM1
->
DIER
;

57 
TIM1
->
SR
 = 0;

60 i‡(
tmp
 & 
TIM_SR_CC1IF
)

62 i‡(
CuºítCh™√l
 < 16)

64 
Cou¡îVÆ
 +
VÆues
[
CuºítAºay
][
CuºítCh™√l
++];

65 
TIM1
->
CCR1
 = 
Cou¡îVÆ
;

67 i‡(
CuºítCh™√l
 == 16)

69 
Cou¡îVÆ
 = 
VÆues
[
CuºítAºay
][
CuºítCh™√l
++];;

70 
TIM1
->
CCR1
 = 
Cou¡îVÆ
;

74 
CuºítCh™√l
 = 0;

75 
TIM1
->
CCR1
 = 
PWM_ARR
;

76 
Cou¡îVÆ
=0;

82 i‡(
tmp
 & 
TIM_SR_UIF
)

85 
CuºítCh™√l
 = 0;

86 
Cou¡îVÆ
 = 
VÆues
[
CuºítAºay
][
CuºítCh™√l
++];;

87 
TIM1
->
CCR1
 = 
Cou¡îVÆ
;

98 
	}
}

100 
	$PPMöô
 ()

102 
RCC
->
APB2ENR
 |
RCC_APB2ENR_TIM1EN
;

103 
RCC
->
APB2ENR
 |(
RCC_APB2ENR_IOPAEN
 | 
RCC_APB2ENR_AFIOEN
);

111 
GPIOA
->
CRH
 &~(
GPIO_CRH_CNF8
 | 
GPIO_CRH_MODE8
);

112 
GPIOA
->
CRH
 |(
GPIO_CRH_MODE8_1
 | 
GPIO_CRH_CNF8_1
);

113 
GPIOA
->
BSRR
 = 
GPIO_PIN_8
;

117 
TIM1
->
ARR
 = 
PWM_ARR
;

118 
TIM1
->
CR1
 |
TIM_CR1_ARPE
;

119 
TIM1
->
PSC
 = 
PWM_PSC
;

120 
TIM1
->
CCR1
 = 0x10;

125 
TIM1
->
CCMR1
 |
TIM_CCMR1_OC1M_0


126 | 
TIM_CCMR1_OC1M_1
;

133 
TIM1
->
DIER
 |
TIM_DIER_CC1IE
;

134 
TIM1
->
CCER
 |
TIM_CCER_CC1E
;

136 
	`NVIC_E«bÀIRQ
(
TIM1_CC_IRQn
);

138 
TIM1
->
BDTR
 |
TIM_BDTR_AOE
;

139 
TIM1
->
EGR
 |
TIM_EGR_UG
;

140 
TIM1
->
CR1
 |
TIM_CR1_CEN
;

142 
	}
}

144 
	$PPMupd©e
 (
öt32_t
 * 
¨
, 
SaveDomaö
* 
P¨ams
)

146 
uöt8_t
 
¨_ödex
 = 
CuºítAºay
;

147 
uöt16_t
 
µm_Àn
 =0;

148 
¨_ödex
 ^= 1;

156 
i
 = 0; i<8;i++)

158 
VÆues
 [
¨_ödex
][
i
*2] = 
	`PPM_CÆibøã
 (
¨
[
P¨ams
->
Ch™√ls_M≠pög
[i]],P¨ams,P¨ams->Ch™√ls_M≠pög[i]Ë+ 
MIN_PWM_VAL
 + 
SCALE_FACTOR
 - 
PPM_PAUSE_VAL
;

159 
µm_Àn
 +
PPM_PAUSE_VAL
 + 
VÆues
 [
¨_ödex
][
i
*2];

168 
CuºítAºay
 = 
¨_ödex
;

170 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\Src\encoder.c

1 
	~"ícodî.h
"

3 
öt16_t
 
	gEncodîVÆue
 = 0;

4 
öt8_t
 
	gEncodîDñè
 = 0;

5 
uöt8_t
 
	gEncodîSwôch
 = 0;

6 
uöt16_t
 
	gEncBuâ⁄Time
 = 0;

7 
uöt8_t
 
	gLa°Buâ⁄Sèã
 = 1;

26 
	$ENCöô12
 ()

28 
RCC
->
APB2ENR
 |
RCC_APB2ENR_AFIOEN
;

29 
RCC
->
APB1ENR
 |
RCC_APB1ENR_TIM3EN
;

30 
RCC
->
APB2ENR
 |
RCC_APB2ENR_IOPCEN
;

31 
AFIO
->
MAPR
 |=
AFIO_MAPR_TIM3_REMAP_FULLREMAP
;

39 
GPIOC
->
CRL
 &~(
GPIO_CRL_CNF6
 | 
GPIO_CRL_CNF7
 | 
GPIO_CRL_MODE6
 | 
GPIO_CRL_MODE7
);

40 
GPIOC
->
CRL
 |(
GPIO_CRL_CNF6_1
 | 
GPIO_CRL_CNF7_1
);

41 
GPIOC
->
ODR
 |
GPIO_ODR_ODR6
 | 
GPIO_ODR_ODR7
;

44 
GPIOB
->
CRH
 &~(
GPIO_CRH_MODE12
 | 
GPIO_CRH_CNF12
);

45 
GPIOB
->
CRH
 |(
GPIO_CRH_CNF12_1
);

46 
GPIOB
->
ODR
 |
GPIO_ODR_ODR12
;

48 
TIM3
->
ARR
 = 
ENC_ARR
;

51 
TIM3
->
SMCR
 |
TIM_SMCR_SMS_1
;

55 
TIM3
->
CCER
 = 
TIM_CCER_CC1P
 | 
TIM_CCER_CC2P
;

58 
TIM3
->
CCMR1
 |
TIM_CCMR1_CC1S_0
 | 
TIM_CCMR1_CC2S_0
;

60 
TIM3
->
CCMR1
 |
TIM_CCMR1_IC1F_0
 | 
TIM_CCMR1_IC1F_1


61 | 
TIM_CCMR1_IC2F_0
 | 
TIM_CCMR1_IC2F_1
;

63 
TIM3
->
EGR
 |
TIM_EGR_UG
;

64 
TIM3
->
CNT
 = 
ENC_ARR
/2;

65 
TIM3
->
SR
 = 0;

71 
TIM3
->
CR1
 |
TIM_CR1_CEN
;

72 
	}
}

75 
	$ENC_Task
 ( *
pvP¨amëîs
 )

80 
EncodîDñè
 = (
TIM3
->
CNT
-
ENC_ARR
/2);

81 
TIM3
->
CNT
 = 
ENC_ARR
/2;

82 
EncodîVÆue
 +
EncodîDñè
*10;

84 i‡(
EncodîVÆue
 > 
ENC_MAX
) EncoderValue = ENC_MAX;

85 i‡(
EncodîVÆue
 < -
ENC_MAX
) EncoderValue = -ENC_MAX;

87 
EncodîSwôch
 = 
	`HAL_GPIO_RódPö
(
GPIOB
,
GPIO_PIN_12
);

92 i‡((
EncodîSwôch
Ë&& (!
La°Buâ⁄Sèã
))

94 i‡(
EncBuâ⁄Time
 < 
LONG_CLICK_INTERVAL
Ë
Buâ⁄s
 |
ENCODER_BUTTON_MASK
;

95 
Buâ⁄s
 |
ENCODER_LONGBTN_MASK
;

96 
EncBuâ⁄Time
 = 0;

98 i‡(!
EncodîSwôch
)

100 
Buâ⁄s
 &~
ENCODER_RESETALL_MASK
;

101 
EncBuâ⁄Time
++;

105 
Buâ⁄s
 &~
ENCODER_RESUPDOWN_MASK
;

106 i‡(
EncodîDñè
 > 0Ë
Buâ⁄s
 |
ENCODER_UP_MASK
;

107 i‡(
EncodîDñè
 < 0Ë
Buâ⁄s
 |
ENCODER_DOWN_MASK
;

109 
La°Buâ⁄Sèã
 = 
EncodîSwôch
;

111 
	`vTaskDñay
–
ENCODER_INTERVAL
 / 
p‹tTICK_RATE_MS
 );

113 
	}
}

115 
	$EncodîInô
 ()

117 
	`ENCöô12
 ();

119 
	`xTaskCª©e
–
ENC_Task
,"ENC_Task", 
c⁄figMINIMAL_STACK_SIZE
, 
NULL
, 
ENC_Task_PRIORITY
, NULL );

120 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\Src\flash.c

2 
	~"Êash.h
"

5 
	$Êash_u∆ock
()

7 
FLASH
->
KEYR
 = 
FLASH_KEY1
;

8 
FLASH
->
KEYR
 = 
FLASH_KEY2
;

9 
	}
}

13 
	$Êash_îa£_∑ge
(
uöt32_t
 
addªss
)

15 
FLASH
->
CR
|
FLASH_CR_PER
;

16 
FLASH
->
AR
 = 
addªss
;

17 
FLASH
->
CR
|
FLASH_CR_STRT
;

18 (
FLASH
->
SR
 & 
FLASH_SR_BSY
) != 0 );

19 
FLASH
->
CR
&~
FLASH_CR_PER
;

20 
	}
}

23 
	$WrôeFœsh
(* 
Src
, * 
D°
, 
Lí
)

25 
uöt16_t
* 
SrcW
 = (uöt16_t*)
Src
;

26 vﬁ©ûê
uöt16_t
* 
D°W
 = (uöt16_t*)
D°
;

28 
FLASH
->
CR
 |
FLASH_CR_PG
;

29 
Lí
)

31 *
D°W
++ = *
SrcW
++;

32 
Lí
 -(
uöt16_t
);

33 (
FLASH
->
SR
 & 
FLASH_SR_BSY
) != 0 );

35 
FLASH
->
CR
 &~
FLASH_CR_PG
;

36 
	}
}

37 * 
	$FödNextAddr
 (
Àn
)

39 
uöt8_t
 * 
addr
 = (uöt8_à*)
LAST_PAGE
;

40 
addr
 <(
uöt8_t
 *)–
LAST_PAGE
+
PAGE_SIZE
-
Àn
))

42 i‡(*(
uöt32_t
*)
addr
 == 0xffffffff) áddr;

43 
addr
 +
Àn
;

45 
	`Êash_îa£_∑ge
 (
LAST_PAGE
);

46  (*)
LAST_PAGE
;

48 
	}
}

49 * 
	$födLa°Block
 (
Àn
)

51 
uöt8_t
 * 
addr
 = (uöt8_à*)
LAST_PAGE
;

53 i‡(*(
uöt32_t
*)
addr
 == 0xffffffff)  0;

55 
addr
 <(
uöt8_t
 *)–
LAST_PAGE
+
PAGE_SIZE
-
Àn
))

57 i‡(*(
uöt32_t
*)
addr
 == 0xffffffff)

59  
addr
-
Àn
;

61 
addr
 +
Àn
;

63  
addr
-
Àn
;;

64 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\Src\main.c

1 
	~"°m32f105xc.h
"

4 
	~"°m32f1xx_hÆ.h
"

5 
	~"GlobÆObje˘s.h
"

6 
	~"usb_devi˚.h
"

8 
	~"FªeRTOS.h
"

9 
	~"queue.h
"

10 
	~"èsk.h
"

11 
	~"£mphr.h
"

14 
	~"ADC.h
"

15 
	~"Êash.h
"

16 
	~"Buâ⁄s.h
"

17 
	~"GUI.h
"

18 
	~"Encodî.h
"

19 
	~"PPMsig.h
"

21 
	#Blök1_PRIORITY
 ( 
tskIDLE_PRIORITY
 + 0 )

	)

22 
	#PARAMETERS_HEADER
 0xA0B0A1B1

23 

	)

36 c⁄° 
HópRegi⁄_t
 
	gxHópRegi⁄s
[] =

38 { ( 
uöt8_t
 * ) 0x20002800UL, 
c⁄figTOTAL_HEAP_SIZE
 },

39 { 
NULL
, 0 }

43 
SaveDomaö
 
	gP¨amëîs
;

46 * 
	gSaveP¨amëîsAddr
;

51 
	$Re£tP¨amëîs
 ()

53 
P¨amëîs
.
LCD_Brô√ss
 = 
MAX_LCD_BRITNESS
;

54 
P¨amëîs
.
LCD_MADCTL
 = 
MADCTL_DEFAULT
;

55 
P¨amëîs
.
LCD_S¸ìnRŸ©i⁄
 = 0;

56 
	`ADC_SëDeÁu…P¨amëîs
 (&
P¨amëîs
.
ADC_P¨ams
);

58 
uöt8_t
 
i
=0;i<8;i++)

60 
P¨amëîs
.
Ch™√ls_M≠pög
[
i
] = i;

62 
uöt8_t
 
i
=0;i<32;i++)

64 
P¨amëîs
.
Buâ⁄sM≠pög
 [
i
] = i;

67 
SaveP¨amëîsAddr
 = (*Ë
LAST_PAGE
;

68 
	}
}

71 
	$Blök1
–*
pvP¨amëîs
 )

74 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘
;

76 
	`__HAL_RCC_GPIOC_CLK_ENABLE
();

78 
GPIO_InôSåu˘
.
Pö
 = 
GREEN_LED_Pö
;

79 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_OUTPUT_PP
;

80 
GPIO_InôSåu˘
.
S≥ed
 = 
GPIO_SPEED_LOW
;

81 
	`HAL_GPIO_Inô
(
GREEN_LED_GPIO_P‹t
, &
GPIO_InôSåu˘
);

85 
	`__HAL_RCC_GPIOA_CLK_ENABLE
();

86 
GPIO_InôSåu˘
.
Pö
 = 
GPIO_PIN_15
;

87 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_OUTPUT_PP
;

88 
GPIO_InôSåu˘
.
S≥ed
 = 
GPIO_SPEED_LOW
;

89 
	`HAL_GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘
);

91 
	`HAL_GPIO_WrôePö
(
GPIOA
,
GPIO_PIN_15
,
GPIO_PIN_SET
);

127 
	`HAL_GPIO_ToggÀPö
(
GREEN_LED_GPIO_P‹t
,
GREEN_LED_Pö
);

130 
	`HAL_Dñay
 (100);

133 
	}
}

135 
uöt32_t
 
	$HAL_GëTick
()

137  
	`xTaskGëTickCou¡
();

138 
	}
}

139 
	$HAL_Dñay
(
__IO
 
uöt32_t
 
Dñay
)

141 
TickTy≥_t
 
ticks
 = 
Dñay
 / 
p‹tTICK_PERIOD_MS
;

142 
	`vTaskDñay
(
ticks
 ?Åicks : 1);

143 
	}
}

148 
	$Sy°emClock_C⁄fig
()

151 
RCC_OscInôTy≥Def
 
RCC_OscInôSåu˘
;

152 
RCC_ClkInôTy≥Def
 
RCC_ClkInôSåu˘
;

153 
RCC_PîùhCLKInôTy≥Def
 
PîùhClkInô
;

155 
RCC_OscInôSåu˘
.
Oscûœt‹Ty≥
 = 
RCC_OSCILLATORTYPE_HSE
;

156 
RCC_OscInôSåu˘
.
HSESèã
 = 
RCC_HSE_ON
;

157 
RCC_OscInôSåu˘
.
HSEPªdivVÆue
 = 
RCC_HSE_PREDIV_DIV1
;

158 
RCC_OscInôSåu˘
.
Pªdiv1Sour˚
 = 
RCC_PREDIV1_SOURCE_HSE
;

159 
RCC_OscInôSåu˘
.
PLL
.
PLLSèã
 = 
RCC_PLL_ON
;

160 
RCC_OscInôSåu˘
.
PLL
.
PLLSour˚
 = 
RCC_PLLSOURCE_HSE
;

161 
RCC_OscInôSåu˘
.
PLL
.
PLLMUL
 = 
RCC_PLL_MUL9
;

162 
RCC_OscInôSåu˘
.
PLL2
.
PLL2Sèã
 = 
RCC_PLL_NONE
;

163 
	`HAL_RCC_OscC⁄fig
(&
RCC_OscInôSåu˘
);

165 
RCC_ClkInôSåu˘
.
ClockTy≥
 = 
RCC_CLOCKTYPE_SYSCLK
|
RCC_CLOCKTYPE_PCLK1
;

166 
RCC_ClkInôSåu˘
.
SYSCLKSour˚
 = 
RCC_SYSCLKSOURCE_PLLCLK
;

167 
RCC_ClkInôSåu˘
.
AHBCLKDividî
 = 
RCC_SYSCLK_DIV1
;

168 
RCC_ClkInôSåu˘
.
APB1CLKDividî
 = 
RCC_HCLK_DIV2
;

169 
RCC_ClkInôSåu˘
.
APB2CLKDividî
 = 
RCC_HCLK_DIV1
;

170 
	`HAL_RCC_ClockC⁄fig
(&
RCC_ClkInôSåu˘
, 
FLASH_LATENCY_2
);

172 
PîùhClkInô
.
PîùhClockSñe˘i⁄
 = 
RCC_PERIPHCLK_ADC
|
RCC_PERIPHCLK_USB
;

173 
PîùhClkInô
.
AdcClockSñe˘i⁄
 = 
RCC_ADCPCLK2_DIV6
;

174 
PîùhClkInô
.
UsbClockSñe˘i⁄
 = 
RCC_USBPLLCLK_DIV3
;

175 
	`HAL_RCCEx_PîùhCLKC⁄fig
(&
PîùhClkInô
);

185 
	}
}

188 
	$maö
()

195 
	`vP‹tDeföeHópRegi⁄s
–
xHópRegi⁄s
 );

198 
	`HAL_Inô
();

201 
	`Sy°emClock_C⁄fig
();

205 
P¨amëîs
.
hódî
 = 
PARAMETERS_HEADER
;

207 
SaveP¨amëîsAddr
 = 
	`födLa°Block
 ( (
P¨amëîs
));

208 i‡(
SaveP¨amëîsAddr
)

210 
	`mem˝y
 (&
P¨amëîs
,
SaveP¨amëîsAddr
, (Parameters));

214 
	`Re£tP¨amëîs
 ();

216 
	`Êash_u∆ock
();

220 
	`Buâ⁄sInô
();

221 
	`ADC_InôProc
 (&
P¨amëîs
.
ADC_P¨ams
);

222 
	`USB_DEVICE_Inô
 ();

223 
	`GUI_öô
();

224 
	`EncodîInô
();

225 
	`PPMöô
();

228 
	`xTaskCª©e
–
Blök1
,"Blök1", 
c⁄figMINIMAL_STACK_SIZE
, 
NULL
, 
Blök1_PRIORITY
, NULL );

231 
	`vTaskSèπScheduÀr
();

232 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\Src\startup_stm32f105xc.S

46 .
sy¡ax
 
	gunifõd


47 .
˝u
 
	gc‹ãx
-
	gm3


48 .
Âu
 
	gso·vÂ


49 .
	gthumb


51 .
globÆ
 
	gg_p‚Ve˘‹s


52 .
globÆ
 
	gDeÁu…_H™dÀr


56 .
w‹d
 
	g_sid©a


58 .
w‹d
 
	g_sd©a


60 .
w‹d
 
	g_ed©a


62 .
w‹d
 
	g_sbss


64 .
w‹d
 
	g_ebss


66 .
equ
 
	gBoŸRAM
, 0xF1E0F85F

76 .
	g£˘i⁄
 .
	gãxt
.
	gRe£t_H™dÀr


77 .
wók
 
	gRe£t_H™dÀr


78 .
ty≥
 
	gRe£t_H™dÀr
, %
fun˘i⁄


79 
	gRe£t_H™dÀr
:

82 
movs
 
r1
, #0

83 
b
 
Lo›C›yD©aInô


85 
	gC›yD©aInô
:

86 
ldr
 
r3
, =
_sid©a


87 
ldr
 
r3
, [r3, 
r1
]

88 
°r
 
	gr3
, [
r0
, 
r1
]

89 
adds
 
	gr1
,Ñ1, #4

91 
	gLo›C›yD©aInô
:

92 
ldr
 
r0
, =
_sd©a


93 
ldr
 
r3
, =
_ed©a


94 
adds
 
r2
, 
	gr0
, 
r1


95 
cmp
 
	gr2
, 
r3


96 
bcc
 
C›yD©aInô


97 
ldr
 
	gr2
, =
_sbss


98 
b
 
Lo›FûlZîobss


101 
FûlZîobss
:

102 
movs
 
r3
, #0

103 
°r
 
	gr3
, [
r2
], #4

105 
	gLo›FûlZîobss
:

106 
ldr
 
r3
, = 
_ebss


107 
cmp
 
r2
, 
r3


108 
bcc
 
FûlZîobss


110 
bl
 
Sy°emInô


112 
bl
 
maö


113 
bx
 
	gÃ


114 .
size
 
	gRe£t_H™dÀr
, .-Reset_Handler

123 .
	g£˘i⁄
 .
	gãxt
.
	gDeÁu…_H™dÀr
,"ax",%
¥ogbôs


124 
	gDeÁu…_H™dÀr
:

125 
Inföôe_Lo›
:

126 
b
 
Inföôe_Lo›


127 .
size
 
DeÁu…_H™dÀr
, .-
	gDeÁu…_H™dÀr


135 .
	g£˘i⁄
 .
	gi§_ve˘‹
,"a",%
	g¥ogbôs


136 .
ty≥
 
	gg_p‚Ve˘‹s
, %
	gobje˘


137 .
size
 
	gg_p‚Ve˘‹s
, .-
g_p‚Ve˘‹s


140 
	gg_p‚Ve˘‹s
:

142 .
w‹d
 
_e°ack


143 .
w‹d
 
Re£t_H™dÀr


144 .
w‹d
 
NMI_H™dÀr


145 .
w‹d
 
H¨dFau…_H™dÀr


146 .
w‹d
 
MemM™age_H™dÀr


147 .
w‹d
 
BusFau…_H™dÀr


148 .
w‹d
 
UßgeFau…_H™dÀr


149 .
w‹d
 0

150 .
w‹d
 0

151 .
w‹d
 0

152 .
w‹d
 0

153 .
w‹d
 
SVC_H™dÀr


154 .
w‹d
 
DebugM⁄_H™dÀr


155 .
w‹d
 0

156 .
w‹d
 
PídSV_H™dÀr


157 .
w‹d
 
SysTick_H™dÀr


158 .
w‹d
 
WWDG_IRQH™dÀr


159 .
w‹d
 
PVD_IRQH™dÀr


160 .
w‹d
 
TAMPER_IRQH™dÀr


161 .
w‹d
 
RTC_IRQH™dÀr


162 .
w‹d
 
FLASH_IRQH™dÀr


163 .
w‹d
 
RCC_IRQH™dÀr


164 .
w‹d
 
EXTI0_IRQH™dÀr


165 .
w‹d
 
EXTI1_IRQH™dÀr


166 .
w‹d
 
EXTI2_IRQH™dÀr


167 .
w‹d
 
EXTI3_IRQH™dÀr


168 .
w‹d
 
EXTI4_IRQH™dÀr


169 .
w‹d
 
DMA1_Ch™√l1_IRQH™dÀr


170 .
w‹d
 
DMA1_Ch™√l2_IRQH™dÀr


171 .
w‹d
 
DMA1_Ch™√l3_IRQH™dÀr


172 .
w‹d
 
DMA1_Ch™√l4_IRQH™dÀr


173 .
w‹d
 
DMA1_Ch™√l5_IRQH™dÀr


174 .
w‹d
 
DMA1_Ch™√l6_IRQH™dÀr


175 .
w‹d
 
DMA1_Ch™√l7_IRQH™dÀr


176 .
w‹d
 
ADC1_2_IRQH™dÀr


177 .
w‹d
 
CAN1_TX_IRQH™dÀr


178 .
w‹d
 
CAN1_RX0_IRQH™dÀr


179 .
w‹d
 
CAN1_RX1_IRQH™dÀr


180 .
w‹d
 
CAN1_SCE_IRQH™dÀr


181 .
w‹d
 
EXTI9_5_IRQH™dÀr


182 .
w‹d
 
TIM1_BRK_IRQH™dÀr


183 .
w‹d
 
TIM1_UP_IRQH™dÀr


184 .
w‹d
 
TIM1_TRG_COM_IRQH™dÀr


185 .
w‹d
 
TIM1_CC_IRQH™dÀr


186 .
w‹d
 
TIM2_IRQH™dÀr


187 .
w‹d
 
TIM3_IRQH™dÀr


188 .
w‹d
 
TIM4_IRQH™dÀr


189 .
w‹d
 
I2C1_EV_IRQH™dÀr


190 .
w‹d
 
I2C1_ER_IRQH™dÀr


191 .
w‹d
 
I2C2_EV_IRQH™dÀr


192 .
w‹d
 
I2C2_ER_IRQH™dÀr


193 .
w‹d
 
SPI1_IRQH™dÀr


194 .
w‹d
 
SPI2_IRQH™dÀr


195 .
w‹d
 
USART1_IRQH™dÀr


196 .
w‹d
 
USART2_IRQH™dÀr


197 .
w‹d
 
USART3_IRQH™dÀr


198 .
w‹d
 
EXTI15_10_IRQH™dÀr


199 .
w‹d
 
RTC_Aœrm_IRQH™dÀr


200 .
w‹d
 
OTG_FS_WKUP_IRQH™dÀr


201 .
w‹d
 0

202 .
w‹d
 0

203 .
w‹d
 0

204 .
w‹d
 0

205 .
w‹d
 0

206 .
w‹d
 0

207 .
w‹d
 0

208 .
w‹d
 
TIM5_IRQH™dÀr


209 .
w‹d
 
SPI3_IRQH™dÀr


210 .
w‹d
 
UART4_IRQH™dÀr


211 .
w‹d
 
UART5_IRQH™dÀr


212 .
w‹d
 
TIM6_IRQH™dÀr


213 .
w‹d
 
TIM7_IRQH™dÀr


214 .
w‹d
 
DMA2_Ch™√l1_IRQH™dÀr


215 .
w‹d
 
DMA2_Ch™√l2_IRQH™dÀr


216 .
w‹d
 
DMA2_Ch™√l3_IRQH™dÀr


217 .
w‹d
 
DMA2_Ch™√l4_IRQH™dÀr


218 .
w‹d
 
DMA2_Ch™√l5_IRQH™dÀr


219 .
w‹d
 0

220 .
w‹d
 0

221 .
w‹d
 
CAN2_TX_IRQH™dÀr


222 .
w‹d
 
CAN2_RX0_IRQH™dÀr


223 .
w‹d
 
CAN2_RX1_IRQH™dÀr


224 .
w‹d
 
CAN2_SCE_IRQH™dÀr


225 .
w‹d
 
OTG_FS_IRQH™dÀr


226 .
w‹d
 0

227 .
w‹d
 0

228 .
w‹d
 0

229 .
w‹d
 0

230 .
w‹d
 0

231 .
w‹d
 0

232 .
w‹d
 0

233 .
w‹d
 0

234 .
w‹d
 0

235 .
w‹d
 0

236 .
w‹d
 0

237 .
w‹d
 0

238 .
w‹d
 0

239 .
w‹d
 0

240 .
w‹d
 0

241 .
w‹d
 0

242 .
w‹d
 0

243 .
w‹d
 0

244 .
w‹d
 0

245 .
w‹d
 0

246 .
w‹d
 0

247 .
w‹d
 0

248 .
w‹d
 0

249 .
w‹d
 0

250 .
w‹d
 0

251 .
w‹d
 0

252 .
w‹d
 0

253 .
w‹d
 0

254 .
w‹d
 0

255 .
w‹d
 0

256 .
w‹d
 0

257 .
w‹d
 0

258 .
w‹d
 0

259 .
w‹d
 0

260 .
w‹d
 0

261 .
w‹d
 0

262 .
w‹d
 
BoŸRAM


272 .
wók
 
NMI_H™dÀr


273 .
thumb_£t
 
NMI_H™dÀr
,
	gDeÁu…_H™dÀr


275 .
wók
 
	gH¨dFau…_H™dÀr


276 .
thumb_£t
 
	gH¨dFau…_H™dÀr
,
	gDeÁu…_H™dÀr


278 .
wók
 
	gMemM™age_H™dÀr


279 .
thumb_£t
 
	gMemM™age_H™dÀr
,
	gDeÁu…_H™dÀr


281 .
wók
 
	gBusFau…_H™dÀr


282 .
thumb_£t
 
	gBusFau…_H™dÀr
,
	gDeÁu…_H™dÀr


284 .
wók
 
	gUßgeFau…_H™dÀr


285 .
thumb_£t
 
	gUßgeFau…_H™dÀr
,
	gDeÁu…_H™dÀr


287 .
wók
 
	gSVC_H™dÀr


288 .
thumb_£t
 
	gSVC_H™dÀr
,
	gDeÁu…_H™dÀr


290 .
wók
 
	gDebugM⁄_H™dÀr


291 .
thumb_£t
 
	gDebugM⁄_H™dÀr
,
	gDeÁu…_H™dÀr


293 .
wók
 
	gPídSV_H™dÀr


294 .
thumb_£t
 
	gPídSV_H™dÀr
,
	gDeÁu…_H™dÀr


296 .
wók
 
	gSysTick_H™dÀr


297 .
thumb_£t
 
	gSysTick_H™dÀr
,
	gDeÁu…_H™dÀr


299 .
wók
 
	gWWDG_IRQH™dÀr


300 .
thumb_£t
 
	gWWDG_IRQH™dÀr
,
	gDeÁu…_H™dÀr


302 .
wók
 
	gPVD_IRQH™dÀr


303 .
thumb_£t
 
	gPVD_IRQH™dÀr
,
	gDeÁu…_H™dÀr


305 .
wók
 
	gTAMPER_IRQH™dÀr


306 .
thumb_£t
 
	gTAMPER_IRQH™dÀr
,
	gDeÁu…_H™dÀr


308 .
wók
 
	gRTC_IRQH™dÀr


309 .
thumb_£t
 
	gRTC_IRQH™dÀr
,
	gDeÁu…_H™dÀr


311 .
wók
 
	gFLASH_IRQH™dÀr


312 .
thumb_£t
 
	gFLASH_IRQH™dÀr
,
	gDeÁu…_H™dÀr


314 .
wók
 
	gRCC_IRQH™dÀr


315 .
thumb_£t
 
	gRCC_IRQH™dÀr
,
	gDeÁu…_H™dÀr


317 .
wók
 
	gEXTI0_IRQH™dÀr


318 .
thumb_£t
 
	gEXTI0_IRQH™dÀr
,
	gDeÁu…_H™dÀr


320 .
wók
 
	gEXTI1_IRQH™dÀr


321 .
thumb_£t
 
	gEXTI1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


323 .
wók
 
	gEXTI2_IRQH™dÀr


324 .
thumb_£t
 
	gEXTI2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


326 .
wók
 
	gEXTI3_IRQH™dÀr


327 .
thumb_£t
 
	gEXTI3_IRQH™dÀr
,
	gDeÁu…_H™dÀr


329 .
wók
 
	gEXTI4_IRQH™dÀr


330 .
thumb_£t
 
	gEXTI4_IRQH™dÀr
,
	gDeÁu…_H™dÀr


332 .
wók
 
	gDMA1_Ch™√l1_IRQH™dÀr


333 .
thumb_£t
 
	gDMA1_Ch™√l1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


335 .
wók
 
	gDMA1_Ch™√l2_IRQH™dÀr


336 .
thumb_£t
 
	gDMA1_Ch™√l2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


338 .
wók
 
	gDMA1_Ch™√l3_IRQH™dÀr


339 .
thumb_£t
 
	gDMA1_Ch™√l3_IRQH™dÀr
,
	gDeÁu…_H™dÀr


341 .
wók
 
	gDMA1_Ch™√l4_IRQH™dÀr


342 .
thumb_£t
 
	gDMA1_Ch™√l4_IRQH™dÀr
,
	gDeÁu…_H™dÀr


344 .
wók
 
	gDMA1_Ch™√l5_IRQH™dÀr


345 .
thumb_£t
 
	gDMA1_Ch™√l5_IRQH™dÀr
,
	gDeÁu…_H™dÀr


347 .
wók
 
	gDMA1_Ch™√l6_IRQH™dÀr


348 .
thumb_£t
 
	gDMA1_Ch™√l6_IRQH™dÀr
,
	gDeÁu…_H™dÀr


350 .
wók
 
	gDMA1_Ch™√l7_IRQH™dÀr


351 .
thumb_£t
 
	gDMA1_Ch™√l7_IRQH™dÀr
,
	gDeÁu…_H™dÀr


353 .
wók
 
	gADC1_2_IRQH™dÀr


354 .
thumb_£t
 
	gADC1_2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


356 .
wók
 
	gCAN1_TX_IRQH™dÀr


357 .
thumb_£t
 
	gCAN1_TX_IRQH™dÀr
,
	gDeÁu…_H™dÀr


359 .
wók
 
	gCAN1_RX0_IRQH™dÀr


360 .
thumb_£t
 
	gCAN1_RX0_IRQH™dÀr
,
	gDeÁu…_H™dÀr


362 .
wók
 
	gCAN1_RX1_IRQH™dÀr


363 .
thumb_£t
 
	gCAN1_RX1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


365 .
wók
 
	gCAN1_SCE_IRQH™dÀr


366 .
thumb_£t
 
	gCAN1_SCE_IRQH™dÀr
,
	gDeÁu…_H™dÀr


368 .
wók
 
	gEXTI9_5_IRQH™dÀr


369 .
thumb_£t
 
	gEXTI9_5_IRQH™dÀr
,
	gDeÁu…_H™dÀr


371 .
wók
 
	gTIM1_BRK_IRQH™dÀr


372 .
thumb_£t
 
	gTIM1_BRK_IRQH™dÀr
,
	gDeÁu…_H™dÀr


374 .
wók
 
	gTIM1_UP_IRQH™dÀr


375 .
thumb_£t
 
	gTIM1_UP_IRQH™dÀr
,
	gDeÁu…_H™dÀr


377 .
wók
 
	gTIM1_TRG_COM_IRQH™dÀr


378 .
thumb_£t
 
	gTIM1_TRG_COM_IRQH™dÀr
,
	gDeÁu…_H™dÀr


380 .
wók
 
	gTIM1_CC_IRQH™dÀr


381 .
thumb_£t
 
	gTIM1_CC_IRQH™dÀr
,
	gDeÁu…_H™dÀr


383 .
wók
 
	gTIM2_IRQH™dÀr


384 .
thumb_£t
 
	gTIM2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


386 .
wók
 
	gTIM3_IRQH™dÀr


387 .
thumb_£t
 
	gTIM3_IRQH™dÀr
,
	gDeÁu…_H™dÀr


389 .
wók
 
	gTIM4_IRQH™dÀr


390 .
thumb_£t
 
	gTIM4_IRQH™dÀr
,
	gDeÁu…_H™dÀr


392 .
wók
 
	gI2C1_EV_IRQH™dÀr


393 .
thumb_£t
 
	gI2C1_EV_IRQH™dÀr
,
	gDeÁu…_H™dÀr


395 .
wók
 
	gI2C1_ER_IRQH™dÀr


396 .
thumb_£t
 
	gI2C1_ER_IRQH™dÀr
,
	gDeÁu…_H™dÀr


398 .
wók
 
	gI2C2_EV_IRQH™dÀr


399 .
thumb_£t
 
	gI2C2_EV_IRQH™dÀr
,
	gDeÁu…_H™dÀr


401 .
wók
 
	gI2C2_ER_IRQH™dÀr


402 .
thumb_£t
 
	gI2C2_ER_IRQH™dÀr
,
	gDeÁu…_H™dÀr


404 .
wók
 
	gSPI1_IRQH™dÀr


405 .
thumb_£t
 
	gSPI1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


407 .
wók
 
	gSPI2_IRQH™dÀr


408 .
thumb_£t
 
	gSPI2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


410 .
wók
 
	gUSART1_IRQH™dÀr


411 .
thumb_£t
 
	gUSART1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


413 .
wók
 
	gUSART2_IRQH™dÀr


414 .
thumb_£t
 
	gUSART2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


416 .
wók
 
	gUSART3_IRQH™dÀr


417 .
thumb_£t
 
	gUSART3_IRQH™dÀr
,
	gDeÁu…_H™dÀr


419 .
wók
 
	gEXTI15_10_IRQH™dÀr


420 .
thumb_£t
 
	gEXTI15_10_IRQH™dÀr
,
	gDeÁu…_H™dÀr


422 .
wók
 
	gRTC_Aœrm_IRQH™dÀr


423 .
thumb_£t
 
	gRTC_Aœrm_IRQH™dÀr
,
	gDeÁu…_H™dÀr


425 .
wók
 
	gOTG_FS_WKUP_IRQH™dÀr


426 .
thumb_£t
 
	gOTG_FS_WKUP_IRQH™dÀr
,
	gDeÁu…_H™dÀr


428 .
wók
 
	gTIM5_IRQH™dÀr


429 .
thumb_£t
 
	gTIM5_IRQH™dÀr
,
	gDeÁu…_H™dÀr


431 .
wók
 
	gSPI3_IRQH™dÀr


432 .
thumb_£t
 
	gSPI3_IRQH™dÀr
,
	gDeÁu…_H™dÀr


434 .
wók
 
	gUART4_IRQH™dÀr


435 .
thumb_£t
 
	gUART4_IRQH™dÀr
,
	gDeÁu…_H™dÀr


437 .
wók
 
	gUART5_IRQH™dÀr


438 .
thumb_£t
 
	gUART5_IRQH™dÀr
,
	gDeÁu…_H™dÀr


440 .
wók
 
	gTIM6_IRQH™dÀr


441 .
thumb_£t
 
	gTIM6_IRQH™dÀr
,
	gDeÁu…_H™dÀr


443 .
wók
 
	gTIM7_IRQH™dÀr


444 .
thumb_£t
 
	gTIM7_IRQH™dÀr
,
	gDeÁu…_H™dÀr


446 .
wók
 
	gDMA2_Ch™√l1_IRQH™dÀr


447 .
thumb_£t
 
	gDMA2_Ch™√l1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


449 .
wók
 
	gDMA2_Ch™√l2_IRQH™dÀr


450 .
thumb_£t
 
	gDMA2_Ch™√l2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


452 .
wók
 
	gDMA2_Ch™√l3_IRQH™dÀr


453 .
thumb_£t
 
	gDMA2_Ch™√l3_IRQH™dÀr
,
	gDeÁu…_H™dÀr


455 .
wók
 
	gDMA2_Ch™√l4_IRQH™dÀr


456 .
thumb_£t
 
	gDMA2_Ch™√l4_IRQH™dÀr
,
	gDeÁu…_H™dÀr


458 .
wók
 
	gDMA2_Ch™√l5_IRQH™dÀr


459 .
thumb_£t
 
	gDMA2_Ch™√l5_IRQH™dÀr
,
	gDeÁu…_H™dÀr


461 .
wók
 
	gCAN2_TX_IRQH™dÀr


462 .
thumb_£t
 
	gCAN2_TX_IRQH™dÀr
,
	gDeÁu…_H™dÀr


464 .
wók
 
	gCAN2_RX0_IRQH™dÀr


465 .
thumb_£t
 
	gCAN2_RX0_IRQH™dÀr
,
	gDeÁu…_H™dÀr


467 .
wók
 
	gCAN2_RX1_IRQH™dÀr


468 .
thumb_£t
 
	gCAN2_RX1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


470 .
wók
 
	gCAN2_SCE_IRQH™dÀr


471 .
thumb_£t
 
	gCAN2_SCE_IRQH™dÀr
,
	gDeÁu…_H™dÀr


473 .
wók
 
	gOTG_FS_IRQH™dÀr


474 .
thumb_£t
 
	gOTG_FS_IRQH™dÀr
 ,
	gDeÁu…_H™dÀr


	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\Src\usb_device.c

12 
	~"usb_devi˚.h
"

13 
	~"usbd_c‹e.h
"

14 
	~"usbd_desc.h
"

15 
	~"usbd_hid.h
"

18 
USBD_H™dÀTy≥Def
 
	ghUsbDevi˚FS
;

20 
PCD_H™dÀTy≥Def
 
hpcd_USB_OTG_FS
;

22 
gamïad_ªp‹t_t
 
	ggamePadRï‹t
;

23 
SídUSB
–*
pvP¨amëîs
 );

24 
MX_USB_DEVICE_Inô
();

27 
	$MX_USB_DEVICE_Inô
()

30 
	`USBD_Inô
(&
hUsbDevi˚FS
, &
FS_Desc
, 
DEVICE_FS
);

32 
	`USBD_Regi°îCœss
(&
hUsbDevi˚FS
, &
USBD_HID
);

34 
	`USBD_Sèπ
(&
hUsbDevi˚FS
);

36 
	}
}

41 
	$OTG_FS_IRQH™dÀr
()

43 
	`HAL_PCD_IRQH™dÀr
(&
hpcd_USB_OTG_FS
);

44 
	}
}

47 
	$SídUSB
–*
pvP¨amëîs
 )

50 
	`MX_USB_DEVICE_Inô
();

51 
öt16_t
 * 
ªp‹t
;

53 
	`HAL_Dñay
(5000);

57 i‡((
hUsbDevi˚FS
.
dev_°©e
 =
USBD_STATE_SUSPENDED
Ë|| (hUsbDevi˚FS.dev_°©ê=
USBD_STATE_CONFIGURED
));

59 
ªp‹t
 = (
öt16_t
*Ë&
gamePadRï‹t
;

61 
ªp‹t
[0] = 0;

62 
i
 = 0;i<16;i++)

65 i‡(
Buâ⁄s
 & (1<<
P¨amëîs
.
Buâ⁄sM≠pög
[
i
]))

67 
ªp‹t
[0] |(1<<
i
);

71 
i
 = 0;i<
JOY_AXIS_COUNT
;i++)

74 
ªp‹t
[
i
+1] = 
ADC_d©a_ˇlibøãd
 [
P¨amëîs
.
Ch™√ls_M≠pög
[i]];

77 
	`USBD_HID_SídRï‹t
 (&
hUsbDevi˚FS
, (
uöt8_t
*Ë
ªp‹t
,  (
gamePadRï‹t
));

92 
	`HAL_Dñay
(32);

97 
	}
}

99 
	$USB_DEVICE_Inô
()

101 
gamePadRï‹t
.
buâ⁄s
 = 0;

102 
gamePadRï‹t
.
X
 = 0;

103 
gamePadRï‹t
.
Y
 = 0;

104 
gamePadRï‹t
.
RX
 = 0;

105 
gamePadRï‹t
.
Z
 = 0;

106 
gamePadRï‹t
.
RY
 = 0;

107 
gamePadRï‹t
.
RZ
 = 0;

108 
gamePadRï‹t
.
An7
 = 0;

109 
gamePadRï‹t
.
An8
 = 0;

110 
	`xTaskCª©e
–
SídUSB
,"SídUSB", 
c⁄figMINIMAL_STACK_SIZE
, 
NULL
, 
tskIDLE_PRIORITY
+3, NULL );

111 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\Src\usbd_conf.c

35 
	~"°m32f1xx.h
"

36 
	~"°m32f1xx_hÆ.h
"

37 
	~"usbd_def.h
"

38 
	~"usbd_c‹e.h
"

39 
	~"usbd_hid.h
"

44 
PCD_H™dÀTy≥Def
 
	ghpcd_USB_OTG_FS
;

53 
HAL_PCDEx_SëC⁄√˘i⁄Sèã
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
°©e
);

60 
	$HAL_PCD_M•Inô
(
PCD_H™dÀTy≥Def
* 
hpcd
)

62 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘
;

63 if(
hpcd
->
In°™˚
==
USB_OTG_FS
)

72 
GPIO_InôSåu˘
.
Pö
 = 
GPIO_PIN_9
;

73 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_INPUT
;

74 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_NOPULL
;

75 
	`HAL_GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘
);

78 
	`__USB_OTG_FS_CLK_ENABLE
();

81 
	`HAL_NVIC_SëPri‹ôy
(
OTG_FS_IRQn
, 5, 0);

82 
	`HAL_NVIC_E«bÀIRQ
(
OTG_FS_IRQn
);

87 
	}
}

89 
	$HAL_PCD_M•DeInô
(
PCD_H™dÀTy≥Def
* 
hpcd
)

91 if(
hpcd
->
In°™˚
==
USB_OTG_FS
)

97 
	`__USB_OTG_FS_CLK_DISABLE
();

102 
	`HAL_GPIO_DeInô
(
GPIOA
, 
GPIO_PIN_9
);

105 
	`HAL_NVIC_DißbÀIRQ
(
OTG_FS_IRQn
);

111 
	}
}

118 
	$HAL_PCD_SëupSègeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

120 
	`USBD_LL_SëupSège
(
hpcd
->
pD©a
, (
uöt8_t
 *)hpcd->
Sëup
);

121 
	}
}

129 
	$HAL_PCD_D©aOutSègeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
)

131 
	`USBD_LL_D©aOutSège
(
hpcd
->
pD©a
, 
ïnum
, hpcd->
OUT_ï
[ïnum].
x„r_buff
);

132 
	}
}

140 
	$HAL_PCD_D©aInSègeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
)

142 
	`USBD_LL_D©aInSège
(
hpcd
->
pD©a
, 
ïnum
, hpcd->
IN_ï
[ïnum].
x„r_buff
);

143 
	}
}

150 
	$HAL_PCD_SOFCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

152 
	`USBD_LL_SOF
(
hpcd
->
pD©a
);

153 
	}
}

160 
	$HAL_PCD_Re£tCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

162 
USBD_S≥edTy≥Def
 
•ìd
 = 
USBD_SPEED_FULL
;

165 
hpcd
->
Inô
.
•ìd
)

167 
PCD_SPEED_HIGH
:

168 
•ìd
 = 
USBD_SPEED_HIGH
;

170 
PCD_SPEED_FULL
:

171 
•ìd
 = 
USBD_SPEED_FULL
;

175 
•ìd
 = 
USBD_SPEED_FULL
;

178 
	`USBD_LL_SëS≥ed
(
hpcd
->
pD©a
, 
•ìd
);

181 
	`USBD_LL_Re£t
(
hpcd
->
pD©a
);

182 
	}
}

190 
	$HAL_PCD_Su•ídCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

193 
	`USBD_LL_Su•íd
(
hpcd
->
pD©a
);

196 
	`__HAL_PCD_GATE_PHYCLOCK
(
hpcd
);

197 i‡(
hpcd
->
Inô
.
low_powî_íabÀ
)

200 
SCB
->
SCR
 |(
uöt32_t
)((uöt32_t)(
SCB_SCR_SLEEPDEEP_Msk
 | 
SCB_SCR_SLEEPONEXIT_Msk
));

203 
	}
}

211 
	$HAL_PCD_ResumeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

215 
	`USBD_LL_Resume
(
hpcd
->
pD©a
);

217 
	}
}

225 
	$HAL_PCD_ISOOUTIncom∂ëeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
)

227 
	`USBD_LL_IsoOUTIncom∂ëe
(
hpcd
->
pD©a
, 
ïnum
);

228 
	}
}

236 
	$HAL_PCD_ISOINIncom∂ëeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
)

238 
	`USBD_LL_IsoINIncom∂ëe
(
hpcd
->
pD©a
, 
ïnum
);

239 
	}
}

246 
	$HAL_PCD_C⁄√˘CÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

248 
	`USBD_LL_DevC⁄√˘ed
(
hpcd
->
pD©a
);

249 
	}
}

256 
	$HAL_PCD_Disc⁄√˘CÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

258 
	`USBD_LL_DevDisc⁄√˘ed
(
hpcd
->
pD©a
);

259 
	}
}

269 
USBD_SètusTy≥Def
 
	$USBD_LL_Inô
 (
USBD_H™dÀTy≥Def
 *
pdev
)

272 i‡(
pdev
->
id
 =
DEVICE_FS
) {

274 
hpcd_USB_OTG_FS
.
pD©a
 = 
pdev
;

275 
pdev
->
pD©a
 = &
hpcd_USB_OTG_FS
;

277 
hpcd_USB_OTG_FS
.
In°™˚
 = 
USB_OTG_FS
;

278 
hpcd_USB_OTG_FS
.
Inô
.
dev_ídpoöts
 = 7;

279 
hpcd_USB_OTG_FS
.
Inô
.
•ìd
 = 
PCD_SPEED_FULL
;

280 
hpcd_USB_OTG_FS
.
Inô
.
ï0_mps
 = 
DEP0CTL_MPS_64
;

281 
hpcd_USB_OTG_FS
.
Inô
.
Sof_íabÀ
 = 
DISABLE
;

282 
hpcd_USB_OTG_FS
.
Inô
.
low_powî_íabÀ
 = 
DISABLE
;

283 
hpcd_USB_OTG_FS
.
Inô
.
vbus_£nsög_íabÀ
 = 
ENABLE
;

284 
	`HAL_PCD_Inô
(&
hpcd_USB_OTG_FS
);

286 
	`HAL_PCD_SëRxFiFo
(&
hpcd_USB_OTG_FS
, 0x80);

287 
	`HAL_PCD_SëTxFiFo
(&
hpcd_USB_OTG_FS
, 0, 0x40);

288 
	`HAL_PCD_SëTxFiFo
(&
hpcd_USB_OTG_FS
, 1, 0x80);

290  
USBD_OK
;

291 
	}
}

298 
USBD_SètusTy≥Def
 
	$USBD_LL_DeInô
 (
USBD_H™dÀTy≥Def
 *
pdev
)

300 
	`HAL_PCD_DeInô
(
pdev
->
pD©a
);

301  
USBD_OK
;

302 
	}
}

309 
USBD_SètusTy≥Def
 
	$USBD_LL_Sèπ
(
USBD_H™dÀTy≥Def
 *
pdev
)

311 
	`HAL_PCD_Sèπ
(
pdev
->
pD©a
);

312  
USBD_OK
;

313 
	}
}

320 
USBD_SètusTy≥Def
 
	$USBD_LL_St›
 (
USBD_H™dÀTy≥Def
 *
pdev
)

322 
	`HAL_PCD_St›
(
pdev
->
pD©a
);

323  
USBD_OK
;

324 
	}
}

334 
USBD_SètusTy≥Def
 
	$USBD_LL_O≥nEP
 (
USBD_H™dÀTy≥Def
 *
pdev
,

335 
uöt8_t
 
ï_addr
,

336 
uöt8_t
 
ï_ty≥
,

337 
uöt16_t
 
ï_mps
)

340 
	`HAL_PCD_EP_O≥n
(
pdev
->
pD©a
,

341 
ï_addr
,

342 
ï_mps
,

343 
ï_ty≥
);

345  
USBD_OK
;

346 
	}
}

354 
USBD_SètusTy≥Def
 
	$USBD_LL_Clo£EP
 (
USBD_H™dÀTy≥Def
 *
pdev
, 
uöt8_t
 
ï_addr
)

357 
	`HAL_PCD_EP_Clo£
(
pdev
->
pD©a
, 
ï_addr
);

358  
USBD_OK
;

359 
	}
}

367 
USBD_SètusTy≥Def
 
	$USBD_LL_FlushEP
 (
USBD_H™dÀTy≥Def
 *
pdev
, 
uöt8_t
 
ï_addr
)

370 
	`HAL_PCD_EP_Flush
(
pdev
->
pD©a
, 
ï_addr
);

371  
USBD_OK
;

372 
	}
}

380 
USBD_SètusTy≥Def
 
	$USBD_LL_SèŒEP
 (
USBD_H™dÀTy≥Def
 *
pdev
, 
uöt8_t
 
ï_addr
)

383 
	`HAL_PCD_EP_SëSèŒ
(
pdev
->
pD©a
, 
ï_addr
);

384  
USBD_OK
;

385 
	}
}

393 
USBD_SètusTy≥Def
 
	$USBD_LL_CÀ¨SèŒEP
 (
USBD_H™dÀTy≥Def
 *
pdev
, 
uöt8_t
 
ï_addr
)

396 
	`HAL_PCD_EP_CÃSèŒ
(
pdev
->
pD©a
, 
ï_addr
);

397  
USBD_OK
;

398 
	}
}

406 
uöt8_t
 
	$USBD_LL_IsSèŒEP
 (
USBD_H™dÀTy≥Def
 *
pdev
, 
uöt8_t
 
ï_addr
)

408 
PCD_H™dÀTy≥Def
 *
hpcd
 = 
pdev
->
pD©a
;

410 if((
ï_addr
 & 0x80) == 0x80)

412  
hpcd
->
IN_ï
[
ï_addr
 & 0x7F].
is_°Æl
;

416  
hpcd
->
OUT_ï
[
ï_addr
 & 0x7F].
is_°Æl
;

418 
	}
}

425 
USBD_SètusTy≥Def
 
	$USBD_LL_SëUSBAddªss
 (
USBD_H™dÀTy≥Def
 *
pdev
, 
uöt8_t
 
dev_addr
)

428 
	`HAL_PCD_SëAddªss
(
pdev
->
pD©a
, 
dev_addr
);

429  
USBD_OK
;

430 
	}
}

440 
USBD_SètusTy≥Def
 
	$USBD_LL_Tønsmô
 (
USBD_H™dÀTy≥Def
 *
pdev
,

441 
uöt8_t
 
ï_addr
,

442 
uöt8_t
 *
pbuf
,

443 
uöt16_t
 
size
)

446 
	`HAL_PCD_EP_Tønsmô
(
pdev
->
pD©a
, 
ï_addr
, 
pbuf
, 
size
);

447  
USBD_OK
;

448 
	}
}

458 
USBD_SètusTy≥Def
 
	$USBD_LL_Pª∑ªRe˚ive
(
USBD_H™dÀTy≥Def
 *
pdev
,

459 
uöt8_t
 
ï_addr
,

460 
uöt8_t
 *
pbuf
,

461 
uöt16_t
 
size
)

464 
	`HAL_PCD_EP_Re˚ive
(
pdev
->
pD©a
, 
ï_addr
, 
pbuf
, 
size
);

465  
USBD_OK
;

466 
	}
}

474 
uöt32_t
 
	$USBD_LL_GëRxD©aSize
 (
USBD_H™dÀTy≥Def
 *
pdev
, 
uöt8_t
 
ï_addr
)

476  
	`HAL_PCD_EP_GëRxCou¡
(
pdev
->
pD©a
, 
ï_addr
);

477 
	}
}

484 
	$USBD_LL_Dñay
 (
uöt32_t
 
Dñay
)

486 
	`HAL_Dñay
(
Dñay
);

487 
	}
}

494 *
	$USBD_°©ic_mÆloc
(
uöt32_t
 
size
)

496 
uöt32_t
 
mem
[((
USBD_HID_H™dÀTy≥Def
)/4)+1];

497  
mem
;

498 
	}
}

505 
	$USBD_°©ic_‰ì
(*
p
)

507 
	}
}

515 
	$HAL_PCDEx_SëC⁄√˘i⁄Sèã
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
°©e
)

518 i‡(
°©e
 == 1)

529 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\Src\usbd_desc.c

36 
	~"usbd_c‹e.h
"

37 
	~"usbd_desc.h
"

38 
	~"usbd_c⁄f.h
"

59 
	#USBD_VID
 1155

	)

60 
	#USBD_LANGID_STRING
 1033

	)

61 
	#USBD_MANUFACTURER_STRING
 "STMi¸€À˘r⁄ics"

	)

62 
	#USBD_PID_FS
 22315

	)

63 
	#USBD_PRODUCT_STRING_FS
 "RC_Joy°ick"

	)

65 
	#USBD_SERIALNUMBER_STRING_FS
 "00000000001A"

	)

67 
	#USBD_CONFIGURATION_STRING_FS
 "HID C⁄fig"

	)

68 
	#USBD_INTERFACE_STRING_FS
 "HID I¡îÁ˚"

	)

84 
uöt8_t
 * 
USBD_FS_Devi˚Des¸ùt‹
–
USBD_S≥edTy≥Def
 
•ìd
 , 
uöt16_t
 *
Àngth
);

85 
uöt8_t
 * 
USBD_FS_L™gIDSåDes¸ùt‹
–
USBD_S≥edTy≥Def
 
•ìd
 , 
uöt16_t
 *
Àngth
);

86 
uöt8_t
 * 
USBD_FS_M™uÁ˘uªrSåDes¸ùt‹
 ( 
USBD_S≥edTy≥Def
 
•ìd
 , 
uöt16_t
 *
Àngth
);

87 
uöt8_t
 * 
USBD_FS_Produ˘SåDes¸ùt‹
 ( 
USBD_S≥edTy≥Def
 
•ìd
 , 
uöt16_t
 *
Àngth
);

88 
uöt8_t
 * 
USBD_FS_SîülSåDes¸ùt‹
–
USBD_S≥edTy≥Def
 
•ìd
 , 
uöt16_t
 *
Àngth
);

89 
uöt8_t
 * 
USBD_FS_C⁄figSåDes¸ùt‹
–
USBD_S≥edTy≥Def
 
•ìd
 , 
uöt16_t
 *
Àngth
);

90 
uöt8_t
 * 
USBD_FS_I¡îÁ˚SåDes¸ùt‹
–
USBD_S≥edTy≥Def
 
•ìd
 , 
uöt16_t
 *
Àngth
);

92 #ifde‡
USB_SUPPORT_USER_STRING_DESC


93 
uöt8_t
 * 
USBD_FS_USRSåögDesc
 (
USBD_S≥edTy≥Def
 
•ìd
, uöt8_à
idx
 , 
uöt16_t
 *
Àngth
);

96 
USBD_Des¸ùt‹sTy≥Def
 
	gFS_Desc
 =

98 
USBD_FS_Devi˚Des¸ùt‹
,

99 
USBD_FS_L™gIDSåDes¸ùt‹
,

100 
USBD_FS_M™uÁ˘uªrSåDes¸ùt‹
,

101 
USBD_FS_Produ˘SåDes¸ùt‹
,

102 
USBD_FS_SîülSåDes¸ùt‹
,

103 
USBD_FS_C⁄figSåDes¸ùt‹
,

104 
USBD_FS_I¡îÁ˚SåDes¸ùt‹
,

107 #i‡
deföed
 ( 
__ICCARM__
 )

108 #¥agm®
d©a_Æignmít
=4

111 
__ALIGN_BEGIN
 
uöt8_t
 
	gUSBD_FS_Devi˚Desc
[
USB_LEN_DEV_DESC
] 
	g__ALIGN_END
 =

114 
USB_DESC_TYPE_DEVICE
,

120 
USB_MAX_EP0_SIZE
,

121 
LOBYTE
(
USBD_VID
),

122 
HIBYTE
(
USBD_VID
),

123 
LOBYTE
(
USBD_PID_FS
),

124 
HIBYTE
(
USBD_PID_FS
),

127 
USBD_IDX_MFC_STR
,

128 
USBD_IDX_PRODUCT_STR
,

129 
USBD_IDX_SERIAL_STR
,

130 
USBD_MAX_NUM_CONFIGURATION


134 #i‡
deföed
 ( 
__ICCARM__
 )

135 #¥agm®
d©a_Æignmít
=4

139 
__ALIGN_BEGIN
 
uöt8_t
 
	gUSBD_L™gIDDesc
[
USB_LEN_LANGID_STR_DESC
] 
	g__ALIGN_END
 =

141 
USB_LEN_LANGID_STR_DESC
,

142 
USB_DESC_TYPE_STRING
,

143 
LOBYTE
(
USBD_LANGID_STRING
),

144 
HIBYTE
(
USBD_LANGID_STRING
),

147 #i‡
deföed
 ( 
__ICCARM__
 )

148 #¥agm®
d©a_Æignmít
=4

150 
__ALIGN_BEGIN
 
uöt8_t
 
	gUSBD_SåDesc
[
USBD_MAX_STR_DESC_SIZ
] 
	g__ALIGN_END
;

173 
uöt8_t
 * 
	$USBD_FS_Devi˚Des¸ùt‹
–
USBD_S≥edTy≥Def
 
•ìd
 , 
uöt16_t
 *
Àngth
)

175 *
Àngth
 = (
USBD_FS_Devi˚Desc
);

176  
USBD_FS_Devi˚Desc
;

177 
	}
}

186 
uöt8_t
 * 
	$USBD_FS_L™gIDSåDes¸ùt‹
–
USBD_S≥edTy≥Def
 
•ìd
 , 
uöt16_t
 *
Àngth
)

188 *
Àngth
 = (
USBD_L™gIDDesc
);

189  
USBD_L™gIDDesc
;

190 
	}
}

199 
uöt8_t
 * 
	$USBD_FS_Produ˘SåDes¸ùt‹
–
USBD_S≥edTy≥Def
 
•ìd
 , 
uöt16_t
 *
Àngth
)

201 if(
•ìd
 == 0)

203 
	`USBD_GëSåög
 (
USBD_PRODUCT_STRING_FS
, 
USBD_SåDesc
, 
Àngth
);

207 
	`USBD_GëSåög
 (
USBD_PRODUCT_STRING_FS
, 
USBD_SåDesc
, 
Àngth
);

209  
USBD_SåDesc
;

210 
	}
}

219 
uöt8_t
 * 
	$USBD_FS_M™uÁ˘uªrSåDes¸ùt‹
–
USBD_S≥edTy≥Def
 
•ìd
 , 
uöt16_t
 *
Àngth
)

221 
	`USBD_GëSåög
 (
USBD_MANUFACTURER_STRING
, 
USBD_SåDesc
, 
Àngth
);

222  
USBD_SåDesc
;

223 
	}
}

232 
uöt8_t
 * 
	$USBD_FS_SîülSåDes¸ùt‹
–
USBD_S≥edTy≥Def
 
•ìd
 , 
uöt16_t
 *
Àngth
)

234 if(
•ìd
 =
USBD_SPEED_HIGH
)

236 
	`USBD_GëSåög
 (
USBD_SERIALNUMBER_STRING_FS
, 
USBD_SåDesc
, 
Àngth
);

240 
	`USBD_GëSåög
 (
USBD_SERIALNUMBER_STRING_FS
, 
USBD_SåDesc
, 
Àngth
);

242  
USBD_SåDesc
;

243 
	}
}

252 
uöt8_t
 * 
	$USBD_FS_C⁄figSåDes¸ùt‹
–
USBD_S≥edTy≥Def
 
•ìd
 , 
uöt16_t
 *
Àngth
)

254 if(
•ìd
 =
USBD_SPEED_HIGH
)

256 
	`USBD_GëSåög
 (
USBD_CONFIGURATION_STRING_FS
, 
USBD_SåDesc
, 
Àngth
);

260 
	`USBD_GëSåög
 (
USBD_CONFIGURATION_STRING_FS
, 
USBD_SåDesc
, 
Àngth
);

262  
USBD_SåDesc
;

263 
	}
}

272 
uöt8_t
 * 
	$USBD_FS_I¡îÁ˚SåDes¸ùt‹
–
USBD_S≥edTy≥Def
 
•ìd
 , 
uöt16_t
 *
Àngth
)

274 if(
•ìd
 == 0)

276 
	`USBD_GëSåög
 (
USBD_INTERFACE_STRING_FS
, 
USBD_SåDesc
, 
Àngth
);

280 
	`USBD_GëSåög
 (
USBD_INTERFACE_STRING_FS
, 
USBD_SåDesc
, 
Àngth
);

282  
USBD_SåDesc
;

283 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\cmsis\Src\system_stm32f1xx.c

77 
	~"°m32f1xx.h
"

98 #i‡!
deföed
 (
HSE_VALUE
)

99 
	#HSE_VALUE
 ((
uöt32_t
)8000000Ë

	)

103 #i‡!
deföed
 (
HSI_VALUE
)

104 
	#HSI_VALUE
 ((
uöt32_t
)8000000Ë

	)

109 #i‡
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F101xG
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

116 
	#VECT_TAB_OFFSET
 0x0

	)

139 #i‡
deföed
(
STM32F100xB
Ë||deföed(
STM32F100xE
)

140 
uöt32_t
 
	gSy°emC‹eClock
 = 24000000;

142 
uöt32_t
 
	gSy°emC‹eClock
 = 72000000;

145 c⁄° 
uöt8_t
 
	gAHBPªscTabÀ
[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

154 #i‡
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F101xG
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

155 #ifde‡
DATA_IN_ExtSRAM


156 
Sy°emInô_ExtMemCé
();

176 
	$Sy°emInô
 ()

180 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

183 #i‡!
	`deföed
(
STM32F105xC
Ë&& !deföed(
STM32F107xC
)

184 
RCC
->
CFGR
 &(
uöt32_t
)0xF8FF0000;

186 
RCC
->
CFGR
 &(
uöt32_t
)0xF0FF0000;

190 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFFF;

193 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

196 
RCC
->
CFGR
 &(
uöt32_t
)0xFF80FFFF;

198 #i‡
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

200 
RCC
->
CR
 &(
uöt32_t
)0xEBFFFFFF;

203 
RCC
->
CIR
 = 0x00FF0000;

206 
RCC
->
CFGR2
 = 0x00000000;

207 #ñi‡
	`deföed
(
STM32F100xB
Ë|| deföed(
STM32F100xE
)

209 
RCC
->
CIR
 = 0x009F0000;

212 
RCC
->
CFGR2
 = 0x00000000;

215 
RCC
->
CIR
 = 0x009F0000;

218 #i‡
	`deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F101xG
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

219 #ifde‡
DATA_IN_ExtSRAM


220 
	`Sy°emInô_ExtMemCé
();

224 #ifde‡
VECT_TAB_SRAM


225 
SCB
->
VTOR
 = 
SRAM_BASE
 | 
VECT_TAB_OFFSET
;

227 
SCB
->
VTOR
 = 
FLASH_BASE
 | 
VECT_TAB_OFFSET
;

230 
	}
}

270 
	$Sy°emC‹eClockUpd©e
 ()

272 
uöt32_t
 
tmp
 = 0, 
∂lmuŒ
 = 0, 
∂lsour˚
 = 0;

274 #i‡
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

275 
uöt32_t
 
¥ediv1sour˚
 = 0, 
¥ediv1Á˘‹
 = 0, 
¥ediv2Á˘‹
 = 0, 
∂l2muŒ
 = 0;

278 #i‡
	`deföed
(
STM32F100xB
Ë|| deföed(
STM32F100xE
)

279 
uöt32_t
 
¥ediv1Á˘‹
 = 0;

283 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
;

285 
tmp
)

288 
Sy°emC‹eClock
 = 
HSI_VALUE
;

291 
Sy°emC‹eClock
 = 
HSE_VALUE
;

296 
∂lmuŒ
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLMULL
;

297 
∂lsour˚
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLSRC
;

299 #i‡!
	`deföed
(
STM32F105xC
Ë&& !deföed(
STM32F107xC
)

300 
∂lmuŒ
 = (Öllmull >> 18) + 2;

302 i‡(
∂lsour˚
 == 0x00)

305 
Sy°emC‹eClock
 = (
HSI_VALUE
 >> 1Ë* 
∂lmuŒ
;

309 #i‡
	`deföed
(
STM32F100xB
Ë|| deföed(
STM32F100xE
)

310 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1
) + 1;

312 
Sy°emC‹eClock
 = (
HSE_VALUE
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

315 i‡((
RCC
->
CFGR
 & 
RCC_CFGR_PLLXTPRE
Ë!(
uöt32_t
)
RESET
)

317 
Sy°emC‹eClock
 = (
HSE_VALUE
 >> 1Ë* 
∂lmuŒ
;

321 
Sy°emC‹eClock
 = 
HSE_VALUE
 * 
∂lmuŒ
;

326 
∂lmuŒ
 =Öllmull >> 18;

328 i‡(
∂lmuŒ
 != 0x0D)

330 
∂lmuŒ
 += 2;

334 
∂lmuŒ
 = 13 / 2;

337 i‡(
∂lsour˚
 == 0x00)

340 
Sy°emC‹eClock
 = (
HSI_VALUE
 >> 1Ë* 
∂lmuŒ
;

346 
¥ediv1sour˚
 = 
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1SRC
;

347 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1
) + 1;

349 i‡(
¥ediv1sour˚
 == 0)

352 
Sy°emC‹eClock
 = (
HSE_VALUE
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

358 
¥ediv2Á˘‹
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV2
) >> 4) + 1;

359 
∂l2muŒ
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PLL2MUL
) >> 8 ) + 2;

360 
Sy°emC‹eClock
 = (((
HSE_VALUE
 / 
¥ediv2Á˘‹
Ë* 
∂l2muŒ
Ë/ 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

367 
Sy°emC‹eClock
 = 
HSI_VALUE
;

373 
tmp
 = 
AHBPªscTabÀ
[((
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
) >> 4)];

375 
Sy°emC‹eClock
 >>
tmp
;

376 
	}
}

384 #i‡
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F101xG
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

391 #ifde‡
DATA_IN_ExtSRAM


401 
	$Sy°emInô_ExtMemCé
()

403 
__IO
 
uöt32_t
 
tm¥eg
;

408 
RCC
->
AHBENR
 = 0x00000114;

411 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_FSMCEN
);

414 
RCC
->
APB2ENR
 = 0x000001E0;

417 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPDEN
);

419 ()(
tm¥eg
);

427 
GPIOD
->
CRL
 = 0x44BB44BB;

428 
GPIOD
->
CRH
 = 0xBBBBBBBB;

430 
GPIOE
->
CRL
 = 0xB44444BB;

431 
GPIOE
->
CRH
 = 0xBBBBBBBB;

433 
GPIOF
->
CRL
 = 0x44BBBBBB;

434 
GPIOF
->
CRH
 = 0xBBBB4444;

436 
GPIOG
->
CRL
 = 0x44BBBBBB;

437 
GPIOG
->
CRH
 = 0x444B4B44;

442 
FSMC_B™k1
->
BTCR
[4] = 0x00001091;

443 
FSMC_B™k1
->
BTCR
[5] = 0x00110212;

444 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\cmsis\inc\core_cm3.h

35 #i‡ 
deföed
 ( 
__ICCARM__
 )

36 #¥agm®
sy°em_ö˛ude


37 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

38 #¥agm®
˛™g
 
sy°em_hódî


41 #i‚de‡
__CORE_CM3_H_GENERIC


42 
	#__CORE_CM3_H_GENERIC


	)

44 
	~<°döt.h
>

46 #ifde‡
__˝lu•lus


74 
	#__CM3_CMSIS_VERSION_MAIN
 (0x04UË

	)

75 
	#__CM3_CMSIS_VERSION_SUB
 (0x1EUË

	)

76 
	#__CM3_CMSIS_VERSION
 ((
__CM3_CMSIS_VERSION_MAIN
 << 16U) | \

77 
__CM3_CMSIS_VERSION_SUB
 )

	)

79 
	#__CORTEX_M
 (0x03UË

	)

82 #i‡ 
deföed
 ( 
__CC_ARM
 )

83 
	#__ASM
 
__asm


	)

84 
	#__INLINE
 
__ölöe


	)

85 
	#__STATIC_INLINE
 
__ölöe


	)

87 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

88 
	#__ASM
 
__asm


	)

89 
	#__INLINE
 
__ölöe


	)

90 
	#__STATIC_INLINE
 
__ölöe


	)

92 #ñi‡
deföed
 ( 
__GNUC__
 )

93 
	#__ASM
 
__asm


	)

94 
	#__INLINE
 
ölöe


	)

95 
	#__STATIC_INLINE
 
ölöe


	)

97 #ñi‡
deföed
 ( 
__ICCARM__
 )

98 
	#__ASM
 
__asm


	)

99 
	#__INLINE
 
ölöe


	)

100 
	#__STATIC_INLINE
 
ölöe


	)

102 #ñi‡
deföed
 ( 
__TMS470__
 )

103 
	#__ASM
 
__asm


	)

104 
	#__STATIC_INLINE
 
ölöe


	)

106 #ñi‡
deföed
 ( 
__TASKING__
 )

107 
	#__ASM
 
__asm


	)

108 
	#__INLINE
 
ölöe


	)

109 
	#__STATIC_INLINE
 
ölöe


	)

111 #ñi‡
deföed
 ( 
__CSMC__
 )

112 
	#__∑cked


	)

113 
	#__ASM
 
_asm


	)

114 
	#__INLINE
 
ölöe


	)

115 
	#__STATIC_INLINE
 
ölöe


	)

118 #îr‹ 
Unknown
 
compûî


124 
	#__FPU_USED
 0U

	)

126 #i‡
deföed
 ( 
__CC_ARM
 )

127 #i‡
deföed
 
__TARGET_FPU_VFP


131 #ñi‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

132 #i‡
deföed
 
__ARM_PCS_VFP


136 #ñi‡
deföed
 ( 
__GNUC__
 )

137 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

141 #ñi‡
deföed
 ( 
__ICCARM__
 )

142 #i‡
deföed
 
__ARMVFP__


146 #ñi‡
deföed
 ( 
__TMS470__
 )

147 #i‡
deföed
 
__TI_VFP_SUPPORT__


151 #ñi‡
deföed
 ( 
__TASKING__
 )

152 #i‡
deföed
 
__FPU_VFP__


156 #ñi‡
deföed
 ( 
__CSMC__
 )

157 #i‡–
__CSMC__
 & 0x400U)

163 
	~"c‹e_cmIn°r.h
"

164 
	~"c‹e_cmFunc.h
"

166 #ifde‡
__˝lu•lus


172 #i‚de‡
__CMSIS_GENERIC


174 #i‚de‡
__CORE_CM3_H_DEPENDANT


175 
	#__CORE_CM3_H_DEPENDANT


	)

177 #ifde‡
__˝lu•lus


182 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


183 #i‚de‡
__CM3_REV


184 
	#__CM3_REV
 0x0200U

	)

188 #i‚de‡
__MPU_PRESENT


189 
	#__MPU_PRESENT
 0U

	)

193 #i‚de‡
__NVIC_PRIO_BITS


194 
	#__NVIC_PRIO_BITS
 4U

	)

198 #i‚de‡
__Víd‹_SysTickC⁄fig


199 
	#__Víd‹_SysTickC⁄fig
 0U

	)

212 #ifde‡
__˝lu•lus


213 
	#__I
 vﬁ©ûê

	)

215 
	#__I
 vﬁ©ûêc⁄°

	)

217 
	#__O
 vﬁ©ûê

	)

218 
	#__IO
 vﬁ©ûê

	)

221 
	#__IM
 vﬁ©ûêc⁄°

	)

222 
	#__OM
 vﬁ©ûê

	)

223 
	#__IOM
 vﬁ©ûê

	)

258 
uöt32_t
 
_ª£rved0
:27;

259 
uöt32_t
 
Q
:1;

260 
uöt32_t
 
V
:1;

261 
uöt32_t
 
C
:1;

262 
uöt32_t
 
Z
:1;

263 
uöt32_t
 
N
:1;

264 } 
b
;

265 
uöt32_t
 
w
;

266 } 
	tAPSR_Ty≥
;

269 
	#APSR_N_Pos
 31U

	)

270 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

272 
	#APSR_Z_Pos
 30U

	)

273 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

275 
	#APSR_C_Pos
 29U

	)

276 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

278 
	#APSR_V_Pos
 28U

	)

279 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

281 
	#APSR_Q_Pos
 27U

	)

282 
	#APSR_Q_Msk
 (1UL << 
APSR_Q_Pos
Ë

	)

292 
uöt32_t
 
ISR
:9;

293 
uöt32_t
 
_ª£rved0
:23;

294 } 
b
;

295 
uöt32_t
 
w
;

296 } 
	tIPSR_Ty≥
;

299 
	#IPSR_ISR_Pos
 0U

	)

300 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

310 
uöt32_t
 
ISR
:9;

311 
uöt32_t
 
_ª£rved0
:15;

312 
uöt32_t
 
T
:1;

313 
uöt32_t
 
IT
:2;

314 
uöt32_t
 
Q
:1;

315 
uöt32_t
 
V
:1;

316 
uöt32_t
 
C
:1;

317 
uöt32_t
 
Z
:1;

318 
uöt32_t
 
N
:1;

319 } 
b
;

320 
uöt32_t
 
w
;

321 } 
	txPSR_Ty≥
;

324 
	#xPSR_N_Pos
 31U

	)

325 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

327 
	#xPSR_Z_Pos
 30U

	)

328 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

330 
	#xPSR_C_Pos
 29U

	)

331 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

333 
	#xPSR_V_Pos
 28U

	)

334 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

336 
	#xPSR_Q_Pos
 27U

	)

337 
	#xPSR_Q_Msk
 (1UL << 
xPSR_Q_Pos
Ë

	)

339 
	#xPSR_IT_Pos
 25U

	)

340 
	#xPSR_IT_Msk
 (3UL << 
xPSR_IT_Pos
Ë

	)

342 
	#xPSR_T_Pos
 24U

	)

343 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

345 
	#xPSR_ISR_Pos
 0U

	)

346 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

356 
uöt32_t
 
nPRIV
:1;

357 
uöt32_t
 
SPSEL
:1;

358 
uöt32_t
 
_ª£rved1
:30;

359 } 
b
;

360 
uöt32_t
 
w
;

361 } 
	tCONTROL_Ty≥
;

364 
	#CONTROL_SPSEL_Pos
 1U

	)

365 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

367 
	#CONTROL_nPRIV_Pos
 0U

	)

368 
	#CONTROL_nPRIV_Msk
 (1UL )

	)

385 
__IOM
 
uöt32_t
 
ISER
[8U];

386 
uöt32_t
 
RESERVED0
[24U];

387 
__IOM
 
uöt32_t
 
ICER
[8U];

388 
uöt32_t
 
RSERVED1
[24U];

389 
__IOM
 
uöt32_t
 
ISPR
[8U];

390 
uöt32_t
 
RESERVED2
[24U];

391 
__IOM
 
uöt32_t
 
ICPR
[8U];

392 
uöt32_t
 
RESERVED3
[24U];

393 
__IOM
 
uöt32_t
 
IABR
[8U];

394 
uöt32_t
 
RESERVED4
[56U];

395 
__IOM
 
uöt8_t
 
IP
[240U];

396 
uöt32_t
 
RESERVED5
[644U];

397 
__OM
 
uöt32_t
 
STIR
;

398 } 
	tNVIC_Ty≥
;

401 
	#NVIC_STIR_INTID_Pos
 0U

	)

402 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL )

	)

419 
__IM
 
uöt32_t
 
CPUID
;

420 
__IOM
 
uöt32_t
 
ICSR
;

421 
__IOM
 
uöt32_t
 
VTOR
;

422 
__IOM
 
uöt32_t
 
AIRCR
;

423 
__IOM
 
uöt32_t
 
SCR
;

424 
__IOM
 
uöt32_t
 
CCR
;

425 
__IOM
 
uöt8_t
 
SHP
[12U];

426 
__IOM
 
uöt32_t
 
SHCSR
;

427 
__IOM
 
uöt32_t
 
CFSR
;

428 
__IOM
 
uöt32_t
 
HFSR
;

429 
__IOM
 
uöt32_t
 
DFSR
;

430 
__IOM
 
uöt32_t
 
MMFAR
;

431 
__IOM
 
uöt32_t
 
BFAR
;

432 
__IOM
 
uöt32_t
 
AFSR
;

433 
__IM
 
uöt32_t
 
PFR
[2U];

434 
__IM
 
uöt32_t
 
DFR
;

435 
__IM
 
uöt32_t
 
ADR
;

436 
__IM
 
uöt32_t
 
MMFR
[4U];

437 
__IM
 
uöt32_t
 
ISAR
[5U];

438 
uöt32_t
 
RESERVED0
[5U];

439 
__IOM
 
uöt32_t
 
CPACR
;

440 } 
	tSCB_Ty≥
;

443 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

444 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

446 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

447 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

449 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

450 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

452 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

453 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

455 
	#SCB_CPUID_REVISION_Pos
 0U

	)

456 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

459 
	#SCB_ICSR_NMIPENDSET_Pos
 31U

	)

460 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

462 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

463 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

465 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

466 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

468 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

469 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

471 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

472 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

474 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

475 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

477 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

478 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

480 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

481 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

483 
	#SCB_ICSR_RETTOBASE_Pos
 11U

	)

484 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

486 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

487 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

490 #i‡(
__CM3_REV
 < 0x0201U)

491 
	#SCB_VTOR_TBLBASE_Pos
 29U

	)

492 
	#SCB_VTOR_TBLBASE_Msk
 (1UL << 
SCB_VTOR_TBLBASE_Pos
Ë

	)

494 
	#SCB_VTOR_TBLOFF_Pos
 7U

	)

495 
	#SCB_VTOR_TBLOFF_Msk
 (0x3FFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

497 
	#SCB_VTOR_TBLOFF_Pos
 7U

	)

498 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

502 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

503 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

505 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

506 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

508 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

509 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

511 
	#SCB_AIRCR_PRIGROUP_Pos
 8U

	)

512 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

514 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

515 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

517 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

518 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

520 
	#SCB_AIRCR_VECTRESET_Pos
 0U

	)

521 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL )

	)

524 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

525 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

527 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

528 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

530 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

531 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

534 
	#SCB_CCR_STKALIGN_Pos
 9U

	)

535 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

537 
	#SCB_CCR_BFHFNMIGN_Pos
 8U

	)

538 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

540 
	#SCB_CCR_DIV_0_TRP_Pos
 4U

	)

541 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

543 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

544 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

546 
	#SCB_CCR_USERSETMPEND_Pos
 1U

	)

547 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

549 
	#SCB_CCR_NONBASETHRDENA_Pos
 0U

	)

550 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL )

	)

553 
	#SCB_SHCSR_USGFAULTENA_Pos
 18U

	)

554 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

556 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17U

	)

557 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

559 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16U

	)

560 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

562 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

563 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

565 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14U

	)

566 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

568 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13U

	)

569 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

571 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12U

	)

572 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

574 
	#SCB_SHCSR_SYSTICKACT_Pos
 11U

	)

575 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

577 
	#SCB_SHCSR_PENDSVACT_Pos
 10U

	)

578 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

580 
	#SCB_SHCSR_MONITORACT_Pos
 8U

	)

581 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

583 
	#SCB_SHCSR_SVCALLACT_Pos
 7U

	)

584 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

586 
	#SCB_SHCSR_USGFAULTACT_Pos
 3U

	)

587 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

589 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1U

	)

590 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

592 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0U

	)

593 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL )

	)

596 
	#SCB_CFSR_USGFAULTSR_Pos
 16U

	)

597 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

599 
	#SCB_CFSR_BUSFAULTSR_Pos
 8U

	)

600 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

602 
	#SCB_CFSR_MEMFAULTSR_Pos
 0U

	)

603 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL )

	)

606 
	#SCB_HFSR_DEBUGEVT_Pos
 31U

	)

607 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

609 
	#SCB_HFSR_FORCED_Pos
 30U

	)

610 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

612 
	#SCB_HFSR_VECTTBL_Pos
 1U

	)

613 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

616 
	#SCB_DFSR_EXTERNAL_Pos
 4U

	)

617 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

619 
	#SCB_DFSR_VCATCH_Pos
 3U

	)

620 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

622 
	#SCB_DFSR_DWTTRAP_Pos
 2U

	)

623 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

625 
	#SCB_DFSR_BKPT_Pos
 1U

	)

626 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

628 
	#SCB_DFSR_HALTED_Pos
 0U

	)

629 
	#SCB_DFSR_HALTED_Msk
 (1UL )

	)

646 
uöt32_t
 
RESERVED0
[1U];

647 
__IM
 
uöt32_t
 
ICTR
;

648 #i‡((
deföed
 
__CM3_REV
) && (__CM3_REV >= 0x200U))

649 
__IOM
 
uöt32_t
 
ACTLR
;

651 
uöt32_t
 
RESERVED1
[1U];

653 } 
	tSCnSCB_Ty≥
;

656 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0U

	)

657 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL )

	)

661 
	#SCnSCB_ACTLR_DISFOLD_Pos
 2U

	)

662 
	#SCnSCB_ACTLR_DISFOLD_Msk
 (1UL << 
SCnSCB_ACTLR_DISFOLD_Pos
Ë

	)

664 
	#SCnSCB_ACTLR_DISDEFWBUF_Pos
 1U

	)

665 
	#SCnSCB_ACTLR_DISDEFWBUF_Msk
 (1UL << 
SCnSCB_ACTLR_DISDEFWBUF_Pos
Ë

	)

667 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0U

	)

668 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL )

	)

685 
__IOM
 
uöt32_t
 
CTRL
;

686 
__IOM
 
uöt32_t
 
LOAD
;

687 
__IOM
 
uöt32_t
 
VAL
;

688 
__IM
 
uöt32_t
 
CALIB
;

689 } 
	tSysTick_Ty≥
;

692 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

693 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

695 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

696 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

698 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

699 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

701 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

702 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

705 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

706 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

709 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

710 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

713 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

714 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

716 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

717 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

719 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

720 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

737 
__OM
 union

739 
__OM
 
uöt8_t
 
u8
;

740 
__OM
 
uöt16_t
 
u16
;

741 
__OM
 
uöt32_t
 
u32
;

742 } 
PORT
 [32U];

743 
uöt32_t
 
RESERVED0
[864U];

744 
__IOM
 
uöt32_t
 
TER
;

745 
uöt32_t
 
RESERVED1
[15U];

746 
__IOM
 
uöt32_t
 
TPR
;

747 
uöt32_t
 
RESERVED2
[15U];

748 
__IOM
 
uöt32_t
 
TCR
;

749 
uöt32_t
 
RESERVED3
[29U];

750 
__OM
 
uöt32_t
 
IWR
;

751 
__IM
 
uöt32_t
 
IRR
;

752 
__IOM
 
uöt32_t
 
IMCR
;

753 
uöt32_t
 
RESERVED4
[43U];

754 
__OM
 
uöt32_t
 
LAR
;

755 
__IM
 
uöt32_t
 
LSR
;

756 
uöt32_t
 
RESERVED5
[6U];

757 
__IM
 
uöt32_t
 
PID4
;

758 
__IM
 
uöt32_t
 
PID5
;

759 
__IM
 
uöt32_t
 
PID6
;

760 
__IM
 
uöt32_t
 
PID7
;

761 
__IM
 
uöt32_t
 
PID0
;

762 
__IM
 
uöt32_t
 
PID1
;

763 
__IM
 
uöt32_t
 
PID2
;

764 
__IM
 
uöt32_t
 
PID3
;

765 
__IM
 
uöt32_t
 
CID0
;

766 
__IM
 
uöt32_t
 
CID1
;

767 
__IM
 
uöt32_t
 
CID2
;

768 
__IM
 
uöt32_t
 
CID3
;

769 } 
	tITM_Ty≥
;

772 
	#ITM_TPR_PRIVMASK_Pos
 0U

	)

773 
	#ITM_TPR_PRIVMASK_Msk
 (0xFUL )

	)

776 
	#ITM_TCR_BUSY_Pos
 23U

	)

777 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

779 
	#ITM_TCR_Tø˚BusID_Pos
 16U

	)

780 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

782 
	#ITM_TCR_GTSFREQ_Pos
 10U

	)

783 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

785 
	#ITM_TCR_TSPªsˇÀ_Pos
 8U

	)

786 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

788 
	#ITM_TCR_SWOENA_Pos
 4U

	)

789 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

791 
	#ITM_TCR_DWTENA_Pos
 3U

	)

792 
	#ITM_TCR_DWTENA_Msk
 (1UL << 
ITM_TCR_DWTENA_Pos
Ë

	)

794 
	#ITM_TCR_SYNCENA_Pos
 2U

	)

795 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

797 
	#ITM_TCR_TSENA_Pos
 1U

	)

798 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

800 
	#ITM_TCR_ITMENA_Pos
 0U

	)

801 
	#ITM_TCR_ITMENA_Msk
 (1UL )

	)

804 
	#ITM_IWR_ATVALIDM_Pos
 0U

	)

805 
	#ITM_IWR_ATVALIDM_Msk
 (1UL )

	)

808 
	#ITM_IRR_ATREADYM_Pos
 0U

	)

809 
	#ITM_IRR_ATREADYM_Msk
 (1UL )

	)

812 
	#ITM_IMCR_INTEGRATION_Pos
 0U

	)

813 
	#ITM_IMCR_INTEGRATION_Msk
 (1UL )

	)

816 
	#ITM_LSR_ByãAcc_Pos
 2U

	)

817 
	#ITM_LSR_ByãAcc_Msk
 (1UL << 
ITM_LSR_ByãAcc_Pos
Ë

	)

819 
	#ITM_LSR_Ac˚ss_Pos
 1U

	)

820 
	#ITM_LSR_Ac˚ss_Msk
 (1UL << 
ITM_LSR_Ac˚ss_Pos
Ë

	)

822 
	#ITM_LSR_Pª£¡_Pos
 0U

	)

823 
	#ITM_LSR_Pª£¡_Msk
 (1UL )

	)

840 
__IOM
 
uöt32_t
 
CTRL
;

841 
__IOM
 
uöt32_t
 
CYCCNT
;

842 
__IOM
 
uöt32_t
 
CPICNT
;

843 
__IOM
 
uöt32_t
 
EXCCNT
;

844 
__IOM
 
uöt32_t
 
SLEEPCNT
;

845 
__IOM
 
uöt32_t
 
LSUCNT
;

846 
__IOM
 
uöt32_t
 
FOLDCNT
;

847 
__IM
 
uöt32_t
 
PCSR
;

848 
__IOM
 
uöt32_t
 
COMP0
;

849 
__IOM
 
uöt32_t
 
MASK0
;

850 
__IOM
 
uöt32_t
 
FUNCTION0
;

851 
uöt32_t
 
RESERVED0
[1U];

852 
__IOM
 
uöt32_t
 
COMP1
;

853 
__IOM
 
uöt32_t
 
MASK1
;

854 
__IOM
 
uöt32_t
 
FUNCTION1
;

855 
uöt32_t
 
RESERVED1
[1U];

856 
__IOM
 
uöt32_t
 
COMP2
;

857 
__IOM
 
uöt32_t
 
MASK2
;

858 
__IOM
 
uöt32_t
 
FUNCTION2
;

859 
uöt32_t
 
RESERVED2
[1U];

860 
__IOM
 
uöt32_t
 
COMP3
;

861 
__IOM
 
uöt32_t
 
MASK3
;

862 
__IOM
 
uöt32_t
 
FUNCTION3
;

863 } 
	tDWT_Ty≥
;

866 
	#DWT_CTRL_NUMCOMP_Pos
 28U

	)

867 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

869 
	#DWT_CTRL_NOTRCPKT_Pos
 27U

	)

870 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

872 
	#DWT_CTRL_NOEXTTRIG_Pos
 26U

	)

873 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

875 
	#DWT_CTRL_NOCYCCNT_Pos
 25U

	)

876 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

878 
	#DWT_CTRL_NOPRFCNT_Pos
 24U

	)

879 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

881 
	#DWT_CTRL_CYCEVTENA_Pos
 22U

	)

882 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

884 
	#DWT_CTRL_FOLDEVTENA_Pos
 21U

	)

885 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

887 
	#DWT_CTRL_LSUEVTENA_Pos
 20U

	)

888 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

890 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19U

	)

891 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

893 
	#DWT_CTRL_EXCEVTENA_Pos
 18U

	)

894 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

896 
	#DWT_CTRL_CPIEVTENA_Pos
 17U

	)

897 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

899 
	#DWT_CTRL_EXCTRCENA_Pos
 16U

	)

900 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

902 
	#DWT_CTRL_PCSAMPLENA_Pos
 12U

	)

903 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

905 
	#DWT_CTRL_SYNCTAP_Pos
 10U

	)

906 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

908 
	#DWT_CTRL_CYCTAP_Pos
 9U

	)

909 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

911 
	#DWT_CTRL_POSTINIT_Pos
 5U

	)

912 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

914 
	#DWT_CTRL_POSTPRESET_Pos
 1U

	)

915 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

917 
	#DWT_CTRL_CYCCNTENA_Pos
 0U

	)

918 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL )

	)

921 
	#DWT_CPICNT_CPICNT_Pos
 0U

	)

922 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL )

	)

925 
	#DWT_EXCCNT_EXCCNT_Pos
 0U

	)

926 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL )

	)

929 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0U

	)

930 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL )

	)

933 
	#DWT_LSUCNT_LSUCNT_Pos
 0U

	)

934 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL )

	)

937 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0U

	)

938 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL )

	)

941 
	#DWT_MASK_MASK_Pos
 0U

	)

942 
	#DWT_MASK_MASK_Msk
 (0x1FUL )

	)

945 
	#DWT_FUNCTION_MATCHED_Pos
 24U

	)

946 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

948 
	#DWT_FUNCTION_DATAVADDR1_Pos
 16U

	)

949 
	#DWT_FUNCTION_DATAVADDR1_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR1_Pos
Ë

	)

951 
	#DWT_FUNCTION_DATAVADDR0_Pos
 12U

	)

952 
	#DWT_FUNCTION_DATAVADDR0_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR0_Pos
Ë

	)

954 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10U

	)

955 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

957 
	#DWT_FUNCTION_LNK1ENA_Pos
 9U

	)

958 
	#DWT_FUNCTION_LNK1ENA_Msk
 (0x1UL << 
DWT_FUNCTION_LNK1ENA_Pos
Ë

	)

960 
	#DWT_FUNCTION_DATAVMATCH_Pos
 8U

	)

961 
	#DWT_FUNCTION_DATAVMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_DATAVMATCH_Pos
Ë

	)

963 
	#DWT_FUNCTION_CYCMATCH_Pos
 7U

	)

964 
	#DWT_FUNCTION_CYCMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_CYCMATCH_Pos
Ë

	)

966 
	#DWT_FUNCTION_EMITRANGE_Pos
 5U

	)

967 
	#DWT_FUNCTION_EMITRANGE_Msk
 (0x1UL << 
DWT_FUNCTION_EMITRANGE_Pos
Ë

	)

969 
	#DWT_FUNCTION_FUNCTION_Pos
 0U

	)

970 
	#DWT_FUNCTION_FUNCTION_Msk
 (0xFUL )

	)

987 
__IOM
 
uöt32_t
 
SSPSR
;

988 
__IOM
 
uöt32_t
 
CSPSR
;

989 
uöt32_t
 
RESERVED0
[2U];

990 
__IOM
 
uöt32_t
 
ACPR
;

991 
uöt32_t
 
RESERVED1
[55U];

992 
__IOM
 
uöt32_t
 
SPPR
;

993 
uöt32_t
 
RESERVED2
[131U];

994 
__IM
 
uöt32_t
 
FFSR
;

995 
__IOM
 
uöt32_t
 
FFCR
;

996 
__IM
 
uöt32_t
 
FSCR
;

997 
uöt32_t
 
RESERVED3
[759U];

998 
__IM
 
uöt32_t
 
TRIGGER
;

999 
__IM
 
uöt32_t
 
FIFO0
;

1000 
__IM
 
uöt32_t
 
ITATBCTR2
;

1001 
uöt32_t
 
RESERVED4
[1U];

1002 
__IM
 
uöt32_t
 
ITATBCTR0
;

1003 
__IM
 
uöt32_t
 
FIFO1
;

1004 
__IOM
 
uöt32_t
 
ITCTRL
;

1005 
uöt32_t
 
RESERVED5
[39U];

1006 
__IOM
 
uöt32_t
 
CLAIMSET
;

1007 
__IOM
 
uöt32_t
 
CLAIMCLR
;

1008 
uöt32_t
 
RESERVED7
[8U];

1009 
__IM
 
uöt32_t
 
DEVID
;

1010 
__IM
 
uöt32_t
 
DEVTYPE
;

1011 } 
	tTPI_Ty≥
;

1014 
	#TPI_ACPR_PRESCALER_Pos
 0U

	)

1015 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL )

	)

1018 
	#TPI_SPPR_TXMODE_Pos
 0U

	)

1019 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL )

	)

1022 
	#TPI_FFSR_FtN⁄St›_Pos
 3U

	)

1023 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

1025 
	#TPI_FFSR_TCPª£¡_Pos
 2U

	)

1026 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

1028 
	#TPI_FFSR_FtSt›≥d_Pos
 1U

	)

1029 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

1031 
	#TPI_FFSR_FlInProg_Pos
 0U

	)

1032 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL )

	)

1035 
	#TPI_FFCR_TrigIn_Pos
 8U

	)

1036 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

1038 
	#TPI_FFCR_EnFC⁄t_Pos
 1U

	)

1039 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

1042 
	#TPI_TRIGGER_TRIGGER_Pos
 0U

	)

1043 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL )

	)

1046 
	#TPI_FIFO0_ITM_ATVALID_Pos
 29U

	)

1047 
	#TPI_FIFO0_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ITM_ATVALID_Pos
Ë

	)

1049 
	#TPI_FIFO0_ITM_byãcou¡_Pos
 27U

	)

1050 
	#TPI_FIFO0_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ITM_byãcou¡_Pos
Ë

	)

1052 
	#TPI_FIFO0_ETM_ATVALID_Pos
 26U

	)

1053 
	#TPI_FIFO0_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ETM_ATVALID_Pos
Ë

	)

1055 
	#TPI_FIFO0_ETM_byãcou¡_Pos
 24U

	)

1056 
	#TPI_FIFO0_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ETM_byãcou¡_Pos
Ë

	)

1058 
	#TPI_FIFO0_ETM2_Pos
 16U

	)

1059 
	#TPI_FIFO0_ETM2_Msk
 (0xFFUL << 
TPI_FIFO0_ETM2_Pos
Ë

	)

1061 
	#TPI_FIFO0_ETM1_Pos
 8U

	)

1062 
	#TPI_FIFO0_ETM1_Msk
 (0xFFUL << 
TPI_FIFO0_ETM1_Pos
Ë

	)

1064 
	#TPI_FIFO0_ETM0_Pos
 0U

	)

1065 
	#TPI_FIFO0_ETM0_Msk
 (0xFFUL )

	)

1068 
	#TPI_ITATBCTR2_ATREADY_Pos
 0U

	)

1069 
	#TPI_ITATBCTR2_ATREADY_Msk
 (0x1UL )

	)

1072 
	#TPI_FIFO1_ITM_ATVALID_Pos
 29U

	)

1073 
	#TPI_FIFO1_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ITM_ATVALID_Pos
Ë

	)

1075 
	#TPI_FIFO1_ITM_byãcou¡_Pos
 27U

	)

1076 
	#TPI_FIFO1_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ITM_byãcou¡_Pos
Ë

	)

1078 
	#TPI_FIFO1_ETM_ATVALID_Pos
 26U

	)

1079 
	#TPI_FIFO1_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ETM_ATVALID_Pos
Ë

	)

1081 
	#TPI_FIFO1_ETM_byãcou¡_Pos
 24U

	)

1082 
	#TPI_FIFO1_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ETM_byãcou¡_Pos
Ë

	)

1084 
	#TPI_FIFO1_ITM2_Pos
 16U

	)

1085 
	#TPI_FIFO1_ITM2_Msk
 (0xFFUL << 
TPI_FIFO1_ITM2_Pos
Ë

	)

1087 
	#TPI_FIFO1_ITM1_Pos
 8U

	)

1088 
	#TPI_FIFO1_ITM1_Msk
 (0xFFUL << 
TPI_FIFO1_ITM1_Pos
Ë

	)

1090 
	#TPI_FIFO1_ITM0_Pos
 0U

	)

1091 
	#TPI_FIFO1_ITM0_Msk
 (0xFFUL )

	)

1094 
	#TPI_ITATBCTR0_ATREADY_Pos
 0U

	)

1095 
	#TPI_ITATBCTR0_ATREADY_Msk
 (0x1UL )

	)

1098 
	#TPI_ITCTRL_Mode_Pos
 0U

	)

1099 
	#TPI_ITCTRL_Mode_Msk
 (0x1UL )

	)

1102 
	#TPI_DEVID_NRZVALID_Pos
 11U

	)

1103 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

1105 
	#TPI_DEVID_MANCVALID_Pos
 10U

	)

1106 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

1108 
	#TPI_DEVID_PTINVALID_Pos
 9U

	)

1109 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

1111 
	#TPI_DEVID_MöBufSz_Pos
 6U

	)

1112 
	#TPI_DEVID_MöBufSz_Msk
 (0x7UL << 
TPI_DEVID_MöBufSz_Pos
Ë

	)

1114 
	#TPI_DEVID_AsynClkIn_Pos
 5U

	)

1115 
	#TPI_DEVID_AsynClkIn_Msk
 (0x1UL << 
TPI_DEVID_AsynClkIn_Pos
Ë

	)

1117 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0U

	)

1118 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x1FUL )

	)

1121 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 4U

	)

1122 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

1124 
	#TPI_DEVTYPE_SubTy≥_Pos
 0U

	)

1125 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL )

	)

1130 #i‡(
__MPU_PRESENT
 == 1U)

1143 
__IM
 
uöt32_t
 
TYPE
;

1144 
__IOM
 
uöt32_t
 
CTRL
;

1145 
__IOM
 
uöt32_t
 
RNR
;

1146 
__IOM
 
uöt32_t
 
RBAR
;

1147 
__IOM
 
uöt32_t
 
RASR
;

1148 
__IOM
 
uöt32_t
 
RBAR_A1
;

1149 
__IOM
 
uöt32_t
 
RASR_A1
;

1150 
__IOM
 
uöt32_t
 
RBAR_A2
;

1151 
__IOM
 
uöt32_t
 
RASR_A2
;

1152 
__IOM
 
uöt32_t
 
RBAR_A3
;

1153 
__IOM
 
uöt32_t
 
RASR_A3
;

1154 } 
	tMPU_Ty≥
;

1157 
	#MPU_TYPE_IREGION_Pos
 16U

	)

1158 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

1160 
	#MPU_TYPE_DREGION_Pos
 8U

	)

1161 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

1163 
	#MPU_TYPE_SEPARATE_Pos
 0U

	)

1164 
	#MPU_TYPE_SEPARATE_Msk
 (1UL )

	)

1167 
	#MPU_CTRL_PRIVDEFENA_Pos
 2U

	)

1168 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

1170 
	#MPU_CTRL_HFNMIENA_Pos
 1U

	)

1171 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

1173 
	#MPU_CTRL_ENABLE_Pos
 0U

	)

1174 
	#MPU_CTRL_ENABLE_Msk
 (1UL )

	)

1177 
	#MPU_RNR_REGION_Pos
 0U

	)

1178 
	#MPU_RNR_REGION_Msk
 (0xFFUL )

	)

1181 
	#MPU_RBAR_ADDR_Pos
 5U

	)

1182 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

1184 
	#MPU_RBAR_VALID_Pos
 4U

	)

1185 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

1187 
	#MPU_RBAR_REGION_Pos
 0U

	)

1188 
	#MPU_RBAR_REGION_Msk
 (0xFUL )

	)

1191 
	#MPU_RASR_ATTRS_Pos
 16U

	)

1192 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

1194 
	#MPU_RASR_XN_Pos
 28U

	)

1195 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

1197 
	#MPU_RASR_AP_Pos
 24U

	)

1198 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

1200 
	#MPU_RASR_TEX_Pos
 19U

	)

1201 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

1203 
	#MPU_RASR_S_Pos
 18U

	)

1204 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

1206 
	#MPU_RASR_C_Pos
 17U

	)

1207 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

1209 
	#MPU_RASR_B_Pos
 16U

	)

1210 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

1212 
	#MPU_RASR_SRD_Pos
 8U

	)

1213 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

1215 
	#MPU_RASR_SIZE_Pos
 1U

	)

1216 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

1218 
	#MPU_RASR_ENABLE_Pos
 0U

	)

1219 
	#MPU_RASR_ENABLE_Msk
 (1UL )

	)

1237 
__IOM
 
uöt32_t
 
DHCSR
;

1238 
__OM
 
uöt32_t
 
DCRSR
;

1239 
__IOM
 
uöt32_t
 
DCRDR
;

1240 
__IOM
 
uöt32_t
 
DEMCR
;

1241 } 
	tC‹eDebug_Ty≥
;

1244 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16U

	)

1245 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1247 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25U

	)

1248 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1250 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24U

	)

1251 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1253 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19U

	)

1254 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1256 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18U

	)

1257 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1259 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17U

	)

1260 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1262 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16U

	)

1263 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1265 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5U

	)

1266 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1268 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3U

	)

1269 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1271 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2U

	)

1272 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1274 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1U

	)

1275 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1277 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0U

	)

1278 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL )

	)

1281 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16U

	)

1282 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1284 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0U

	)

1285 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL )

	)

1288 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24U

	)

1289 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1291 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19U

	)

1292 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1294 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18U

	)

1295 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1297 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17U

	)

1298 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1300 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16U

	)

1301 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1303 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10U

	)

1304 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1306 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9U

	)

1307 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1309 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8U

	)

1310 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1312 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7U

	)

1313 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1315 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6U

	)

1316 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1318 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5U

	)

1319 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1321 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4U

	)

1322 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1324 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0U

	)

1325 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL )

	)

1343 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë((vÆuê<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

1351 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë((vÆuê& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

1364 
	#SCS_BASE
 (0xE000E000ULË

	)

1365 
	#ITM_BASE
 (0xE0000000ULË

	)

1366 
	#DWT_BASE
 (0xE0001000ULË

	)

1367 
	#TPI_BASE
 (0xE0040000ULË

	)

1368 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1369 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1370 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1371 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1373 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

1374 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1375 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1376 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1377 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

1378 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1379 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1380 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

1382 #i‡(
__MPU_PRESENT
 == 1U)

1383 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1384 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1422 
__STATIC_INLINE
 
NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1424 
uöt32_t
 
ªg_vÆue
;

1425 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1427 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1428 
ªg_vÆue
 &~((
uöt32_t
)(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
));

1429 
ªg_vÆue
 = (reg_value |

1430 ((
uöt32_t
)0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

1431 (
Pri‹ôyGroupTmp
 << 8U) );

1432 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1441 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôyGroupög
()

1443  ((
uöt32_t
)((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
));

1452 
__STATIC_INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1454 
NVIC
->
ISER
[(((
uöt32_t
)(
öt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));

1463 
__STATIC_INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1465 
NVIC
->
ICER
[(((
uöt32_t
)(
öt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));

1476 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1478 ((
uöt32_t
)(((
NVIC
->
ISPR
[(((uöt32_t)(
öt32_t
)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1487 
__STATIC_INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1489 
NVIC
->
ISPR
[(((
uöt32_t
)(
öt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));

1498 
__STATIC_INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1500 
NVIC
->
ICPR
[(((
uöt32_t
)(
öt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));

1511 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1513 ((
uöt32_t
)(((
NVIC
->
IABR
[(((uöt32_t)(
öt32_t
)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1524 
__STATIC_INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1526 i‡((
öt32_t
)(
IRQn
) < 0)

1528 
SCB
->
SHP
[(((
uöt32_t
)(
öt32_t
)
IRQn
Ë& 0xFUL)-4UL] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

1532 
NVIC
->
IP
[((
uöt32_t
)(
öt32_t
)
IRQn
)] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

1546 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1549 i‡((
öt32_t
)(
IRQn
) < 0)

1551 (((
uöt32_t
)
SCB
->
SHP
[(((uöt32_t)(
öt32_t
)
IRQn
Ë& 0xFUL)-4UL] >> (8U - 
__NVIC_PRIO_BITS
)));

1555 (((
uöt32_t
)
NVIC
->
IP
[((uöt32_t)(
öt32_t
)
IRQn
)] >> (8U - 
__NVIC_PRIO_BITS
)));

1571 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1573 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1574 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1575 
uöt32_t
 
SubPri‹ôyBôs
;

1577 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1578 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1581 ((
Pªem±Pri‹ôy
 & (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)Ë- 1UL)Ë<< 
SubPri‹ôyBôs
) |

1582 ((
SubPri‹ôy
 & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL)))

1598 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* c⁄° 
pPªem±Pri‹ôy
, uöt32_t* c⁄° 
pSubPri‹ôy
)

1600 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1601 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1602 
uöt32_t
 
SubPri‹ôyBôs
;

1604 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1605 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1607 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)) - 1UL);

1608 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL);

1616 
__STATIC_INLINE
 
NVIC_Sy°emRe£t
()

1618 
__DSB
();

1620 
SCB
->
AIRCR
 = (
uöt32_t
)((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

1621 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1622 
SCB_AIRCR_SYSRESETREQ_Msk
 );

1623 
__DSB
();

1627 
__NOP
();

1643 #i‡(
__Víd‹_SysTickC⁄fig
 == 0U)

1656 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1658 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

1663 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

1664 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

1665 
SysTick
->
VAL
 = 0UL;

1666 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1667 
SysTick_CTRL_TICKINT_Msk
 |

1668 
SysTick_CTRL_ENABLE_Msk
;

1686 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

1687 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5U

	)

1698 
__STATIC_INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

1700 i‡(((
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) != 0UL) &&

1701 ((
ITM
->
TER
 & 1UL ) != 0UL) )

1703 
ITM
->
PORT
[0U].
u32
 == 0UL)

1705 
__NOP
();

1707 
	gITM
->
	gPORT
[0U].
	gu8
 = (
uöt8_t
)
ch
;

1709  (
	gch
);

1719 
__STATIC_INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 ()

1721 
öt32_t
 
	gch
 = -1;

1723 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
)

1725 
ch
 = 
ITM_RxBuf„r
;

1726 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1729  (
	gch
);

1739 
__STATIC_INLINE
 
öt32_t
 
ITM_CheckCh¨
 ()

1742 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
)

1757 #ifde‡
__˝lu•lus


	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\cmsis\inc\stm32f105xc.h

55 #i‚de‡
__STM32F105xC_H


56 
	#__STM32F105xC_H


	)

58 #ifde‡
__˝lu•lus


68 
	#__MPU_PRESENT
 0

	)

69 
	#__CM3_REV
 0x0200

	)

70 
	#__NVIC_PRIO_BITS
 4

	)

71 
	#__Víd‹_SysTickC⁄fig
 0

	)

90 
N⁄MaskabÀI¡_IRQn
 = -14,

91 
H¨dFau…_IRQn
 = -13,

92 
Mem‹yM™agemít_IRQn
 = -12,

93 
BusFau…_IRQn
 = -11,

94 
UßgeFau…_IRQn
 = -10,

95 
SVCÆl_IRQn
 = -5,

96 
DebugM⁄ô‹_IRQn
 = -4,

97 
PídSV_IRQn
 = -2,

98 
SysTick_IRQn
 = -1,

101 
WWDG_IRQn
 = 0,

102 
PVD_IRQn
 = 1,

103 
TAMPER_IRQn
 = 2,

104 
RTC_IRQn
 = 3,

105 
FLASH_IRQn
 = 4,

106 
RCC_IRQn
 = 5,

107 
EXTI0_IRQn
 = 6,

108 
EXTI1_IRQn
 = 7,

109 
EXTI2_IRQn
 = 8,

110 
EXTI3_IRQn
 = 9,

111 
EXTI4_IRQn
 = 10,

112 
DMA1_Ch™√l1_IRQn
 = 11,

113 
DMA1_Ch™√l2_IRQn
 = 12,

114 
DMA1_Ch™√l3_IRQn
 = 13,

115 
DMA1_Ch™√l4_IRQn
 = 14,

116 
DMA1_Ch™√l5_IRQn
 = 15,

117 
DMA1_Ch™√l6_IRQn
 = 16,

118 
DMA1_Ch™√l7_IRQn
 = 17,

119 
ADC1_2_IRQn
 = 18,

120 
CAN1_TX_IRQn
 = 19,

121 
CAN1_RX0_IRQn
 = 20,

122 
CAN1_RX1_IRQn
 = 21,

123 
CAN1_SCE_IRQn
 = 22,

124 
EXTI9_5_IRQn
 = 23,

125 
TIM1_BRK_IRQn
 = 24,

126 
TIM1_UP_IRQn
 = 25,

127 
TIM1_TRG_COM_IRQn
 = 26,

128 
TIM1_CC_IRQn
 = 27,

129 
TIM2_IRQn
 = 28,

130 
TIM3_IRQn
 = 29,

131 
TIM4_IRQn
 = 30,

132 
I2C1_EV_IRQn
 = 31,

133 
I2C1_ER_IRQn
 = 32,

134 
I2C2_EV_IRQn
 = 33,

135 
I2C2_ER_IRQn
 = 34,

136 
SPI1_IRQn
 = 35,

137 
SPI2_IRQn
 = 36,

138 
USART1_IRQn
 = 37,

139 
USART2_IRQn
 = 38,

140 
USART3_IRQn
 = 39,

141 
EXTI15_10_IRQn
 = 40,

142 
RTC_Aœrm_IRQn
 = 41,

143 
OTG_FS_WKUP_IRQn
 = 42,

144 
TIM5_IRQn
 = 50,

145 
SPI3_IRQn
 = 51,

146 
UART4_IRQn
 = 52,

147 
UART5_IRQn
 = 53,

148 
TIM6_IRQn
 = 54,

149 
TIM7_IRQn
 = 55,

150 
DMA2_Ch™√l1_IRQn
 = 56,

151 
DMA2_Ch™√l2_IRQn
 = 57,

152 
DMA2_Ch™√l3_IRQn
 = 58,

153 
DMA2_Ch™√l4_IRQn
 = 59,

154 
DMA2_Ch™√l5_IRQn
 = 60,

155 
CAN2_TX_IRQn
 = 63,

156 
CAN2_RX0_IRQn
 = 64,

157 
CAN2_RX1_IRQn
 = 65,

158 
CAN2_SCE_IRQn
 = 66,

159 
OTG_FS_IRQn
 = 67

160 } 
	tIRQn_Ty≥
;

167 
	~"c‹e_cm3.h
"

168 
	~"sy°em_°m32f1xx.h
"

169 
	~<°döt.h
>

181 
__IO
 
uöt32_t
 
SR
;

182 
__IO
 
uöt32_t
 
CR1
;

183 
__IO
 
uöt32_t
 
CR2
;

184 
__IO
 
uöt32_t
 
SMPR1
;

185 
__IO
 
uöt32_t
 
SMPR2
;

186 
__IO
 
uöt32_t
 
JOFR1
;

187 
__IO
 
uöt32_t
 
JOFR2
;

188 
__IO
 
uöt32_t
 
JOFR3
;

189 
__IO
 
uöt32_t
 
JOFR4
;

190 
__IO
 
uöt32_t
 
HTR
;

191 
__IO
 
uöt32_t
 
LTR
;

192 
__IO
 
uöt32_t
 
SQR1
;

193 
__IO
 
uöt32_t
 
SQR2
;

194 
__IO
 
uöt32_t
 
SQR3
;

195 
__IO
 
uöt32_t
 
JSQR
;

196 
__IO
 
uöt32_t
 
JDR1
;

197 
__IO
 
uöt32_t
 
JDR2
;

198 
__IO
 
uöt32_t
 
JDR3
;

199 
__IO
 
uöt32_t
 
JDR4
;

200 
__IO
 
uöt32_t
 
DR
;

201 } 
	tADC_Ty≥Def
;

205 
uöt32_t
 
RESERVED
;

206 
__IO
 
uöt32_t
 
CR1
;

207 } 
	tADC_Comm⁄_Ty≥Def
;

215 
uöt32_t
 
RESERVED0
;

216 
__IO
 
uöt32_t
 
DR1
;

217 
__IO
 
uöt32_t
 
DR2
;

218 
__IO
 
uöt32_t
 
DR3
;

219 
__IO
 
uöt32_t
 
DR4
;

220 
__IO
 
uöt32_t
 
DR5
;

221 
__IO
 
uöt32_t
 
DR6
;

222 
__IO
 
uöt32_t
 
DR7
;

223 
__IO
 
uöt32_t
 
DR8
;

224 
__IO
 
uöt32_t
 
DR9
;

225 
__IO
 
uöt32_t
 
DR10
;

226 
__IO
 
uöt32_t
 
RTCCR
;

227 
__IO
 
uöt32_t
 
CR
;

228 
__IO
 
uöt32_t
 
CSR
;

229 
uöt32_t
 
RESERVED13
[2];

230 
__IO
 
uöt32_t
 
DR11
;

231 
__IO
 
uöt32_t
 
DR12
;

232 
__IO
 
uöt32_t
 
DR13
;

233 
__IO
 
uöt32_t
 
DR14
;

234 
__IO
 
uöt32_t
 
DR15
;

235 
__IO
 
uöt32_t
 
DR16
;

236 
__IO
 
uöt32_t
 
DR17
;

237 
__IO
 
uöt32_t
 
DR18
;

238 
__IO
 
uöt32_t
 
DR19
;

239 
__IO
 
uöt32_t
 
DR20
;

240 
__IO
 
uöt32_t
 
DR21
;

241 
__IO
 
uöt32_t
 
DR22
;

242 
__IO
 
uöt32_t
 
DR23
;

243 
__IO
 
uöt32_t
 
DR24
;

244 
__IO
 
uöt32_t
 
DR25
;

245 
__IO
 
uöt32_t
 
DR26
;

246 
__IO
 
uöt32_t
 
DR27
;

247 
__IO
 
uöt32_t
 
DR28
;

248 
__IO
 
uöt32_t
 
DR29
;

249 
__IO
 
uöt32_t
 
DR30
;

250 
__IO
 
uöt32_t
 
DR31
;

251 
__IO
 
uöt32_t
 
DR32
;

252 
__IO
 
uöt32_t
 
DR33
;

253 
__IO
 
uöt32_t
 
DR34
;

254 
__IO
 
uöt32_t
 
DR35
;

255 
__IO
 
uöt32_t
 
DR36
;

256 
__IO
 
uöt32_t
 
DR37
;

257 
__IO
 
uöt32_t
 
DR38
;

258 
__IO
 
uöt32_t
 
DR39
;

259 
__IO
 
uöt32_t
 
DR40
;

260 
__IO
 
uöt32_t
 
DR41
;

261 
__IO
 
uöt32_t
 
DR42
;

262 } 
	tBKP_Ty≥Def
;

270 
__IO
 
uöt32_t
 
TIR
;

271 
__IO
 
uöt32_t
 
TDTR
;

272 
__IO
 
uöt32_t
 
TDLR
;

273 
__IO
 
uöt32_t
 
TDHR
;

274 } 
	tCAN_TxMaûBox_Ty≥Def
;

282 
__IO
 
uöt32_t
 
RIR
;

283 
__IO
 
uöt32_t
 
RDTR
;

284 
__IO
 
uöt32_t
 
RDLR
;

285 
__IO
 
uöt32_t
 
RDHR
;

286 } 
	tCAN_FIFOMaûBox_Ty≥Def
;

294 
__IO
 
uöt32_t
 
FR1
;

295 
__IO
 
uöt32_t
 
FR2
;

296 } 
	tCAN_FûãrRegi°î_Ty≥Def
;

304 
__IO
 
uöt32_t
 
MCR
;

305 
__IO
 
uöt32_t
 
MSR
;

306 
__IO
 
uöt32_t
 
TSR
;

307 
__IO
 
uöt32_t
 
RF0R
;

308 
__IO
 
uöt32_t
 
RF1R
;

309 
__IO
 
uöt32_t
 
IER
;

310 
__IO
 
uöt32_t
 
ESR
;

311 
__IO
 
uöt32_t
 
BTR
;

312 
uöt32_t
 
RESERVED0
[88];

313 
CAN_TxMaûBox_Ty≥Def
 
sTxMaûBox
[3];

314 
CAN_FIFOMaûBox_Ty≥Def
 
sFIFOMaûBox
[2];

315 
uöt32_t
 
RESERVED1
[12];

316 
__IO
 
uöt32_t
 
FMR
;

317 
__IO
 
uöt32_t
 
FM1R
;

318 
uöt32_t
 
RESERVED2
;

319 
__IO
 
uöt32_t
 
FS1R
;

320 
uöt32_t
 
RESERVED3
;

321 
__IO
 
uöt32_t
 
FFA1R
;

322 
uöt32_t
 
RESERVED4
;

323 
__IO
 
uöt32_t
 
FA1R
;

324 
uöt32_t
 
RESERVED5
[8];

325 
CAN_FûãrRegi°î_Ty≥Def
 
sFûãrRegi°î
[28];

326 } 
	tCAN_Ty≥Def
;

334 
__IO
 
uöt32_t
 
DR
;

335 
__IO
 
uöt8_t
 
IDR
;

336 
uöt8_t
 
RESERVED0
;

337 
uöt16_t
 
RESERVED1
;

338 
__IO
 
uöt32_t
 
CR
;

339 } 
	tCRC_Ty≥Def
;

347 
__IO
 
uöt32_t
 
CR
;

348 
__IO
 
uöt32_t
 
SWTRIGR
;

349 
__IO
 
uöt32_t
 
DHR12R1
;

350 
__IO
 
uöt32_t
 
DHR12L1
;

351 
__IO
 
uöt32_t
 
DHR8R1
;

352 
__IO
 
uöt32_t
 
DHR12R2
;

353 
__IO
 
uöt32_t
 
DHR12L2
;

354 
__IO
 
uöt32_t
 
DHR8R2
;

355 
__IO
 
uöt32_t
 
DHR12RD
;

356 
__IO
 
uöt32_t
 
DHR12LD
;

357 
__IO
 
uöt32_t
 
DHR8RD
;

358 
__IO
 
uöt32_t
 
DOR1
;

359 
__IO
 
uöt32_t
 
DOR2
;

360 } 
	tDAC_Ty≥Def
;

368 
__IO
 
uöt32_t
 
IDCODE
;

369 
__IO
 
uöt32_t
 
CR
;

370 }
	tDBGMCU_Ty≥Def
;

378 
__IO
 
uöt32_t
 
CCR
;

379 
__IO
 
uöt32_t
 
CNDTR
;

380 
__IO
 
uöt32_t
 
CPAR
;

381 
__IO
 
uöt32_t
 
CMAR
;

382 } 
	tDMA_Ch™√l_Ty≥Def
;

386 
__IO
 
uöt32_t
 
ISR
;

387 
__IO
 
uöt32_t
 
IFCR
;

388 } 
	tDMA_Ty≥Def
;

398 
__IO
 
uöt32_t
 
IMR
;

399 
__IO
 
uöt32_t
 
EMR
;

400 
__IO
 
uöt32_t
 
RTSR
;

401 
__IO
 
uöt32_t
 
FTSR
;

402 
__IO
 
uöt32_t
 
SWIER
;

403 
__IO
 
uöt32_t
 
PR
;

404 } 
	tEXTI_Ty≥Def
;

412 
__IO
 
uöt32_t
 
ACR
;

413 
__IO
 
uöt32_t
 
KEYR
;

414 
__IO
 
uöt32_t
 
OPTKEYR
;

415 
__IO
 
uöt32_t
 
SR
;

416 
__IO
 
uöt32_t
 
CR
;

417 
__IO
 
uöt32_t
 
AR
;

418 
__IO
 
uöt32_t
 
RESERVED
;

419 
__IO
 
uöt32_t
 
OBR
;

420 
__IO
 
uöt32_t
 
WRPR
;

421 } 
	tFLASH_Ty≥Def
;

429 
__IO
 
uöt16_t
 
RDP
;

430 
__IO
 
uöt16_t
 
USER
;

431 
__IO
 
uöt16_t
 
D©a0
;

432 
__IO
 
uöt16_t
 
D©a1
;

433 
__IO
 
uöt16_t
 
WRP0
;

434 
__IO
 
uöt16_t
 
WRP1
;

435 
__IO
 
uöt16_t
 
WRP2
;

436 
__IO
 
uöt16_t
 
WRP3
;

437 } 
	tOB_Ty≥Def
;

445 
__IO
 
uöt32_t
 
CRL
;

446 
__IO
 
uöt32_t
 
CRH
;

447 
__IO
 
uöt32_t
 
IDR
;

448 
__IO
 
uöt32_t
 
ODR
;

449 
__IO
 
uöt32_t
 
BSRR
;

450 
__IO
 
uöt32_t
 
BRR
;

451 
__IO
 
uöt32_t
 
LCKR
;

452 } 
	tGPIO_Ty≥Def
;

460 
__IO
 
uöt32_t
 
EVCR
;

461 
__IO
 
uöt32_t
 
MAPR
;

462 
__IO
 
uöt32_t
 
EXTICR
[4];

463 
uöt32_t
 
RESERVED0
;

464 
__IO
 
uöt32_t
 
MAPR2
;

465 } 
	tAFIO_Ty≥Def
;

472 
__IO
 
uöt32_t
 
CR1
;

473 
__IO
 
uöt32_t
 
CR2
;

474 
__IO
 
uöt32_t
 
OAR1
;

475 
__IO
 
uöt32_t
 
OAR2
;

476 
__IO
 
uöt32_t
 
DR
;

477 
__IO
 
uöt32_t
 
SR1
;

478 
__IO
 
uöt32_t
 
SR2
;

479 
__IO
 
uöt32_t
 
CCR
;

480 
__IO
 
uöt32_t
 
TRISE
;

481 } 
	tI2C_Ty≥Def
;

489 
__IO
 
uöt32_t
 
KR
;

490 
__IO
 
uöt32_t
 
PR
;

491 
__IO
 
uöt32_t
 
RLR
;

492 
__IO
 
uöt32_t
 
SR
;

493 } 
	tIWDG_Ty≥Def
;

501 
__IO
 
uöt32_t
 
CR
;

502 
__IO
 
uöt32_t
 
CSR
;

503 } 
	tPWR_Ty≥Def
;

511 
__IO
 
uöt32_t
 
CR
;

512 
__IO
 
uöt32_t
 
CFGR
;

513 
__IO
 
uöt32_t
 
CIR
;

514 
__IO
 
uöt32_t
 
APB2RSTR
;

515 
__IO
 
uöt32_t
 
APB1RSTR
;

516 
__IO
 
uöt32_t
 
AHBENR
;

517 
__IO
 
uöt32_t
 
APB2ENR
;

518 
__IO
 
uöt32_t
 
APB1ENR
;

519 
__IO
 
uöt32_t
 
BDCR
;

520 
__IO
 
uöt32_t
 
CSR
;

522 
__IO
 
uöt32_t
 
AHBRSTR
;

523 
__IO
 
uöt32_t
 
CFGR2
;

525 } 
	tRCC_Ty≥Def
;

533 
__IO
 
uöt32_t
 
CRH
;

534 
__IO
 
uöt32_t
 
CRL
;

535 
__IO
 
uöt32_t
 
PRLH
;

536 
__IO
 
uöt32_t
 
PRLL
;

537 
__IO
 
uöt32_t
 
DIVH
;

538 
__IO
 
uöt32_t
 
DIVL
;

539 
__IO
 
uöt32_t
 
CNTH
;

540 
__IO
 
uöt32_t
 
CNTL
;

541 
__IO
 
uöt32_t
 
ALRH
;

542 
__IO
 
uöt32_t
 
ALRL
;

543 } 
	tRTC_Ty≥Def
;

551 
__IO
 
uöt32_t
 
POWER
;

552 
__IO
 
uöt32_t
 
CLKCR
;

553 
__IO
 
uöt32_t
 
ARG
;

554 
__IO
 
uöt32_t
 
CMD
;

555 
__I
 
uöt32_t
 
RESPCMD
;

556 
__I
 
uöt32_t
 
RESP1
;

557 
__I
 
uöt32_t
 
RESP2
;

558 
__I
 
uöt32_t
 
RESP3
;

559 
__I
 
uöt32_t
 
RESP4
;

560 
__IO
 
uöt32_t
 
DTIMER
;

561 
__IO
 
uöt32_t
 
DLEN
;

562 
__IO
 
uöt32_t
 
DCTRL
;

563 
__I
 
uöt32_t
 
DCOUNT
;

564 
__I
 
uöt32_t
 
STA
;

565 
__IO
 
uöt32_t
 
ICR
;

566 
__IO
 
uöt32_t
 
MASK
;

567 
uöt32_t
 
RESERVED0
[2];

568 
__I
 
uöt32_t
 
FIFOCNT
;

569 
uöt32_t
 
RESERVED1
[13];

570 
__IO
 
uöt32_t
 
FIFO
;

571 } 
	tSDIO_Ty≥Def
;

579 
__IO
 
uöt32_t
 
CR1
;

580 
__IO
 
uöt32_t
 
CR2
;

581 
__IO
 
uöt32_t
 
SR
;

582 
__IO
 
uöt32_t
 
DR
;

583 
__IO
 
uöt32_t
 
CRCPR
;

584 
__IO
 
uöt32_t
 
RXCRCR
;

585 
__IO
 
uöt32_t
 
TXCRCR
;

586 
__IO
 
uöt32_t
 
I2SCFGR
;

587 
__IO
 
uöt32_t
 
I2SPR
;

588 } 
	tSPI_Ty≥Def
;

595 
__IO
 
uöt32_t
 
CR1
;

596 
__IO
 
uöt32_t
 
CR2
;

597 
__IO
 
uöt32_t
 
SMCR
;

598 
__IO
 
uöt32_t
 
DIER
;

599 
__IO
 
uöt32_t
 
SR
;

600 
__IO
 
uöt32_t
 
EGR
;

601 
__IO
 
uöt32_t
 
CCMR1
;

602 
__IO
 
uöt32_t
 
CCMR2
;

603 
__IO
 
uöt32_t
 
CCER
;

604 
__IO
 
uöt32_t
 
CNT
;

605 
__IO
 
uöt32_t
 
PSC
;

606 
__IO
 
uöt32_t
 
ARR
;

607 
__IO
 
uöt32_t
 
RCR
;

608 
__IO
 
uöt32_t
 
CCR1
;

609 
__IO
 
uöt32_t
 
CCR2
;

610 
__IO
 
uöt32_t
 
CCR3
;

611 
__IO
 
uöt32_t
 
CCR4
;

612 
__IO
 
uöt32_t
 
BDTR
;

613 
__IO
 
uöt32_t
 
DCR
;

614 
__IO
 
uöt32_t
 
DMAR
;

615 
__IO
 
uöt32_t
 
OR
;

616 }
	tTIM_Ty≥Def
;

625 
__IO
 
uöt32_t
 
SR
;

626 
__IO
 
uöt32_t
 
DR
;

627 
__IO
 
uöt32_t
 
BRR
;

628 
__IO
 
uöt32_t
 
CR1
;

629 
__IO
 
uöt32_t
 
CR2
;

630 
__IO
 
uöt32_t
 
CR3
;

631 
__IO
 
uöt32_t
 
GTPR
;

632 } 
	tUSART_Ty≥Def
;

641 
__IO
 
uöt32_t
 
GOTGCTL
;

642 
__IO
 
uöt32_t
 
GOTGINT
;

643 
__IO
 
uöt32_t
 
GAHBCFG
;

644 
__IO
 
uöt32_t
 
GUSBCFG
;

645 
__IO
 
uöt32_t
 
GRSTCTL
;

646 
__IO
 
uöt32_t
 
GINTSTS
;

647 
__IO
 
uöt32_t
 
GINTMSK
;

648 
__IO
 
uöt32_t
 
GRXSTSR
;

649 
__IO
 
uöt32_t
 
GRXSTSP
;

650 
__IO
 
uöt32_t
 
GRXFSIZ
;

651 
__IO
 
uöt32_t
 
DIEPTXF0_HNPTXFSIZ
;

652 
__IO
 
uöt32_t
 
HNPTXSTS
;

653 
uöt32_t
 
Re£rved30
[2];

654 
__IO
 
uöt32_t
 
GCCFG
;

655 
__IO
 
uöt32_t
 
CID
;

656 
uöt32_t
 
Re£rved40
[48];

657 
__IO
 
uöt32_t
 
HPTXFSIZ
;

658 
__IO
 
uöt32_t
 
DIEPTXF
[0x0F];

659 } 
	tUSB_OTG_GlobÆTy≥Def
;

667 
__IO
 
uöt32_t
 
DCFG
;

668 
__IO
 
uöt32_t
 
DCTL
;

669 
__IO
 
uöt32_t
 
DSTS
;

670 
uöt32_t
 
Re£rved0C
;

671 
__IO
 
uöt32_t
 
DIEPMSK
;

672 
__IO
 
uöt32_t
 
DOEPMSK
;

673 
__IO
 
uöt32_t
 
DAINT
;

674 
__IO
 
uöt32_t
 
DAINTMSK
;

675 
uöt32_t
 
Re£rved20
;

676 
uöt32_t
 
Re£rved9
;

677 
__IO
 
uöt32_t
 
DVBUSDIS
;

678 
__IO
 
uöt32_t
 
DVBUSPULSE
;

679 
__IO
 
uöt32_t
 
DTHRCTL
;

680 
__IO
 
uöt32_t
 
DIEPEMPMSK
;

681 
__IO
 
uöt32_t
 
DEACHINT
;

682 
__IO
 
uöt32_t
 
DEACHMSK
;

683 
uöt32_t
 
Re£rved40
;

684 
__IO
 
uöt32_t
 
DINEP1MSK
;

685 
uöt32_t
 
Re£rved44
[15];

686 
__IO
 
uöt32_t
 
DOUTEP1MSK
;

687 } 
	tUSB_OTG_Devi˚Ty≥Def
;

695 
__IO
 
uöt32_t
 
DIEPCTL
;

696 
uöt32_t
 
Re£rved04
;

697 
__IO
 
uöt32_t
 
DIEPINT
;

698 
uöt32_t
 
Re£rved0C
;

699 
__IO
 
uöt32_t
 
DIEPTSIZ
;

700 
__IO
 
uöt32_t
 
DIEPDMA
;

701 
__IO
 
uöt32_t
 
DTXFSTS
;

702 
uöt32_t
 
Re£rved18
;

703 } 
	tUSB_OTG_INEndpoötTy≥Def
;

711 
__IO
 
uöt32_t
 
DOEPCTL
;

712 
uöt32_t
 
Re£rved04
;

713 
__IO
 
uöt32_t
 
DOEPINT
;

714 
uöt32_t
 
Re£rved0C
;

715 
__IO
 
uöt32_t
 
DOEPTSIZ
;

716 
__IO
 
uöt32_t
 
DOEPDMA
;

717 
uöt32_t
 
Re£rved18
[2];

718 } 
	tUSB_OTG_OUTEndpoötTy≥Def
;

726 
__IO
 
uöt32_t
 
HCFG
;

727 
__IO
 
uöt32_t
 
HFIR
;

728 
__IO
 
uöt32_t
 
HFNUM
;

729 
uöt32_t
 
Re£rved40C
;

730 
__IO
 
uöt32_t
 
HPTXSTS
;

731 
__IO
 
uöt32_t
 
HAINT
;

732 
__IO
 
uöt32_t
 
HAINTMSK
;

733 } 
	tUSB_OTG_Ho°Ty≥Def
;

741 
__IO
 
uöt32_t
 
HCCHAR
;

742 
__IO
 
uöt32_t
 
HCSPLT
;

743 
__IO
 
uöt32_t
 
HCINT
;

744 
__IO
 
uöt32_t
 
HCINTMSK
;

745 
__IO
 
uöt32_t
 
HCTSIZ
;

746 
__IO
 
uöt32_t
 
HCDMA
;

747 
uöt32_t
 
Re£rved
[2];

748 } 
	tUSB_OTG_Ho°Ch™√lTy≥Def
;

756 
__IO
 
uöt32_t
 
CR
;

757 
__IO
 
uöt32_t
 
CFR
;

758 
__IO
 
uöt32_t
 
SR
;

759 } 
	tWWDG_Ty≥Def
;

770 
	#FLASH_BASE
 ((
uöt32_t
)0x08000000Ë

	)

771 
	#FLASH_BANK1_END
 ((
uöt32_t
)0x0803FFFFË

	)

772 
	#SRAM_BASE
 ((
uöt32_t
)0x20000000Ë

	)

773 
	#PERIPH_BASE
 ((
uöt32_t
)0x40000000Ë

	)

775 
	#SRAM_BB_BASE
 ((
uöt32_t
)0x22000000Ë

	)

776 
	#PERIPH_BB_BASE
 ((
uöt32_t
)0x42000000Ë

	)

780 
	#APB1PERIPH_BASE
 
PERIPH_BASE


	)

781 
	#APB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x10000)

	)

782 
	#AHBPERIPH_BASE
 (
PERIPH_BASE
 + 0x20000)

	)

784 
	#TIM2_BASE
 (
APB1PERIPH_BASE
 + 0x0000)

	)

785 
	#TIM3_BASE
 (
APB1PERIPH_BASE
 + 0x0400)

	)

786 
	#TIM4_BASE
 (
APB1PERIPH_BASE
 + 0x0800)

	)

787 
	#TIM5_BASE
 (
APB1PERIPH_BASE
 + 0x0C00)

	)

788 
	#TIM6_BASE
 (
APB1PERIPH_BASE
 + 0x1000)

	)

789 
	#TIM7_BASE
 (
APB1PERIPH_BASE
 + 0x1400)

	)

790 
	#RTC_BASE
 (
APB1PERIPH_BASE
 + 0x2800)

	)

791 
	#WWDG_BASE
 (
APB1PERIPH_BASE
 + 0x2C00)

	)

792 
	#IWDG_BASE
 (
APB1PERIPH_BASE
 + 0x3000)

	)

793 
	#SPI2_BASE
 (
APB1PERIPH_BASE
 + 0x3800)

	)

794 
	#SPI3_BASE
 (
APB1PERIPH_BASE
 + 0x3C00)

	)

795 
	#USART2_BASE
 (
APB1PERIPH_BASE
 + 0x4400)

	)

796 
	#USART3_BASE
 (
APB1PERIPH_BASE
 + 0x4800)

	)

797 
	#UART4_BASE
 (
APB1PERIPH_BASE
 + 0x4C00)

	)

798 
	#UART5_BASE
 (
APB1PERIPH_BASE
 + 0x5000)

	)

799 
	#I2C1_BASE
 (
APB1PERIPH_BASE
 + 0x5400)

	)

800 
	#I2C2_BASE
 (
APB1PERIPH_BASE
 + 0x5800)

	)

801 
	#CAN1_BASE
 (
APB1PERIPH_BASE
 + 0x6400)

	)

802 
	#CAN2_BASE
 (
APB1PERIPH_BASE
 + 0x6800)

	)

803 
	#BKP_BASE
 (
APB1PERIPH_BASE
 + 0x6C00)

	)

804 
	#PWR_BASE
 (
APB1PERIPH_BASE
 + 0x7000)

	)

805 
	#DAC_BASE
 (
APB1PERIPH_BASE
 + 0x7400)

	)

806 
	#AFIO_BASE
 (
APB2PERIPH_BASE
 + 0x0000)

	)

807 
	#EXTI_BASE
 (
APB2PERIPH_BASE
 + 0x0400)

	)

808 
	#GPIOA_BASE
 (
APB2PERIPH_BASE
 + 0x0800)

	)

809 
	#GPIOB_BASE
 (
APB2PERIPH_BASE
 + 0x0C00)

	)

810 
	#GPIOC_BASE
 (
APB2PERIPH_BASE
 + 0x1000)

	)

811 
	#GPIOD_BASE
 (
APB2PERIPH_BASE
 + 0x1400)

	)

812 
	#GPIOE_BASE
 (
APB2PERIPH_BASE
 + 0x1800)

	)

813 
	#ADC1_BASE
 (
APB2PERIPH_BASE
 + 0x2400)

	)

814 
	#ADC2_BASE
 (
APB2PERIPH_BASE
 + 0x2800)

	)

815 
	#TIM1_BASE
 (
APB2PERIPH_BASE
 + 0x2C00)

	)

816 
	#SPI1_BASE
 (
APB2PERIPH_BASE
 + 0x3000)

	)

817 
	#USART1_BASE
 (
APB2PERIPH_BASE
 + 0x3800)

	)

819 
	#SDIO_BASE
 (
PERIPH_BASE
 + 0x18000)

	)

821 
	#DMA1_BASE
 (
AHBPERIPH_BASE
 + 0x0000)

	)

822 
	#DMA1_Ch™√l1_BASE
 (
AHBPERIPH_BASE
 + 0x0008)

	)

823 
	#DMA1_Ch™√l2_BASE
 (
AHBPERIPH_BASE
 + 0x001C)

	)

824 
	#DMA1_Ch™√l3_BASE
 (
AHBPERIPH_BASE
 + 0x0030)

	)

825 
	#DMA1_Ch™√l4_BASE
 (
AHBPERIPH_BASE
 + 0x0044)

	)

826 
	#DMA1_Ch™√l5_BASE
 (
AHBPERIPH_BASE
 + 0x0058)

	)

827 
	#DMA1_Ch™√l6_BASE
 (
AHBPERIPH_BASE
 + 0x006C)

	)

828 
	#DMA1_Ch™√l7_BASE
 (
AHBPERIPH_BASE
 + 0x0080)

	)

829 
	#DMA2_BASE
 (
AHBPERIPH_BASE
 + 0x0400)

	)

830 
	#DMA2_Ch™√l1_BASE
 (
AHBPERIPH_BASE
 + 0x0408)

	)

831 
	#DMA2_Ch™√l2_BASE
 (
AHBPERIPH_BASE
 + 0x041C)

	)

832 
	#DMA2_Ch™√l3_BASE
 (
AHBPERIPH_BASE
 + 0x0430)

	)

833 
	#DMA2_Ch™√l4_BASE
 (
AHBPERIPH_BASE
 + 0x0444)

	)

834 
	#DMA2_Ch™√l5_BASE
 (
AHBPERIPH_BASE
 + 0x0458)

	)

835 
	#RCC_BASE
 (
AHBPERIPH_BASE
 + 0x1000)

	)

836 
	#CRC_BASE
 (
AHBPERIPH_BASE
 + 0x3000)

	)

838 
	#FLASH_R_BASE
 (
AHBPERIPH_BASE
 + 0x2000Ë

	)

839 
	#OB_BASE
 ((
uöt32_t
)0x1FFFF800Ë

	)

843 
	#DBGMCU_BASE
 ((
uöt32_t
)0xE0042000Ë

	)

847 
	#USB_OTG_FS_PERIPH_BASE
 ((
uöt32_t
 )0x50000000)

	)

849 
	#USB_OTG_GLOBAL_BASE
 ((
uöt32_t
 )0x00000000)

	)

850 
	#USB_OTG_DEVICE_BASE
 ((
uöt32_t
 )0x00000800)

	)

851 
	#USB_OTG_IN_ENDPOINT_BASE
 ((
uöt32_t
 )0x00000900)

	)

852 
	#USB_OTG_OUT_ENDPOINT_BASE
 ((
uöt32_t
 )0x00000B00)

	)

853 
	#USB_OTG_EP_REG_SIZE
 ((
uöt32_t
 )0x00000020)

	)

854 
	#USB_OTG_HOST_BASE
 ((
uöt32_t
 )0x00000400)

	)

855 
	#USB_OTG_HOST_PORT_BASE
 ((
uöt32_t
 )0x00000440)

	)

856 
	#USB_OTG_HOST_CHANNEL_BASE
 ((
uöt32_t
 )0x00000500)

	)

857 
	#USB_OTG_HOST_CHANNEL_SIZE
 ((
uöt32_t
 )0x00000020)

	)

858 
	#USB_OTG_PCGCCTL_BASE
 ((
uöt32_t
 )0x00000E00)

	)

859 
	#USB_OTG_FIFO_BASE
 ((
uöt32_t
 )0x00001000)

	)

860 
	#USB_OTG_FIFO_SIZE
 ((
uöt32_t
 )0x00001000)

	)

870 
	#TIM2
 ((
TIM_Ty≥Def
 *Ë
TIM2_BASE
)

	)

871 
	#TIM3
 ((
TIM_Ty≥Def
 *Ë
TIM3_BASE
)

	)

872 
	#TIM4
 ((
TIM_Ty≥Def
 *Ë
TIM4_BASE
)

	)

873 
	#TIM5
 ((
TIM_Ty≥Def
 *Ë
TIM5_BASE
)

	)

874 
	#TIM6
 ((
TIM_Ty≥Def
 *Ë
TIM6_BASE
)

	)

875 
	#TIM7
 ((
TIM_Ty≥Def
 *Ë
TIM7_BASE
)

	)

876 
	#RTC
 ((
RTC_Ty≥Def
 *Ë
RTC_BASE
)

	)

877 
	#WWDG
 ((
WWDG_Ty≥Def
 *Ë
WWDG_BASE
)

	)

878 
	#IWDG
 ((
IWDG_Ty≥Def
 *Ë
IWDG_BASE
)

	)

879 
	#SPI2
 ((
SPI_Ty≥Def
 *Ë
SPI2_BASE
)

	)

880 
	#SPI3
 ((
SPI_Ty≥Def
 *Ë
SPI3_BASE
)

	)

881 
	#USART2
 ((
USART_Ty≥Def
 *Ë
USART2_BASE
)

	)

882 
	#USART3
 ((
USART_Ty≥Def
 *Ë
USART3_BASE
)

	)

883 
	#UART4
 ((
USART_Ty≥Def
 *Ë
UART4_BASE
)

	)

884 
	#UART5
 ((
USART_Ty≥Def
 *Ë
UART5_BASE
)

	)

885 
	#I2C1
 ((
I2C_Ty≥Def
 *Ë
I2C1_BASE
)

	)

886 
	#I2C2
 ((
I2C_Ty≥Def
 *Ë
I2C2_BASE
)

	)

887 
	#CAN1
 ((
CAN_Ty≥Def
 *Ë
CAN1_BASE
)

	)

888 
	#CAN2
 ((
CAN_Ty≥Def
 *Ë
CAN2_BASE
)

	)

889 
	#BKP
 ((
BKP_Ty≥Def
 *Ë
BKP_BASE
)

	)

890 
	#PWR
 ((
PWR_Ty≥Def
 *Ë
PWR_BASE
)

	)

891 
	#DAC
 ((
DAC_Ty≥Def
 *Ë
DAC_BASE
)

	)

892 
	#AFIO
 ((
AFIO_Ty≥Def
 *Ë
AFIO_BASE
)

	)

893 
	#EXTI
 ((
EXTI_Ty≥Def
 *Ë
EXTI_BASE
)

	)

894 
	#GPIOA
 ((
GPIO_Ty≥Def
 *Ë
GPIOA_BASE
)

	)

895 
	#GPIOB
 ((
GPIO_Ty≥Def
 *Ë
GPIOB_BASE
)

	)

896 
	#GPIOC
 ((
GPIO_Ty≥Def
 *Ë
GPIOC_BASE
)

	)

897 
	#GPIOD
 ((
GPIO_Ty≥Def
 *Ë
GPIOD_BASE
)

	)

898 
	#GPIOE
 ((
GPIO_Ty≥Def
 *Ë
GPIOE_BASE
)

	)

899 
	#ADC1
 ((
ADC_Ty≥Def
 *Ë
ADC1_BASE
)

	)

900 
	#ADC2
 ((
ADC_Ty≥Def
 *Ë
ADC2_BASE
)

	)

901 
	#ADC12_COMMON
 ((
ADC_Comm⁄_Ty≥Def
 *Ë
ADC1_BASE
)

	)

902 
	#TIM1
 ((
TIM_Ty≥Def
 *Ë
TIM1_BASE
)

	)

903 
	#SPI1
 ((
SPI_Ty≥Def
 *Ë
SPI1_BASE
)

	)

904 
	#USART1
 ((
USART_Ty≥Def
 *Ë
USART1_BASE
)

	)

905 
	#SDIO
 ((
SDIO_Ty≥Def
 *Ë
SDIO_BASE
)

	)

906 
	#DMA1
 ((
DMA_Ty≥Def
 *Ë
DMA1_BASE
)

	)

907 
	#DMA2
 ((
DMA_Ty≥Def
 *Ë
DMA2_BASE
)

	)

908 
	#DMA1_Ch™√l1
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l1_BASE
)

	)

909 
	#DMA1_Ch™√l2
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l2_BASE
)

	)

910 
	#DMA1_Ch™√l3
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l3_BASE
)

	)

911 
	#DMA1_Ch™√l4
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l4_BASE
)

	)

912 
	#DMA1_Ch™√l5
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l5_BASE
)

	)

913 
	#DMA1_Ch™√l6
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l6_BASE
)

	)

914 
	#DMA1_Ch™√l7
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l7_BASE
)

	)

915 
	#DMA2_Ch™√l1
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l1_BASE
)

	)

916 
	#DMA2_Ch™√l2
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l2_BASE
)

	)

917 
	#DMA2_Ch™√l3
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l3_BASE
)

	)

918 
	#DMA2_Ch™√l4
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l4_BASE
)

	)

919 
	#DMA2_Ch™√l5
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l5_BASE
)

	)

920 
	#RCC
 ((
RCC_Ty≥Def
 *Ë
RCC_BASE
)

	)

921 
	#CRC
 ((
CRC_Ty≥Def
 *Ë
CRC_BASE
)

	)

922 
	#FLASH
 ((
FLASH_Ty≥Def
 *Ë
FLASH_R_BASE
)

	)

923 
	#OB
 ((
OB_Ty≥Def
 *Ë
OB_BASE
)

	)

924 
	#DBGMCU
 ((
DBGMCU_Ty≥Def
 *Ë
DBGMCU_BASE
)

	)

926 
	#USB_OTG_FS
 ((
USB_OTG_GlobÆTy≥Def
 *Ë
USB_OTG_FS_PERIPH_BASE
)

	)

951 
	#CRC_DR_DR
 ((
uöt32_t
)0xFFFFFFFFË

	)

954 
	#CRC_IDR_IDR
 ((
uöt32_t
)0xFFË

	)

957 
	#CRC_CR_RESET
 ((
uöt32_t
)0x00000001Ë

	)

966 
	#PWR_CR_LPDS
 ((
uöt32_t
)0x00000001Ë

	)

967 
	#PWR_CR_PDDS
 ((
uöt32_t
)0x00000002Ë

	)

968 
	#PWR_CR_CWUF
 ((
uöt32_t
)0x00000004Ë

	)

969 
	#PWR_CR_CSBF
 ((
uöt32_t
)0x00000008Ë

	)

970 
	#PWR_CR_PVDE
 ((
uöt32_t
)0x00000010Ë

	)

972 
	#PWR_CR_PLS
 ((
uöt32_t
)0x000000E0Ë

	)

973 
	#PWR_CR_PLS_0
 ((
uöt32_t
)0x00000020Ë

	)

974 
	#PWR_CR_PLS_1
 ((
uöt32_t
)0x00000040Ë

	)

975 
	#PWR_CR_PLS_2
 ((
uöt32_t
)0x00000080Ë

	)

978 
	#PWR_CR_PLS_2V2
 ((
uöt32_t
)0x00000000Ë

	)

979 
	#PWR_CR_PLS_2V3
 ((
uöt32_t
)0x00000020Ë

	)

980 
	#PWR_CR_PLS_2V4
 ((
uöt32_t
)0x00000040Ë

	)

981 
	#PWR_CR_PLS_2V5
 ((
uöt32_t
)0x00000060Ë

	)

982 
	#PWR_CR_PLS_2V6
 ((
uöt32_t
)0x00000080Ë

	)

983 
	#PWR_CR_PLS_2V7
 ((
uöt32_t
)0x000000A0Ë

	)

984 
	#PWR_CR_PLS_2V8
 ((
uöt32_t
)0x000000C0Ë

	)

985 
	#PWR_CR_PLS_2V9
 ((
uöt32_t
)0x000000E0Ë

	)

987 
	#PWR_CR_DBP
 ((
uöt32_t
)0x00000100Ë

	)

991 
	#PWR_CSR_WUF
 ((
uöt32_t
)0x00000001Ë

	)

992 
	#PWR_CSR_SBF
 ((
uöt32_t
)0x00000002Ë

	)

993 
	#PWR_CSR_PVDO
 ((
uöt32_t
)0x00000004Ë

	)

994 
	#PWR_CSR_EWUP
 ((
uöt32_t
)0x00000100Ë

	)

1003 
	#BKP_DR1_D
 ((
uöt32_t
)0x0000FFFFË

	)

1006 
	#BKP_DR2_D
 ((
uöt32_t
)0x0000FFFFË

	)

1009 
	#BKP_DR3_D
 ((
uöt32_t
)0x0000FFFFË

	)

1012 
	#BKP_DR4_D
 ((
uöt32_t
)0x0000FFFFË

	)

1015 
	#BKP_DR5_D
 ((
uöt32_t
)0x0000FFFFË

	)

1018 
	#BKP_DR6_D
 ((
uöt32_t
)0x0000FFFFË

	)

1021 
	#BKP_DR7_D
 ((
uöt32_t
)0x0000FFFFË

	)

1024 
	#BKP_DR8_D
 ((
uöt32_t
)0x0000FFFFË

	)

1027 
	#BKP_DR9_D
 ((
uöt32_t
)0x0000FFFFË

	)

1030 
	#BKP_DR10_D
 ((
uöt32_t
)0x0000FFFFË

	)

1033 
	#BKP_DR11_D
 ((
uöt32_t
)0x0000FFFFË

	)

1036 
	#BKP_DR12_D
 ((
uöt32_t
)0x0000FFFFË

	)

1039 
	#BKP_DR13_D
 ((
uöt32_t
)0x0000FFFFË

	)

1042 
	#BKP_DR14_D
 ((
uöt32_t
)0x0000FFFFË

	)

1045 
	#BKP_DR15_D
 ((
uöt32_t
)0x0000FFFFË

	)

1048 
	#BKP_DR16_D
 ((
uöt32_t
)0x0000FFFFË

	)

1051 
	#BKP_DR17_D
 ((
uöt32_t
)0x0000FFFFË

	)

1054 
	#BKP_DR18_D
 ((
uöt32_t
)0x0000FFFFË

	)

1057 
	#BKP_DR19_D
 ((
uöt32_t
)0x0000FFFFË

	)

1060 
	#BKP_DR20_D
 ((
uöt32_t
)0x0000FFFFË

	)

1063 
	#BKP_DR21_D
 ((
uöt32_t
)0x0000FFFFË

	)

1066 
	#BKP_DR22_D
 ((
uöt32_t
)0x0000FFFFË

	)

1069 
	#BKP_DR23_D
 ((
uöt32_t
)0x0000FFFFË

	)

1072 
	#BKP_DR24_D
 ((
uöt32_t
)0x0000FFFFË

	)

1075 
	#BKP_DR25_D
 ((
uöt32_t
)0x0000FFFFË

	)

1078 
	#BKP_DR26_D
 ((
uöt32_t
)0x0000FFFFË

	)

1081 
	#BKP_DR27_D
 ((
uöt32_t
)0x0000FFFFË

	)

1084 
	#BKP_DR28_D
 ((
uöt32_t
)0x0000FFFFË

	)

1087 
	#BKP_DR29_D
 ((
uöt32_t
)0x0000FFFFË

	)

1090 
	#BKP_DR30_D
 ((
uöt32_t
)0x0000FFFFË

	)

1093 
	#BKP_DR31_D
 ((
uöt32_t
)0x0000FFFFË

	)

1096 
	#BKP_DR32_D
 ((
uöt32_t
)0x0000FFFFË

	)

1099 
	#BKP_DR33_D
 ((
uöt32_t
)0x0000FFFFË

	)

1102 
	#BKP_DR34_D
 ((
uöt32_t
)0x0000FFFFË

	)

1105 
	#BKP_DR35_D
 ((
uöt32_t
)0x0000FFFFË

	)

1108 
	#BKP_DR36_D
 ((
uöt32_t
)0x0000FFFFË

	)

1111 
	#BKP_DR37_D
 ((
uöt32_t
)0x0000FFFFË

	)

1114 
	#BKP_DR38_D
 ((
uöt32_t
)0x0000FFFFË

	)

1117 
	#BKP_DR39_D
 ((
uöt32_t
)0x0000FFFFË

	)

1120 
	#BKP_DR40_D
 ((
uöt32_t
)0x0000FFFFË

	)

1123 
	#BKP_DR41_D
 ((
uöt32_t
)0x0000FFFFË

	)

1126 
	#BKP_DR42_D
 ((
uöt32_t
)0x0000FFFFË

	)

1128 
	#RTC_BKP_NUMBER
 42

	)

1131 
	#BKP_RTCCR_CAL
 ((
uöt32_t
)0x0000007FË

	)

1132 
	#BKP_RTCCR_CCO
 ((
uöt32_t
)0x00000080Ë

	)

1133 
	#BKP_RTCCR_ASOE
 ((
uöt32_t
)0x00000100Ë

	)

1134 
	#BKP_RTCCR_ASOS
 ((
uöt32_t
)0x00000200Ë

	)

1137 
	#BKP_CR_TPE
 ((
uöt32_t
)0x00000001Ë

	)

1138 
	#BKP_CR_TPAL
 ((
uöt32_t
)0x00000002Ë

	)

1141 
	#BKP_CSR_CTE
 ((
uöt32_t
)0x00000001Ë

	)

1142 
	#BKP_CSR_CTI
 ((
uöt32_t
)0x00000002Ë

	)

1143 
	#BKP_CSR_TPIE
 ((
uöt32_t
)0x00000004Ë

	)

1144 
	#BKP_CSR_TEF
 ((
uöt32_t
)0x00000100Ë

	)

1145 
	#BKP_CSR_TIF
 ((
uöt32_t
)0x00000200Ë

	)

1154 
	#RCC_CR_HSION
 ((
uöt32_t
)0x00000001Ë

	)

1155 
	#RCC_CR_HSIRDY
 ((
uöt32_t
)0x00000002Ë

	)

1156 
	#RCC_CR_HSITRIM
 ((
uöt32_t
)0x000000F8Ë

	)

1157 
	#RCC_CR_HSICAL
 ((
uöt32_t
)0x0000FF00Ë

	)

1158 
	#RCC_CR_HSEON
 ((
uöt32_t
)0x00010000Ë

	)

1159 
	#RCC_CR_HSERDY
 ((
uöt32_t
)0x00020000Ë

	)

1160 
	#RCC_CR_HSEBYP
 ((
uöt32_t
)0x00040000Ë

	)

1161 
	#RCC_CR_CSSON
 ((
uöt32_t
)0x00080000Ë

	)

1162 
	#RCC_CR_PLLON
 ((
uöt32_t
)0x01000000Ë

	)

1163 
	#RCC_CR_PLLRDY
 ((
uöt32_t
)0x02000000Ë

	)

1165 
	#RCC_CR_PLL2ON
 ((
uöt32_t
)0x04000000Ë

	)

1166 
	#RCC_CR_PLL2RDY
 ((
uöt32_t
)0x08000000Ë

	)

1167 
	#RCC_CR_PLL3ON
 ((
uöt32_t
)0x10000000Ë

	)

1168 
	#RCC_CR_PLL3RDY
 ((
uöt32_t
)0x20000000Ë

	)

1172 
	#RCC_CFGR_SW
 ((
uöt32_t
)0x00000003Ë

	)

1173 
	#RCC_CFGR_SW_0
 ((
uöt32_t
)0x00000001Ë

	)

1174 
	#RCC_CFGR_SW_1
 ((
uöt32_t
)0x00000002Ë

	)

1176 
	#RCC_CFGR_SW_HSI
 ((
uöt32_t
)0x00000000Ë

	)

1177 
	#RCC_CFGR_SW_HSE
 ((
uöt32_t
)0x00000001Ë

	)

1178 
	#RCC_CFGR_SW_PLL
 ((
uöt32_t
)0x00000002Ë

	)

1181 
	#RCC_CFGR_SWS
 ((
uöt32_t
)0x0000000CË

	)

1182 
	#RCC_CFGR_SWS_0
 ((
uöt32_t
)0x00000004Ë

	)

1183 
	#RCC_CFGR_SWS_1
 ((
uöt32_t
)0x00000008Ë

	)

1185 
	#RCC_CFGR_SWS_HSI
 ((
uöt32_t
)0x00000000Ë

	)

1186 
	#RCC_CFGR_SWS_HSE
 ((
uöt32_t
)0x00000004Ë

	)

1187 
	#RCC_CFGR_SWS_PLL
 ((
uöt32_t
)0x00000008Ë

	)

1190 
	#RCC_CFGR_HPRE
 ((
uöt32_t
)0x000000F0Ë

	)

1191 
	#RCC_CFGR_HPRE_0
 ((
uöt32_t
)0x00000010Ë

	)

1192 
	#RCC_CFGR_HPRE_1
 ((
uöt32_t
)0x00000020Ë

	)

1193 
	#RCC_CFGR_HPRE_2
 ((
uöt32_t
)0x00000040Ë

	)

1194 
	#RCC_CFGR_HPRE_3
 ((
uöt32_t
)0x00000080Ë

	)

1196 
	#RCC_CFGR_HPRE_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1197 
	#RCC_CFGR_HPRE_DIV2
 ((
uöt32_t
)0x00000080Ë

	)

1198 
	#RCC_CFGR_HPRE_DIV4
 ((
uöt32_t
)0x00000090Ë

	)

1199 
	#RCC_CFGR_HPRE_DIV8
 ((
uöt32_t
)0x000000A0Ë

	)

1200 
	#RCC_CFGR_HPRE_DIV16
 ((
uöt32_t
)0x000000B0Ë

	)

1201 
	#RCC_CFGR_HPRE_DIV64
 ((
uöt32_t
)0x000000C0Ë

	)

1202 
	#RCC_CFGR_HPRE_DIV128
 ((
uöt32_t
)0x000000D0Ë

	)

1203 
	#RCC_CFGR_HPRE_DIV256
 ((
uöt32_t
)0x000000E0Ë

	)

1204 
	#RCC_CFGR_HPRE_DIV512
 ((
uöt32_t
)0x000000F0Ë

	)

1207 
	#RCC_CFGR_PPRE1
 ((
uöt32_t
)0x00000700Ë

	)

1208 
	#RCC_CFGR_PPRE1_0
 ((
uöt32_t
)0x00000100Ë

	)

1209 
	#RCC_CFGR_PPRE1_1
 ((
uöt32_t
)0x00000200Ë

	)

1210 
	#RCC_CFGR_PPRE1_2
 ((
uöt32_t
)0x00000400Ë

	)

1212 
	#RCC_CFGR_PPRE1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1213 
	#RCC_CFGR_PPRE1_DIV2
 ((
uöt32_t
)0x00000400Ë

	)

1214 
	#RCC_CFGR_PPRE1_DIV4
 ((
uöt32_t
)0x00000500Ë

	)

1215 
	#RCC_CFGR_PPRE1_DIV8
 ((
uöt32_t
)0x00000600Ë

	)

1216 
	#RCC_CFGR_PPRE1_DIV16
 ((
uöt32_t
)0x00000700Ë

	)

1219 
	#RCC_CFGR_PPRE2
 ((
uöt32_t
)0x00003800Ë

	)

1220 
	#RCC_CFGR_PPRE2_0
 ((
uöt32_t
)0x00000800Ë

	)

1221 
	#RCC_CFGR_PPRE2_1
 ((
uöt32_t
)0x00001000Ë

	)

1222 
	#RCC_CFGR_PPRE2_2
 ((
uöt32_t
)0x00002000Ë

	)

1224 
	#RCC_CFGR_PPRE2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1225 
	#RCC_CFGR_PPRE2_DIV2
 ((
uöt32_t
)0x00002000Ë

	)

1226 
	#RCC_CFGR_PPRE2_DIV4
 ((
uöt32_t
)0x00002800Ë

	)

1227 
	#RCC_CFGR_PPRE2_DIV8
 ((
uöt32_t
)0x00003000Ë

	)

1228 
	#RCC_CFGR_PPRE2_DIV16
 ((
uöt32_t
)0x00003800Ë

	)

1231 
	#RCC_CFGR_ADCPRE
 ((
uöt32_t
)0x0000C000Ë

	)

1232 
	#RCC_CFGR_ADCPRE_0
 ((
uöt32_t
)0x00004000Ë

	)

1233 
	#RCC_CFGR_ADCPRE_1
 ((
uöt32_t
)0x00008000Ë

	)

1235 
	#RCC_CFGR_ADCPRE_DIV2
 ((
uöt32_t
)0x00000000Ë

	)

1236 
	#RCC_CFGR_ADCPRE_DIV4
 ((
uöt32_t
)0x00004000Ë

	)

1237 
	#RCC_CFGR_ADCPRE_DIV6
 ((
uöt32_t
)0x00008000Ë

	)

1238 
	#RCC_CFGR_ADCPRE_DIV8
 ((
uöt32_t
)0x0000C000Ë

	)

1240 
	#RCC_CFGR_PLLSRC
 ((
uöt32_t
)0x00010000Ë

	)

1242 
	#RCC_CFGR_PLLXTPRE
 ((
uöt32_t
)0x00020000Ë

	)

1245 
	#RCC_CFGR_PLLMULL
 ((
uöt32_t
)0x003C0000Ë

	)

1246 
	#RCC_CFGR_PLLMULL_0
 ((
uöt32_t
)0x00040000Ë

	)

1247 
	#RCC_CFGR_PLLMULL_1
 ((
uöt32_t
)0x00080000Ë

	)

1248 
	#RCC_CFGR_PLLMULL_2
 ((
uöt32_t
)0x00100000Ë

	)

1249 
	#RCC_CFGR_PLLMULL_3
 ((
uöt32_t
)0x00200000Ë

	)

1251 
	#RCC_CFGR_PLLXTPRE_PREDIV1
 ((
uöt32_t
)0x00000000Ë

	)

1252 
	#RCC_CFGR_PLLXTPRE_PREDIV1_DIV2
 ((
uöt32_t
)0x00020000Ë

	)

1254 
	#RCC_CFGR_PLLMULL4
 ((
uöt32_t
)0x00080000Ë

	)

1255 
	#RCC_CFGR_PLLMULL5
 ((
uöt32_t
)0x000C0000Ë

	)

1256 
	#RCC_CFGR_PLLMULL6
 ((
uöt32_t
)0x00100000Ë

	)

1257 
	#RCC_CFGR_PLLMULL7
 ((
uöt32_t
)0x00140000Ë

	)

1258 
	#RCC_CFGR_PLLMULL8
 ((
uöt32_t
)0x00180000Ë

	)

1259 
	#RCC_CFGR_PLLMULL9
 ((
uöt32_t
)0x001C0000Ë

	)

1260 
	#RCC_CFGR_PLLMULL6_5
 ((
uöt32_t
)0x00340000Ë

	)

1262 
	#RCC_CFGR_OTGFSPRE
 ((
uöt32_t
)0x00400000Ë

	)

1265 
	#RCC_CFGR_MCO
 ((
uöt32_t
)0x0F000000Ë

	)

1266 
	#RCC_CFGR_MCO_0
 ((
uöt32_t
)0x01000000Ë

	)

1267 
	#RCC_CFGR_MCO_1
 ((
uöt32_t
)0x02000000Ë

	)

1268 
	#RCC_CFGR_MCO_2
 ((
uöt32_t
)0x04000000Ë

	)

1269 
	#RCC_CFGR_MCO_3
 ((
uöt32_t
)0x08000000Ë

	)

1271 
	#RCC_CFGR_MCO_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

1272 
	#RCC_CFGR_MCO_SYSCLK
 ((
uöt32_t
)0x04000000Ë

	)

1273 
	#RCC_CFGR_MCO_HSI
 ((
uöt32_t
)0x05000000Ë

	)

1274 
	#RCC_CFGR_MCO_HSE
 ((
uöt32_t
)0x06000000Ë

	)

1275 
	#RCC_CFGR_MCO_PLLCLK_DIV2
 ((
uöt32_t
)0x07000000Ë

	)

1276 
	#RCC_CFGR_MCO_PLL2CLK
 ((
uöt32_t
)0x08000000Ë

	)

1277 
	#RCC_CFGR_MCO_PLL3CLK_DIV2
 ((
uöt32_t
)0x09000000Ë

	)

1278 
	#RCC_CFGR_MCO_EXT_HSE
 ((
uöt32_t
)0x0A000000Ë

	)

1279 
	#RCC_CFGR_MCO_PLL3CLK
 ((
uöt32_t
)0x0B000000Ë

	)

1282 
	#RCC_CIR_LSIRDYF
 ((
uöt32_t
)0x00000001Ë

	)

1283 
	#RCC_CIR_LSERDYF
 ((
uöt32_t
)0x00000002Ë

	)

1284 
	#RCC_CIR_HSIRDYF
 ((
uöt32_t
)0x00000004Ë

	)

1285 
	#RCC_CIR_HSERDYF
 ((
uöt32_t
)0x00000008Ë

	)

1286 
	#RCC_CIR_PLLRDYF
 ((
uöt32_t
)0x00000010Ë

	)

1287 
	#RCC_CIR_CSSF
 ((
uöt32_t
)0x00000080Ë

	)

1288 
	#RCC_CIR_LSIRDYIE
 ((
uöt32_t
)0x00000100Ë

	)

1289 
	#RCC_CIR_LSERDYIE
 ((
uöt32_t
)0x00000200Ë

	)

1290 
	#RCC_CIR_HSIRDYIE
 ((
uöt32_t
)0x00000400Ë

	)

1291 
	#RCC_CIR_HSERDYIE
 ((
uöt32_t
)0x00000800Ë

	)

1292 
	#RCC_CIR_PLLRDYIE
 ((
uöt32_t
)0x00001000Ë

	)

1293 
	#RCC_CIR_LSIRDYC
 ((
uöt32_t
)0x00010000Ë

	)

1294 
	#RCC_CIR_LSERDYC
 ((
uöt32_t
)0x00020000Ë

	)

1295 
	#RCC_CIR_HSIRDYC
 ((
uöt32_t
)0x00040000Ë

	)

1296 
	#RCC_CIR_HSERDYC
 ((
uöt32_t
)0x00080000Ë

	)

1297 
	#RCC_CIR_PLLRDYC
 ((
uöt32_t
)0x00100000Ë

	)

1298 
	#RCC_CIR_CSSC
 ((
uöt32_t
)0x00800000Ë

	)

1300 
	#RCC_CIR_PLL2RDYF
 ((
uöt32_t
)0x00000020Ë

	)

1301 
	#RCC_CIR_PLL3RDYF
 ((
uöt32_t
)0x00000040Ë

	)

1302 
	#RCC_CIR_PLL2RDYIE
 ((
uöt32_t
)0x00002000Ë

	)

1303 
	#RCC_CIR_PLL3RDYIE
 ((
uöt32_t
)0x00004000Ë

	)

1304 
	#RCC_CIR_PLL2RDYC
 ((
uöt32_t
)0x00200000Ë

	)

1305 
	#RCC_CIR_PLL3RDYC
 ((
uöt32_t
)0x00400000Ë

	)

1308 
	#RCC_APB2RSTR_AFIORST
 ((
uöt32_t
)0x00000001Ë

	)

1309 
	#RCC_APB2RSTR_IOPARST
 ((
uöt32_t
)0x00000004Ë

	)

1310 
	#RCC_APB2RSTR_IOPBRST
 ((
uöt32_t
)0x00000008Ë

	)

1311 
	#RCC_APB2RSTR_IOPCRST
 ((
uöt32_t
)0x00000010Ë

	)

1312 
	#RCC_APB2RSTR_IOPDRST
 ((
uöt32_t
)0x00000020Ë

	)

1313 
	#RCC_APB2RSTR_ADC1RST
 ((
uöt32_t
)0x00000200Ë

	)

1315 
	#RCC_APB2RSTR_ADC2RST
 ((
uöt32_t
)0x00000400Ë

	)

1317 
	#RCC_APB2RSTR_TIM1RST
 ((
uöt32_t
)0x00000800Ë

	)

1318 
	#RCC_APB2RSTR_SPI1RST
 ((
uöt32_t
)0x00001000Ë

	)

1319 
	#RCC_APB2RSTR_USART1RST
 ((
uöt32_t
)0x00004000Ë

	)

1322 
	#RCC_APB2RSTR_IOPERST
 ((
uöt32_t
)0x00000040Ë

	)

1328 
	#RCC_APB1RSTR_TIM2RST
 ((
uöt32_t
)0x00000001Ë

	)

1329 
	#RCC_APB1RSTR_TIM3RST
 ((
uöt32_t
)0x00000002Ë

	)

1330 
	#RCC_APB1RSTR_WWDGRST
 ((
uöt32_t
)0x00000800Ë

	)

1331 
	#RCC_APB1RSTR_USART2RST
 ((
uöt32_t
)0x00020000Ë

	)

1332 
	#RCC_APB1RSTR_I2C1RST
 ((
uöt32_t
)0x00200000Ë

	)

1334 
	#RCC_APB1RSTR_CAN1RST
 ((
uöt32_t
)0x02000000Ë

	)

1336 
	#RCC_APB1RSTR_BKPRST
 ((
uöt32_t
)0x08000000Ë

	)

1337 
	#RCC_APB1RSTR_PWRRST
 ((
uöt32_t
)0x10000000Ë

	)

1339 
	#RCC_APB1RSTR_TIM4RST
 ((
uöt32_t
)0x00000004Ë

	)

1340 
	#RCC_APB1RSTR_SPI2RST
 ((
uöt32_t
)0x00004000Ë

	)

1341 
	#RCC_APB1RSTR_USART3RST
 ((
uöt32_t
)0x00040000Ë

	)

1342 
	#RCC_APB1RSTR_I2C2RST
 ((
uöt32_t
)0x00400000Ë

	)

1345 
	#RCC_APB1RSTR_TIM5RST
 ((
uöt32_t
)0x00000008Ë

	)

1346 
	#RCC_APB1RSTR_TIM6RST
 ((
uöt32_t
)0x00000010Ë

	)

1347 
	#RCC_APB1RSTR_TIM7RST
 ((
uöt32_t
)0x00000020Ë

	)

1348 
	#RCC_APB1RSTR_SPI3RST
 ((
uöt32_t
)0x00008000Ë

	)

1349 
	#RCC_APB1RSTR_UART4RST
 ((
uöt32_t
)0x00080000Ë

	)

1350 
	#RCC_APB1RSTR_UART5RST
 ((
uöt32_t
)0x00100000Ë

	)

1354 
	#RCC_APB1RSTR_CAN2RST
 ((
uöt32_t
)0x04000000Ë

	)

1356 
	#RCC_APB1RSTR_DACRST
 ((
uöt32_t
)0x20000000Ë

	)

1359 
	#RCC_AHBENR_DMA1EN
 ((
uöt32_t
)0x00000001Ë

	)

1360 
	#RCC_AHBENR_SRAMEN
 ((
uöt32_t
)0x00000004Ë

	)

1361 
	#RCC_AHBENR_FLITFEN
 ((
uöt32_t
)0x00000010Ë

	)

1362 
	#RCC_AHBENR_CRCEN
 ((
uöt32_t
)0x00000040Ë

	)

1364 
	#RCC_AHBENR_DMA2EN
 ((
uöt32_t
)0x00000002Ë

	)

1367 
	#RCC_AHBENR_OTGFSEN
 ((
uöt32_t
)0x00001000Ë

	)

1370 
	#RCC_APB2ENR_AFIOEN
 ((
uöt32_t
)0x00000001Ë

	)

1371 
	#RCC_APB2ENR_IOPAEN
 ((
uöt32_t
)0x00000004Ë

	)

1372 
	#RCC_APB2ENR_IOPBEN
 ((
uöt32_t
)0x00000008Ë

	)

1373 
	#RCC_APB2ENR_IOPCEN
 ((
uöt32_t
)0x00000010Ë

	)

1374 
	#RCC_APB2ENR_IOPDEN
 ((
uöt32_t
)0x00000020Ë

	)

1375 
	#RCC_APB2ENR_ADC1EN
 ((
uöt32_t
)0x00000200Ë

	)

1377 
	#RCC_APB2ENR_ADC2EN
 ((
uöt32_t
)0x00000400Ë

	)

1379 
	#RCC_APB2ENR_TIM1EN
 ((
uöt32_t
)0x00000800Ë

	)

1380 
	#RCC_APB2ENR_SPI1EN
 ((
uöt32_t
)0x00001000Ë

	)

1381 
	#RCC_APB2ENR_USART1EN
 ((
uöt32_t
)0x00004000Ë

	)

1384 
	#RCC_APB2ENR_IOPEEN
 ((
uöt32_t
)0x00000040Ë

	)

1390 
	#RCC_APB1ENR_TIM2EN
 ((
uöt32_t
)0x00000001Ë

	)

1391 
	#RCC_APB1ENR_TIM3EN
 ((
uöt32_t
)0x00000002Ë

	)

1392 
	#RCC_APB1ENR_WWDGEN
 ((
uöt32_t
)0x00000800Ë

	)

1393 
	#RCC_APB1ENR_USART2EN
 ((
uöt32_t
)0x00020000Ë

	)

1394 
	#RCC_APB1ENR_I2C1EN
 ((
uöt32_t
)0x00200000Ë

	)

1396 
	#RCC_APB1ENR_CAN1EN
 ((
uöt32_t
)0x02000000Ë

	)

1398 
	#RCC_APB1ENR_BKPEN
 ((
uöt32_t
)0x08000000Ë

	)

1399 
	#RCC_APB1ENR_PWREN
 ((
uöt32_t
)0x10000000Ë

	)

1401 
	#RCC_APB1ENR_TIM4EN
 ((
uöt32_t
)0x00000004Ë

	)

1402 
	#RCC_APB1ENR_SPI2EN
 ((
uöt32_t
)0x00004000Ë

	)

1403 
	#RCC_APB1ENR_USART3EN
 ((
uöt32_t
)0x00040000Ë

	)

1404 
	#RCC_APB1ENR_I2C2EN
 ((
uöt32_t
)0x00400000Ë

	)

1407 
	#RCC_APB1ENR_TIM5EN
 ((
uöt32_t
)0x00000008Ë

	)

1408 
	#RCC_APB1ENR_TIM6EN
 ((
uöt32_t
)0x00000010Ë

	)

1409 
	#RCC_APB1ENR_TIM7EN
 ((
uöt32_t
)0x00000020Ë

	)

1410 
	#RCC_APB1ENR_SPI3EN
 ((
uöt32_t
)0x00008000Ë

	)

1411 
	#RCC_APB1ENR_UART4EN
 ((
uöt32_t
)0x00080000Ë

	)

1412 
	#RCC_APB1ENR_UART5EN
 ((
uöt32_t
)0x00100000Ë

	)

1416 
	#RCC_APB1ENR_CAN2EN
 ((
uöt32_t
)0x04000000Ë

	)

1418 
	#RCC_APB1ENR_DACEN
 ((
uöt32_t
)0x20000000Ë

	)

1421 
	#RCC_BDCR_LSEON
 ((
uöt32_t
)0x00000001Ë

	)

1422 
	#RCC_BDCR_LSERDY
 ((
uöt32_t
)0x00000002Ë

	)

1423 
	#RCC_BDCR_LSEBYP
 ((
uöt32_t
)0x00000004Ë

	)

1425 
	#RCC_BDCR_RTCSEL
 ((
uöt32_t
)0x00000300Ë

	)

1426 
	#RCC_BDCR_RTCSEL_0
 ((
uöt32_t
)0x00000100Ë

	)

1427 
	#RCC_BDCR_RTCSEL_1
 ((
uöt32_t
)0x00000200Ë

	)

1430 
	#RCC_BDCR_RTCSEL_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

1431 
	#RCC_BDCR_RTCSEL_LSE
 ((
uöt32_t
)0x00000100Ë

	)

1432 
	#RCC_BDCR_RTCSEL_LSI
 ((
uöt32_t
)0x00000200Ë

	)

1433 
	#RCC_BDCR_RTCSEL_HSE
 ((
uöt32_t
)0x00000300Ë

	)

1435 
	#RCC_BDCR_RTCEN
 ((
uöt32_t
)0x00008000Ë

	)

1436 
	#RCC_BDCR_BDRST
 ((
uöt32_t
)0x00010000Ë

	)

1439 
	#RCC_CSR_LSION
 ((
uöt32_t
)0x00000001Ë

	)

1440 
	#RCC_CSR_LSIRDY
 ((
uöt32_t
)0x00000002Ë

	)

1441 
	#RCC_CSR_RMVF
 ((
uöt32_t
)0x01000000Ë

	)

1442 
	#RCC_CSR_PINRSTF
 ((
uöt32_t
)0x04000000Ë

	)

1443 
	#RCC_CSR_PORRSTF
 ((
uöt32_t
)0x08000000Ë

	)

1444 
	#RCC_CSR_SFTRSTF
 ((
uöt32_t
)0x10000000Ë

	)

1445 
	#RCC_CSR_IWDGRSTF
 ((
uöt32_t
)0x20000000Ë

	)

1446 
	#RCC_CSR_WWDGRSTF
 ((
uöt32_t
)0x40000000Ë

	)

1447 
	#RCC_CSR_LPWRRSTF
 ((
uöt32_t
)0x80000000Ë

	)

1450 
	#RCC_AHBRSTR_OTGFSRST
 ((
uöt32_t
)0x00001000Ë

	)

1454 
	#RCC_CFGR2_PREDIV1
 ((
uöt32_t
)0x0000000FË

	)

1455 
	#RCC_CFGR2_PREDIV1_0
 ((
uöt32_t
)0x00000001Ë

	)

1456 
	#RCC_CFGR2_PREDIV1_1
 ((
uöt32_t
)0x00000002Ë

	)

1457 
	#RCC_CFGR2_PREDIV1_2
 ((
uöt32_t
)0x00000004Ë

	)

1458 
	#RCC_CFGR2_PREDIV1_3
 ((
uöt32_t
)0x00000008Ë

	)

1460 
	#RCC_CFGR2_PREDIV1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1461 
	#RCC_CFGR2_PREDIV1_DIV2
 ((
uöt32_t
)0x00000001Ë

	)

1462 
	#RCC_CFGR2_PREDIV1_DIV3
 ((
uöt32_t
)0x00000002Ë

	)

1463 
	#RCC_CFGR2_PREDIV1_DIV4
 ((
uöt32_t
)0x00000003Ë

	)

1464 
	#RCC_CFGR2_PREDIV1_DIV5
 ((
uöt32_t
)0x00000004Ë

	)

1465 
	#RCC_CFGR2_PREDIV1_DIV6
 ((
uöt32_t
)0x00000005Ë

	)

1466 
	#RCC_CFGR2_PREDIV1_DIV7
 ((
uöt32_t
)0x00000006Ë

	)

1467 
	#RCC_CFGR2_PREDIV1_DIV8
 ((
uöt32_t
)0x00000007Ë

	)

1468 
	#RCC_CFGR2_PREDIV1_DIV9
 ((
uöt32_t
)0x00000008Ë

	)

1469 
	#RCC_CFGR2_PREDIV1_DIV10
 ((
uöt32_t
)0x00000009Ë

	)

1470 
	#RCC_CFGR2_PREDIV1_DIV11
 ((
uöt32_t
)0x0000000AË

	)

1471 
	#RCC_CFGR2_PREDIV1_DIV12
 ((
uöt32_t
)0x0000000BË

	)

1472 
	#RCC_CFGR2_PREDIV1_DIV13
 ((
uöt32_t
)0x0000000CË

	)

1473 
	#RCC_CFGR2_PREDIV1_DIV14
 ((
uöt32_t
)0x0000000DË

	)

1474 
	#RCC_CFGR2_PREDIV1_DIV15
 ((
uöt32_t
)0x0000000EË

	)

1475 
	#RCC_CFGR2_PREDIV1_DIV16
 ((
uöt32_t
)0x0000000FË

	)

1478 
	#RCC_CFGR2_PREDIV2
 ((
uöt32_t
)0x000000F0Ë

	)

1479 
	#RCC_CFGR2_PREDIV2_0
 ((
uöt32_t
)0x00000010Ë

	)

1480 
	#RCC_CFGR2_PREDIV2_1
 ((
uöt32_t
)0x00000020Ë

	)

1481 
	#RCC_CFGR2_PREDIV2_2
 ((
uöt32_t
)0x00000040Ë

	)

1482 
	#RCC_CFGR2_PREDIV2_3
 ((
uöt32_t
)0x00000080Ë

	)

1484 
	#RCC_CFGR2_PREDIV2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

1485 
	#RCC_CFGR2_PREDIV2_DIV2
 ((
uöt32_t
)0x00000010Ë

	)

1486 
	#RCC_CFGR2_PREDIV2_DIV3
 ((
uöt32_t
)0x00000020Ë

	)

1487 
	#RCC_CFGR2_PREDIV2_DIV4
 ((
uöt32_t
)0x00000030Ë

	)

1488 
	#RCC_CFGR2_PREDIV2_DIV5
 ((
uöt32_t
)0x00000040Ë

	)

1489 
	#RCC_CFGR2_PREDIV2_DIV6
 ((
uöt32_t
)0x00000050Ë

	)

1490 
	#RCC_CFGR2_PREDIV2_DIV7
 ((
uöt32_t
)0x00000060Ë

	)

1491 
	#RCC_CFGR2_PREDIV2_DIV8
 ((
uöt32_t
)0x00000070Ë

	)

1492 
	#RCC_CFGR2_PREDIV2_DIV9
 ((
uöt32_t
)0x00000080Ë

	)

1493 
	#RCC_CFGR2_PREDIV2_DIV10
 ((
uöt32_t
)0x00000090Ë

	)

1494 
	#RCC_CFGR2_PREDIV2_DIV11
 ((
uöt32_t
)0x000000A0Ë

	)

1495 
	#RCC_CFGR2_PREDIV2_DIV12
 ((
uöt32_t
)0x000000B0Ë

	)

1496 
	#RCC_CFGR2_PREDIV2_DIV13
 ((
uöt32_t
)0x000000C0Ë

	)

1497 
	#RCC_CFGR2_PREDIV2_DIV14
 ((
uöt32_t
)0x000000D0Ë

	)

1498 
	#RCC_CFGR2_PREDIV2_DIV15
 ((
uöt32_t
)0x000000E0Ë

	)

1499 
	#RCC_CFGR2_PREDIV2_DIV16
 ((
uöt32_t
)0x000000F0Ë

	)

1502 
	#RCC_CFGR2_PLL2MUL
 ((
uöt32_t
)0x00000F00Ë

	)

1503 
	#RCC_CFGR2_PLL2MUL_0
 ((
uöt32_t
)0x00000100Ë

	)

1504 
	#RCC_CFGR2_PLL2MUL_1
 ((
uöt32_t
)0x00000200Ë

	)

1505 
	#RCC_CFGR2_PLL2MUL_2
 ((
uöt32_t
)0x00000400Ë

	)

1506 
	#RCC_CFGR2_PLL2MUL_3
 ((
uöt32_t
)0x00000800Ë

	)

1508 
	#RCC_CFGR2_PLL2MUL8
 ((
uöt32_t
)0x00000600Ë

	)

1509 
	#RCC_CFGR2_PLL2MUL9
 ((
uöt32_t
)0x00000700Ë

	)

1510 
	#RCC_CFGR2_PLL2MUL10
 ((
uöt32_t
)0x00000800Ë

	)

1511 
	#RCC_CFGR2_PLL2MUL11
 ((
uöt32_t
)0x00000900Ë

	)

1512 
	#RCC_CFGR2_PLL2MUL12
 ((
uöt32_t
)0x00000A00Ë

	)

1513 
	#RCC_CFGR2_PLL2MUL13
 ((
uöt32_t
)0x00000B00Ë

	)

1514 
	#RCC_CFGR2_PLL2MUL14
 ((
uöt32_t
)0x00000C00Ë

	)

1515 
	#RCC_CFGR2_PLL2MUL16
 ((
uöt32_t
)0x00000E00Ë

	)

1516 
	#RCC_CFGR2_PLL2MUL20
 ((
uöt32_t
)0x00000F00Ë

	)

1519 
	#RCC_CFGR2_PLL3MUL
 ((
uöt32_t
)0x0000F000Ë

	)

1520 
	#RCC_CFGR2_PLL3MUL_0
 ((
uöt32_t
)0x00001000Ë

	)

1521 
	#RCC_CFGR2_PLL3MUL_1
 ((
uöt32_t
)0x00002000Ë

	)

1522 
	#RCC_CFGR2_PLL3MUL_2
 ((
uöt32_t
)0x00004000Ë

	)

1523 
	#RCC_CFGR2_PLL3MUL_3
 ((
uöt32_t
)0x00008000Ë

	)

1525 
	#RCC_CFGR2_PLL3MUL8
 ((
uöt32_t
)0x00006000Ë

	)

1526 
	#RCC_CFGR2_PLL3MUL9
 ((
uöt32_t
)0x00007000Ë

	)

1527 
	#RCC_CFGR2_PLL3MUL10
 ((
uöt32_t
)0x00008000Ë

	)

1528 
	#RCC_CFGR2_PLL3MUL11
 ((
uöt32_t
)0x00009000Ë

	)

1529 
	#RCC_CFGR2_PLL3MUL12
 ((
uöt32_t
)0x0000A000Ë

	)

1530 
	#RCC_CFGR2_PLL3MUL13
 ((
uöt32_t
)0x0000B000Ë

	)

1531 
	#RCC_CFGR2_PLL3MUL14
 ((
uöt32_t
)0x0000C000Ë

	)

1532 
	#RCC_CFGR2_PLL3MUL16
 ((
uöt32_t
)0x0000E000Ë

	)

1533 
	#RCC_CFGR2_PLL3MUL20
 ((
uöt32_t
)0x0000F000Ë

	)

1535 
	#RCC_CFGR2_PREDIV1SRC
 ((
uöt32_t
)0x00010000Ë

	)

1536 
	#RCC_CFGR2_PREDIV1SRC_PLL2
 ((
uöt32_t
)0x00010000Ë

	)

1537 
	#RCC_CFGR2_PREDIV1SRC_HSE
 ((
uöt32_t
)0x00000000Ë

	)

1538 
	#RCC_CFGR2_I2S2SRC
 ((
uöt32_t
)0x00020000Ë

	)

1539 
	#RCC_CFGR2_I2S3SRC
 ((
uöt32_t
)0x00040000Ë

	)

1549 
	#GPIO_CRL_MODE
 ((
uöt32_t
)0x33333333Ë

	)

1551 
	#GPIO_CRL_MODE0
 ((
uöt32_t
)0x00000003Ë

	)

1552 
	#GPIO_CRL_MODE0_0
 ((
uöt32_t
)0x00000001Ë

	)

1553 
	#GPIO_CRL_MODE0_1
 ((
uöt32_t
)0x00000002Ë

	)

1555 
	#GPIO_CRL_MODE1
 ((
uöt32_t
)0x00000030Ë

	)

1556 
	#GPIO_CRL_MODE1_0
 ((
uöt32_t
)0x00000010Ë

	)

1557 
	#GPIO_CRL_MODE1_1
 ((
uöt32_t
)0x00000020Ë

	)

1559 
	#GPIO_CRL_MODE2
 ((
uöt32_t
)0x00000300Ë

	)

1560 
	#GPIO_CRL_MODE2_0
 ((
uöt32_t
)0x00000100Ë

	)

1561 
	#GPIO_CRL_MODE2_1
 ((
uöt32_t
)0x00000200Ë

	)

1563 
	#GPIO_CRL_MODE3
 ((
uöt32_t
)0x00003000Ë

	)

1564 
	#GPIO_CRL_MODE3_0
 ((
uöt32_t
)0x00001000Ë

	)

1565 
	#GPIO_CRL_MODE3_1
 ((
uöt32_t
)0x00002000Ë

	)

1567 
	#GPIO_CRL_MODE4
 ((
uöt32_t
)0x00030000Ë

	)

1568 
	#GPIO_CRL_MODE4_0
 ((
uöt32_t
)0x00010000Ë

	)

1569 
	#GPIO_CRL_MODE4_1
 ((
uöt32_t
)0x00020000Ë

	)

1571 
	#GPIO_CRL_MODE5
 ((
uöt32_t
)0x00300000Ë

	)

1572 
	#GPIO_CRL_MODE5_0
 ((
uöt32_t
)0x00100000Ë

	)

1573 
	#GPIO_CRL_MODE5_1
 ((
uöt32_t
)0x00200000Ë

	)

1575 
	#GPIO_CRL_MODE6
 ((
uöt32_t
)0x03000000Ë

	)

1576 
	#GPIO_CRL_MODE6_0
 ((
uöt32_t
)0x01000000Ë

	)

1577 
	#GPIO_CRL_MODE6_1
 ((
uöt32_t
)0x02000000Ë

	)

1579 
	#GPIO_CRL_MODE7
 ((
uöt32_t
)0x30000000Ë

	)

1580 
	#GPIO_CRL_MODE7_0
 ((
uöt32_t
)0x10000000Ë

	)

1581 
	#GPIO_CRL_MODE7_1
 ((
uöt32_t
)0x20000000Ë

	)

1583 
	#GPIO_CRL_CNF
 ((
uöt32_t
)0xCCCCCCCCË

	)

1585 
	#GPIO_CRL_CNF0
 ((
uöt32_t
)0x0000000CË

	)

1586 
	#GPIO_CRL_CNF0_0
 ((
uöt32_t
)0x00000004Ë

	)

1587 
	#GPIO_CRL_CNF0_1
 ((
uöt32_t
)0x00000008Ë

	)

1589 
	#GPIO_CRL_CNF1
 ((
uöt32_t
)0x000000C0Ë

	)

1590 
	#GPIO_CRL_CNF1_0
 ((
uöt32_t
)0x00000040Ë

	)

1591 
	#GPIO_CRL_CNF1_1
 ((
uöt32_t
)0x00000080Ë

	)

1593 
	#GPIO_CRL_CNF2
 ((
uöt32_t
)0x00000C00Ë

	)

1594 
	#GPIO_CRL_CNF2_0
 ((
uöt32_t
)0x00000400Ë

	)

1595 
	#GPIO_CRL_CNF2_1
 ((
uöt32_t
)0x00000800Ë

	)

1597 
	#GPIO_CRL_CNF3
 ((
uöt32_t
)0x0000C000Ë

	)

1598 
	#GPIO_CRL_CNF3_0
 ((
uöt32_t
)0x00004000Ë

	)

1599 
	#GPIO_CRL_CNF3_1
 ((
uöt32_t
)0x00008000Ë

	)

1601 
	#GPIO_CRL_CNF4
 ((
uöt32_t
)0x000C0000Ë

	)

1602 
	#GPIO_CRL_CNF4_0
 ((
uöt32_t
)0x00040000Ë

	)

1603 
	#GPIO_CRL_CNF4_1
 ((
uöt32_t
)0x00080000Ë

	)

1605 
	#GPIO_CRL_CNF5
 ((
uöt32_t
)0x00C00000Ë

	)

1606 
	#GPIO_CRL_CNF5_0
 ((
uöt32_t
)0x00400000Ë

	)

1607 
	#GPIO_CRL_CNF5_1
 ((
uöt32_t
)0x00800000Ë

	)

1609 
	#GPIO_CRL_CNF6
 ((
uöt32_t
)0x0C000000Ë

	)

1610 
	#GPIO_CRL_CNF6_0
 ((
uöt32_t
)0x04000000Ë

	)

1611 
	#GPIO_CRL_CNF6_1
 ((
uöt32_t
)0x08000000Ë

	)

1613 
	#GPIO_CRL_CNF7
 ((
uöt32_t
)0xC0000000Ë

	)

1614 
	#GPIO_CRL_CNF7_0
 ((
uöt32_t
)0x40000000Ë

	)

1615 
	#GPIO_CRL_CNF7_1
 ((
uöt32_t
)0x80000000Ë

	)

1618 
	#GPIO_CRH_MODE
 ((
uöt32_t
)0x33333333Ë

	)

1620 
	#GPIO_CRH_MODE8
 ((
uöt32_t
)0x00000003Ë

	)

1621 
	#GPIO_CRH_MODE8_0
 ((
uöt32_t
)0x00000001Ë

	)

1622 
	#GPIO_CRH_MODE8_1
 ((
uöt32_t
)0x00000002Ë

	)

1624 
	#GPIO_CRH_MODE9
 ((
uöt32_t
)0x00000030Ë

	)

1625 
	#GPIO_CRH_MODE9_0
 ((
uöt32_t
)0x00000010Ë

	)

1626 
	#GPIO_CRH_MODE9_1
 ((
uöt32_t
)0x00000020Ë

	)

1628 
	#GPIO_CRH_MODE10
 ((
uöt32_t
)0x00000300Ë

	)

1629 
	#GPIO_CRH_MODE10_0
 ((
uöt32_t
)0x00000100Ë

	)

1630 
	#GPIO_CRH_MODE10_1
 ((
uöt32_t
)0x00000200Ë

	)

1632 
	#GPIO_CRH_MODE11
 ((
uöt32_t
)0x00003000Ë

	)

1633 
	#GPIO_CRH_MODE11_0
 ((
uöt32_t
)0x00001000Ë

	)

1634 
	#GPIO_CRH_MODE11_1
 ((
uöt32_t
)0x00002000Ë

	)

1636 
	#GPIO_CRH_MODE12
 ((
uöt32_t
)0x00030000Ë

	)

1637 
	#GPIO_CRH_MODE12_0
 ((
uöt32_t
)0x00010000Ë

	)

1638 
	#GPIO_CRH_MODE12_1
 ((
uöt32_t
)0x00020000Ë

	)

1640 
	#GPIO_CRH_MODE13
 ((
uöt32_t
)0x00300000Ë

	)

1641 
	#GPIO_CRH_MODE13_0
 ((
uöt32_t
)0x00100000Ë

	)

1642 
	#GPIO_CRH_MODE13_1
 ((
uöt32_t
)0x00200000Ë

	)

1644 
	#GPIO_CRH_MODE14
 ((
uöt32_t
)0x03000000Ë

	)

1645 
	#GPIO_CRH_MODE14_0
 ((
uöt32_t
)0x01000000Ë

	)

1646 
	#GPIO_CRH_MODE14_1
 ((
uöt32_t
)0x02000000Ë

	)

1648 
	#GPIO_CRH_MODE15
 ((
uöt32_t
)0x30000000Ë

	)

1649 
	#GPIO_CRH_MODE15_0
 ((
uöt32_t
)0x10000000Ë

	)

1650 
	#GPIO_CRH_MODE15_1
 ((
uöt32_t
)0x20000000Ë

	)

1652 
	#GPIO_CRH_CNF
 ((
uöt32_t
)0xCCCCCCCCË

	)

1654 
	#GPIO_CRH_CNF8
 ((
uöt32_t
)0x0000000CË

	)

1655 
	#GPIO_CRH_CNF8_0
 ((
uöt32_t
)0x00000004Ë

	)

1656 
	#GPIO_CRH_CNF8_1
 ((
uöt32_t
)0x00000008Ë

	)

1658 
	#GPIO_CRH_CNF9
 ((
uöt32_t
)0x000000C0Ë

	)

1659 
	#GPIO_CRH_CNF9_0
 ((
uöt32_t
)0x00000040Ë

	)

1660 
	#GPIO_CRH_CNF9_1
 ((
uöt32_t
)0x00000080Ë

	)

1662 
	#GPIO_CRH_CNF10
 ((
uöt32_t
)0x00000C00Ë

	)

1663 
	#GPIO_CRH_CNF10_0
 ((
uöt32_t
)0x00000400Ë

	)

1664 
	#GPIO_CRH_CNF10_1
 ((
uöt32_t
)0x00000800Ë

	)

1666 
	#GPIO_CRH_CNF11
 ((
uöt32_t
)0x0000C000Ë

	)

1667 
	#GPIO_CRH_CNF11_0
 ((
uöt32_t
)0x00004000Ë

	)

1668 
	#GPIO_CRH_CNF11_1
 ((
uöt32_t
)0x00008000Ë

	)

1670 
	#GPIO_CRH_CNF12
 ((
uöt32_t
)0x000C0000Ë

	)

1671 
	#GPIO_CRH_CNF12_0
 ((
uöt32_t
)0x00040000Ë

	)

1672 
	#GPIO_CRH_CNF12_1
 ((
uöt32_t
)0x00080000Ë

	)

1674 
	#GPIO_CRH_CNF13
 ((
uöt32_t
)0x00C00000Ë

	)

1675 
	#GPIO_CRH_CNF13_0
 ((
uöt32_t
)0x00400000Ë

	)

1676 
	#GPIO_CRH_CNF13_1
 ((
uöt32_t
)0x00800000Ë

	)

1678 
	#GPIO_CRH_CNF14
 ((
uöt32_t
)0x0C000000Ë

	)

1679 
	#GPIO_CRH_CNF14_0
 ((
uöt32_t
)0x04000000Ë

	)

1680 
	#GPIO_CRH_CNF14_1
 ((
uöt32_t
)0x08000000Ë

	)

1682 
	#GPIO_CRH_CNF15
 ((
uöt32_t
)0xC0000000Ë

	)

1683 
	#GPIO_CRH_CNF15_0
 ((
uöt32_t
)0x40000000Ë

	)

1684 
	#GPIO_CRH_CNF15_1
 ((
uöt32_t
)0x80000000Ë

	)

1687 
	#GPIO_IDR_IDR0
 ((
uöt32_t
)0x0001Ë

	)

1688 
	#GPIO_IDR_IDR1
 ((
uöt32_t
)0x0002Ë

	)

1689 
	#GPIO_IDR_IDR2
 ((
uöt32_t
)0x0004Ë

	)

1690 
	#GPIO_IDR_IDR3
 ((
uöt32_t
)0x0008Ë

	)

1691 
	#GPIO_IDR_IDR4
 ((
uöt32_t
)0x0010Ë

	)

1692 
	#GPIO_IDR_IDR5
 ((
uöt32_t
)0x0020Ë

	)

1693 
	#GPIO_IDR_IDR6
 ((
uöt32_t
)0x0040Ë

	)

1694 
	#GPIO_IDR_IDR7
 ((
uöt32_t
)0x0080Ë

	)

1695 
	#GPIO_IDR_IDR8
 ((
uöt32_t
)0x0100Ë

	)

1696 
	#GPIO_IDR_IDR9
 ((
uöt32_t
)0x0200Ë

	)

1697 
	#GPIO_IDR_IDR10
 ((
uöt32_t
)0x0400Ë

	)

1698 
	#GPIO_IDR_IDR11
 ((
uöt32_t
)0x0800Ë

	)

1699 
	#GPIO_IDR_IDR12
 ((
uöt32_t
)0x1000Ë

	)

1700 
	#GPIO_IDR_IDR13
 ((
uöt32_t
)0x2000Ë

	)

1701 
	#GPIO_IDR_IDR14
 ((
uöt32_t
)0x4000Ë

	)

1702 
	#GPIO_IDR_IDR15
 ((
uöt32_t
)0x8000Ë

	)

1705 
	#GPIO_ODR_ODR0
 ((
uöt32_t
)0x0001Ë

	)

1706 
	#GPIO_ODR_ODR1
 ((
uöt32_t
)0x0002Ë

	)

1707 
	#GPIO_ODR_ODR2
 ((
uöt32_t
)0x0004Ë

	)

1708 
	#GPIO_ODR_ODR3
 ((
uöt32_t
)0x0008Ë

	)

1709 
	#GPIO_ODR_ODR4
 ((
uöt32_t
)0x0010Ë

	)

1710 
	#GPIO_ODR_ODR5
 ((
uöt32_t
)0x0020Ë

	)

1711 
	#GPIO_ODR_ODR6
 ((
uöt32_t
)0x0040Ë

	)

1712 
	#GPIO_ODR_ODR7
 ((
uöt32_t
)0x0080Ë

	)

1713 
	#GPIO_ODR_ODR8
 ((
uöt32_t
)0x0100Ë

	)

1714 
	#GPIO_ODR_ODR9
 ((
uöt32_t
)0x0200Ë

	)

1715 
	#GPIO_ODR_ODR10
 ((
uöt32_t
)0x0400Ë

	)

1716 
	#GPIO_ODR_ODR11
 ((
uöt32_t
)0x0800Ë

	)

1717 
	#GPIO_ODR_ODR12
 ((
uöt32_t
)0x1000Ë

	)

1718 
	#GPIO_ODR_ODR13
 ((
uöt32_t
)0x2000Ë

	)

1719 
	#GPIO_ODR_ODR14
 ((
uöt32_t
)0x4000Ë

	)

1720 
	#GPIO_ODR_ODR15
 ((
uöt32_t
)0x8000Ë

	)

1723 
	#GPIO_BSRR_BS0
 ((
uöt32_t
)0x00000001Ë

	)

1724 
	#GPIO_BSRR_BS1
 ((
uöt32_t
)0x00000002Ë

	)

1725 
	#GPIO_BSRR_BS2
 ((
uöt32_t
)0x00000004Ë

	)

1726 
	#GPIO_BSRR_BS3
 ((
uöt32_t
)0x00000008Ë

	)

1727 
	#GPIO_BSRR_BS4
 ((
uöt32_t
)0x00000010Ë

	)

1728 
	#GPIO_BSRR_BS5
 ((
uöt32_t
)0x00000020Ë

	)

1729 
	#GPIO_BSRR_BS6
 ((
uöt32_t
)0x00000040Ë

	)

1730 
	#GPIO_BSRR_BS7
 ((
uöt32_t
)0x00000080Ë

	)

1731 
	#GPIO_BSRR_BS8
 ((
uöt32_t
)0x00000100Ë

	)

1732 
	#GPIO_BSRR_BS9
 ((
uöt32_t
)0x00000200Ë

	)

1733 
	#GPIO_BSRR_BS10
 ((
uöt32_t
)0x00000400Ë

	)

1734 
	#GPIO_BSRR_BS11
 ((
uöt32_t
)0x00000800Ë

	)

1735 
	#GPIO_BSRR_BS12
 ((
uöt32_t
)0x00001000Ë

	)

1736 
	#GPIO_BSRR_BS13
 ((
uöt32_t
)0x00002000Ë

	)

1737 
	#GPIO_BSRR_BS14
 ((
uöt32_t
)0x00004000Ë

	)

1738 
	#GPIO_BSRR_BS15
 ((
uöt32_t
)0x00008000Ë

	)

1740 
	#GPIO_BSRR_BR0
 ((
uöt32_t
)0x00010000Ë

	)

1741 
	#GPIO_BSRR_BR1
 ((
uöt32_t
)0x00020000Ë

	)

1742 
	#GPIO_BSRR_BR2
 ((
uöt32_t
)0x00040000Ë

	)

1743 
	#GPIO_BSRR_BR3
 ((
uöt32_t
)0x00080000Ë

	)

1744 
	#GPIO_BSRR_BR4
 ((
uöt32_t
)0x00100000Ë

	)

1745 
	#GPIO_BSRR_BR5
 ((
uöt32_t
)0x00200000Ë

	)

1746 
	#GPIO_BSRR_BR6
 ((
uöt32_t
)0x00400000Ë

	)

1747 
	#GPIO_BSRR_BR7
 ((
uöt32_t
)0x00800000Ë

	)

1748 
	#GPIO_BSRR_BR8
 ((
uöt32_t
)0x01000000Ë

	)

1749 
	#GPIO_BSRR_BR9
 ((
uöt32_t
)0x02000000Ë

	)

1750 
	#GPIO_BSRR_BR10
 ((
uöt32_t
)0x04000000Ë

	)

1751 
	#GPIO_BSRR_BR11
 ((
uöt32_t
)0x08000000Ë

	)

1752 
	#GPIO_BSRR_BR12
 ((
uöt32_t
)0x10000000Ë

	)

1753 
	#GPIO_BSRR_BR13
 ((
uöt32_t
)0x20000000Ë

	)

1754 
	#GPIO_BSRR_BR14
 ((
uöt32_t
)0x40000000Ë

	)

1755 
	#GPIO_BSRR_BR15
 ((
uöt32_t
)0x80000000Ë

	)

1758 
	#GPIO_BRR_BR0
 ((
uöt32_t
)0x0001Ë

	)

1759 
	#GPIO_BRR_BR1
 ((
uöt32_t
)0x0002Ë

	)

1760 
	#GPIO_BRR_BR2
 ((
uöt32_t
)0x0004Ë

	)

1761 
	#GPIO_BRR_BR3
 ((
uöt32_t
)0x0008Ë

	)

1762 
	#GPIO_BRR_BR4
 ((
uöt32_t
)0x0010Ë

	)

1763 
	#GPIO_BRR_BR5
 ((
uöt32_t
)0x0020Ë

	)

1764 
	#GPIO_BRR_BR6
 ((
uöt32_t
)0x0040Ë

	)

1765 
	#GPIO_BRR_BR7
 ((
uöt32_t
)0x0080Ë

	)

1766 
	#GPIO_BRR_BR8
 ((
uöt32_t
)0x0100Ë

	)

1767 
	#GPIO_BRR_BR9
 ((
uöt32_t
)0x0200Ë

	)

1768 
	#GPIO_BRR_BR10
 ((
uöt32_t
)0x0400Ë

	)

1769 
	#GPIO_BRR_BR11
 ((
uöt32_t
)0x0800Ë

	)

1770 
	#GPIO_BRR_BR12
 ((
uöt32_t
)0x1000Ë

	)

1771 
	#GPIO_BRR_BR13
 ((
uöt32_t
)0x2000Ë

	)

1772 
	#GPIO_BRR_BR14
 ((
uöt32_t
)0x4000Ë

	)

1773 
	#GPIO_BRR_BR15
 ((
uöt32_t
)0x8000Ë

	)

1776 
	#GPIO_LCKR_LCK0
 ((
uöt32_t
)0x00000001Ë

	)

1777 
	#GPIO_LCKR_LCK1
 ((
uöt32_t
)0x00000002Ë

	)

1778 
	#GPIO_LCKR_LCK2
 ((
uöt32_t
)0x00000004Ë

	)

1779 
	#GPIO_LCKR_LCK3
 ((
uöt32_t
)0x00000008Ë

	)

1780 
	#GPIO_LCKR_LCK4
 ((
uöt32_t
)0x00000010Ë

	)

1781 
	#GPIO_LCKR_LCK5
 ((
uöt32_t
)0x00000020Ë

	)

1782 
	#GPIO_LCKR_LCK6
 ((
uöt32_t
)0x00000040Ë

	)

1783 
	#GPIO_LCKR_LCK7
 ((
uöt32_t
)0x00000080Ë

	)

1784 
	#GPIO_LCKR_LCK8
 ((
uöt32_t
)0x00000100Ë

	)

1785 
	#GPIO_LCKR_LCK9
 ((
uöt32_t
)0x00000200Ë

	)

1786 
	#GPIO_LCKR_LCK10
 ((
uöt32_t
)0x00000400Ë

	)

1787 
	#GPIO_LCKR_LCK11
 ((
uöt32_t
)0x00000800Ë

	)

1788 
	#GPIO_LCKR_LCK12
 ((
uöt32_t
)0x00001000Ë

	)

1789 
	#GPIO_LCKR_LCK13
 ((
uöt32_t
)0x00002000Ë

	)

1790 
	#GPIO_LCKR_LCK14
 ((
uöt32_t
)0x00004000Ë

	)

1791 
	#GPIO_LCKR_LCK15
 ((
uöt32_t
)0x00008000Ë

	)

1792 
	#GPIO_LCKR_LCKK
 ((
uöt32_t
)0x00010000Ë

	)

1797 
	#AFIO_EVCR_PIN
 ((
uöt32_t
)0x0000000FË

	)

1798 
	#AFIO_EVCR_PIN_0
 ((
uöt32_t
)0x00000001Ë

	)

1799 
	#AFIO_EVCR_PIN_1
 ((
uöt32_t
)0x00000002Ë

	)

1800 
	#AFIO_EVCR_PIN_2
 ((
uöt32_t
)0x00000004Ë

	)

1801 
	#AFIO_EVCR_PIN_3
 ((
uöt32_t
)0x00000008Ë

	)

1804 
	#AFIO_EVCR_PIN_PX0
 ((
uöt32_t
)0x00000000Ë

	)

1805 
	#AFIO_EVCR_PIN_PX1
 ((
uöt32_t
)0x00000001Ë

	)

1806 
	#AFIO_EVCR_PIN_PX2
 ((
uöt32_t
)0x00000002Ë

	)

1807 
	#AFIO_EVCR_PIN_PX3
 ((
uöt32_t
)0x00000003Ë

	)

1808 
	#AFIO_EVCR_PIN_PX4
 ((
uöt32_t
)0x00000004Ë

	)

1809 
	#AFIO_EVCR_PIN_PX5
 ((
uöt32_t
)0x00000005Ë

	)

1810 
	#AFIO_EVCR_PIN_PX6
 ((
uöt32_t
)0x00000006Ë

	)

1811 
	#AFIO_EVCR_PIN_PX7
 ((
uöt32_t
)0x00000007Ë

	)

1812 
	#AFIO_EVCR_PIN_PX8
 ((
uöt32_t
)0x00000008Ë

	)

1813 
	#AFIO_EVCR_PIN_PX9
 ((
uöt32_t
)0x00000009Ë

	)

1814 
	#AFIO_EVCR_PIN_PX10
 ((
uöt32_t
)0x0000000AË

	)

1815 
	#AFIO_EVCR_PIN_PX11
 ((
uöt32_t
)0x0000000BË

	)

1816 
	#AFIO_EVCR_PIN_PX12
 ((
uöt32_t
)0x0000000CË

	)

1817 
	#AFIO_EVCR_PIN_PX13
 ((
uöt32_t
)0x0000000DË

	)

1818 
	#AFIO_EVCR_PIN_PX14
 ((
uöt32_t
)0x0000000EË

	)

1819 
	#AFIO_EVCR_PIN_PX15
 ((
uöt32_t
)0x0000000FË

	)

1821 
	#AFIO_EVCR_PORT
 ((
uöt32_t
)0x00000070Ë

	)

1822 
	#AFIO_EVCR_PORT_0
 ((
uöt32_t
)0x00000010Ë

	)

1823 
	#AFIO_EVCR_PORT_1
 ((
uöt32_t
)0x00000020Ë

	)

1824 
	#AFIO_EVCR_PORT_2
 ((
uöt32_t
)0x00000040Ë

	)

1827 
	#AFIO_EVCR_PORT_PA
 ((
uöt32_t
)0x00000000Ë

	)

1828 
	#AFIO_EVCR_PORT_PB
 ((
uöt32_t
)0x00000010Ë

	)

1829 
	#AFIO_EVCR_PORT_PC
 ((
uöt32_t
)0x00000020Ë

	)

1830 
	#AFIO_EVCR_PORT_PD
 ((
uöt32_t
)0x00000030Ë

	)

1831 
	#AFIO_EVCR_PORT_PE
 ((
uöt32_t
)0x00000040Ë

	)

1833 
	#AFIO_EVCR_EVOE
 ((
uöt32_t
)0x00000080Ë

	)

1836 
	#AFIO_MAPR_SPI1_REMAP
 ((
uöt32_t
)0x00000001Ë

	)

1837 
	#AFIO_MAPR_I2C1_REMAP
 ((
uöt32_t
)0x00000002Ë

	)

1838 
	#AFIO_MAPR_USART1_REMAP
 ((
uöt32_t
)0x00000004Ë

	)

1839 
	#AFIO_MAPR_USART2_REMAP
 ((
uöt32_t
)0x00000008Ë

	)

1841 
	#AFIO_MAPR_USART3_REMAP
 ((
uöt32_t
)0x00000030Ë

	)

1842 
	#AFIO_MAPR_USART3_REMAP_0
 ((
uöt32_t
)0x00000010Ë

	)

1843 
	#AFIO_MAPR_USART3_REMAP_1
 ((
uöt32_t
)0x00000020Ë

	)

1846 
	#AFIO_MAPR_USART3_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

1847 
	#AFIO_MAPR_USART3_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000010Ë

	)

1848 
	#AFIO_MAPR_USART3_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000030Ë

	)

1850 
	#AFIO_MAPR_TIM1_REMAP
 ((
uöt32_t
)0x000000C0Ë

	)

1851 
	#AFIO_MAPR_TIM1_REMAP_0
 ((
uöt32_t
)0x00000040Ë

	)

1852 
	#AFIO_MAPR_TIM1_REMAP_1
 ((
uöt32_t
)0x00000080Ë

	)

1855 
	#AFIO_MAPR_TIM1_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

1856 
	#AFIO_MAPR_TIM1_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000040Ë

	)

1857 
	#AFIO_MAPR_TIM1_REMAP_FULLREMAP
 ((
uöt32_t
)0x000000C0Ë

	)

1859 
	#AFIO_MAPR_TIM2_REMAP
 ((
uöt32_t
)0x00000300Ë

	)

1860 
	#AFIO_MAPR_TIM2_REMAP_0
 ((
uöt32_t
)0x00000100Ë

	)

1861 
	#AFIO_MAPR_TIM2_REMAP_1
 ((
uöt32_t
)0x00000200Ë

	)

1864 
	#AFIO_MAPR_TIM2_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

1865 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1
 ((
uöt32_t
)0x00000100Ë

	)

1866 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2
 ((
uöt32_t
)0x00000200Ë

	)

1867 
	#AFIO_MAPR_TIM2_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000300Ë

	)

1869 
	#AFIO_MAPR_TIM3_REMAP
 ((
uöt32_t
)0x00000C00Ë

	)

1870 
	#AFIO_MAPR_TIM3_REMAP_0
 ((
uöt32_t
)0x00000400Ë

	)

1871 
	#AFIO_MAPR_TIM3_REMAP_1
 ((
uöt32_t
)0x00000800Ë

	)

1874 
	#AFIO_MAPR_TIM3_REMAP_NOREMAP
 ((
uöt32_t
)0x00000000Ë

	)

1875 
	#AFIO_MAPR_TIM3_REMAP_PARTIALREMAP
 ((
uöt32_t
)0x00000800Ë

	)

1876 
	#AFIO_MAPR_TIM3_REMAP_FULLREMAP
 ((
uöt32_t
)0x00000C00Ë

	)

1878 
	#AFIO_MAPR_TIM4_REMAP
 ((
uöt32_t
)0x00001000Ë

	)

1880 
	#AFIO_MAPR_CAN_REMAP
 ((
uöt32_t
)0x00006000Ë

	)

1881 
	#AFIO_MAPR_CAN_REMAP_0
 ((
uöt32_t
)0x00002000Ë

	)

1882 
	#AFIO_MAPR_CAN_REMAP_1
 ((
uöt32_t
)0x00004000Ë

	)

1885 
	#AFIO_MAPR_CAN_REMAP_REMAP1
 ((
uöt32_t
)0x00000000Ë

	)

1886 
	#AFIO_MAPR_CAN_REMAP_REMAP2
 ((
uöt32_t
)0x00004000Ë

	)

1887 
	#AFIO_MAPR_CAN_REMAP_REMAP3
 ((
uöt32_t
)0x00006000Ë

	)

1889 
	#AFIO_MAPR_PD01_REMAP
 ((
uöt32_t
)0x00008000Ë

	)

1890 
	#AFIO_MAPR_TIM5CH4_IREMAP
 ((
uöt32_t
)0x00010000Ë

	)

1893 
	#AFIO_MAPR_SWJ_CFG
 ((
uöt32_t
)0x07000000Ë

	)

1894 
	#AFIO_MAPR_SWJ_CFG_0
 ((
uöt32_t
)0x01000000Ë

	)

1895 
	#AFIO_MAPR_SWJ_CFG_1
 ((
uöt32_t
)0x02000000Ë

	)

1896 
	#AFIO_MAPR_SWJ_CFG_2
 ((
uöt32_t
)0x04000000Ë

	)

1898 
	#AFIO_MAPR_SWJ_CFG_RESET
 ((
uöt32_t
)0x00000000Ë

	)

1899 
	#AFIO_MAPR_SWJ_CFG_NOJNTRST
 ((
uöt32_t
)0x01000000Ë

	)

1900 
	#AFIO_MAPR_SWJ_CFG_JTAGDISABLE
 ((
uöt32_t
)0x02000000Ë

	)

1901 
	#AFIO_MAPR_SWJ_CFG_DISABLE
 ((
uöt32_t
)0x04000000Ë

	)

1904 
	#AFIO_MAPR_ETH_REMAP
 ((
uöt32_t
)0x00200000Ë

	)

1907 
	#AFIO_MAPR_CAN2_REMAP
 ((
uöt32_t
)0x00400000Ë

	)

1910 
	#AFIO_MAPR_MII_RMII_SEL
 ((
uöt32_t
)0x00800000Ë

	)

1913 
	#AFIO_MAPR_SPI3_REMAP
 ((
uöt32_t
)0x10000000Ë

	)

1916 
	#AFIO_MAPR_TIM2ITR1_IREMAP
 ((
uöt32_t
)0x20000000Ë

	)

1919 
	#AFIO_MAPR_PTP_PPS_REMAP
 ((
uöt32_t
)0x40000000Ë

	)

1922 
	#AFIO_EXTICR1_EXTI0
 ((
uöt32_t
)0x0000000FË

	)

1923 
	#AFIO_EXTICR1_EXTI1
 ((
uöt32_t
)0x000000F0Ë

	)

1924 
	#AFIO_EXTICR1_EXTI2
 ((
uöt32_t
)0x00000F00Ë

	)

1925 
	#AFIO_EXTICR1_EXTI3
 ((
uöt32_t
)0x0000F000Ë

	)

1928 
	#AFIO_EXTICR1_EXTI0_PA
 ((
uöt32_t
)0x00000000Ë

	)

1929 
	#AFIO_EXTICR1_EXTI0_PB
 ((
uöt32_t
)0x00000001Ë

	)

1930 
	#AFIO_EXTICR1_EXTI0_PC
 ((
uöt32_t
)0x00000002Ë

	)

1931 
	#AFIO_EXTICR1_EXTI0_PD
 ((
uöt32_t
)0x00000003Ë

	)

1932 
	#AFIO_EXTICR1_EXTI0_PE
 ((
uöt32_t
)0x00000004Ë

	)

1933 
	#AFIO_EXTICR1_EXTI0_PF
 ((
uöt32_t
)0x00000005Ë

	)

1934 
	#AFIO_EXTICR1_EXTI0_PG
 ((
uöt32_t
)0x00000006Ë

	)

1937 
	#AFIO_EXTICR1_EXTI1_PA
 ((
uöt32_t
)0x00000000Ë

	)

1938 
	#AFIO_EXTICR1_EXTI1_PB
 ((
uöt32_t
)0x00000010Ë

	)

1939 
	#AFIO_EXTICR1_EXTI1_PC
 ((
uöt32_t
)0x00000020Ë

	)

1940 
	#AFIO_EXTICR1_EXTI1_PD
 ((
uöt32_t
)0x00000030Ë

	)

1941 
	#AFIO_EXTICR1_EXTI1_PE
 ((
uöt32_t
)0x00000040Ë

	)

1942 
	#AFIO_EXTICR1_EXTI1_PF
 ((
uöt32_t
)0x00000050Ë

	)

1943 
	#AFIO_EXTICR1_EXTI1_PG
 ((
uöt32_t
)0x00000060Ë

	)

1946 
	#AFIO_EXTICR1_EXTI2_PA
 ((
uöt32_t
)0x00000000Ë

	)

1947 
	#AFIO_EXTICR1_EXTI2_PB
 ((
uöt32_t
)0x00000100Ë

	)

1948 
	#AFIO_EXTICR1_EXTI2_PC
 ((
uöt32_t
)0x00000200Ë

	)

1949 
	#AFIO_EXTICR1_EXTI2_PD
 ((
uöt32_t
)0x00000300Ë

	)

1950 
	#AFIO_EXTICR1_EXTI2_PE
 ((
uöt32_t
)0x00000400Ë

	)

1951 
	#AFIO_EXTICR1_EXTI2_PF
 ((
uöt32_t
)0x00000500Ë

	)

1952 
	#AFIO_EXTICR1_EXTI2_PG
 ((
uöt32_t
)0x00000600Ë

	)

1955 
	#AFIO_EXTICR1_EXTI3_PA
 ((
uöt32_t
)0x00000000Ë

	)

1956 
	#AFIO_EXTICR1_EXTI3_PB
 ((
uöt32_t
)0x00001000Ë

	)

1957 
	#AFIO_EXTICR1_EXTI3_PC
 ((
uöt32_t
)0x00002000Ë

	)

1958 
	#AFIO_EXTICR1_EXTI3_PD
 ((
uöt32_t
)0x00003000Ë

	)

1959 
	#AFIO_EXTICR1_EXTI3_PE
 ((
uöt32_t
)0x00004000Ë

	)

1960 
	#AFIO_EXTICR1_EXTI3_PF
 ((
uöt32_t
)0x00005000Ë

	)

1961 
	#AFIO_EXTICR1_EXTI3_PG
 ((
uöt32_t
)0x00006000Ë

	)

1964 
	#AFIO_EXTICR2_EXTI4
 ((
uöt32_t
)0x0000000FË

	)

1965 
	#AFIO_EXTICR2_EXTI5
 ((
uöt32_t
)0x000000F0Ë

	)

1966 
	#AFIO_EXTICR2_EXTI6
 ((
uöt32_t
)0x00000F00Ë

	)

1967 
	#AFIO_EXTICR2_EXTI7
 ((
uöt32_t
)0x0000F000Ë

	)

1970 
	#AFIO_EXTICR2_EXTI4_PA
 ((
uöt32_t
)0x00000000Ë

	)

1971 
	#AFIO_EXTICR2_EXTI4_PB
 ((
uöt32_t
)0x00000001Ë

	)

1972 
	#AFIO_EXTICR2_EXTI4_PC
 ((
uöt32_t
)0x00000002Ë

	)

1973 
	#AFIO_EXTICR2_EXTI4_PD
 ((
uöt32_t
)0x00000003Ë

	)

1974 
	#AFIO_EXTICR2_EXTI4_PE
 ((
uöt32_t
)0x00000004Ë

	)

1975 
	#AFIO_EXTICR2_EXTI4_PF
 ((
uöt32_t
)0x00000005Ë

	)

1976 
	#AFIO_EXTICR2_EXTI4_PG
 ((
uöt32_t
)0x00000006Ë

	)

1979 
	#AFIO_EXTICR2_EXTI5_PA
 ((
uöt32_t
)0x00000000Ë

	)

1980 
	#AFIO_EXTICR2_EXTI5_PB
 ((
uöt32_t
)0x00000010Ë

	)

1981 
	#AFIO_EXTICR2_EXTI5_PC
 ((
uöt32_t
)0x00000020Ë

	)

1982 
	#AFIO_EXTICR2_EXTI5_PD
 ((
uöt32_t
)0x00000030Ë

	)

1983 
	#AFIO_EXTICR2_EXTI5_PE
 ((
uöt32_t
)0x00000040Ë

	)

1984 
	#AFIO_EXTICR2_EXTI5_PF
 ((
uöt32_t
)0x00000050Ë

	)

1985 
	#AFIO_EXTICR2_EXTI5_PG
 ((
uöt32_t
)0x00000060Ë

	)

1988 
	#AFIO_EXTICR2_EXTI6_PA
 ((
uöt32_t
)0x00000000Ë

	)

1989 
	#AFIO_EXTICR2_EXTI6_PB
 ((
uöt32_t
)0x00000100Ë

	)

1990 
	#AFIO_EXTICR2_EXTI6_PC
 ((
uöt32_t
)0x00000200Ë

	)

1991 
	#AFIO_EXTICR2_EXTI6_PD
 ((
uöt32_t
)0x00000300Ë

	)

1992 
	#AFIO_EXTICR2_EXTI6_PE
 ((
uöt32_t
)0x00000400Ë

	)

1993 
	#AFIO_EXTICR2_EXTI6_PF
 ((
uöt32_t
)0x00000500Ë

	)

1994 
	#AFIO_EXTICR2_EXTI6_PG
 ((
uöt32_t
)0x00000600Ë

	)

1997 
	#AFIO_EXTICR2_EXTI7_PA
 ((
uöt32_t
)0x00000000Ë

	)

1998 
	#AFIO_EXTICR2_EXTI7_PB
 ((
uöt32_t
)0x00001000Ë

	)

1999 
	#AFIO_EXTICR2_EXTI7_PC
 ((
uöt32_t
)0x00002000Ë

	)

2000 
	#AFIO_EXTICR2_EXTI7_PD
 ((
uöt32_t
)0x00003000Ë

	)

2001 
	#AFIO_EXTICR2_EXTI7_PE
 ((
uöt32_t
)0x00004000Ë

	)

2002 
	#AFIO_EXTICR2_EXTI7_PF
 ((
uöt32_t
)0x00005000Ë

	)

2003 
	#AFIO_EXTICR2_EXTI7_PG
 ((
uöt32_t
)0x00006000Ë

	)

2006 
	#AFIO_EXTICR3_EXTI8
 ((
uöt32_t
)0x0000000FË

	)

2007 
	#AFIO_EXTICR3_EXTI9
 ((
uöt32_t
)0x000000F0Ë

	)

2008 
	#AFIO_EXTICR3_EXTI10
 ((
uöt32_t
)0x00000F00Ë

	)

2009 
	#AFIO_EXTICR3_EXTI11
 ((
uöt32_t
)0x0000F000Ë

	)

2012 
	#AFIO_EXTICR3_EXTI8_PA
 ((
uöt32_t
)0x00000000Ë

	)

2013 
	#AFIO_EXTICR3_EXTI8_PB
 ((
uöt32_t
)0x00000001Ë

	)

2014 
	#AFIO_EXTICR3_EXTI8_PC
 ((
uöt32_t
)0x00000002Ë

	)

2015 
	#AFIO_EXTICR3_EXTI8_PD
 ((
uöt32_t
)0x00000003Ë

	)

2016 
	#AFIO_EXTICR3_EXTI8_PE
 ((
uöt32_t
)0x00000004Ë

	)

2017 
	#AFIO_EXTICR3_EXTI8_PF
 ((
uöt32_t
)0x00000005Ë

	)

2018 
	#AFIO_EXTICR3_EXTI8_PG
 ((
uöt32_t
)0x00000006Ë

	)

2021 
	#AFIO_EXTICR3_EXTI9_PA
 ((
uöt32_t
)0x00000000Ë

	)

2022 
	#AFIO_EXTICR3_EXTI9_PB
 ((
uöt32_t
)0x00000010Ë

	)

2023 
	#AFIO_EXTICR3_EXTI9_PC
 ((
uöt32_t
)0x00000020Ë

	)

2024 
	#AFIO_EXTICR3_EXTI9_PD
 ((
uöt32_t
)0x00000030Ë

	)

2025 
	#AFIO_EXTICR3_EXTI9_PE
 ((
uöt32_t
)0x00000040Ë

	)

2026 
	#AFIO_EXTICR3_EXTI9_PF
 ((
uöt32_t
)0x00000050Ë

	)

2027 
	#AFIO_EXTICR3_EXTI9_PG
 ((
uöt32_t
)0x00000060Ë

	)

2030 
	#AFIO_EXTICR3_EXTI10_PA
 ((
uöt32_t
)0x00000000Ë

	)

2031 
	#AFIO_EXTICR3_EXTI10_PB
 ((
uöt32_t
)0x00000100Ë

	)

2032 
	#AFIO_EXTICR3_EXTI10_PC
 ((
uöt32_t
)0x00000200Ë

	)

2033 
	#AFIO_EXTICR3_EXTI10_PD
 ((
uöt32_t
)0x00000300Ë

	)

2034 
	#AFIO_EXTICR3_EXTI10_PE
 ((
uöt32_t
)0x00000400Ë

	)

2035 
	#AFIO_EXTICR3_EXTI10_PF
 ((
uöt32_t
)0x00000500Ë

	)

2036 
	#AFIO_EXTICR3_EXTI10_PG
 ((
uöt32_t
)0x00000600Ë

	)

2039 
	#AFIO_EXTICR3_EXTI11_PA
 ((
uöt32_t
)0x00000000Ë

	)

2040 
	#AFIO_EXTICR3_EXTI11_PB
 ((
uöt32_t
)0x00001000Ë

	)

2041 
	#AFIO_EXTICR3_EXTI11_PC
 ((
uöt32_t
)0x00002000Ë

	)

2042 
	#AFIO_EXTICR3_EXTI11_PD
 ((
uöt32_t
)0x00003000Ë

	)

2043 
	#AFIO_EXTICR3_EXTI11_PE
 ((
uöt32_t
)0x00004000Ë

	)

2044 
	#AFIO_EXTICR3_EXTI11_PF
 ((
uöt32_t
)0x00005000Ë

	)

2045 
	#AFIO_EXTICR3_EXTI11_PG
 ((
uöt32_t
)0x00006000Ë

	)

2048 
	#AFIO_EXTICR4_EXTI12
 ((
uöt32_t
)0x0000000FË

	)

2049 
	#AFIO_EXTICR4_EXTI13
 ((
uöt32_t
)0x000000F0Ë

	)

2050 
	#AFIO_EXTICR4_EXTI14
 ((
uöt32_t
)0x00000F00Ë

	)

2051 
	#AFIO_EXTICR4_EXTI15
 ((
uöt32_t
)0x0000F000Ë

	)

2054 
	#AFIO_EXTICR4_EXTI12_PA
 ((
uöt32_t
)0x00000000Ë

	)

2055 
	#AFIO_EXTICR4_EXTI12_PB
 ((
uöt32_t
)0x00000001Ë

	)

2056 
	#AFIO_EXTICR4_EXTI12_PC
 ((
uöt32_t
)0x00000002Ë

	)

2057 
	#AFIO_EXTICR4_EXTI12_PD
 ((
uöt32_t
)0x00000003Ë

	)

2058 
	#AFIO_EXTICR4_EXTI12_PE
 ((
uöt32_t
)0x00000004Ë

	)

2059 
	#AFIO_EXTICR4_EXTI12_PF
 ((
uöt32_t
)0x00000005Ë

	)

2060 
	#AFIO_EXTICR4_EXTI12_PG
 ((
uöt32_t
)0x00000006Ë

	)

2063 
	#AFIO_EXTICR4_EXTI13_PA
 ((
uöt32_t
)0x00000000Ë

	)

2064 
	#AFIO_EXTICR4_EXTI13_PB
 ((
uöt32_t
)0x00000010Ë

	)

2065 
	#AFIO_EXTICR4_EXTI13_PC
 ((
uöt32_t
)0x00000020Ë

	)

2066 
	#AFIO_EXTICR4_EXTI13_PD
 ((
uöt32_t
)0x00000030Ë

	)

2067 
	#AFIO_EXTICR4_EXTI13_PE
 ((
uöt32_t
)0x00000040Ë

	)

2068 
	#AFIO_EXTICR4_EXTI13_PF
 ((
uöt32_t
)0x00000050Ë

	)

2069 
	#AFIO_EXTICR4_EXTI13_PG
 ((
uöt32_t
)0x00000060Ë

	)

2072 
	#AFIO_EXTICR4_EXTI14_PA
 ((
uöt32_t
)0x00000000Ë

	)

2073 
	#AFIO_EXTICR4_EXTI14_PB
 ((
uöt32_t
)0x00000100Ë

	)

2074 
	#AFIO_EXTICR4_EXTI14_PC
 ((
uöt32_t
)0x00000200Ë

	)

2075 
	#AFIO_EXTICR4_EXTI14_PD
 ((
uöt32_t
)0x00000300Ë

	)

2076 
	#AFIO_EXTICR4_EXTI14_PE
 ((
uöt32_t
)0x00000400Ë

	)

2077 
	#AFIO_EXTICR4_EXTI14_PF
 ((
uöt32_t
)0x00000500Ë

	)

2078 
	#AFIO_EXTICR4_EXTI14_PG
 ((
uöt32_t
)0x00000600Ë

	)

2081 
	#AFIO_EXTICR4_EXTI15_PA
 ((
uöt32_t
)0x00000000Ë

	)

2082 
	#AFIO_EXTICR4_EXTI15_PB
 ((
uöt32_t
)0x00001000Ë

	)

2083 
	#AFIO_EXTICR4_EXTI15_PC
 ((
uöt32_t
)0x00002000Ë

	)

2084 
	#AFIO_EXTICR4_EXTI15_PD
 ((
uöt32_t
)0x00003000Ë

	)

2085 
	#AFIO_EXTICR4_EXTI15_PE
 ((
uöt32_t
)0x00004000Ë

	)

2086 
	#AFIO_EXTICR4_EXTI15_PF
 ((
uöt32_t
)0x00005000Ë

	)

2087 
	#AFIO_EXTICR4_EXTI15_PG
 ((
uöt32_t
)0x00006000Ë

	)

2100 
	#SysTick_CTRL_ENABLE
 ((
uöt32_t
)0x00000001Ë

	)

2101 
	#SysTick_CTRL_TICKINT
 ((
uöt32_t
)0x00000002Ë

	)

2102 
	#SysTick_CTRL_CLKSOURCE
 ((
uöt32_t
)0x00000004Ë

	)

2103 
	#SysTick_CTRL_COUNTFLAG
 ((
uöt32_t
)0x00010000Ë

	)

2106 
	#SysTick_LOAD_RELOAD
 ((
uöt32_t
)0x00FFFFFFË

	)

2109 
	#SysTick_VAL_CURRENT
 ((
uöt32_t
)0x00FFFFFFË

	)

2112 
	#SysTick_CALIB_TENMS
 ((
uöt32_t
)0x00FFFFFFË

	)

2113 
	#SysTick_CALIB_SKEW
 ((
uöt32_t
)0x40000000Ë

	)

2114 
	#SysTick_CALIB_NOREF
 ((
uöt32_t
)0x80000000Ë

	)

2123 
	#NVIC_ISER_SETENA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2124 
	#NVIC_ISER_SETENA_0
 ((
uöt32_t
)0x00000001Ë

	)

2125 
	#NVIC_ISER_SETENA_1
 ((
uöt32_t
)0x00000002Ë

	)

2126 
	#NVIC_ISER_SETENA_2
 ((
uöt32_t
)0x00000004Ë

	)

2127 
	#NVIC_ISER_SETENA_3
 ((
uöt32_t
)0x00000008Ë

	)

2128 
	#NVIC_ISER_SETENA_4
 ((
uöt32_t
)0x00000010Ë

	)

2129 
	#NVIC_ISER_SETENA_5
 ((
uöt32_t
)0x00000020Ë

	)

2130 
	#NVIC_ISER_SETENA_6
 ((
uöt32_t
)0x00000040Ë

	)

2131 
	#NVIC_ISER_SETENA_7
 ((
uöt32_t
)0x00000080Ë

	)

2132 
	#NVIC_ISER_SETENA_8
 ((
uöt32_t
)0x00000100Ë

	)

2133 
	#NVIC_ISER_SETENA_9
 ((
uöt32_t
)0x00000200Ë

	)

2134 
	#NVIC_ISER_SETENA_10
 ((
uöt32_t
)0x00000400Ë

	)

2135 
	#NVIC_ISER_SETENA_11
 ((
uöt32_t
)0x00000800Ë

	)

2136 
	#NVIC_ISER_SETENA_12
 ((
uöt32_t
)0x00001000Ë

	)

2137 
	#NVIC_ISER_SETENA_13
 ((
uöt32_t
)0x00002000Ë

	)

2138 
	#NVIC_ISER_SETENA_14
 ((
uöt32_t
)0x00004000Ë

	)

2139 
	#NVIC_ISER_SETENA_15
 ((
uöt32_t
)0x00008000Ë

	)

2140 
	#NVIC_ISER_SETENA_16
 ((
uöt32_t
)0x00010000Ë

	)

2141 
	#NVIC_ISER_SETENA_17
 ((
uöt32_t
)0x00020000Ë

	)

2142 
	#NVIC_ISER_SETENA_18
 ((
uöt32_t
)0x00040000Ë

	)

2143 
	#NVIC_ISER_SETENA_19
 ((
uöt32_t
)0x00080000Ë

	)

2144 
	#NVIC_ISER_SETENA_20
 ((
uöt32_t
)0x00100000Ë

	)

2145 
	#NVIC_ISER_SETENA_21
 ((
uöt32_t
)0x00200000Ë

	)

2146 
	#NVIC_ISER_SETENA_22
 ((
uöt32_t
)0x00400000Ë

	)

2147 
	#NVIC_ISER_SETENA_23
 ((
uöt32_t
)0x00800000Ë

	)

2148 
	#NVIC_ISER_SETENA_24
 ((
uöt32_t
)0x01000000Ë

	)

2149 
	#NVIC_ISER_SETENA_25
 ((
uöt32_t
)0x02000000Ë

	)

2150 
	#NVIC_ISER_SETENA_26
 ((
uöt32_t
)0x04000000Ë

	)

2151 
	#NVIC_ISER_SETENA_27
 ((
uöt32_t
)0x08000000Ë

	)

2152 
	#NVIC_ISER_SETENA_28
 ((
uöt32_t
)0x10000000Ë

	)

2153 
	#NVIC_ISER_SETENA_29
 ((
uöt32_t
)0x20000000Ë

	)

2154 
	#NVIC_ISER_SETENA_30
 ((
uöt32_t
)0x40000000Ë

	)

2155 
	#NVIC_ISER_SETENA_31
 ((
uöt32_t
)0x80000000Ë

	)

2158 
	#NVIC_ICER_CLRENA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2159 
	#NVIC_ICER_CLRENA_0
 ((
uöt32_t
)0x00000001Ë

	)

2160 
	#NVIC_ICER_CLRENA_1
 ((
uöt32_t
)0x00000002Ë

	)

2161 
	#NVIC_ICER_CLRENA_2
 ((
uöt32_t
)0x00000004Ë

	)

2162 
	#NVIC_ICER_CLRENA_3
 ((
uöt32_t
)0x00000008Ë

	)

2163 
	#NVIC_ICER_CLRENA_4
 ((
uöt32_t
)0x00000010Ë

	)

2164 
	#NVIC_ICER_CLRENA_5
 ((
uöt32_t
)0x00000020Ë

	)

2165 
	#NVIC_ICER_CLRENA_6
 ((
uöt32_t
)0x00000040Ë

	)

2166 
	#NVIC_ICER_CLRENA_7
 ((
uöt32_t
)0x00000080Ë

	)

2167 
	#NVIC_ICER_CLRENA_8
 ((
uöt32_t
)0x00000100Ë

	)

2168 
	#NVIC_ICER_CLRENA_9
 ((
uöt32_t
)0x00000200Ë

	)

2169 
	#NVIC_ICER_CLRENA_10
 ((
uöt32_t
)0x00000400Ë

	)

2170 
	#NVIC_ICER_CLRENA_11
 ((
uöt32_t
)0x00000800Ë

	)

2171 
	#NVIC_ICER_CLRENA_12
 ((
uöt32_t
)0x00001000Ë

	)

2172 
	#NVIC_ICER_CLRENA_13
 ((
uöt32_t
)0x00002000Ë

	)

2173 
	#NVIC_ICER_CLRENA_14
 ((
uöt32_t
)0x00004000Ë

	)

2174 
	#NVIC_ICER_CLRENA_15
 ((
uöt32_t
)0x00008000Ë

	)

2175 
	#NVIC_ICER_CLRENA_16
 ((
uöt32_t
)0x00010000Ë

	)

2176 
	#NVIC_ICER_CLRENA_17
 ((
uöt32_t
)0x00020000Ë

	)

2177 
	#NVIC_ICER_CLRENA_18
 ((
uöt32_t
)0x00040000Ë

	)

2178 
	#NVIC_ICER_CLRENA_19
 ((
uöt32_t
)0x00080000Ë

	)

2179 
	#NVIC_ICER_CLRENA_20
 ((
uöt32_t
)0x00100000Ë

	)

2180 
	#NVIC_ICER_CLRENA_21
 ((
uöt32_t
)0x00200000Ë

	)

2181 
	#NVIC_ICER_CLRENA_22
 ((
uöt32_t
)0x00400000Ë

	)

2182 
	#NVIC_ICER_CLRENA_23
 ((
uöt32_t
)0x00800000Ë

	)

2183 
	#NVIC_ICER_CLRENA_24
 ((
uöt32_t
)0x01000000Ë

	)

2184 
	#NVIC_ICER_CLRENA_25
 ((
uöt32_t
)0x02000000Ë

	)

2185 
	#NVIC_ICER_CLRENA_26
 ((
uöt32_t
)0x04000000Ë

	)

2186 
	#NVIC_ICER_CLRENA_27
 ((
uöt32_t
)0x08000000Ë

	)

2187 
	#NVIC_ICER_CLRENA_28
 ((
uöt32_t
)0x10000000Ë

	)

2188 
	#NVIC_ICER_CLRENA_29
 ((
uöt32_t
)0x20000000Ë

	)

2189 
	#NVIC_ICER_CLRENA_30
 ((
uöt32_t
)0x40000000Ë

	)

2190 
	#NVIC_ICER_CLRENA_31
 ((
uöt32_t
)0x80000000Ë

	)

2193 
	#NVIC_ISPR_SETPEND
 ((
uöt32_t
)0xFFFFFFFFË

	)

2194 
	#NVIC_ISPR_SETPEND_0
 ((
uöt32_t
)0x00000001Ë

	)

2195 
	#NVIC_ISPR_SETPEND_1
 ((
uöt32_t
)0x00000002Ë

	)

2196 
	#NVIC_ISPR_SETPEND_2
 ((
uöt32_t
)0x00000004Ë

	)

2197 
	#NVIC_ISPR_SETPEND_3
 ((
uöt32_t
)0x00000008Ë

	)

2198 
	#NVIC_ISPR_SETPEND_4
 ((
uöt32_t
)0x00000010Ë

	)

2199 
	#NVIC_ISPR_SETPEND_5
 ((
uöt32_t
)0x00000020Ë

	)

2200 
	#NVIC_ISPR_SETPEND_6
 ((
uöt32_t
)0x00000040Ë

	)

2201 
	#NVIC_ISPR_SETPEND_7
 ((
uöt32_t
)0x00000080Ë

	)

2202 
	#NVIC_ISPR_SETPEND_8
 ((
uöt32_t
)0x00000100Ë

	)

2203 
	#NVIC_ISPR_SETPEND_9
 ((
uöt32_t
)0x00000200Ë

	)

2204 
	#NVIC_ISPR_SETPEND_10
 ((
uöt32_t
)0x00000400Ë

	)

2205 
	#NVIC_ISPR_SETPEND_11
 ((
uöt32_t
)0x00000800Ë

	)

2206 
	#NVIC_ISPR_SETPEND_12
 ((
uöt32_t
)0x00001000Ë

	)

2207 
	#NVIC_ISPR_SETPEND_13
 ((
uöt32_t
)0x00002000Ë

	)

2208 
	#NVIC_ISPR_SETPEND_14
 ((
uöt32_t
)0x00004000Ë

	)

2209 
	#NVIC_ISPR_SETPEND_15
 ((
uöt32_t
)0x00008000Ë

	)

2210 
	#NVIC_ISPR_SETPEND_16
 ((
uöt32_t
)0x00010000Ë

	)

2211 
	#NVIC_ISPR_SETPEND_17
 ((
uöt32_t
)0x00020000Ë

	)

2212 
	#NVIC_ISPR_SETPEND_18
 ((
uöt32_t
)0x00040000Ë

	)

2213 
	#NVIC_ISPR_SETPEND_19
 ((
uöt32_t
)0x00080000Ë

	)

2214 
	#NVIC_ISPR_SETPEND_20
 ((
uöt32_t
)0x00100000Ë

	)

2215 
	#NVIC_ISPR_SETPEND_21
 ((
uöt32_t
)0x00200000Ë

	)

2216 
	#NVIC_ISPR_SETPEND_22
 ((
uöt32_t
)0x00400000Ë

	)

2217 
	#NVIC_ISPR_SETPEND_23
 ((
uöt32_t
)0x00800000Ë

	)

2218 
	#NVIC_ISPR_SETPEND_24
 ((
uöt32_t
)0x01000000Ë

	)

2219 
	#NVIC_ISPR_SETPEND_25
 ((
uöt32_t
)0x02000000Ë

	)

2220 
	#NVIC_ISPR_SETPEND_26
 ((
uöt32_t
)0x04000000Ë

	)

2221 
	#NVIC_ISPR_SETPEND_27
 ((
uöt32_t
)0x08000000Ë

	)

2222 
	#NVIC_ISPR_SETPEND_28
 ((
uöt32_t
)0x10000000Ë

	)

2223 
	#NVIC_ISPR_SETPEND_29
 ((
uöt32_t
)0x20000000Ë

	)

2224 
	#NVIC_ISPR_SETPEND_30
 ((
uöt32_t
)0x40000000Ë

	)

2225 
	#NVIC_ISPR_SETPEND_31
 ((
uöt32_t
)0x80000000Ë

	)

2228 
	#NVIC_ICPR_CLRPEND
 ((
uöt32_t
)0xFFFFFFFFË

	)

2229 
	#NVIC_ICPR_CLRPEND_0
 ((
uöt32_t
)0x00000001Ë

	)

2230 
	#NVIC_ICPR_CLRPEND_1
 ((
uöt32_t
)0x00000002Ë

	)

2231 
	#NVIC_ICPR_CLRPEND_2
 ((
uöt32_t
)0x00000004Ë

	)

2232 
	#NVIC_ICPR_CLRPEND_3
 ((
uöt32_t
)0x00000008Ë

	)

2233 
	#NVIC_ICPR_CLRPEND_4
 ((
uöt32_t
)0x00000010Ë

	)

2234 
	#NVIC_ICPR_CLRPEND_5
 ((
uöt32_t
)0x00000020Ë

	)

2235 
	#NVIC_ICPR_CLRPEND_6
 ((
uöt32_t
)0x00000040Ë

	)

2236 
	#NVIC_ICPR_CLRPEND_7
 ((
uöt32_t
)0x00000080Ë

	)

2237 
	#NVIC_ICPR_CLRPEND_8
 ((
uöt32_t
)0x00000100Ë

	)

2238 
	#NVIC_ICPR_CLRPEND_9
 ((
uöt32_t
)0x00000200Ë

	)

2239 
	#NVIC_ICPR_CLRPEND_10
 ((
uöt32_t
)0x00000400Ë

	)

2240 
	#NVIC_ICPR_CLRPEND_11
 ((
uöt32_t
)0x00000800Ë

	)

2241 
	#NVIC_ICPR_CLRPEND_12
 ((
uöt32_t
)0x00001000Ë

	)

2242 
	#NVIC_ICPR_CLRPEND_13
 ((
uöt32_t
)0x00002000Ë

	)

2243 
	#NVIC_ICPR_CLRPEND_14
 ((
uöt32_t
)0x00004000Ë

	)

2244 
	#NVIC_ICPR_CLRPEND_15
 ((
uöt32_t
)0x00008000Ë

	)

2245 
	#NVIC_ICPR_CLRPEND_16
 ((
uöt32_t
)0x00010000Ë

	)

2246 
	#NVIC_ICPR_CLRPEND_17
 ((
uöt32_t
)0x00020000Ë

	)

2247 
	#NVIC_ICPR_CLRPEND_18
 ((
uöt32_t
)0x00040000Ë

	)

2248 
	#NVIC_ICPR_CLRPEND_19
 ((
uöt32_t
)0x00080000Ë

	)

2249 
	#NVIC_ICPR_CLRPEND_20
 ((
uöt32_t
)0x00100000Ë

	)

2250 
	#NVIC_ICPR_CLRPEND_21
 ((
uöt32_t
)0x00200000Ë

	)

2251 
	#NVIC_ICPR_CLRPEND_22
 ((
uöt32_t
)0x00400000Ë

	)

2252 
	#NVIC_ICPR_CLRPEND_23
 ((
uöt32_t
)0x00800000Ë

	)

2253 
	#NVIC_ICPR_CLRPEND_24
 ((
uöt32_t
)0x01000000Ë

	)

2254 
	#NVIC_ICPR_CLRPEND_25
 ((
uöt32_t
)0x02000000Ë

	)

2255 
	#NVIC_ICPR_CLRPEND_26
 ((
uöt32_t
)0x04000000Ë

	)

2256 
	#NVIC_ICPR_CLRPEND_27
 ((
uöt32_t
)0x08000000Ë

	)

2257 
	#NVIC_ICPR_CLRPEND_28
 ((
uöt32_t
)0x10000000Ë

	)

2258 
	#NVIC_ICPR_CLRPEND_29
 ((
uöt32_t
)0x20000000Ë

	)

2259 
	#NVIC_ICPR_CLRPEND_30
 ((
uöt32_t
)0x40000000Ë

	)

2260 
	#NVIC_ICPR_CLRPEND_31
 ((
uöt32_t
)0x80000000Ë

	)

2263 
	#NVIC_IABR_ACTIVE
 ((
uöt32_t
)0xFFFFFFFFË

	)

2264 
	#NVIC_IABR_ACTIVE_0
 ((
uöt32_t
)0x00000001Ë

	)

2265 
	#NVIC_IABR_ACTIVE_1
 ((
uöt32_t
)0x00000002Ë

	)

2266 
	#NVIC_IABR_ACTIVE_2
 ((
uöt32_t
)0x00000004Ë

	)

2267 
	#NVIC_IABR_ACTIVE_3
 ((
uöt32_t
)0x00000008Ë

	)

2268 
	#NVIC_IABR_ACTIVE_4
 ((
uöt32_t
)0x00000010Ë

	)

2269 
	#NVIC_IABR_ACTIVE_5
 ((
uöt32_t
)0x00000020Ë

	)

2270 
	#NVIC_IABR_ACTIVE_6
 ((
uöt32_t
)0x00000040Ë

	)

2271 
	#NVIC_IABR_ACTIVE_7
 ((
uöt32_t
)0x00000080Ë

	)

2272 
	#NVIC_IABR_ACTIVE_8
 ((
uöt32_t
)0x00000100Ë

	)

2273 
	#NVIC_IABR_ACTIVE_9
 ((
uöt32_t
)0x00000200Ë

	)

2274 
	#NVIC_IABR_ACTIVE_10
 ((
uöt32_t
)0x00000400Ë

	)

2275 
	#NVIC_IABR_ACTIVE_11
 ((
uöt32_t
)0x00000800Ë

	)

2276 
	#NVIC_IABR_ACTIVE_12
 ((
uöt32_t
)0x00001000Ë

	)

2277 
	#NVIC_IABR_ACTIVE_13
 ((
uöt32_t
)0x00002000Ë

	)

2278 
	#NVIC_IABR_ACTIVE_14
 ((
uöt32_t
)0x00004000Ë

	)

2279 
	#NVIC_IABR_ACTIVE_15
 ((
uöt32_t
)0x00008000Ë

	)

2280 
	#NVIC_IABR_ACTIVE_16
 ((
uöt32_t
)0x00010000Ë

	)

2281 
	#NVIC_IABR_ACTIVE_17
 ((
uöt32_t
)0x00020000Ë

	)

2282 
	#NVIC_IABR_ACTIVE_18
 ((
uöt32_t
)0x00040000Ë

	)

2283 
	#NVIC_IABR_ACTIVE_19
 ((
uöt32_t
)0x00080000Ë

	)

2284 
	#NVIC_IABR_ACTIVE_20
 ((
uöt32_t
)0x00100000Ë

	)

2285 
	#NVIC_IABR_ACTIVE_21
 ((
uöt32_t
)0x00200000Ë

	)

2286 
	#NVIC_IABR_ACTIVE_22
 ((
uöt32_t
)0x00400000Ë

	)

2287 
	#NVIC_IABR_ACTIVE_23
 ((
uöt32_t
)0x00800000Ë

	)

2288 
	#NVIC_IABR_ACTIVE_24
 ((
uöt32_t
)0x01000000Ë

	)

2289 
	#NVIC_IABR_ACTIVE_25
 ((
uöt32_t
)0x02000000Ë

	)

2290 
	#NVIC_IABR_ACTIVE_26
 ((
uöt32_t
)0x04000000Ë

	)

2291 
	#NVIC_IABR_ACTIVE_27
 ((
uöt32_t
)0x08000000Ë

	)

2292 
	#NVIC_IABR_ACTIVE_28
 ((
uöt32_t
)0x10000000Ë

	)

2293 
	#NVIC_IABR_ACTIVE_29
 ((
uöt32_t
)0x20000000Ë

	)

2294 
	#NVIC_IABR_ACTIVE_30
 ((
uöt32_t
)0x40000000Ë

	)

2295 
	#NVIC_IABR_ACTIVE_31
 ((
uöt32_t
)0x80000000Ë

	)

2298 
	#NVIC_IPR0_PRI_0
 ((
uöt32_t
)0x000000FFË

	)

2299 
	#NVIC_IPR0_PRI_1
 ((
uöt32_t
)0x0000FF00Ë

	)

2300 
	#NVIC_IPR0_PRI_2
 ((
uöt32_t
)0x00FF0000Ë

	)

2301 
	#NVIC_IPR0_PRI_3
 ((
uöt32_t
)0xFF000000Ë

	)

2304 
	#NVIC_IPR1_PRI_4
 ((
uöt32_t
)0x000000FFË

	)

2305 
	#NVIC_IPR1_PRI_5
 ((
uöt32_t
)0x0000FF00Ë

	)

2306 
	#NVIC_IPR1_PRI_6
 ((
uöt32_t
)0x00FF0000Ë

	)

2307 
	#NVIC_IPR1_PRI_7
 ((
uöt32_t
)0xFF000000Ë

	)

2310 
	#NVIC_IPR2_PRI_8
 ((
uöt32_t
)0x000000FFË

	)

2311 
	#NVIC_IPR2_PRI_9
 ((
uöt32_t
)0x0000FF00Ë

	)

2312 
	#NVIC_IPR2_PRI_10
 ((
uöt32_t
)0x00FF0000Ë

	)

2313 
	#NVIC_IPR2_PRI_11
 ((
uöt32_t
)0xFF000000Ë

	)

2316 
	#NVIC_IPR3_PRI_12
 ((
uöt32_t
)0x000000FFË

	)

2317 
	#NVIC_IPR3_PRI_13
 ((
uöt32_t
)0x0000FF00Ë

	)

2318 
	#NVIC_IPR3_PRI_14
 ((
uöt32_t
)0x00FF0000Ë

	)

2319 
	#NVIC_IPR3_PRI_15
 ((
uöt32_t
)0xFF000000Ë

	)

2322 
	#NVIC_IPR4_PRI_16
 ((
uöt32_t
)0x000000FFË

	)

2323 
	#NVIC_IPR4_PRI_17
 ((
uöt32_t
)0x0000FF00Ë

	)

2324 
	#NVIC_IPR4_PRI_18
 ((
uöt32_t
)0x00FF0000Ë

	)

2325 
	#NVIC_IPR4_PRI_19
 ((
uöt32_t
)0xFF000000Ë

	)

2328 
	#NVIC_IPR5_PRI_20
 ((
uöt32_t
)0x000000FFË

	)

2329 
	#NVIC_IPR5_PRI_21
 ((
uöt32_t
)0x0000FF00Ë

	)

2330 
	#NVIC_IPR5_PRI_22
 ((
uöt32_t
)0x00FF0000Ë

	)

2331 
	#NVIC_IPR5_PRI_23
 ((
uöt32_t
)0xFF000000Ë

	)

2334 
	#NVIC_IPR6_PRI_24
 ((
uöt32_t
)0x000000FFË

	)

2335 
	#NVIC_IPR6_PRI_25
 ((
uöt32_t
)0x0000FF00Ë

	)

2336 
	#NVIC_IPR6_PRI_26
 ((
uöt32_t
)0x00FF0000Ë

	)

2337 
	#NVIC_IPR6_PRI_27
 ((
uöt32_t
)0xFF000000Ë

	)

2340 
	#NVIC_IPR7_PRI_28
 ((
uöt32_t
)0x000000FFË

	)

2341 
	#NVIC_IPR7_PRI_29
 ((
uöt32_t
)0x0000FF00Ë

	)

2342 
	#NVIC_IPR7_PRI_30
 ((
uöt32_t
)0x00FF0000Ë

	)

2343 
	#NVIC_IPR7_PRI_31
 ((
uöt32_t
)0xFF000000Ë

	)

2346 
	#SCB_CPUID_REVISION
 ((
uöt32_t
)0x0000000FË

	)

2347 
	#SCB_CPUID_PARTNO
 ((
uöt32_t
)0x0000FFF0Ë

	)

2348 
	#SCB_CPUID_C⁄°™t
 ((
uöt32_t
)0x000F0000Ë

	)

2349 
	#SCB_CPUID_VARIANT
 ((
uöt32_t
)0x00F00000Ë

	)

2350 
	#SCB_CPUID_IMPLEMENTER
 ((
uöt32_t
)0xFF000000Ë

	)

2353 
	#SCB_ICSR_VECTACTIVE
 ((
uöt32_t
)0x000001FFË

	)

2354 
	#SCB_ICSR_RETTOBASE
 ((
uöt32_t
)0x00000800Ë

	)

2355 
	#SCB_ICSR_VECTPENDING
 ((
uöt32_t
)0x003FF000Ë

	)

2356 
	#SCB_ICSR_ISRPENDING
 ((
uöt32_t
)0x00400000Ë

	)

2357 
	#SCB_ICSR_ISRPREEMPT
 ((
uöt32_t
)0x00800000Ë

	)

2358 
	#SCB_ICSR_PENDSTCLR
 ((
uöt32_t
)0x02000000Ë

	)

2359 
	#SCB_ICSR_PENDSTSET
 ((
uöt32_t
)0x04000000Ë

	)

2360 
	#SCB_ICSR_PENDSVCLR
 ((
uöt32_t
)0x08000000Ë

	)

2361 
	#SCB_ICSR_PENDSVSET
 ((
uöt32_t
)0x10000000Ë

	)

2362 
	#SCB_ICSR_NMIPENDSET
 ((
uöt32_t
)0x80000000Ë

	)

2365 
	#SCB_VTOR_TBLOFF
 ((
uöt32_t
)0x1FFFFF80Ë

	)

2366 
	#SCB_VTOR_TBLBASE
 ((
uöt32_t
)0x20000000Ë

	)

2369 
	#SCB_AIRCR_VECTRESET
 ((
uöt32_t
)0x00000001Ë

	)

2370 
	#SCB_AIRCR_VECTCLRACTIVE
 ((
uöt32_t
)0x00000002Ë

	)

2371 
	#SCB_AIRCR_SYSRESETREQ
 ((
uöt32_t
)0x00000004Ë

	)

2373 
	#SCB_AIRCR_PRIGROUP
 ((
uöt32_t
)0x00000700Ë

	)

2374 
	#SCB_AIRCR_PRIGROUP_0
 ((
uöt32_t
)0x00000100Ë

	)

2375 
	#SCB_AIRCR_PRIGROUP_1
 ((
uöt32_t
)0x00000200Ë

	)

2376 
	#SCB_AIRCR_PRIGROUP_2
 ((
uöt32_t
)0x00000400Ë

	)

2379 
	#SCB_AIRCR_PRIGROUP0
 ((
uöt32_t
)0x00000000Ë

	)

2380 
	#SCB_AIRCR_PRIGROUP1
 ((
uöt32_t
)0x00000100Ë

	)

2381 
	#SCB_AIRCR_PRIGROUP2
 ((
uöt32_t
)0x00000200Ë

	)

2382 
	#SCB_AIRCR_PRIGROUP3
 ((
uöt32_t
)0x00000300Ë

	)

2383 
	#SCB_AIRCR_PRIGROUP4
 ((
uöt32_t
)0x00000400Ë

	)

2384 
	#SCB_AIRCR_PRIGROUP5
 ((
uöt32_t
)0x00000500Ë

	)

2385 
	#SCB_AIRCR_PRIGROUP6
 ((
uöt32_t
)0x00000600Ë

	)

2386 
	#SCB_AIRCR_PRIGROUP7
 ((
uöt32_t
)0x00000700Ë

	)

2388 
	#SCB_AIRCR_ENDIANESS
 ((
uöt32_t
)0x00008000Ë

	)

2389 
	#SCB_AIRCR_VECTKEY
 ((
uöt32_t
)0xFFFF0000Ë

	)

2392 
	#SCB_SCR_SLEEPONEXIT
 ((
uöt32_t
)0x00000002Ë

	)

2393 
	#SCB_SCR_SLEEPDEEP
 ((
uöt32_t
)0x00000004Ë

	)

2394 
	#SCB_SCR_SEVONPEND
 ((
uöt32_t
)0x00000010Ë

	)

2397 
	#SCB_CCR_NONBASETHRDENA
 ((
uöt32_t
)0x00000001Ë

	)

2398 
	#SCB_CCR_USERSETMPEND
 ((
uöt32_t
)0x00000002Ë

	)

2399 
	#SCB_CCR_UNALIGN_TRP
 ((
uöt32_t
)0x00000008Ë

	)

2400 
	#SCB_CCR_DIV_0_TRP
 ((
uöt32_t
)0x00000010Ë

	)

2401 
	#SCB_CCR_BFHFNMIGN
 ((
uöt32_t
)0x00000100Ë

	)

2402 
	#SCB_CCR_STKALIGN
 ((
uöt32_t
)0x00000200Ë

	)

2405 
	#SCB_SHPR_PRI_N
 ((
uöt32_t
)0x000000FFË

	)

2406 
	#SCB_SHPR_PRI_N1
 ((
uöt32_t
)0x0000FF00Ë

	)

2407 
	#SCB_SHPR_PRI_N2
 ((
uöt32_t
)0x00FF0000Ë

	)

2408 
	#SCB_SHPR_PRI_N3
 ((
uöt32_t
)0xFF000000Ë

	)

2411 
	#SCB_SHCSR_MEMFAULTACT
 ((
uöt32_t
)0x00000001Ë

	)

2412 
	#SCB_SHCSR_BUSFAULTACT
 ((
uöt32_t
)0x00000002Ë

	)

2413 
	#SCB_SHCSR_USGFAULTACT
 ((
uöt32_t
)0x00000008Ë

	)

2414 
	#SCB_SHCSR_SVCALLACT
 ((
uöt32_t
)0x00000080Ë

	)

2415 
	#SCB_SHCSR_MONITORACT
 ((
uöt32_t
)0x00000100Ë

	)

2416 
	#SCB_SHCSR_PENDSVACT
 ((
uöt32_t
)0x00000400Ë

	)

2417 
	#SCB_SHCSR_SYSTICKACT
 ((
uöt32_t
)0x00000800Ë

	)

2418 
	#SCB_SHCSR_USGFAULTPENDED
 ((
uöt32_t
)0x00001000Ë

	)

2419 
	#SCB_SHCSR_MEMFAULTPENDED
 ((
uöt32_t
)0x00002000Ë

	)

2420 
	#SCB_SHCSR_BUSFAULTPENDED
 ((
uöt32_t
)0x00004000Ë

	)

2421 
	#SCB_SHCSR_SVCALLPENDED
 ((
uöt32_t
)0x00008000Ë

	)

2422 
	#SCB_SHCSR_MEMFAULTENA
 ((
uöt32_t
)0x00010000Ë

	)

2423 
	#SCB_SHCSR_BUSFAULTENA
 ((
uöt32_t
)0x00020000Ë

	)

2424 
	#SCB_SHCSR_USGFAULTENA
 ((
uöt32_t
)0x00040000Ë

	)

2428 
	#SCB_CFSR_IACCVIOL
 ((
uöt32_t
)0x00000001Ë

	)

2429 
	#SCB_CFSR_DACCVIOL
 ((
uöt32_t
)0x00000002Ë

	)

2430 
	#SCB_CFSR_MUNSTKERR
 ((
uöt32_t
)0x00000008Ë

	)

2431 
	#SCB_CFSR_MSTKERR
 ((
uöt32_t
)0x00000010Ë

	)

2432 
	#SCB_CFSR_MMARVALID
 ((
uöt32_t
)0x00000080Ë

	)

2434 
	#SCB_CFSR_IBUSERR
 ((
uöt32_t
)0x00000100Ë

	)

2435 
	#SCB_CFSR_PRECISERR
 ((
uöt32_t
)0x00000200Ë

	)

2436 
	#SCB_CFSR_IMPRECISERR
 ((
uöt32_t
)0x00000400Ë

	)

2437 
	#SCB_CFSR_UNSTKERR
 ((
uöt32_t
)0x00000800Ë

	)

2438 
	#SCB_CFSR_STKERR
 ((
uöt32_t
)0x00001000Ë

	)

2439 
	#SCB_CFSR_BFARVALID
 ((
uöt32_t
)0x00008000Ë

	)

2441 
	#SCB_CFSR_UNDEFINSTR
 ((
uöt32_t
)0x00010000Ë

	)

2442 
	#SCB_CFSR_INVSTATE
 ((
uöt32_t
)0x00020000Ë

	)

2443 
	#SCB_CFSR_INVPC
 ((
uöt32_t
)0x00040000Ë

	)

2444 
	#SCB_CFSR_NOCP
 ((
uöt32_t
)0x00080000Ë

	)

2445 
	#SCB_CFSR_UNALIGNED
 ((
uöt32_t
)0x01000000Ë

	)

2446 
	#SCB_CFSR_DIVBYZERO
 ((
uöt32_t
)0x02000000Ë

	)

2449 
	#SCB_HFSR_VECTTBL
 ((
uöt32_t
)0x00000002Ë

	)

2450 
	#SCB_HFSR_FORCED
 ((
uöt32_t
)0x40000000Ë

	)

2451 
	#SCB_HFSR_DEBUGEVT
 ((
uöt32_t
)0x80000000Ë

	)

2454 
	#SCB_DFSR_HALTED
 ((
uöt32_t
)0x00000001Ë

	)

2455 
	#SCB_DFSR_BKPT
 ((
uöt32_t
)0x00000002Ë

	)

2456 
	#SCB_DFSR_DWTTRAP
 ((
uöt32_t
)0x00000004Ë

	)

2457 
	#SCB_DFSR_VCATCH
 ((
uöt32_t
)0x00000008Ë

	)

2458 
	#SCB_DFSR_EXTERNAL
 ((
uöt32_t
)0x00000010Ë

	)

2461 
	#SCB_MMFAR_ADDRESS
 ((
uöt32_t
)0xFFFFFFFFË

	)

2464 
	#SCB_BFAR_ADDRESS
 ((
uöt32_t
)0xFFFFFFFFË

	)

2467 
	#SCB_AFSR_IMPDEF
 ((
uöt32_t
)0xFFFFFFFFË

	)

2476 
	#EXTI_IMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

2477 
	#EXTI_IMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

2478 
	#EXTI_IMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

2479 
	#EXTI_IMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

2480 
	#EXTI_IMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

2481 
	#EXTI_IMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

2482 
	#EXTI_IMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

2483 
	#EXTI_IMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

2484 
	#EXTI_IMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

2485 
	#EXTI_IMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

2486 
	#EXTI_IMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

2487 
	#EXTI_IMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

2488 
	#EXTI_IMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

2489 
	#EXTI_IMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

2490 
	#EXTI_IMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

2491 
	#EXTI_IMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

2492 
	#EXTI_IMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

2493 
	#EXTI_IMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

2494 
	#EXTI_IMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

2495 
	#EXTI_IMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

2498 
	#EXTI_IMR_IM0
 
EXTI_IMR_MR0


	)

2499 
	#EXTI_IMR_IM1
 
EXTI_IMR_MR1


	)

2500 
	#EXTI_IMR_IM2
 
EXTI_IMR_MR2


	)

2501 
	#EXTI_IMR_IM3
 
EXTI_IMR_MR3


	)

2502 
	#EXTI_IMR_IM4
 
EXTI_IMR_MR4


	)

2503 
	#EXTI_IMR_IM5
 
EXTI_IMR_MR5


	)

2504 
	#EXTI_IMR_IM6
 
EXTI_IMR_MR6


	)

2505 
	#EXTI_IMR_IM7
 
EXTI_IMR_MR7


	)

2506 
	#EXTI_IMR_IM8
 
EXTI_IMR_MR8


	)

2507 
	#EXTI_IMR_IM9
 
EXTI_IMR_MR9


	)

2508 
	#EXTI_IMR_IM10
 
EXTI_IMR_MR10


	)

2509 
	#EXTI_IMR_IM11
 
EXTI_IMR_MR11


	)

2510 
	#EXTI_IMR_IM12
 
EXTI_IMR_MR12


	)

2511 
	#EXTI_IMR_IM13
 
EXTI_IMR_MR13


	)

2512 
	#EXTI_IMR_IM14
 
EXTI_IMR_MR14


	)

2513 
	#EXTI_IMR_IM15
 
EXTI_IMR_MR15


	)

2514 
	#EXTI_IMR_IM16
 
EXTI_IMR_MR16


	)

2515 
	#EXTI_IMR_IM17
 
EXTI_IMR_MR17


	)

2516 
	#EXTI_IMR_IM18
 
EXTI_IMR_MR18


	)

2517 
	#EXTI_IMR_IM19
 
EXTI_IMR_MR19


	)

2520 
	#EXTI_EMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

2521 
	#EXTI_EMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

2522 
	#EXTI_EMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

2523 
	#EXTI_EMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

2524 
	#EXTI_EMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

2525 
	#EXTI_EMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

2526 
	#EXTI_EMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

2527 
	#EXTI_EMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

2528 
	#EXTI_EMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

2529 
	#EXTI_EMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

2530 
	#EXTI_EMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

2531 
	#EXTI_EMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

2532 
	#EXTI_EMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

2533 
	#EXTI_EMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

2534 
	#EXTI_EMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

2535 
	#EXTI_EMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

2536 
	#EXTI_EMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

2537 
	#EXTI_EMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

2538 
	#EXTI_EMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

2539 
	#EXTI_EMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

2542 
	#EXTI_EMR_EM0
 
EXTI_EMR_MR0


	)

2543 
	#EXTI_EMR_EM1
 
EXTI_EMR_MR1


	)

2544 
	#EXTI_EMR_EM2
 
EXTI_EMR_MR2


	)

2545 
	#EXTI_EMR_EM3
 
EXTI_EMR_MR3


	)

2546 
	#EXTI_EMR_EM4
 
EXTI_EMR_MR4


	)

2547 
	#EXTI_EMR_EM5
 
EXTI_EMR_MR5


	)

2548 
	#EXTI_EMR_EM6
 
EXTI_EMR_MR6


	)

2549 
	#EXTI_EMR_EM7
 
EXTI_EMR_MR7


	)

2550 
	#EXTI_EMR_EM8
 
EXTI_EMR_MR8


	)

2551 
	#EXTI_EMR_EM9
 
EXTI_EMR_MR9


	)

2552 
	#EXTI_EMR_EM10
 
EXTI_EMR_MR10


	)

2553 
	#EXTI_EMR_EM11
 
EXTI_EMR_MR11


	)

2554 
	#EXTI_EMR_EM12
 
EXTI_EMR_MR12


	)

2555 
	#EXTI_EMR_EM13
 
EXTI_EMR_MR13


	)

2556 
	#EXTI_EMR_EM14
 
EXTI_EMR_MR14


	)

2557 
	#EXTI_EMR_EM15
 
EXTI_EMR_MR15


	)

2558 
	#EXTI_EMR_EM16
 
EXTI_EMR_MR16


	)

2559 
	#EXTI_EMR_EM17
 
EXTI_EMR_MR17


	)

2560 
	#EXTI_EMR_EM18
 
EXTI_EMR_MR18


	)

2561 
	#EXTI_EMR_EM19
 
EXTI_EMR_MR19


	)

2564 
	#EXTI_RTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

2565 
	#EXTI_RTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

2566 
	#EXTI_RTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

2567 
	#EXTI_RTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

2568 
	#EXTI_RTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

2569 
	#EXTI_RTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

2570 
	#EXTI_RTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

2571 
	#EXTI_RTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

2572 
	#EXTI_RTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

2573 
	#EXTI_RTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

2574 
	#EXTI_RTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

2575 
	#EXTI_RTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

2576 
	#EXTI_RTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

2577 
	#EXTI_RTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

2578 
	#EXTI_RTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

2579 
	#EXTI_RTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

2580 
	#EXTI_RTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

2581 
	#EXTI_RTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

2582 
	#EXTI_RTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

2583 
	#EXTI_RTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

2586 
	#EXTI_RTSR_RT0
 
EXTI_RTSR_TR0


	)

2587 
	#EXTI_RTSR_RT1
 
EXTI_RTSR_TR1


	)

2588 
	#EXTI_RTSR_RT2
 
EXTI_RTSR_TR2


	)

2589 
	#EXTI_RTSR_RT3
 
EXTI_RTSR_TR3


	)

2590 
	#EXTI_RTSR_RT4
 
EXTI_RTSR_TR4


	)

2591 
	#EXTI_RTSR_RT5
 
EXTI_RTSR_TR5


	)

2592 
	#EXTI_RTSR_RT6
 
EXTI_RTSR_TR6


	)

2593 
	#EXTI_RTSR_RT7
 
EXTI_RTSR_TR7


	)

2594 
	#EXTI_RTSR_RT8
 
EXTI_RTSR_TR8


	)

2595 
	#EXTI_RTSR_RT9
 
EXTI_RTSR_TR9


	)

2596 
	#EXTI_RTSR_RT10
 
EXTI_RTSR_TR10


	)

2597 
	#EXTI_RTSR_RT11
 
EXTI_RTSR_TR11


	)

2598 
	#EXTI_RTSR_RT12
 
EXTI_RTSR_TR12


	)

2599 
	#EXTI_RTSR_RT13
 
EXTI_RTSR_TR13


	)

2600 
	#EXTI_RTSR_RT14
 
EXTI_RTSR_TR14


	)

2601 
	#EXTI_RTSR_RT15
 
EXTI_RTSR_TR15


	)

2602 
	#EXTI_RTSR_RT16
 
EXTI_RTSR_TR16


	)

2603 
	#EXTI_RTSR_RT17
 
EXTI_RTSR_TR17


	)

2604 
	#EXTI_RTSR_RT18
 
EXTI_RTSR_TR18


	)

2605 
	#EXTI_RTSR_RT19
 
EXTI_RTSR_TR19


	)

2608 
	#EXTI_FTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

2609 
	#EXTI_FTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

2610 
	#EXTI_FTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

2611 
	#EXTI_FTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

2612 
	#EXTI_FTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

2613 
	#EXTI_FTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

2614 
	#EXTI_FTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

2615 
	#EXTI_FTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

2616 
	#EXTI_FTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

2617 
	#EXTI_FTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

2618 
	#EXTI_FTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

2619 
	#EXTI_FTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

2620 
	#EXTI_FTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

2621 
	#EXTI_FTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

2622 
	#EXTI_FTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

2623 
	#EXTI_FTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

2624 
	#EXTI_FTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

2625 
	#EXTI_FTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

2626 
	#EXTI_FTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

2627 
	#EXTI_FTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

2630 
	#EXTI_FTSR_FT0
 
EXTI_FTSR_TR0


	)

2631 
	#EXTI_FTSR_FT1
 
EXTI_FTSR_TR1


	)

2632 
	#EXTI_FTSR_FT2
 
EXTI_FTSR_TR2


	)

2633 
	#EXTI_FTSR_FT3
 
EXTI_FTSR_TR3


	)

2634 
	#EXTI_FTSR_FT4
 
EXTI_FTSR_TR4


	)

2635 
	#EXTI_FTSR_FT5
 
EXTI_FTSR_TR5


	)

2636 
	#EXTI_FTSR_FT6
 
EXTI_FTSR_TR6


	)

2637 
	#EXTI_FTSR_FT7
 
EXTI_FTSR_TR7


	)

2638 
	#EXTI_FTSR_FT8
 
EXTI_FTSR_TR8


	)

2639 
	#EXTI_FTSR_FT9
 
EXTI_FTSR_TR9


	)

2640 
	#EXTI_FTSR_FT10
 
EXTI_FTSR_TR10


	)

2641 
	#EXTI_FTSR_FT11
 
EXTI_FTSR_TR11


	)

2642 
	#EXTI_FTSR_FT12
 
EXTI_FTSR_TR12


	)

2643 
	#EXTI_FTSR_FT13
 
EXTI_FTSR_TR13


	)

2644 
	#EXTI_FTSR_FT14
 
EXTI_FTSR_TR14


	)

2645 
	#EXTI_FTSR_FT15
 
EXTI_FTSR_TR15


	)

2646 
	#EXTI_FTSR_FT16
 
EXTI_FTSR_TR16


	)

2647 
	#EXTI_FTSR_FT17
 
EXTI_FTSR_TR17


	)

2648 
	#EXTI_FTSR_FT18
 
EXTI_FTSR_TR18


	)

2649 
	#EXTI_FTSR_FT19
 
EXTI_FTSR_TR19


	)

2652 
	#EXTI_SWIER_SWIER0
 ((
uöt32_t
)0x00000001Ë

	)

2653 
	#EXTI_SWIER_SWIER1
 ((
uöt32_t
)0x00000002Ë

	)

2654 
	#EXTI_SWIER_SWIER2
 ((
uöt32_t
)0x00000004Ë

	)

2655 
	#EXTI_SWIER_SWIER3
 ((
uöt32_t
)0x00000008Ë

	)

2656 
	#EXTI_SWIER_SWIER4
 ((
uöt32_t
)0x00000010Ë

	)

2657 
	#EXTI_SWIER_SWIER5
 ((
uöt32_t
)0x00000020Ë

	)

2658 
	#EXTI_SWIER_SWIER6
 ((
uöt32_t
)0x00000040Ë

	)

2659 
	#EXTI_SWIER_SWIER7
 ((
uöt32_t
)0x00000080Ë

	)

2660 
	#EXTI_SWIER_SWIER8
 ((
uöt32_t
)0x00000100Ë

	)

2661 
	#EXTI_SWIER_SWIER9
 ((
uöt32_t
)0x00000200Ë

	)

2662 
	#EXTI_SWIER_SWIER10
 ((
uöt32_t
)0x00000400Ë

	)

2663 
	#EXTI_SWIER_SWIER11
 ((
uöt32_t
)0x00000800Ë

	)

2664 
	#EXTI_SWIER_SWIER12
 ((
uöt32_t
)0x00001000Ë

	)

2665 
	#EXTI_SWIER_SWIER13
 ((
uöt32_t
)0x00002000Ë

	)

2666 
	#EXTI_SWIER_SWIER14
 ((
uöt32_t
)0x00004000Ë

	)

2667 
	#EXTI_SWIER_SWIER15
 ((
uöt32_t
)0x00008000Ë

	)

2668 
	#EXTI_SWIER_SWIER16
 ((
uöt32_t
)0x00010000Ë

	)

2669 
	#EXTI_SWIER_SWIER17
 ((
uöt32_t
)0x00020000Ë

	)

2670 
	#EXTI_SWIER_SWIER18
 ((
uöt32_t
)0x00040000Ë

	)

2671 
	#EXTI_SWIER_SWIER19
 ((
uöt32_t
)0x00080000Ë

	)

2674 
	#EXTI_SWIER_SWI0
 
EXTI_SWIER_SWIER0


	)

2675 
	#EXTI_SWIER_SWI1
 
EXTI_SWIER_SWIER1


	)

2676 
	#EXTI_SWIER_SWI2
 
EXTI_SWIER_SWIER2


	)

2677 
	#EXTI_SWIER_SWI3
 
EXTI_SWIER_SWIER3


	)

2678 
	#EXTI_SWIER_SWI4
 
EXTI_SWIER_SWIER4


	)

2679 
	#EXTI_SWIER_SWI5
 
EXTI_SWIER_SWIER5


	)

2680 
	#EXTI_SWIER_SWI6
 
EXTI_SWIER_SWIER6


	)

2681 
	#EXTI_SWIER_SWI7
 
EXTI_SWIER_SWIER7


	)

2682 
	#EXTI_SWIER_SWI8
 
EXTI_SWIER_SWIER8


	)

2683 
	#EXTI_SWIER_SWI9
 
EXTI_SWIER_SWIER9


	)

2684 
	#EXTI_SWIER_SWI10
 
EXTI_SWIER_SWIER10


	)

2685 
	#EXTI_SWIER_SWI11
 
EXTI_SWIER_SWIER11


	)

2686 
	#EXTI_SWIER_SWI12
 
EXTI_SWIER_SWIER12


	)

2687 
	#EXTI_SWIER_SWI13
 
EXTI_SWIER_SWIER13


	)

2688 
	#EXTI_SWIER_SWI14
 
EXTI_SWIER_SWIER14


	)

2689 
	#EXTI_SWIER_SWI15
 
EXTI_SWIER_SWIER15


	)

2690 
	#EXTI_SWIER_SWI16
 
EXTI_SWIER_SWIER16


	)

2691 
	#EXTI_SWIER_SWI17
 
EXTI_SWIER_SWIER17


	)

2692 
	#EXTI_SWIER_SWI18
 
EXTI_SWIER_SWIER18


	)

2693 
	#EXTI_SWIER_SWI19
 
EXTI_SWIER_SWIER19


	)

2696 
	#EXTI_PR_PR0
 ((
uöt32_t
)0x00000001Ë

	)

2697 
	#EXTI_PR_PR1
 ((
uöt32_t
)0x00000002Ë

	)

2698 
	#EXTI_PR_PR2
 ((
uöt32_t
)0x00000004Ë

	)

2699 
	#EXTI_PR_PR3
 ((
uöt32_t
)0x00000008Ë

	)

2700 
	#EXTI_PR_PR4
 ((
uöt32_t
)0x00000010Ë

	)

2701 
	#EXTI_PR_PR5
 ((
uöt32_t
)0x00000020Ë

	)

2702 
	#EXTI_PR_PR6
 ((
uöt32_t
)0x00000040Ë

	)

2703 
	#EXTI_PR_PR7
 ((
uöt32_t
)0x00000080Ë

	)

2704 
	#EXTI_PR_PR8
 ((
uöt32_t
)0x00000100Ë

	)

2705 
	#EXTI_PR_PR9
 ((
uöt32_t
)0x00000200Ë

	)

2706 
	#EXTI_PR_PR10
 ((
uöt32_t
)0x00000400Ë

	)

2707 
	#EXTI_PR_PR11
 ((
uöt32_t
)0x00000800Ë

	)

2708 
	#EXTI_PR_PR12
 ((
uöt32_t
)0x00001000Ë

	)

2709 
	#EXTI_PR_PR13
 ((
uöt32_t
)0x00002000Ë

	)

2710 
	#EXTI_PR_PR14
 ((
uöt32_t
)0x00004000Ë

	)

2711 
	#EXTI_PR_PR15
 ((
uöt32_t
)0x00008000Ë

	)

2712 
	#EXTI_PR_PR16
 ((
uöt32_t
)0x00010000Ë

	)

2713 
	#EXTI_PR_PR17
 ((
uöt32_t
)0x00020000Ë

	)

2714 
	#EXTI_PR_PR18
 ((
uöt32_t
)0x00040000Ë

	)

2715 
	#EXTI_PR_PR19
 ((
uöt32_t
)0x00080000Ë

	)

2718 
	#EXTI_PR_PIF0
 
EXTI_PR_PR0


	)

2719 
	#EXTI_PR_PIF1
 
EXTI_PR_PR1


	)

2720 
	#EXTI_PR_PIF2
 
EXTI_PR_PR2


	)

2721 
	#EXTI_PR_PIF3
 
EXTI_PR_PR3


	)

2722 
	#EXTI_PR_PIF4
 
EXTI_PR_PR4


	)

2723 
	#EXTI_PR_PIF5
 
EXTI_PR_PR5


	)

2724 
	#EXTI_PR_PIF6
 
EXTI_PR_PR6


	)

2725 
	#EXTI_PR_PIF7
 
EXTI_PR_PR7


	)

2726 
	#EXTI_PR_PIF8
 
EXTI_PR_PR8


	)

2727 
	#EXTI_PR_PIF9
 
EXTI_PR_PR9


	)

2728 
	#EXTI_PR_PIF10
 
EXTI_PR_PR10


	)

2729 
	#EXTI_PR_PIF11
 
EXTI_PR_PR11


	)

2730 
	#EXTI_PR_PIF12
 
EXTI_PR_PR12


	)

2731 
	#EXTI_PR_PIF13
 
EXTI_PR_PR13


	)

2732 
	#EXTI_PR_PIF14
 
EXTI_PR_PR14


	)

2733 
	#EXTI_PR_PIF15
 
EXTI_PR_PR15


	)

2734 
	#EXTI_PR_PIF16
 
EXTI_PR_PR16


	)

2735 
	#EXTI_PR_PIF17
 
EXTI_PR_PR17


	)

2736 
	#EXTI_PR_PIF18
 
EXTI_PR_PR18


	)

2737 
	#EXTI_PR_PIF19
 
EXTI_PR_PR19


	)

2746 
	#DMA_ISR_GIF1
 ((
uöt32_t
)0x00000001Ë

	)

2747 
	#DMA_ISR_TCIF1
 ((
uöt32_t
)0x00000002Ë

	)

2748 
	#DMA_ISR_HTIF1
 ((
uöt32_t
)0x00000004Ë

	)

2749 
	#DMA_ISR_TEIF1
 ((
uöt32_t
)0x00000008Ë

	)

2750 
	#DMA_ISR_GIF2
 ((
uöt32_t
)0x00000010Ë

	)

2751 
	#DMA_ISR_TCIF2
 ((
uöt32_t
)0x00000020Ë

	)

2752 
	#DMA_ISR_HTIF2
 ((
uöt32_t
)0x00000040Ë

	)

2753 
	#DMA_ISR_TEIF2
 ((
uöt32_t
)0x00000080Ë

	)

2754 
	#DMA_ISR_GIF3
 ((
uöt32_t
)0x00000100Ë

	)

2755 
	#DMA_ISR_TCIF3
 ((
uöt32_t
)0x00000200Ë

	)

2756 
	#DMA_ISR_HTIF3
 ((
uöt32_t
)0x00000400Ë

	)

2757 
	#DMA_ISR_TEIF3
 ((
uöt32_t
)0x00000800Ë

	)

2758 
	#DMA_ISR_GIF4
 ((
uöt32_t
)0x00001000Ë

	)

2759 
	#DMA_ISR_TCIF4
 ((
uöt32_t
)0x00002000Ë

	)

2760 
	#DMA_ISR_HTIF4
 ((
uöt32_t
)0x00004000Ë

	)

2761 
	#DMA_ISR_TEIF4
 ((
uöt32_t
)0x00008000Ë

	)

2762 
	#DMA_ISR_GIF5
 ((
uöt32_t
)0x00010000Ë

	)

2763 
	#DMA_ISR_TCIF5
 ((
uöt32_t
)0x00020000Ë

	)

2764 
	#DMA_ISR_HTIF5
 ((
uöt32_t
)0x00040000Ë

	)

2765 
	#DMA_ISR_TEIF5
 ((
uöt32_t
)0x00080000Ë

	)

2766 
	#DMA_ISR_GIF6
 ((
uöt32_t
)0x00100000Ë

	)

2767 
	#DMA_ISR_TCIF6
 ((
uöt32_t
)0x00200000Ë

	)

2768 
	#DMA_ISR_HTIF6
 ((
uöt32_t
)0x00400000Ë

	)

2769 
	#DMA_ISR_TEIF6
 ((
uöt32_t
)0x00800000Ë

	)

2770 
	#DMA_ISR_GIF7
 ((
uöt32_t
)0x01000000Ë

	)

2771 
	#DMA_ISR_TCIF7
 ((
uöt32_t
)0x02000000Ë

	)

2772 
	#DMA_ISR_HTIF7
 ((
uöt32_t
)0x04000000Ë

	)

2773 
	#DMA_ISR_TEIF7
 ((
uöt32_t
)0x08000000Ë

	)

2776 
	#DMA_IFCR_CGIF1
 ((
uöt32_t
)0x00000001Ë

	)

2777 
	#DMA_IFCR_CTCIF1
 ((
uöt32_t
)0x00000002Ë

	)

2778 
	#DMA_IFCR_CHTIF1
 ((
uöt32_t
)0x00000004Ë

	)

2779 
	#DMA_IFCR_CTEIF1
 ((
uöt32_t
)0x00000008Ë

	)

2780 
	#DMA_IFCR_CGIF2
 ((
uöt32_t
)0x00000010Ë

	)

2781 
	#DMA_IFCR_CTCIF2
 ((
uöt32_t
)0x00000020Ë

	)

2782 
	#DMA_IFCR_CHTIF2
 ((
uöt32_t
)0x00000040Ë

	)

2783 
	#DMA_IFCR_CTEIF2
 ((
uöt32_t
)0x00000080Ë

	)

2784 
	#DMA_IFCR_CGIF3
 ((
uöt32_t
)0x00000100Ë

	)

2785 
	#DMA_IFCR_CTCIF3
 ((
uöt32_t
)0x00000200Ë

	)

2786 
	#DMA_IFCR_CHTIF3
 ((
uöt32_t
)0x00000400Ë

	)

2787 
	#DMA_IFCR_CTEIF3
 ((
uöt32_t
)0x00000800Ë

	)

2788 
	#DMA_IFCR_CGIF4
 ((
uöt32_t
)0x00001000Ë

	)

2789 
	#DMA_IFCR_CTCIF4
 ((
uöt32_t
)0x00002000Ë

	)

2790 
	#DMA_IFCR_CHTIF4
 ((
uöt32_t
)0x00004000Ë

	)

2791 
	#DMA_IFCR_CTEIF4
 ((
uöt32_t
)0x00008000Ë

	)

2792 
	#DMA_IFCR_CGIF5
 ((
uöt32_t
)0x00010000Ë

	)

2793 
	#DMA_IFCR_CTCIF5
 ((
uöt32_t
)0x00020000Ë

	)

2794 
	#DMA_IFCR_CHTIF5
 ((
uöt32_t
)0x00040000Ë

	)

2795 
	#DMA_IFCR_CTEIF5
 ((
uöt32_t
)0x00080000Ë

	)

2796 
	#DMA_IFCR_CGIF6
 ((
uöt32_t
)0x00100000Ë

	)

2797 
	#DMA_IFCR_CTCIF6
 ((
uöt32_t
)0x00200000Ë

	)

2798 
	#DMA_IFCR_CHTIF6
 ((
uöt32_t
)0x00400000Ë

	)

2799 
	#DMA_IFCR_CTEIF6
 ((
uöt32_t
)0x00800000Ë

	)

2800 
	#DMA_IFCR_CGIF7
 ((
uöt32_t
)0x01000000Ë

	)

2801 
	#DMA_IFCR_CTCIF7
 ((
uöt32_t
)0x02000000Ë

	)

2802 
	#DMA_IFCR_CHTIF7
 ((
uöt32_t
)0x04000000Ë

	)

2803 
	#DMA_IFCR_CTEIF7
 ((
uöt32_t
)0x08000000Ë

	)

2806 
	#DMA_CCR_EN
 ((
uöt32_t
)0x00000001Ë

	)

2807 
	#DMA_CCR_TCIE
 ((
uöt32_t
)0x00000002Ë

	)

2808 
	#DMA_CCR_HTIE
 ((
uöt32_t
)0x00000004Ë

	)

2809 
	#DMA_CCR_TEIE
 ((
uöt32_t
)0x00000008Ë

	)

2810 
	#DMA_CCR_DIR
 ((
uöt32_t
)0x00000010Ë

	)

2811 
	#DMA_CCR_CIRC
 ((
uöt32_t
)0x00000020Ë

	)

2812 
	#DMA_CCR_PINC
 ((
uöt32_t
)0x00000040Ë

	)

2813 
	#DMA_CCR_MINC
 ((
uöt32_t
)0x00000080Ë

	)

2815 
	#DMA_CCR_PSIZE
 ((
uöt32_t
)0x00000300Ë

	)

2816 
	#DMA_CCR_PSIZE_0
 ((
uöt32_t
)0x00000100Ë

	)

2817 
	#DMA_CCR_PSIZE_1
 ((
uöt32_t
)0x00000200Ë

	)

2819 
	#DMA_CCR_MSIZE
 ((
uöt32_t
)0x00000C00Ë

	)

2820 
	#DMA_CCR_MSIZE_0
 ((
uöt32_t
)0x00000400Ë

	)

2821 
	#DMA_CCR_MSIZE_1
 ((
uöt32_t
)0x00000800Ë

	)

2823 
	#DMA_CCR_PL
 ((
uöt32_t
)0x00003000Ë

	)

2824 
	#DMA_CCR_PL_0
 ((
uöt32_t
)0x00001000Ë

	)

2825 
	#DMA_CCR_PL_1
 ((
uöt32_t
)0x00002000Ë

	)

2827 
	#DMA_CCR_MEM2MEM
 ((
uöt32_t
)0x00004000Ë

	)

2830 
	#DMA_CNDTR_NDT
 ((
uöt32_t
)0x0000FFFFË

	)

2833 
	#DMA_CPAR_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2836 
	#DMA_CMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

2845 
	#ADC_SR_AWD
 ((
uöt32_t
)0x00000001Ë

	)

2846 
	#ADC_SR_EOC
 ((
uöt32_t
)0x00000002Ë

	)

2847 
	#ADC_SR_JEOC
 ((
uöt32_t
)0x00000004Ë

	)

2848 
	#ADC_SR_JSTRT
 ((
uöt32_t
)0x00000008Ë

	)

2849 
	#ADC_SR_STRT
 ((
uöt32_t
)0x00000010Ë

	)

2852 
	#ADC_CR1_AWDCH
 ((
uöt32_t
)0x0000001FË

	)

2853 
	#ADC_CR1_AWDCH_0
 ((
uöt32_t
)0x00000001Ë

	)

2854 
	#ADC_CR1_AWDCH_1
 ((
uöt32_t
)0x00000002Ë

	)

2855 
	#ADC_CR1_AWDCH_2
 ((
uöt32_t
)0x00000004Ë

	)

2856 
	#ADC_CR1_AWDCH_3
 ((
uöt32_t
)0x00000008Ë

	)

2857 
	#ADC_CR1_AWDCH_4
 ((
uöt32_t
)0x00000010Ë

	)

2859 
	#ADC_CR1_EOCIE
 ((
uöt32_t
)0x00000020Ë

	)

2860 
	#ADC_CR1_AWDIE
 ((
uöt32_t
)0x00000040Ë

	)

2861 
	#ADC_CR1_JEOCIE
 ((
uöt32_t
)0x00000080Ë

	)

2862 
	#ADC_CR1_SCAN
 ((
uöt32_t
)0x00000100Ë

	)

2863 
	#ADC_CR1_AWDSGL
 ((
uöt32_t
)0x00000200Ë

	)

2864 
	#ADC_CR1_JAUTO
 ((
uöt32_t
)0x00000400Ë

	)

2865 
	#ADC_CR1_DISCEN
 ((
uöt32_t
)0x00000800Ë

	)

2866 
	#ADC_CR1_JDISCEN
 ((
uöt32_t
)0x00001000Ë

	)

2868 
	#ADC_CR1_DISCNUM
 ((
uöt32_t
)0x0000E000Ë

	)

2869 
	#ADC_CR1_DISCNUM_0
 ((
uöt32_t
)0x00002000Ë

	)

2870 
	#ADC_CR1_DISCNUM_1
 ((
uöt32_t
)0x00004000Ë

	)

2871 
	#ADC_CR1_DISCNUM_2
 ((
uöt32_t
)0x00008000Ë

	)

2873 
	#ADC_CR1_DUALMOD
 ((
uöt32_t
)0x000F0000Ë

	)

2874 
	#ADC_CR1_DUALMOD_0
 ((
uöt32_t
)0x00010000Ë

	)

2875 
	#ADC_CR1_DUALMOD_1
 ((
uöt32_t
)0x00020000Ë

	)

2876 
	#ADC_CR1_DUALMOD_2
 ((
uöt32_t
)0x00040000Ë

	)

2877 
	#ADC_CR1_DUALMOD_3
 ((
uöt32_t
)0x00080000Ë

	)

2879 
	#ADC_CR1_JAWDEN
 ((
uöt32_t
)0x00400000Ë

	)

2880 
	#ADC_CR1_AWDEN
 ((
uöt32_t
)0x00800000Ë

	)

2884 
	#ADC_CR2_ADON
 ((
uöt32_t
)0x00000001Ë

	)

2885 
	#ADC_CR2_CONT
 ((
uöt32_t
)0x00000002Ë

	)

2886 
	#ADC_CR2_CAL
 ((
uöt32_t
)0x00000004Ë

	)

2887 
	#ADC_CR2_RSTCAL
 ((
uöt32_t
)0x00000008Ë

	)

2888 
	#ADC_CR2_DMA
 ((
uöt32_t
)0x00000100Ë

	)

2889 
	#ADC_CR2_ALIGN
 ((
uöt32_t
)0x00000800Ë

	)

2891 
	#ADC_CR2_JEXTSEL
 ((
uöt32_t
)0x00007000Ë

	)

2892 
	#ADC_CR2_JEXTSEL_0
 ((
uöt32_t
)0x00001000Ë

	)

2893 
	#ADC_CR2_JEXTSEL_1
 ((
uöt32_t
)0x00002000Ë

	)

2894 
	#ADC_CR2_JEXTSEL_2
 ((
uöt32_t
)0x00004000Ë

	)

2896 
	#ADC_CR2_JEXTTRIG
 ((
uöt32_t
)0x00008000Ë

	)

2898 
	#ADC_CR2_EXTSEL
 ((
uöt32_t
)0x000E0000Ë

	)

2899 
	#ADC_CR2_EXTSEL_0
 ((
uöt32_t
)0x00020000Ë

	)

2900 
	#ADC_CR2_EXTSEL_1
 ((
uöt32_t
)0x00040000Ë

	)

2901 
	#ADC_CR2_EXTSEL_2
 ((
uöt32_t
)0x00080000Ë

	)

2903 
	#ADC_CR2_EXTTRIG
 ((
uöt32_t
)0x00100000Ë

	)

2904 
	#ADC_CR2_JSWSTART
 ((
uöt32_t
)0x00200000Ë

	)

2905 
	#ADC_CR2_SWSTART
 ((
uöt32_t
)0x00400000Ë

	)

2906 
	#ADC_CR2_TSVREFE
 ((
uöt32_t
)0x00800000Ë

	)

2909 
	#ADC_SMPR1_SMP10
 ((
uöt32_t
)0x00000007Ë

	)

2910 
	#ADC_SMPR1_SMP10_0
 ((
uöt32_t
)0x00000001Ë

	)

2911 
	#ADC_SMPR1_SMP10_1
 ((
uöt32_t
)0x00000002Ë

	)

2912 
	#ADC_SMPR1_SMP10_2
 ((
uöt32_t
)0x00000004Ë

	)

2914 
	#ADC_SMPR1_SMP11
 ((
uöt32_t
)0x00000038Ë

	)

2915 
	#ADC_SMPR1_SMP11_0
 ((
uöt32_t
)0x00000008Ë

	)

2916 
	#ADC_SMPR1_SMP11_1
 ((
uöt32_t
)0x00000010Ë

	)

2917 
	#ADC_SMPR1_SMP11_2
 ((
uöt32_t
)0x00000020Ë

	)

2919 
	#ADC_SMPR1_SMP12
 ((
uöt32_t
)0x000001C0Ë

	)

2920 
	#ADC_SMPR1_SMP12_0
 ((
uöt32_t
)0x00000040Ë

	)

2921 
	#ADC_SMPR1_SMP12_1
 ((
uöt32_t
)0x00000080Ë

	)

2922 
	#ADC_SMPR1_SMP12_2
 ((
uöt32_t
)0x00000100Ë

	)

2924 
	#ADC_SMPR1_SMP13
 ((
uöt32_t
)0x00000E00Ë

	)

2925 
	#ADC_SMPR1_SMP13_0
 ((
uöt32_t
)0x00000200Ë

	)

2926 
	#ADC_SMPR1_SMP13_1
 ((
uöt32_t
)0x00000400Ë

	)

2927 
	#ADC_SMPR1_SMP13_2
 ((
uöt32_t
)0x00000800Ë

	)

2929 
	#ADC_SMPR1_SMP14
 ((
uöt32_t
)0x00007000Ë

	)

2930 
	#ADC_SMPR1_SMP14_0
 ((
uöt32_t
)0x00001000Ë

	)

2931 
	#ADC_SMPR1_SMP14_1
 ((
uöt32_t
)0x00002000Ë

	)

2932 
	#ADC_SMPR1_SMP14_2
 ((
uöt32_t
)0x00004000Ë

	)

2934 
	#ADC_SMPR1_SMP15
 ((
uöt32_t
)0x00038000Ë

	)

2935 
	#ADC_SMPR1_SMP15_0
 ((
uöt32_t
)0x00008000Ë

	)

2936 
	#ADC_SMPR1_SMP15_1
 ((
uöt32_t
)0x00010000Ë

	)

2937 
	#ADC_SMPR1_SMP15_2
 ((
uöt32_t
)0x00020000Ë

	)

2939 
	#ADC_SMPR1_SMP16
 ((
uöt32_t
)0x001C0000Ë

	)

2940 
	#ADC_SMPR1_SMP16_0
 ((
uöt32_t
)0x00040000Ë

	)

2941 
	#ADC_SMPR1_SMP16_1
 ((
uöt32_t
)0x00080000Ë

	)

2942 
	#ADC_SMPR1_SMP16_2
 ((
uöt32_t
)0x00100000Ë

	)

2944 
	#ADC_SMPR1_SMP17
 ((
uöt32_t
)0x00E00000Ë

	)

2945 
	#ADC_SMPR1_SMP17_0
 ((
uöt32_t
)0x00200000Ë

	)

2946 
	#ADC_SMPR1_SMP17_1
 ((
uöt32_t
)0x00400000Ë

	)

2947 
	#ADC_SMPR1_SMP17_2
 ((
uöt32_t
)0x00800000Ë

	)

2950 
	#ADC_SMPR2_SMP0
 ((
uöt32_t
)0x00000007Ë

	)

2951 
	#ADC_SMPR2_SMP0_0
 ((
uöt32_t
)0x00000001Ë

	)

2952 
	#ADC_SMPR2_SMP0_1
 ((
uöt32_t
)0x00000002Ë

	)

2953 
	#ADC_SMPR2_SMP0_2
 ((
uöt32_t
)0x00000004Ë

	)

2955 
	#ADC_SMPR2_SMP1
 ((
uöt32_t
)0x00000038Ë

	)

2956 
	#ADC_SMPR2_SMP1_0
 ((
uöt32_t
)0x00000008Ë

	)

2957 
	#ADC_SMPR2_SMP1_1
 ((
uöt32_t
)0x00000010Ë

	)

2958 
	#ADC_SMPR2_SMP1_2
 ((
uöt32_t
)0x00000020Ë

	)

2960 
	#ADC_SMPR2_SMP2
 ((
uöt32_t
)0x000001C0Ë

	)

2961 
	#ADC_SMPR2_SMP2_0
 ((
uöt32_t
)0x00000040Ë

	)

2962 
	#ADC_SMPR2_SMP2_1
 ((
uöt32_t
)0x00000080Ë

	)

2963 
	#ADC_SMPR2_SMP2_2
 ((
uöt32_t
)0x00000100Ë

	)

2965 
	#ADC_SMPR2_SMP3
 ((
uöt32_t
)0x00000E00Ë

	)

2966 
	#ADC_SMPR2_SMP3_0
 ((
uöt32_t
)0x00000200Ë

	)

2967 
	#ADC_SMPR2_SMP3_1
 ((
uöt32_t
)0x00000400Ë

	)

2968 
	#ADC_SMPR2_SMP3_2
 ((
uöt32_t
)0x00000800Ë

	)

2970 
	#ADC_SMPR2_SMP4
 ((
uöt32_t
)0x00007000Ë

	)

2971 
	#ADC_SMPR2_SMP4_0
 ((
uöt32_t
)0x00001000Ë

	)

2972 
	#ADC_SMPR2_SMP4_1
 ((
uöt32_t
)0x00002000Ë

	)

2973 
	#ADC_SMPR2_SMP4_2
 ((
uöt32_t
)0x00004000Ë

	)

2975 
	#ADC_SMPR2_SMP5
 ((
uöt32_t
)0x00038000Ë

	)

2976 
	#ADC_SMPR2_SMP5_0
 ((
uöt32_t
)0x00008000Ë

	)

2977 
	#ADC_SMPR2_SMP5_1
 ((
uöt32_t
)0x00010000Ë

	)

2978 
	#ADC_SMPR2_SMP5_2
 ((
uöt32_t
)0x00020000Ë

	)

2980 
	#ADC_SMPR2_SMP6
 ((
uöt32_t
)0x001C0000Ë

	)

2981 
	#ADC_SMPR2_SMP6_0
 ((
uöt32_t
)0x00040000Ë

	)

2982 
	#ADC_SMPR2_SMP6_1
 ((
uöt32_t
)0x00080000Ë

	)

2983 
	#ADC_SMPR2_SMP6_2
 ((
uöt32_t
)0x00100000Ë

	)

2985 
	#ADC_SMPR2_SMP7
 ((
uöt32_t
)0x00E00000Ë

	)

2986 
	#ADC_SMPR2_SMP7_0
 ((
uöt32_t
)0x00200000Ë

	)

2987 
	#ADC_SMPR2_SMP7_1
 ((
uöt32_t
)0x00400000Ë

	)

2988 
	#ADC_SMPR2_SMP7_2
 ((
uöt32_t
)0x00800000Ë

	)

2990 
	#ADC_SMPR2_SMP8
 ((
uöt32_t
)0x07000000Ë

	)

2991 
	#ADC_SMPR2_SMP8_0
 ((
uöt32_t
)0x01000000Ë

	)

2992 
	#ADC_SMPR2_SMP8_1
 ((
uöt32_t
)0x02000000Ë

	)

2993 
	#ADC_SMPR2_SMP8_2
 ((
uöt32_t
)0x04000000Ë

	)

2995 
	#ADC_SMPR2_SMP9
 ((
uöt32_t
)0x38000000Ë

	)

2996 
	#ADC_SMPR2_SMP9_0
 ((
uöt32_t
)0x08000000Ë

	)

2997 
	#ADC_SMPR2_SMP9_1
 ((
uöt32_t
)0x10000000Ë

	)

2998 
	#ADC_SMPR2_SMP9_2
 ((
uöt32_t
)0x20000000Ë

	)

3001 
	#ADC_JOFR1_JOFFSET1
 ((
uöt32_t
)0x00000FFFË

	)

3004 
	#ADC_JOFR2_JOFFSET2
 ((
uöt32_t
)0x00000FFFË

	)

3007 
	#ADC_JOFR3_JOFFSET3
 ((
uöt32_t
)0x00000FFFË

	)

3010 
	#ADC_JOFR4_JOFFSET4
 ((
uöt32_t
)0x00000FFFË

	)

3013 
	#ADC_HTR_HT
 ((
uöt32_t
)0x00000FFFË

	)

3016 
	#ADC_LTR_LT
 ((
uöt32_t
)0x00000FFFË

	)

3019 
	#ADC_SQR1_SQ13
 ((
uöt32_t
)0x0000001FË

	)

3020 
	#ADC_SQR1_SQ13_0
 ((
uöt32_t
)0x00000001Ë

	)

3021 
	#ADC_SQR1_SQ13_1
 ((
uöt32_t
)0x00000002Ë

	)

3022 
	#ADC_SQR1_SQ13_2
 ((
uöt32_t
)0x00000004Ë

	)

3023 
	#ADC_SQR1_SQ13_3
 ((
uöt32_t
)0x00000008Ë

	)

3024 
	#ADC_SQR1_SQ13_4
 ((
uöt32_t
)0x00000010Ë

	)

3026 
	#ADC_SQR1_SQ14
 ((
uöt32_t
)0x000003E0Ë

	)

3027 
	#ADC_SQR1_SQ14_0
 ((
uöt32_t
)0x00000020Ë

	)

3028 
	#ADC_SQR1_SQ14_1
 ((
uöt32_t
)0x00000040Ë

	)

3029 
	#ADC_SQR1_SQ14_2
 ((
uöt32_t
)0x00000080Ë

	)

3030 
	#ADC_SQR1_SQ14_3
 ((
uöt32_t
)0x00000100Ë

	)

3031 
	#ADC_SQR1_SQ14_4
 ((
uöt32_t
)0x00000200Ë

	)

3033 
	#ADC_SQR1_SQ15
 ((
uöt32_t
)0x00007C00Ë

	)

3034 
	#ADC_SQR1_SQ15_0
 ((
uöt32_t
)0x00000400Ë

	)

3035 
	#ADC_SQR1_SQ15_1
 ((
uöt32_t
)0x00000800Ë

	)

3036 
	#ADC_SQR1_SQ15_2
 ((
uöt32_t
)0x00001000Ë

	)

3037 
	#ADC_SQR1_SQ15_3
 ((
uöt32_t
)0x00002000Ë

	)

3038 
	#ADC_SQR1_SQ15_4
 ((
uöt32_t
)0x00004000Ë

	)

3040 
	#ADC_SQR1_SQ16
 ((
uöt32_t
)0x000F8000Ë

	)

3041 
	#ADC_SQR1_SQ16_0
 ((
uöt32_t
)0x00008000Ë

	)

3042 
	#ADC_SQR1_SQ16_1
 ((
uöt32_t
)0x00010000Ë

	)

3043 
	#ADC_SQR1_SQ16_2
 ((
uöt32_t
)0x00020000Ë

	)

3044 
	#ADC_SQR1_SQ16_3
 ((
uöt32_t
)0x00040000Ë

	)

3045 
	#ADC_SQR1_SQ16_4
 ((
uöt32_t
)0x00080000Ë

	)

3047 
	#ADC_SQR1_L
 ((
uöt32_t
)0x00F00000Ë

	)

3048 
	#ADC_SQR1_L_0
 ((
uöt32_t
)0x00100000Ë

	)

3049 
	#ADC_SQR1_L_1
 ((
uöt32_t
)0x00200000Ë

	)

3050 
	#ADC_SQR1_L_2
 ((
uöt32_t
)0x00400000Ë

	)

3051 
	#ADC_SQR1_L_3
 ((
uöt32_t
)0x00800000Ë

	)

3054 
	#ADC_SQR2_SQ7
 ((
uöt32_t
)0x0000001FË

	)

3055 
	#ADC_SQR2_SQ7_0
 ((
uöt32_t
)0x00000001Ë

	)

3056 
	#ADC_SQR2_SQ7_1
 ((
uöt32_t
)0x00000002Ë

	)

3057 
	#ADC_SQR2_SQ7_2
 ((
uöt32_t
)0x00000004Ë

	)

3058 
	#ADC_SQR2_SQ7_3
 ((
uöt32_t
)0x00000008Ë

	)

3059 
	#ADC_SQR2_SQ7_4
 ((
uöt32_t
)0x00000010Ë

	)

3061 
	#ADC_SQR2_SQ8
 ((
uöt32_t
)0x000003E0Ë

	)

3062 
	#ADC_SQR2_SQ8_0
 ((
uöt32_t
)0x00000020Ë

	)

3063 
	#ADC_SQR2_SQ8_1
 ((
uöt32_t
)0x00000040Ë

	)

3064 
	#ADC_SQR2_SQ8_2
 ((
uöt32_t
)0x00000080Ë

	)

3065 
	#ADC_SQR2_SQ8_3
 ((
uöt32_t
)0x00000100Ë

	)

3066 
	#ADC_SQR2_SQ8_4
 ((
uöt32_t
)0x00000200Ë

	)

3068 
	#ADC_SQR2_SQ9
 ((
uöt32_t
)0x00007C00Ë

	)

3069 
	#ADC_SQR2_SQ9_0
 ((
uöt32_t
)0x00000400Ë

	)

3070 
	#ADC_SQR2_SQ9_1
 ((
uöt32_t
)0x00000800Ë

	)

3071 
	#ADC_SQR2_SQ9_2
 ((
uöt32_t
)0x00001000Ë

	)

3072 
	#ADC_SQR2_SQ9_3
 ((
uöt32_t
)0x00002000Ë

	)

3073 
	#ADC_SQR2_SQ9_4
 ((
uöt32_t
)0x00004000Ë

	)

3075 
	#ADC_SQR2_SQ10
 ((
uöt32_t
)0x000F8000Ë

	)

3076 
	#ADC_SQR2_SQ10_0
 ((
uöt32_t
)0x00008000Ë

	)

3077 
	#ADC_SQR2_SQ10_1
 ((
uöt32_t
)0x00010000Ë

	)

3078 
	#ADC_SQR2_SQ10_2
 ((
uöt32_t
)0x00020000Ë

	)

3079 
	#ADC_SQR2_SQ10_3
 ((
uöt32_t
)0x00040000Ë

	)

3080 
	#ADC_SQR2_SQ10_4
 ((
uöt32_t
)0x00080000Ë

	)

3082 
	#ADC_SQR2_SQ11
 ((
uöt32_t
)0x01F00000Ë

	)

3083 
	#ADC_SQR2_SQ11_0
 ((
uöt32_t
)0x00100000Ë

	)

3084 
	#ADC_SQR2_SQ11_1
 ((
uöt32_t
)0x00200000Ë

	)

3085 
	#ADC_SQR2_SQ11_2
 ((
uöt32_t
)0x00400000Ë

	)

3086 
	#ADC_SQR2_SQ11_3
 ((
uöt32_t
)0x00800000Ë

	)

3087 
	#ADC_SQR2_SQ11_4
 ((
uöt32_t
)0x01000000Ë

	)

3089 
	#ADC_SQR2_SQ12
 ((
uöt32_t
)0x3E000000Ë

	)

3090 
	#ADC_SQR2_SQ12_0
 ((
uöt32_t
)0x02000000Ë

	)

3091 
	#ADC_SQR2_SQ12_1
 ((
uöt32_t
)0x04000000Ë

	)

3092 
	#ADC_SQR2_SQ12_2
 ((
uöt32_t
)0x08000000Ë

	)

3093 
	#ADC_SQR2_SQ12_3
 ((
uöt32_t
)0x10000000Ë

	)

3094 
	#ADC_SQR2_SQ12_4
 ((
uöt32_t
)0x20000000Ë

	)

3097 
	#ADC_SQR3_SQ1
 ((
uöt32_t
)0x0000001FË

	)

3098 
	#ADC_SQR3_SQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

3099 
	#ADC_SQR3_SQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

3100 
	#ADC_SQR3_SQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

3101 
	#ADC_SQR3_SQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

3102 
	#ADC_SQR3_SQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

3104 
	#ADC_SQR3_SQ2
 ((
uöt32_t
)0x000003E0Ë

	)

3105 
	#ADC_SQR3_SQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

3106 
	#ADC_SQR3_SQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

3107 
	#ADC_SQR3_SQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

3108 
	#ADC_SQR3_SQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

3109 
	#ADC_SQR3_SQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

3111 
	#ADC_SQR3_SQ3
 ((
uöt32_t
)0x00007C00Ë

	)

3112 
	#ADC_SQR3_SQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

3113 
	#ADC_SQR3_SQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

3114 
	#ADC_SQR3_SQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

3115 
	#ADC_SQR3_SQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

3116 
	#ADC_SQR3_SQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

3118 
	#ADC_SQR3_SQ4
 ((
uöt32_t
)0x000F8000Ë

	)

3119 
	#ADC_SQR3_SQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

3120 
	#ADC_SQR3_SQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

3121 
	#ADC_SQR3_SQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

3122 
	#ADC_SQR3_SQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

3123 
	#ADC_SQR3_SQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

3125 
	#ADC_SQR3_SQ5
 ((
uöt32_t
)0x01F00000Ë

	)

3126 
	#ADC_SQR3_SQ5_0
 ((
uöt32_t
)0x00100000Ë

	)

3127 
	#ADC_SQR3_SQ5_1
 ((
uöt32_t
)0x00200000Ë

	)

3128 
	#ADC_SQR3_SQ5_2
 ((
uöt32_t
)0x00400000Ë

	)

3129 
	#ADC_SQR3_SQ5_3
 ((
uöt32_t
)0x00800000Ë

	)

3130 
	#ADC_SQR3_SQ5_4
 ((
uöt32_t
)0x01000000Ë

	)

3132 
	#ADC_SQR3_SQ6
 ((
uöt32_t
)0x3E000000Ë

	)

3133 
	#ADC_SQR3_SQ6_0
 ((
uöt32_t
)0x02000000Ë

	)

3134 
	#ADC_SQR3_SQ6_1
 ((
uöt32_t
)0x04000000Ë

	)

3135 
	#ADC_SQR3_SQ6_2
 ((
uöt32_t
)0x08000000Ë

	)

3136 
	#ADC_SQR3_SQ6_3
 ((
uöt32_t
)0x10000000Ë

	)

3137 
	#ADC_SQR3_SQ6_4
 ((
uöt32_t
)0x20000000Ë

	)

3140 
	#ADC_JSQR_JSQ1
 ((
uöt32_t
)0x0000001FË

	)

3141 
	#ADC_JSQR_JSQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

3142 
	#ADC_JSQR_JSQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

3143 
	#ADC_JSQR_JSQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

3144 
	#ADC_JSQR_JSQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

3145 
	#ADC_JSQR_JSQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

3147 
	#ADC_JSQR_JSQ2
 ((
uöt32_t
)0x000003E0Ë

	)

3148 
	#ADC_JSQR_JSQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

3149 
	#ADC_JSQR_JSQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

3150 
	#ADC_JSQR_JSQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

3151 
	#ADC_JSQR_JSQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

3152 
	#ADC_JSQR_JSQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

3154 
	#ADC_JSQR_JSQ3
 ((
uöt32_t
)0x00007C00Ë

	)

3155 
	#ADC_JSQR_JSQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

3156 
	#ADC_JSQR_JSQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

3157 
	#ADC_JSQR_JSQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

3158 
	#ADC_JSQR_JSQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

3159 
	#ADC_JSQR_JSQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

3161 
	#ADC_JSQR_JSQ4
 ((
uöt32_t
)0x000F8000Ë

	)

3162 
	#ADC_JSQR_JSQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

3163 
	#ADC_JSQR_JSQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

3164 
	#ADC_JSQR_JSQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

3165 
	#ADC_JSQR_JSQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

3166 
	#ADC_JSQR_JSQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

3168 
	#ADC_JSQR_JL
 ((
uöt32_t
)0x00300000Ë

	)

3169 
	#ADC_JSQR_JL_0
 ((
uöt32_t
)0x00100000Ë

	)

3170 
	#ADC_JSQR_JL_1
 ((
uöt32_t
)0x00200000Ë

	)

3173 
	#ADC_JDR1_JDATA
 ((
uöt32_t
)0x0000FFFFË

	)

3176 
	#ADC_JDR2_JDATA
 ((
uöt32_t
)0x0000FFFFË

	)

3179 
	#ADC_JDR3_JDATA
 ((
uöt32_t
)0x0000FFFFË

	)

3182 
	#ADC_JDR4_JDATA
 ((
uöt32_t
)0x0000FFFFË

	)

3185 
	#ADC_DR_DATA
 ((
uöt32_t
)0x0000FFFFË

	)

3186 
	#ADC_DR_ADC2DATA
 ((
uöt32_t
)0xFFFF0000Ë

	)

3194 
	#DAC_CR_EN1
 ((
uöt32_t
)0x00000001Ë

	)

3195 
	#DAC_CR_BOFF1
 ((
uöt32_t
)0x00000002Ë

	)

3196 
	#DAC_CR_TEN1
 ((
uöt32_t
)0x00000004Ë

	)

3198 
	#DAC_CR_TSEL1
 ((
uöt32_t
)0x00000038Ë

	)

3199 
	#DAC_CR_TSEL1_0
 ((
uöt32_t
)0x00000008Ë

	)

3200 
	#DAC_CR_TSEL1_1
 ((
uöt32_t
)0x00000010Ë

	)

3201 
	#DAC_CR_TSEL1_2
 ((
uöt32_t
)0x00000020Ë

	)

3203 
	#DAC_CR_WAVE1
 ((
uöt32_t
)0x000000C0Ë

	)

3204 
	#DAC_CR_WAVE1_0
 ((
uöt32_t
)0x00000040Ë

	)

3205 
	#DAC_CR_WAVE1_1
 ((
uöt32_t
)0x00000080Ë

	)

3207 
	#DAC_CR_MAMP1
 ((
uöt32_t
)0x00000F00Ë

	)

3208 
	#DAC_CR_MAMP1_0
 ((
uöt32_t
)0x00000100Ë

	)

3209 
	#DAC_CR_MAMP1_1
 ((
uöt32_t
)0x00000200Ë

	)

3210 
	#DAC_CR_MAMP1_2
 ((
uöt32_t
)0x00000400Ë

	)

3211 
	#DAC_CR_MAMP1_3
 ((
uöt32_t
)0x00000800Ë

	)

3213 
	#DAC_CR_DMAEN1
 ((
uöt32_t
)0x00001000Ë

	)

3214 
	#DAC_CR_EN2
 ((
uöt32_t
)0x00010000Ë

	)

3215 
	#DAC_CR_BOFF2
 ((
uöt32_t
)0x00020000Ë

	)

3216 
	#DAC_CR_TEN2
 ((
uöt32_t
)0x00040000Ë

	)

3218 
	#DAC_CR_TSEL2
 ((
uöt32_t
)0x00380000Ë

	)

3219 
	#DAC_CR_TSEL2_0
 ((
uöt32_t
)0x00080000Ë

	)

3220 
	#DAC_CR_TSEL2_1
 ((
uöt32_t
)0x00100000Ë

	)

3221 
	#DAC_CR_TSEL2_2
 ((
uöt32_t
)0x00200000Ë

	)

3223 
	#DAC_CR_WAVE2
 ((
uöt32_t
)0x00C00000Ë

	)

3224 
	#DAC_CR_WAVE2_0
 ((
uöt32_t
)0x00400000Ë

	)

3225 
	#DAC_CR_WAVE2_1
 ((
uöt32_t
)0x00800000Ë

	)

3227 
	#DAC_CR_MAMP2
 ((
uöt32_t
)0x0F000000Ë

	)

3228 
	#DAC_CR_MAMP2_0
 ((
uöt32_t
)0x01000000Ë

	)

3229 
	#DAC_CR_MAMP2_1
 ((
uöt32_t
)0x02000000Ë

	)

3230 
	#DAC_CR_MAMP2_2
 ((
uöt32_t
)0x04000000Ë

	)

3231 
	#DAC_CR_MAMP2_3
 ((
uöt32_t
)0x08000000Ë

	)

3233 
	#DAC_CR_DMAEN2
 ((
uöt32_t
)0x10000000Ë

	)

3237 
	#DAC_SWTRIGR_SWTRIG1
 ((
uöt32_t
)0x00000001Ë

	)

3238 
	#DAC_SWTRIGR_SWTRIG2
 ((
uöt32_t
)0x00000002Ë

	)

3241 
	#DAC_DHR12R1_DACC1DHR
 ((
uöt32_t
)0x00000FFFË

	)

3244 
	#DAC_DHR12L1_DACC1DHR
 ((
uöt32_t
)0x0000FFF0Ë

	)

3247 
	#DAC_DHR8R1_DACC1DHR
 ((
uöt32_t
)0x000000FFË

	)

3250 
	#DAC_DHR12R2_DACC2DHR
 ((
uöt32_t
)0x00000FFFË

	)

3253 
	#DAC_DHR12L2_DACC2DHR
 ((
uöt32_t
)0x0000FFF0Ë

	)

3256 
	#DAC_DHR8R2_DACC2DHR
 ((
uöt32_t
)0x000000FFË

	)

3259 
	#DAC_DHR12RD_DACC1DHR
 ((
uöt32_t
)0x00000FFFË

	)

3260 
	#DAC_DHR12RD_DACC2DHR
 ((
uöt32_t
)0x0FFF0000Ë

	)

3263 
	#DAC_DHR12LD_DACC1DHR
 ((
uöt32_t
)0x0000FFF0Ë

	)

3264 
	#DAC_DHR12LD_DACC2DHR
 ((
uöt32_t
)0xFFF00000Ë

	)

3267 
	#DAC_DHR8RD_DACC1DHR
 ((
uöt32_t
)0x000000FFË

	)

3268 
	#DAC_DHR8RD_DACC2DHR
 ((
uöt32_t
)0x0000FF00Ë

	)

3271 
	#DAC_DOR1_DACC1DOR
 ((
uöt32_t
)0x00000FFFË

	)

3274 
	#DAC_DOR2_DACC2DOR
 ((
uöt32_t
)0x00000FFFË

	)

3284 
	#TIM_CR1_CEN
 ((
uöt32_t
)0x00000001Ë

	)

3285 
	#TIM_CR1_UDIS
 ((
uöt32_t
)0x00000002Ë

	)

3286 
	#TIM_CR1_URS
 ((
uöt32_t
)0x00000004Ë

	)

3287 
	#TIM_CR1_OPM
 ((
uöt32_t
)0x00000008Ë

	)

3288 
	#TIM_CR1_DIR
 ((
uöt32_t
)0x00000010Ë

	)

3290 
	#TIM_CR1_CMS
 ((
uöt32_t
)0x00000060Ë

	)

3291 
	#TIM_CR1_CMS_0
 ((
uöt32_t
)0x00000020Ë

	)

3292 
	#TIM_CR1_CMS_1
 ((
uöt32_t
)0x00000040Ë

	)

3294 
	#TIM_CR1_ARPE
 ((
uöt32_t
)0x00000080Ë

	)

3296 
	#TIM_CR1_CKD
 ((
uöt32_t
)0x00000300Ë

	)

3297 
	#TIM_CR1_CKD_0
 ((
uöt32_t
)0x00000100Ë

	)

3298 
	#TIM_CR1_CKD_1
 ((
uöt32_t
)0x00000200Ë

	)

3301 
	#TIM_CR2_CCPC
 ((
uöt32_t
)0x00000001Ë

	)

3302 
	#TIM_CR2_CCUS
 ((
uöt32_t
)0x00000004Ë

	)

3303 
	#TIM_CR2_CCDS
 ((
uöt32_t
)0x00000008Ë

	)

3305 
	#TIM_CR2_MMS
 ((
uöt32_t
)0x00000070Ë

	)

3306 
	#TIM_CR2_MMS_0
 ((
uöt32_t
)0x00000010Ë

	)

3307 
	#TIM_CR2_MMS_1
 ((
uöt32_t
)0x00000020Ë

	)

3308 
	#TIM_CR2_MMS_2
 ((
uöt32_t
)0x00000040Ë

	)

3310 
	#TIM_CR2_TI1S
 ((
uöt32_t
)0x00000080Ë

	)

3311 
	#TIM_CR2_OIS1
 ((
uöt32_t
)0x00000100Ë

	)

3312 
	#TIM_CR2_OIS1N
 ((
uöt32_t
)0x00000200Ë

	)

3313 
	#TIM_CR2_OIS2
 ((
uöt32_t
)0x00000400Ë

	)

3314 
	#TIM_CR2_OIS2N
 ((
uöt32_t
)0x00000800Ë

	)

3315 
	#TIM_CR2_OIS3
 ((
uöt32_t
)0x00001000Ë

	)

3316 
	#TIM_CR2_OIS3N
 ((
uöt32_t
)0x00002000Ë

	)

3317 
	#TIM_CR2_OIS4
 ((
uöt32_t
)0x00004000Ë

	)

3320 
	#TIM_SMCR_SMS
 ((
uöt32_t
)0x00000007Ë

	)

3321 
	#TIM_SMCR_SMS_0
 ((
uöt32_t
)0x00000001Ë

	)

3322 
	#TIM_SMCR_SMS_1
 ((
uöt32_t
)0x00000002Ë

	)

3323 
	#TIM_SMCR_SMS_2
 ((
uöt32_t
)0x00000004Ë

	)

3325 
	#TIM_SMCR_OCCS
 ((
uöt32_t
)0x00000008Ë

	)

3327 
	#TIM_SMCR_TS
 ((
uöt32_t
)0x00000070Ë

	)

3328 
	#TIM_SMCR_TS_0
 ((
uöt32_t
)0x00000010Ë

	)

3329 
	#TIM_SMCR_TS_1
 ((
uöt32_t
)0x00000020Ë

	)

3330 
	#TIM_SMCR_TS_2
 ((
uöt32_t
)0x00000040Ë

	)

3332 
	#TIM_SMCR_MSM
 ((
uöt32_t
)0x00000080Ë

	)

3334 
	#TIM_SMCR_ETF
 ((
uöt32_t
)0x00000F00Ë

	)

3335 
	#TIM_SMCR_ETF_0
 ((
uöt32_t
)0x00000100Ë

	)

3336 
	#TIM_SMCR_ETF_1
 ((
uöt32_t
)0x00000200Ë

	)

3337 
	#TIM_SMCR_ETF_2
 ((
uöt32_t
)0x00000400Ë

	)

3338 
	#TIM_SMCR_ETF_3
 ((
uöt32_t
)0x00000800Ë

	)

3340 
	#TIM_SMCR_ETPS
 ((
uöt32_t
)0x00003000Ë

	)

3341 
	#TIM_SMCR_ETPS_0
 ((
uöt32_t
)0x00001000Ë

	)

3342 
	#TIM_SMCR_ETPS_1
 ((
uöt32_t
)0x00002000Ë

	)

3344 
	#TIM_SMCR_ECE
 ((
uöt32_t
)0x00004000Ë

	)

3345 
	#TIM_SMCR_ETP
 ((
uöt32_t
)0x00008000Ë

	)

3348 
	#TIM_DIER_UIE
 ((
uöt32_t
)0x00000001Ë

	)

3349 
	#TIM_DIER_CC1IE
 ((
uöt32_t
)0x00000002Ë

	)

3350 
	#TIM_DIER_CC2IE
 ((
uöt32_t
)0x00000004Ë

	)

3351 
	#TIM_DIER_CC3IE
 ((
uöt32_t
)0x00000008Ë

	)

3352 
	#TIM_DIER_CC4IE
 ((
uöt32_t
)0x00000010Ë

	)

3353 
	#TIM_DIER_COMIE
 ((
uöt32_t
)0x00000020Ë

	)

3354 
	#TIM_DIER_TIE
 ((
uöt32_t
)0x00000040Ë

	)

3355 
	#TIM_DIER_BIE
 ((
uöt32_t
)0x00000080Ë

	)

3356 
	#TIM_DIER_UDE
 ((
uöt32_t
)0x00000100Ë

	)

3357 
	#TIM_DIER_CC1DE
 ((
uöt32_t
)0x00000200Ë

	)

3358 
	#TIM_DIER_CC2DE
 ((
uöt32_t
)0x00000400Ë

	)

3359 
	#TIM_DIER_CC3DE
 ((
uöt32_t
)0x00000800Ë

	)

3360 
	#TIM_DIER_CC4DE
 ((
uöt32_t
)0x00001000Ë

	)

3361 
	#TIM_DIER_COMDE
 ((
uöt32_t
)0x00002000Ë

	)

3362 
	#TIM_DIER_TDE
 ((
uöt32_t
)0x00004000Ë

	)

3365 
	#TIM_SR_UIF
 ((
uöt32_t
)0x00000001Ë

	)

3366 
	#TIM_SR_CC1IF
 ((
uöt32_t
)0x00000002Ë

	)

3367 
	#TIM_SR_CC2IF
 ((
uöt32_t
)0x00000004Ë

	)

3368 
	#TIM_SR_CC3IF
 ((
uöt32_t
)0x00000008Ë

	)

3369 
	#TIM_SR_CC4IF
 ((
uöt32_t
)0x00000010Ë

	)

3370 
	#TIM_SR_COMIF
 ((
uöt32_t
)0x00000020Ë

	)

3371 
	#TIM_SR_TIF
 ((
uöt32_t
)0x00000040Ë

	)

3372 
	#TIM_SR_BIF
 ((
uöt32_t
)0x00000080Ë

	)

3373 
	#TIM_SR_CC1OF
 ((
uöt32_t
)0x00000200Ë

	)

3374 
	#TIM_SR_CC2OF
 ((
uöt32_t
)0x00000400Ë

	)

3375 
	#TIM_SR_CC3OF
 ((
uöt32_t
)0x00000800Ë

	)

3376 
	#TIM_SR_CC4OF
 ((
uöt32_t
)0x00001000Ë

	)

3379 
	#TIM_EGR_UG
 ((
uöt32_t
)0x00000001Ë

	)

3380 
	#TIM_EGR_CC1G
 ((
uöt32_t
)0x00000002Ë

	)

3381 
	#TIM_EGR_CC2G
 ((
uöt32_t
)0x00000004Ë

	)

3382 
	#TIM_EGR_CC3G
 ((
uöt32_t
)0x00000008Ë

	)

3383 
	#TIM_EGR_CC4G
 ((
uöt32_t
)0x00000010Ë

	)

3384 
	#TIM_EGR_COMG
 ((
uöt32_t
)0x00000020Ë

	)

3385 
	#TIM_EGR_TG
 ((
uöt32_t
)0x00000040Ë

	)

3386 
	#TIM_EGR_BG
 ((
uöt32_t
)0x00000080Ë

	)

3389 
	#TIM_CCMR1_CC1S
 ((
uöt32_t
)0x00000003Ë

	)

3390 
	#TIM_CCMR1_CC1S_0
 ((
uöt32_t
)0x00000001Ë

	)

3391 
	#TIM_CCMR1_CC1S_1
 ((
uöt32_t
)0x00000002Ë

	)

3393 
	#TIM_CCMR1_OC1FE
 ((
uöt32_t
)0x00000004Ë

	)

3394 
	#TIM_CCMR1_OC1PE
 ((
uöt32_t
)0x00000008Ë

	)

3396 
	#TIM_CCMR1_OC1M
 ((
uöt32_t
)0x00000070Ë

	)

3397 
	#TIM_CCMR1_OC1M_0
 ((
uöt32_t
)0x00000010Ë

	)

3398 
	#TIM_CCMR1_OC1M_1
 ((
uöt32_t
)0x00000020Ë

	)

3399 
	#TIM_CCMR1_OC1M_2
 ((
uöt32_t
)0x00000040Ë

	)

3401 
	#TIM_CCMR1_OC1CE
 ((
uöt32_t
)0x00000080Ë

	)

3403 
	#TIM_CCMR1_CC2S
 ((
uöt32_t
)0x00000300Ë

	)

3404 
	#TIM_CCMR1_CC2S_0
 ((
uöt32_t
)0x00000100Ë

	)

3405 
	#TIM_CCMR1_CC2S_1
 ((
uöt32_t
)0x00000200Ë

	)

3407 
	#TIM_CCMR1_OC2FE
 ((
uöt32_t
)0x00000400Ë

	)

3408 
	#TIM_CCMR1_OC2PE
 ((
uöt32_t
)0x00000800Ë

	)

3410 
	#TIM_CCMR1_OC2M
 ((
uöt32_t
)0x00007000Ë

	)

3411 
	#TIM_CCMR1_OC2M_0
 ((
uöt32_t
)0x00001000Ë

	)

3412 
	#TIM_CCMR1_OC2M_1
 ((
uöt32_t
)0x00002000Ë

	)

3413 
	#TIM_CCMR1_OC2M_2
 ((
uöt32_t
)0x00004000Ë

	)

3415 
	#TIM_CCMR1_OC2CE
 ((
uöt32_t
)0x00008000Ë

	)

3419 
	#TIM_CCMR1_IC1PSC
 ((
uöt32_t
)0x0000000CË

	)

3420 
	#TIM_CCMR1_IC1PSC_0
 ((
uöt32_t
)0x00000004Ë

	)

3421 
	#TIM_CCMR1_IC1PSC_1
 ((
uöt32_t
)0x00000008Ë

	)

3423 
	#TIM_CCMR1_IC1F
 ((
uöt32_t
)0x000000F0Ë

	)

3424 
	#TIM_CCMR1_IC1F_0
 ((
uöt32_t
)0x00000010Ë

	)

3425 
	#TIM_CCMR1_IC1F_1
 ((
uöt32_t
)0x00000020Ë

	)

3426 
	#TIM_CCMR1_IC1F_2
 ((
uöt32_t
)0x00000040Ë

	)

3427 
	#TIM_CCMR1_IC1F_3
 ((
uöt32_t
)0x00000080Ë

	)

3429 
	#TIM_CCMR1_IC2PSC
 ((
uöt32_t
)0x00000C00Ë

	)

3430 
	#TIM_CCMR1_IC2PSC_0
 ((
uöt32_t
)0x00000400Ë

	)

3431 
	#TIM_CCMR1_IC2PSC_1
 ((
uöt32_t
)0x00000800Ë

	)

3433 
	#TIM_CCMR1_IC2F
 ((
uöt32_t
)0x0000F000Ë

	)

3434 
	#TIM_CCMR1_IC2F_0
 ((
uöt32_t
)0x00001000Ë

	)

3435 
	#TIM_CCMR1_IC2F_1
 ((
uöt32_t
)0x00002000Ë

	)

3436 
	#TIM_CCMR1_IC2F_2
 ((
uöt32_t
)0x00004000Ë

	)

3437 
	#TIM_CCMR1_IC2F_3
 ((
uöt32_t
)0x00008000Ë

	)

3440 
	#TIM_CCMR2_CC3S
 ((
uöt32_t
)0x00000003Ë

	)

3441 
	#TIM_CCMR2_CC3S_0
 ((
uöt32_t
)0x00000001Ë

	)

3442 
	#TIM_CCMR2_CC3S_1
 ((
uöt32_t
)0x00000002Ë

	)

3444 
	#TIM_CCMR2_OC3FE
 ((
uöt32_t
)0x00000004Ë

	)

3445 
	#TIM_CCMR2_OC3PE
 ((
uöt32_t
)0x00000008Ë

	)

3447 
	#TIM_CCMR2_OC3M
 ((
uöt32_t
)0x00000070Ë

	)

3448 
	#TIM_CCMR2_OC3M_0
 ((
uöt32_t
)0x00000010Ë

	)

3449 
	#TIM_CCMR2_OC3M_1
 ((
uöt32_t
)0x00000020Ë

	)

3450 
	#TIM_CCMR2_OC3M_2
 ((
uöt32_t
)0x00000040Ë

	)

3452 
	#TIM_CCMR2_OC3CE
 ((
uöt32_t
)0x00000080Ë

	)

3454 
	#TIM_CCMR2_CC4S
 ((
uöt32_t
)0x00000300Ë

	)

3455 
	#TIM_CCMR2_CC4S_0
 ((
uöt32_t
)0x00000100Ë

	)

3456 
	#TIM_CCMR2_CC4S_1
 ((
uöt32_t
)0x00000200Ë

	)

3458 
	#TIM_CCMR2_OC4FE
 ((
uöt32_t
)0x00000400Ë

	)

3459 
	#TIM_CCMR2_OC4PE
 ((
uöt32_t
)0x00000800Ë

	)

3461 
	#TIM_CCMR2_OC4M
 ((
uöt32_t
)0x00007000Ë

	)

3462 
	#TIM_CCMR2_OC4M_0
 ((
uöt32_t
)0x00001000Ë

	)

3463 
	#TIM_CCMR2_OC4M_1
 ((
uöt32_t
)0x00002000Ë

	)

3464 
	#TIM_CCMR2_OC4M_2
 ((
uöt32_t
)0x00004000Ë

	)

3466 
	#TIM_CCMR2_OC4CE
 ((
uöt32_t
)0x00008000Ë

	)

3470 
	#TIM_CCMR2_IC3PSC
 ((
uöt32_t
)0x0000000CË

	)

3471 
	#TIM_CCMR2_IC3PSC_0
 ((
uöt32_t
)0x00000004Ë

	)

3472 
	#TIM_CCMR2_IC3PSC_1
 ((
uöt32_t
)0x00000008Ë

	)

3474 
	#TIM_CCMR2_IC3F
 ((
uöt32_t
)0x000000F0Ë

	)

3475 
	#TIM_CCMR2_IC3F_0
 ((
uöt32_t
)0x00000010Ë

	)

3476 
	#TIM_CCMR2_IC3F_1
 ((
uöt32_t
)0x00000020Ë

	)

3477 
	#TIM_CCMR2_IC3F_2
 ((
uöt32_t
)0x00000040Ë

	)

3478 
	#TIM_CCMR2_IC3F_3
 ((
uöt32_t
)0x00000080Ë

	)

3480 
	#TIM_CCMR2_IC4PSC
 ((
uöt32_t
)0x00000C00Ë

	)

3481 
	#TIM_CCMR2_IC4PSC_0
 ((
uöt32_t
)0x00000400Ë

	)

3482 
	#TIM_CCMR2_IC4PSC_1
 ((
uöt32_t
)0x00000800Ë

	)

3484 
	#TIM_CCMR2_IC4F
 ((
uöt32_t
)0x0000F000Ë

	)

3485 
	#TIM_CCMR2_IC4F_0
 ((
uöt32_t
)0x00001000Ë

	)

3486 
	#TIM_CCMR2_IC4F_1
 ((
uöt32_t
)0x00002000Ë

	)

3487 
	#TIM_CCMR2_IC4F_2
 ((
uöt32_t
)0x00004000Ë

	)

3488 
	#TIM_CCMR2_IC4F_3
 ((
uöt32_t
)0x00008000Ë

	)

3491 
	#TIM_CCER_CC1E
 ((
uöt32_t
)0x00000001Ë

	)

3492 
	#TIM_CCER_CC1P
 ((
uöt32_t
)0x00000002Ë

	)

3493 
	#TIM_CCER_CC1NE
 ((
uöt32_t
)0x00000004Ë

	)

3494 
	#TIM_CCER_CC1NP
 ((
uöt32_t
)0x00000008Ë

	)

3495 
	#TIM_CCER_CC2E
 ((
uöt32_t
)0x00000010Ë

	)

3496 
	#TIM_CCER_CC2P
 ((
uöt32_t
)0x00000020Ë

	)

3497 
	#TIM_CCER_CC2NE
 ((
uöt32_t
)0x00000040Ë

	)

3498 
	#TIM_CCER_CC2NP
 ((
uöt32_t
)0x00000080Ë

	)

3499 
	#TIM_CCER_CC3E
 ((
uöt32_t
)0x00000100Ë

	)

3500 
	#TIM_CCER_CC3P
 ((
uöt32_t
)0x00000200Ë

	)

3501 
	#TIM_CCER_CC3NE
 ((
uöt32_t
)0x00000400Ë

	)

3502 
	#TIM_CCER_CC3NP
 ((
uöt32_t
)0x00000800Ë

	)

3503 
	#TIM_CCER_CC4E
 ((
uöt32_t
)0x00001000Ë

	)

3504 
	#TIM_CCER_CC4P
 ((
uöt32_t
)0x00002000Ë

	)

3505 
	#TIM_CCER_CC4NP
 ((
uöt32_t
)0x00008000Ë

	)

3508 
	#TIM_CNT_CNT
 ((
uöt32_t
)0xFFFFFFFFË

	)

3511 
	#TIM_PSC_PSC
 ((
uöt32_t
)0x0000FFFFË

	)

3514 
	#TIM_ARR_ARR
 ((
uöt32_t
)0xFFFFFFFFË

	)

3517 
	#TIM_RCR_REP
 ((
uöt32_t
)0x000000FFË

	)

3520 
	#TIM_CCR1_CCR1
 ((
uöt32_t
)0x0000FFFFË

	)

3523 
	#TIM_CCR2_CCR2
 ((
uöt32_t
)0x0000FFFFË

	)

3526 
	#TIM_CCR3_CCR3
 ((
uöt32_t
)0x0000FFFFË

	)

3529 
	#TIM_CCR4_CCR4
 ((
uöt32_t
)0x0000FFFFË

	)

3532 
	#TIM_BDTR_DTG
 ((
uöt32_t
)0x000000FFË

	)

3533 
	#TIM_BDTR_DTG_0
 ((
uöt32_t
)0x00000001Ë

	)

3534 
	#TIM_BDTR_DTG_1
 ((
uöt32_t
)0x00000002Ë

	)

3535 
	#TIM_BDTR_DTG_2
 ((
uöt32_t
)0x00000004Ë

	)

3536 
	#TIM_BDTR_DTG_3
 ((
uöt32_t
)0x00000008Ë

	)

3537 
	#TIM_BDTR_DTG_4
 ((
uöt32_t
)0x00000010Ë

	)

3538 
	#TIM_BDTR_DTG_5
 ((
uöt32_t
)0x00000020Ë

	)

3539 
	#TIM_BDTR_DTG_6
 ((
uöt32_t
)0x00000040Ë

	)

3540 
	#TIM_BDTR_DTG_7
 ((
uöt32_t
)0x00000080Ë

	)

3542 
	#TIM_BDTR_LOCK
 ((
uöt32_t
)0x00000300Ë

	)

3543 
	#TIM_BDTR_LOCK_0
 ((
uöt32_t
)0x00000100Ë

	)

3544 
	#TIM_BDTR_LOCK_1
 ((
uöt32_t
)0x00000200Ë

	)

3546 
	#TIM_BDTR_OSSI
 ((
uöt32_t
)0x00000400Ë

	)

3547 
	#TIM_BDTR_OSSR
 ((
uöt32_t
)0x00000800Ë

	)

3548 
	#TIM_BDTR_BKE
 ((
uöt32_t
)0x00001000Ë

	)

3549 
	#TIM_BDTR_BKP
 ((
uöt32_t
)0x00002000Ë

	)

3550 
	#TIM_BDTR_AOE
 ((
uöt32_t
)0x00004000Ë

	)

3551 
	#TIM_BDTR_MOE
 ((
uöt32_t
)0x00008000Ë

	)

3554 
	#TIM_DCR_DBA
 ((
uöt32_t
)0x0000001FË

	)

3555 
	#TIM_DCR_DBA_0
 ((
uöt32_t
)0x00000001Ë

	)

3556 
	#TIM_DCR_DBA_1
 ((
uöt32_t
)0x00000002Ë

	)

3557 
	#TIM_DCR_DBA_2
 ((
uöt32_t
)0x00000004Ë

	)

3558 
	#TIM_DCR_DBA_3
 ((
uöt32_t
)0x00000008Ë

	)

3559 
	#TIM_DCR_DBA_4
 ((
uöt32_t
)0x00000010Ë

	)

3561 
	#TIM_DCR_DBL
 ((
uöt32_t
)0x00001F00Ë

	)

3562 
	#TIM_DCR_DBL_0
 ((
uöt32_t
)0x00000100Ë

	)

3563 
	#TIM_DCR_DBL_1
 ((
uöt32_t
)0x00000200Ë

	)

3564 
	#TIM_DCR_DBL_2
 ((
uöt32_t
)0x00000400Ë

	)

3565 
	#TIM_DCR_DBL_3
 ((
uöt32_t
)0x00000800Ë

	)

3566 
	#TIM_DCR_DBL_4
 ((
uöt32_t
)0x00001000Ë

	)

3569 
	#TIM_DMAR_DMAB
 ((
uöt32_t
)0x0000FFFFË

	)

3580 
	#RTC_CRH_SECIE
 ((
uöt32_t
)0x00000001Ë

	)

3581 
	#RTC_CRH_ALRIE
 ((
uöt32_t
)0x00000002Ë

	)

3582 
	#RTC_CRH_OWIE
 ((
uöt32_t
)0x00000004Ë

	)

3585 
	#RTC_CRL_SECF
 ((
uöt32_t
)0x00000001Ë

	)

3586 
	#RTC_CRL_ALRF
 ((
uöt32_t
)0x00000002Ë

	)

3587 
	#RTC_CRL_OWF
 ((
uöt32_t
)0x00000004Ë

	)

3588 
	#RTC_CRL_RSF
 ((
uöt32_t
)0x00000008Ë

	)

3589 
	#RTC_CRL_CNF
 ((
uöt32_t
)0x00000010Ë

	)

3590 
	#RTC_CRL_RTOFF
 ((
uöt32_t
)0x00000020Ë

	)

3593 
	#RTC_PRLH_PRL
 ((
uöt32_t
)0x0000000FË

	)

3596 
	#RTC_PRLL_PRL
 ((
uöt32_t
)0x0000FFFFË

	)

3599 
	#RTC_DIVH_RTC_DIV
 ((
uöt32_t
)0x0000000FË

	)

3602 
	#RTC_DIVL_RTC_DIV
 ((
uöt32_t
)0x0000FFFFË

	)

3605 
	#RTC_CNTH_RTC_CNT
 ((
uöt32_t
)0x0000FFFFË

	)

3608 
	#RTC_CNTL_RTC_CNT
 ((
uöt32_t
)0x0000FFFFË

	)

3611 
	#RTC_ALRH_RTC_ALR
 ((
uöt32_t
)0x0000FFFFË

	)

3614 
	#RTC_ALRL_RTC_ALR
 ((
uöt32_t
)0x0000FFFFË

	)

3623 
	#IWDG_KR_KEY
 ((
uöt32_t
)0x0000FFFFË

	)

3626 
	#IWDG_PR_PR
 ((
uöt32_t
)0x00000007Ë

	)

3627 
	#IWDG_PR_PR_0
 ((
uöt32_t
)0x00000001Ë

	)

3628 
	#IWDG_PR_PR_1
 ((
uöt32_t
)0x00000002Ë

	)

3629 
	#IWDG_PR_PR_2
 ((
uöt32_t
)0x00000004Ë

	)

3632 
	#IWDG_RLR_RL
 ((
uöt32_t
)0x00000FFFË

	)

3635 
	#IWDG_SR_PVU
 ((
uöt32_t
)0x00000001Ë

	)

3636 
	#IWDG_SR_RVU
 ((
uöt32_t
)0x00000002Ë

	)

3645 
	#WWDG_CR_T
 ((
uöt32_t
)0x0000007FË

	)

3646 
	#WWDG_CR_T_0
 ((
uöt32_t
)0x00000001Ë

	)

3647 
	#WWDG_CR_T_1
 ((
uöt32_t
)0x00000002Ë

	)

3648 
	#WWDG_CR_T_2
 ((
uöt32_t
)0x00000004Ë

	)

3649 
	#WWDG_CR_T_3
 ((
uöt32_t
)0x00000008Ë

	)

3650 
	#WWDG_CR_T_4
 ((
uöt32_t
)0x00000010Ë

	)

3651 
	#WWDG_CR_T_5
 ((
uöt32_t
)0x00000020Ë

	)

3652 
	#WWDG_CR_T_6
 ((
uöt32_t
)0x00000040Ë

	)

3655 
	#WWDG_CR_T0
 
WWDG_CR_T_0


	)

3656 
	#WWDG_CR_T1
 
WWDG_CR_T_1


	)

3657 
	#WWDG_CR_T2
 
WWDG_CR_T_2


	)

3658 
	#WWDG_CR_T3
 
WWDG_CR_T_3


	)

3659 
	#WWDG_CR_T4
 
WWDG_CR_T_4


	)

3660 
	#WWDG_CR_T5
 
WWDG_CR_T_5


	)

3661 
	#WWDG_CR_T6
 
WWDG_CR_T_6


	)

3663 
	#WWDG_CR_WDGA
 ((
uöt32_t
)0x00000080Ë

	)

3666 
	#WWDG_CFR_W
 ((
uöt32_t
)0x0000007FË

	)

3667 
	#WWDG_CFR_W_0
 ((
uöt32_t
)0x00000001Ë

	)

3668 
	#WWDG_CFR_W_1
 ((
uöt32_t
)0x00000002Ë

	)

3669 
	#WWDG_CFR_W_2
 ((
uöt32_t
)0x00000004Ë

	)

3670 
	#WWDG_CFR_W_3
 ((
uöt32_t
)0x00000008Ë

	)

3671 
	#WWDG_CFR_W_4
 ((
uöt32_t
)0x00000010Ë

	)

3672 
	#WWDG_CFR_W_5
 ((
uöt32_t
)0x00000020Ë

	)

3673 
	#WWDG_CFR_W_6
 ((
uöt32_t
)0x00000040Ë

	)

3676 
	#WWDG_CFR_W0
 
WWDG_CFR_W_0


	)

3677 
	#WWDG_CFR_W1
 
WWDG_CFR_W_1


	)

3678 
	#WWDG_CFR_W2
 
WWDG_CFR_W_2


	)

3679 
	#WWDG_CFR_W3
 
WWDG_CFR_W_3


	)

3680 
	#WWDG_CFR_W4
 
WWDG_CFR_W_4


	)

3681 
	#WWDG_CFR_W5
 
WWDG_CFR_W_5


	)

3682 
	#WWDG_CFR_W6
 
WWDG_CFR_W_6


	)

3684 
	#WWDG_CFR_WDGTB
 ((
uöt32_t
)0x00000180Ë

	)

3685 
	#WWDG_CFR_WDGTB_0
 ((
uöt32_t
)0x00000080Ë

	)

3686 
	#WWDG_CFR_WDGTB_1
 ((
uöt32_t
)0x00000100Ë

	)

3689 
	#WWDG_CFR_WDGTB0
 
WWDG_CFR_WDGTB_0


	)

3690 
	#WWDG_CFR_WDGTB1
 
WWDG_CFR_WDGTB_1


	)

3692 
	#WWDG_CFR_EWI
 ((
uöt32_t
)0x00000200Ë

	)

3695 
	#WWDG_SR_EWIF
 ((
uöt32_t
)0x00000001Ë

	)

3705 
	#SDIO_POWER_PWRCTRL
 ((
uöt32_t
)0x03Ë

	)

3706 
	#SDIO_POWER_PWRCTRL_0
 ((
uöt32_t
)0x01Ë

	)

3707 
	#SDIO_POWER_PWRCTRL_1
 ((
uöt32_t
)0x02Ë

	)

3710 
	#SDIO_CLKCR_CLKDIV
 ((
uöt32_t
)0x00FFË

	)

3711 
	#SDIO_CLKCR_CLKEN
 ((
uöt32_t
)0x0100Ë

	)

3712 
	#SDIO_CLKCR_PWRSAV
 ((
uöt32_t
)0x0200Ë

	)

3713 
	#SDIO_CLKCR_BYPASS
 ((
uöt32_t
)0x0400Ë

	)

3715 
	#SDIO_CLKCR_WIDBUS
 ((
uöt32_t
)0x1800Ë

	)

3716 
	#SDIO_CLKCR_WIDBUS_0
 ((
uöt32_t
)0x0800Ë

	)

3717 
	#SDIO_CLKCR_WIDBUS_1
 ((
uöt32_t
)0x1000Ë

	)

3719 
	#SDIO_CLKCR_NEGEDGE
 ((
uöt32_t
)0x2000Ë

	)

3720 
	#SDIO_CLKCR_HWFC_EN
 ((
uöt32_t
)0x4000Ë

	)

3723 
	#SDIO_ARG_CMDARG
 ((
uöt32_t
)0xFFFFFFFFË

	)

3726 
	#SDIO_CMD_CMDINDEX
 ((
uöt32_t
)0x003FË

	)

3728 
	#SDIO_CMD_WAITRESP
 ((
uöt32_t
)0x00C0Ë

	)

3729 
	#SDIO_CMD_WAITRESP_0
 ((
uöt32_t
)0x0040Ë

	)

3730 
	#SDIO_CMD_WAITRESP_1
 ((
uöt32_t
)0x0080Ë

	)

3732 
	#SDIO_CMD_WAITINT
 ((
uöt32_t
)0x0100Ë

	)

3733 
	#SDIO_CMD_WAITPEND
 ((
uöt32_t
)0x0200Ë

	)

3734 
	#SDIO_CMD_CPSMEN
 ((
uöt32_t
)0x0400Ë

	)

3735 
	#SDIO_CMD_SDIOSUSPEND
 ((
uöt32_t
)0x0800Ë

	)

3736 
	#SDIO_CMD_ENCMDCOMPL
 ((
uöt32_t
)0x1000Ë

	)

3737 
	#SDIO_CMD_NIEN
 ((
uöt32_t
)0x2000Ë

	)

3738 
	#SDIO_CMD_CEATACMD
 ((
uöt32_t
)0x4000Ë

	)

3741 
	#SDIO_RESPCMD_RESPCMD
 ((
uöt32_t
)0x3FË

	)

3744 
	#SDIO_RESP0_CARDSTATUS0
 ((
uöt32_t
)0xFFFFFFFFË

	)

3747 
	#SDIO_RESP1_CARDSTATUS1
 ((
uöt32_t
)0xFFFFFFFFË

	)

3750 
	#SDIO_RESP2_CARDSTATUS2
 ((
uöt32_t
)0xFFFFFFFFË

	)

3753 
	#SDIO_RESP3_CARDSTATUS3
 ((
uöt32_t
)0xFFFFFFFFË

	)

3756 
	#SDIO_RESP4_CARDSTATUS4
 ((
uöt32_t
)0xFFFFFFFFË

	)

3759 
	#SDIO_DTIMER_DATATIME
 ((
uöt32_t
)0xFFFFFFFFË

	)

3762 
	#SDIO_DLEN_DATALENGTH
 ((
uöt32_t
)0x01FFFFFFË

	)

3765 
	#SDIO_DCTRL_DTEN
 ((
uöt32_t
)0x0001Ë

	)

3766 
	#SDIO_DCTRL_DTDIR
 ((
uöt32_t
)0x0002Ë

	)

3767 
	#SDIO_DCTRL_DTMODE
 ((
uöt32_t
)0x0004Ë

	)

3768 
	#SDIO_DCTRL_DMAEN
 ((
uöt32_t
)0x0008Ë

	)

3770 
	#SDIO_DCTRL_DBLOCKSIZE
 ((
uöt32_t
)0x00F0Ë

	)

3771 
	#SDIO_DCTRL_DBLOCKSIZE_0
 ((
uöt32_t
)0x0010Ë

	)

3772 
	#SDIO_DCTRL_DBLOCKSIZE_1
 ((
uöt32_t
)0x0020Ë

	)

3773 
	#SDIO_DCTRL_DBLOCKSIZE_2
 ((
uöt32_t
)0x0040Ë

	)

3774 
	#SDIO_DCTRL_DBLOCKSIZE_3
 ((
uöt32_t
)0x0080Ë

	)

3776 
	#SDIO_DCTRL_RWSTART
 ((
uöt32_t
)0x0100Ë

	)

3777 
	#SDIO_DCTRL_RWSTOP
 ((
uöt32_t
)0x0200Ë

	)

3778 
	#SDIO_DCTRL_RWMOD
 ((
uöt32_t
)0x0400Ë

	)

3779 
	#SDIO_DCTRL_SDIOEN
 ((
uöt32_t
)0x0800Ë

	)

3782 
	#SDIO_DCOUNT_DATACOUNT
 ((
uöt32_t
)0x01FFFFFFË

	)

3785 
	#SDIO_STA_CCRCFAIL
 ((
uöt32_t
)0x00000001Ë

	)

3786 
	#SDIO_STA_DCRCFAIL
 ((
uöt32_t
)0x00000002Ë

	)

3787 
	#SDIO_STA_CTIMEOUT
 ((
uöt32_t
)0x00000004Ë

	)

3788 
	#SDIO_STA_DTIMEOUT
 ((
uöt32_t
)0x00000008Ë

	)

3789 
	#SDIO_STA_TXUNDERR
 ((
uöt32_t
)0x00000010Ë

	)

3790 
	#SDIO_STA_RXOVERR
 ((
uöt32_t
)0x00000020Ë

	)

3791 
	#SDIO_STA_CMDREND
 ((
uöt32_t
)0x00000040Ë

	)

3792 
	#SDIO_STA_CMDSENT
 ((
uöt32_t
)0x00000080Ë

	)

3793 
	#SDIO_STA_DATAEND
 ((
uöt32_t
)0x00000100Ë

	)

3794 
	#SDIO_STA_STBITERR
 ((
uöt32_t
)0x00000200Ë

	)

3795 
	#SDIO_STA_DBCKEND
 ((
uöt32_t
)0x00000400Ë

	)

3796 
	#SDIO_STA_CMDACT
 ((
uöt32_t
)0x00000800Ë

	)

3797 
	#SDIO_STA_TXACT
 ((
uöt32_t
)0x00001000Ë

	)

3798 
	#SDIO_STA_RXACT
 ((
uöt32_t
)0x00002000Ë

	)

3799 
	#SDIO_STA_TXFIFOHE
 ((
uöt32_t
)0x00004000Ë

	)

3800 
	#SDIO_STA_RXFIFOHF
 ((
uöt32_t
)0x00008000Ë

	)

3801 
	#SDIO_STA_TXFIFOF
 ((
uöt32_t
)0x00010000Ë

	)

3802 
	#SDIO_STA_RXFIFOF
 ((
uöt32_t
)0x00020000Ë

	)

3803 
	#SDIO_STA_TXFIFOE
 ((
uöt32_t
)0x00040000Ë

	)

3804 
	#SDIO_STA_RXFIFOE
 ((
uöt32_t
)0x00080000Ë

	)

3805 
	#SDIO_STA_TXDAVL
 ((
uöt32_t
)0x00100000Ë

	)

3806 
	#SDIO_STA_RXDAVL
 ((
uöt32_t
)0x00200000Ë

	)

3807 
	#SDIO_STA_SDIOIT
 ((
uöt32_t
)0x00400000Ë

	)

3808 
	#SDIO_STA_CEATAEND
 ((
uöt32_t
)0x00800000Ë

	)

3811 
	#SDIO_ICR_CCRCFAILC
 ((
uöt32_t
)0x00000001Ë

	)

3812 
	#SDIO_ICR_DCRCFAILC
 ((
uöt32_t
)0x00000002Ë

	)

3813 
	#SDIO_ICR_CTIMEOUTC
 ((
uöt32_t
)0x00000004Ë

	)

3814 
	#SDIO_ICR_DTIMEOUTC
 ((
uöt32_t
)0x00000008Ë

	)

3815 
	#SDIO_ICR_TXUNDERRC
 ((
uöt32_t
)0x00000010Ë

	)

3816 
	#SDIO_ICR_RXOVERRC
 ((
uöt32_t
)0x00000020Ë

	)

3817 
	#SDIO_ICR_CMDRENDC
 ((
uöt32_t
)0x00000040Ë

	)

3818 
	#SDIO_ICR_CMDSENTC
 ((
uöt32_t
)0x00000080Ë

	)

3819 
	#SDIO_ICR_DATAENDC
 ((
uöt32_t
)0x00000100Ë

	)

3820 
	#SDIO_ICR_STBITERRC
 ((
uöt32_t
)0x00000200Ë

	)

3821 
	#SDIO_ICR_DBCKENDC
 ((
uöt32_t
)0x00000400Ë

	)

3822 
	#SDIO_ICR_SDIOITC
 ((
uöt32_t
)0x00400000Ë

	)

3823 
	#SDIO_ICR_CEATAENDC
 ((
uöt32_t
)0x00800000Ë

	)

3826 
	#SDIO_MASK_CCRCFAILIE
 ((
uöt32_t
)0x00000001Ë

	)

3827 
	#SDIO_MASK_DCRCFAILIE
 ((
uöt32_t
)0x00000002Ë

	)

3828 
	#SDIO_MASK_CTIMEOUTIE
 ((
uöt32_t
)0x00000004Ë

	)

3829 
	#SDIO_MASK_DTIMEOUTIE
 ((
uöt32_t
)0x00000008Ë

	)

3830 
	#SDIO_MASK_TXUNDERRIE
 ((
uöt32_t
)0x00000010Ë

	)

3831 
	#SDIO_MASK_RXOVERRIE
 ((
uöt32_t
)0x00000020Ë

	)

3832 
	#SDIO_MASK_CMDRENDIE
 ((
uöt32_t
)0x00000040Ë

	)

3833 
	#SDIO_MASK_CMDSENTIE
 ((
uöt32_t
)0x00000080Ë

	)

3834 
	#SDIO_MASK_DATAENDIE
 ((
uöt32_t
)0x00000100Ë

	)

3835 
	#SDIO_MASK_STBITERRIE
 ((
uöt32_t
)0x00000200Ë

	)

3836 
	#SDIO_MASK_DBCKENDIE
 ((
uöt32_t
)0x00000400Ë

	)

3837 
	#SDIO_MASK_CMDACTIE
 ((
uöt32_t
)0x00000800Ë

	)

3838 
	#SDIO_MASK_TXACTIE
 ((
uöt32_t
)0x00001000Ë

	)

3839 
	#SDIO_MASK_RXACTIE
 ((
uöt32_t
)0x00002000Ë

	)

3840 
	#SDIO_MASK_TXFIFOHEIE
 ((
uöt32_t
)0x00004000Ë

	)

3841 
	#SDIO_MASK_RXFIFOHFIE
 ((
uöt32_t
)0x00008000Ë

	)

3842 
	#SDIO_MASK_TXFIFOFIE
 ((
uöt32_t
)0x00010000Ë

	)

3843 
	#SDIO_MASK_RXFIFOFIE
 ((
uöt32_t
)0x00020000Ë

	)

3844 
	#SDIO_MASK_TXFIFOEIE
 ((
uöt32_t
)0x00040000Ë

	)

3845 
	#SDIO_MASK_RXFIFOEIE
 ((
uöt32_t
)0x00080000Ë

	)

3846 
	#SDIO_MASK_TXDAVLIE
 ((
uöt32_t
)0x00100000Ë

	)

3847 
	#SDIO_MASK_RXDAVLIE
 ((
uöt32_t
)0x00200000Ë

	)

3848 
	#SDIO_MASK_SDIOITIE
 ((
uöt32_t
)0x00400000Ë

	)

3849 
	#SDIO_MASK_CEATAENDIE
 ((
uöt32_t
)0x00800000Ë

	)

3852 
	#SDIO_FIFOCNT_FIFOCOUNT
 ((
uöt32_t
)0x00FFFFFFË

	)

3855 
	#SDIO_FIFO_FIFODATA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3866 
	#CAN_MCR_INRQ
 ((
uöt32_t
)0x00000001Ë

	)

3867 
	#CAN_MCR_SLEEP
 ((
uöt32_t
)0x00000002Ë

	)

3868 
	#CAN_MCR_TXFP
 ((
uöt32_t
)0x00000004Ë

	)

3869 
	#CAN_MCR_RFLM
 ((
uöt32_t
)0x00000008Ë

	)

3870 
	#CAN_MCR_NART
 ((
uöt32_t
)0x00000010Ë

	)

3871 
	#CAN_MCR_AWUM
 ((
uöt32_t
)0x00000020Ë

	)

3872 
	#CAN_MCR_ABOM
 ((
uöt32_t
)0x00000040Ë

	)

3873 
	#CAN_MCR_TTCM
 ((
uöt32_t
)0x00000080Ë

	)

3874 
	#CAN_MCR_RESET
 ((
uöt32_t
)0x00008000Ë

	)

3875 
	#CAN_MCR_DBF
 ((
uöt32_t
)0x00010000Ë

	)

3878 
	#CAN_MSR_INAK
 ((
uöt32_t
)0x00000001Ë

	)

3879 
	#CAN_MSR_SLAK
 ((
uöt32_t
)0x00000002Ë

	)

3880 
	#CAN_MSR_ERRI
 ((
uöt32_t
)0x00000004Ë

	)

3881 
	#CAN_MSR_WKUI
 ((
uöt32_t
)0x00000008Ë

	)

3882 
	#CAN_MSR_SLAKI
 ((
uöt32_t
)0x00000010Ë

	)

3883 
	#CAN_MSR_TXM
 ((
uöt32_t
)0x00000100Ë

	)

3884 
	#CAN_MSR_RXM
 ((
uöt32_t
)0x00000200Ë

	)

3885 
	#CAN_MSR_SAMP
 ((
uöt32_t
)0x00000400Ë

	)

3886 
	#CAN_MSR_RX
 ((
uöt32_t
)0x00000800Ë

	)

3889 
	#CAN_TSR_RQCP0
 ((
uöt32_t
)0x00000001Ë

	)

3890 
	#CAN_TSR_TXOK0
 ((
uöt32_t
)0x00000002Ë

	)

3891 
	#CAN_TSR_ALST0
 ((
uöt32_t
)0x00000004Ë

	)

3892 
	#CAN_TSR_TERR0
 ((
uöt32_t
)0x00000008Ë

	)

3893 
	#CAN_TSR_ABRQ0
 ((
uöt32_t
)0x00000080Ë

	)

3894 
	#CAN_TSR_RQCP1
 ((
uöt32_t
)0x00000100Ë

	)

3895 
	#CAN_TSR_TXOK1
 ((
uöt32_t
)0x00000200Ë

	)

3896 
	#CAN_TSR_ALST1
 ((
uöt32_t
)0x00000400Ë

	)

3897 
	#CAN_TSR_TERR1
 ((
uöt32_t
)0x00000800Ë

	)

3898 
	#CAN_TSR_ABRQ1
 ((
uöt32_t
)0x00008000Ë

	)

3899 
	#CAN_TSR_RQCP2
 ((
uöt32_t
)0x00010000Ë

	)

3900 
	#CAN_TSR_TXOK2
 ((
uöt32_t
)0x00020000Ë

	)

3901 
	#CAN_TSR_ALST2
 ((
uöt32_t
)0x00040000Ë

	)

3902 
	#CAN_TSR_TERR2
 ((
uöt32_t
)0x00080000Ë

	)

3903 
	#CAN_TSR_ABRQ2
 ((
uöt32_t
)0x00800000Ë

	)

3904 
	#CAN_TSR_CODE
 ((
uöt32_t
)0x03000000Ë

	)

3906 
	#CAN_TSR_TME
 ((
uöt32_t
)0x1C000000Ë

	)

3907 
	#CAN_TSR_TME0
 ((
uöt32_t
)0x04000000Ë

	)

3908 
	#CAN_TSR_TME1
 ((
uöt32_t
)0x08000000Ë

	)

3909 
	#CAN_TSR_TME2
 ((
uöt32_t
)0x10000000Ë

	)

3911 
	#CAN_TSR_LOW
 ((
uöt32_t
)0xE0000000Ë

	)

3912 
	#CAN_TSR_LOW0
 ((
uöt32_t
)0x20000000Ë

	)

3913 
	#CAN_TSR_LOW1
 ((
uöt32_t
)0x40000000Ë

	)

3914 
	#CAN_TSR_LOW2
 ((
uöt32_t
)0x80000000Ë

	)

3917 
	#CAN_RF0R_FMP0
 ((
uöt32_t
)0x00000003Ë

	)

3918 
	#CAN_RF0R_FULL0
 ((
uöt32_t
)0x00000008Ë

	)

3919 
	#CAN_RF0R_FOVR0
 ((
uöt32_t
)0x00000010Ë

	)

3920 
	#CAN_RF0R_RFOM0
 ((
uöt32_t
)0x00000020Ë

	)

3923 
	#CAN_RF1R_FMP1
 ((
uöt32_t
)0x00000003Ë

	)

3924 
	#CAN_RF1R_FULL1
 ((
uöt32_t
)0x00000008Ë

	)

3925 
	#CAN_RF1R_FOVR1
 ((
uöt32_t
)0x00000010Ë

	)

3926 
	#CAN_RF1R_RFOM1
 ((
uöt32_t
)0x00000020Ë

	)

3929 
	#CAN_IER_TMEIE
 ((
uöt32_t
)0x00000001Ë

	)

3930 
	#CAN_IER_FMPIE0
 ((
uöt32_t
)0x00000002Ë

	)

3931 
	#CAN_IER_FFIE0
 ((
uöt32_t
)0x00000004Ë

	)

3932 
	#CAN_IER_FOVIE0
 ((
uöt32_t
)0x00000008Ë

	)

3933 
	#CAN_IER_FMPIE1
 ((
uöt32_t
)0x00000010Ë

	)

3934 
	#CAN_IER_FFIE1
 ((
uöt32_t
)0x00000020Ë

	)

3935 
	#CAN_IER_FOVIE1
 ((
uöt32_t
)0x00000040Ë

	)

3936 
	#CAN_IER_EWGIE
 ((
uöt32_t
)0x00000100Ë

	)

3937 
	#CAN_IER_EPVIE
 ((
uöt32_t
)0x00000200Ë

	)

3938 
	#CAN_IER_BOFIE
 ((
uöt32_t
)0x00000400Ë

	)

3939 
	#CAN_IER_LECIE
 ((
uöt32_t
)0x00000800Ë

	)

3940 
	#CAN_IER_ERRIE
 ((
uöt32_t
)0x00008000Ë

	)

3941 
	#CAN_IER_WKUIE
 ((
uöt32_t
)0x00010000Ë

	)

3942 
	#CAN_IER_SLKIE
 ((
uöt32_t
)0x00020000Ë

	)

3945 
	#CAN_ESR_EWGF
 ((
uöt32_t
)0x00000001Ë

	)

3946 
	#CAN_ESR_EPVF
 ((
uöt32_t
)0x00000002Ë

	)

3947 
	#CAN_ESR_BOFF
 ((
uöt32_t
)0x00000004Ë

	)

3949 
	#CAN_ESR_LEC
 ((
uöt32_t
)0x00000070Ë

	)

3950 
	#CAN_ESR_LEC_0
 ((
uöt32_t
)0x00000010Ë

	)

3951 
	#CAN_ESR_LEC_1
 ((
uöt32_t
)0x00000020Ë

	)

3952 
	#CAN_ESR_LEC_2
 ((
uöt32_t
)0x00000040Ë

	)

3954 
	#CAN_ESR_TEC
 ((
uöt32_t
)0x00FF0000Ë

	)

3955 
	#CAN_ESR_REC
 ((
uöt32_t
)0xFF000000Ë

	)

3958 
	#CAN_BTR_BRP
 ((
uöt32_t
)0x000003FFË

	)

3959 
	#CAN_BTR_TS1
 ((
uöt32_t
)0x000F0000Ë

	)

3960 
	#CAN_BTR_TS1_0
 ((
uöt32_t
)0x00010000Ë

	)

3961 
	#CAN_BTR_TS1_1
 ((
uöt32_t
)0x00020000Ë

	)

3962 
	#CAN_BTR_TS1_2
 ((
uöt32_t
)0x00040000Ë

	)

3963 
	#CAN_BTR_TS1_3
 ((
uöt32_t
)0x00080000Ë

	)

3964 
	#CAN_BTR_TS2
 ((
uöt32_t
)0x00700000Ë

	)

3965 
	#CAN_BTR_TS2_0
 ((
uöt32_t
)0x00100000Ë

	)

3966 
	#CAN_BTR_TS2_1
 ((
uöt32_t
)0x00200000Ë

	)

3967 
	#CAN_BTR_TS2_2
 ((
uöt32_t
)0x00400000Ë

	)

3968 
	#CAN_BTR_SJW
 ((
uöt32_t
)0x03000000Ë

	)

3969 
	#CAN_BTR_SJW_0
 ((
uöt32_t
)0x01000000Ë

	)

3970 
	#CAN_BTR_SJW_1
 ((
uöt32_t
)0x02000000Ë

	)

3971 
	#CAN_BTR_LBKM
 ((
uöt32_t
)0x40000000Ë

	)

3972 
	#CAN_BTR_SILM
 ((
uöt32_t
)0x80000000Ë

	)

3976 
	#CAN_TI0R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

3977 
	#CAN_TI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

3978 
	#CAN_TI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

3979 
	#CAN_TI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

3980 
	#CAN_TI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

3983 
	#CAN_TDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

3984 
	#CAN_TDT0R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

3985 
	#CAN_TDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

3988 
	#CAN_TDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

3989 
	#CAN_TDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

3990 
	#CAN_TDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

3991 
	#CAN_TDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

3994 
	#CAN_TDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

3995 
	#CAN_TDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

3996 
	#CAN_TDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

3997 
	#CAN_TDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

4000 
	#CAN_TI1R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

4001 
	#CAN_TI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

4002 
	#CAN_TI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

4003 
	#CAN_TI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

4004 
	#CAN_TI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

4007 
	#CAN_TDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

4008 
	#CAN_TDT1R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

4009 
	#CAN_TDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

4012 
	#CAN_TDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

4013 
	#CAN_TDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

4014 
	#CAN_TDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

4015 
	#CAN_TDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

4018 
	#CAN_TDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

4019 
	#CAN_TDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

4020 
	#CAN_TDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

4021 
	#CAN_TDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

4024 
	#CAN_TI2R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

4025 
	#CAN_TI2R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

4026 
	#CAN_TI2R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

4027 
	#CAN_TI2R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

4028 
	#CAN_TI2R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

4031 
	#CAN_TDT2R_DLC
 ((
uöt32_t
)0x0000000FË

	)

4032 
	#CAN_TDT2R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

4033 
	#CAN_TDT2R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

4036 
	#CAN_TDL2R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

4037 
	#CAN_TDL2R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

4038 
	#CAN_TDL2R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

4039 
	#CAN_TDL2R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

4042 
	#CAN_TDH2R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

4043 
	#CAN_TDH2R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

4044 
	#CAN_TDH2R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

4045 
	#CAN_TDH2R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

4048 
	#CAN_RI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

4049 
	#CAN_RI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

4050 
	#CAN_RI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

4051 
	#CAN_RI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

4054 
	#CAN_RDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

4055 
	#CAN_RDT0R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

4056 
	#CAN_RDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

4059 
	#CAN_RDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

4060 
	#CAN_RDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

4061 
	#CAN_RDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

4062 
	#CAN_RDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

4065 
	#CAN_RDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

4066 
	#CAN_RDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

4067 
	#CAN_RDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

4068 
	#CAN_RDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

4071 
	#CAN_RI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

4072 
	#CAN_RI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

4073 
	#CAN_RI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

4074 
	#CAN_RI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

4077 
	#CAN_RDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

4078 
	#CAN_RDT1R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

4079 
	#CAN_RDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

4082 
	#CAN_RDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

4083 
	#CAN_RDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

4084 
	#CAN_RDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

4085 
	#CAN_RDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

4088 
	#CAN_RDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

4089 
	#CAN_RDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

4090 
	#CAN_RDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

4091 
	#CAN_RDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

4095 
	#CAN_FMR_FINIT
 ((
uöt32_t
)0x00000001Ë

	)

4096 
	#CAN_FMR_CAN2SB
 ((
uöt32_t
)0x00003F00Ë

	)

4099 
	#CAN_FM1R_FBM
 ((
uöt32_t
)0x00003FFFË

	)

4100 
	#CAN_FM1R_FBM0
 ((
uöt32_t
)0x00000001Ë

	)

4101 
	#CAN_FM1R_FBM1
 ((
uöt32_t
)0x00000002Ë

	)

4102 
	#CAN_FM1R_FBM2
 ((
uöt32_t
)0x00000004Ë

	)

4103 
	#CAN_FM1R_FBM3
 ((
uöt32_t
)0x00000008Ë

	)

4104 
	#CAN_FM1R_FBM4
 ((
uöt32_t
)0x00000010Ë

	)

4105 
	#CAN_FM1R_FBM5
 ((
uöt32_t
)0x00000020Ë

	)

4106 
	#CAN_FM1R_FBM6
 ((
uöt32_t
)0x00000040Ë

	)

4107 
	#CAN_FM1R_FBM7
 ((
uöt32_t
)0x00000080Ë

	)

4108 
	#CAN_FM1R_FBM8
 ((
uöt32_t
)0x00000100Ë

	)

4109 
	#CAN_FM1R_FBM9
 ((
uöt32_t
)0x00000200Ë

	)

4110 
	#CAN_FM1R_FBM10
 ((
uöt32_t
)0x00000400Ë

	)

4111 
	#CAN_FM1R_FBM11
 ((
uöt32_t
)0x00000800Ë

	)

4112 
	#CAN_FM1R_FBM12
 ((
uöt32_t
)0x00001000Ë

	)

4113 
	#CAN_FM1R_FBM13
 ((
uöt32_t
)0x00002000Ë

	)

4114 
	#CAN_FM1R_FBM14
 ((
uöt32_t
)0x00004000Ë

	)

4115 
	#CAN_FM1R_FBM15
 ((
uöt32_t
)0x00008000Ë

	)

4116 
	#CAN_FM1R_FBM16
 ((
uöt32_t
)0x00010000Ë

	)

4117 
	#CAN_FM1R_FBM17
 ((
uöt32_t
)0x00020000Ë

	)

4118 
	#CAN_FM1R_FBM18
 ((
uöt32_t
)0x00040000Ë

	)

4119 
	#CAN_FM1R_FBM19
 ((
uöt32_t
)0x00080000Ë

	)

4120 
	#CAN_FM1R_FBM20
 ((
uöt32_t
)0x00100000Ë

	)

4121 
	#CAN_FM1R_FBM21
 ((
uöt32_t
)0x00200000Ë

	)

4122 
	#CAN_FM1R_FBM22
 ((
uöt32_t
)0x00400000Ë

	)

4123 
	#CAN_FM1R_FBM23
 ((
uöt32_t
)0x00800000Ë

	)

4124 
	#CAN_FM1R_FBM24
 ((
uöt32_t
)0x01000000Ë

	)

4125 
	#CAN_FM1R_FBM25
 ((
uöt32_t
)0x02000000Ë

	)

4126 
	#CAN_FM1R_FBM26
 ((
uöt32_t
)0x04000000Ë

	)

4127 
	#CAN_FM1R_FBM27
 ((
uöt32_t
)0x08000000Ë

	)

4130 
	#CAN_FS1R_FSC
 ((
uöt32_t
)0x00003FFFË

	)

4131 
	#CAN_FS1R_FSC0
 ((
uöt32_t
)0x00000001Ë

	)

4132 
	#CAN_FS1R_FSC1
 ((
uöt32_t
)0x00000002Ë

	)

4133 
	#CAN_FS1R_FSC2
 ((
uöt32_t
)0x00000004Ë

	)

4134 
	#CAN_FS1R_FSC3
 ((
uöt32_t
)0x00000008Ë

	)

4135 
	#CAN_FS1R_FSC4
 ((
uöt32_t
)0x00000010Ë

	)

4136 
	#CAN_FS1R_FSC5
 ((
uöt32_t
)0x00000020Ë

	)

4137 
	#CAN_FS1R_FSC6
 ((
uöt32_t
)0x00000040Ë

	)

4138 
	#CAN_FS1R_FSC7
 ((
uöt32_t
)0x00000080Ë

	)

4139 
	#CAN_FS1R_FSC8
 ((
uöt32_t
)0x00000100Ë

	)

4140 
	#CAN_FS1R_FSC9
 ((
uöt32_t
)0x00000200Ë

	)

4141 
	#CAN_FS1R_FSC10
 ((
uöt32_t
)0x00000400Ë

	)

4142 
	#CAN_FS1R_FSC11
 ((
uöt32_t
)0x00000800Ë

	)

4143 
	#CAN_FS1R_FSC12
 ((
uöt32_t
)0x00001000Ë

	)

4144 
	#CAN_FS1R_FSC13
 ((
uöt32_t
)0x00002000Ë

	)

4145 
	#CAN_FS1R_FSC14
 ((
uöt32_t
)0x00004000Ë

	)

4146 
	#CAN_FS1R_FSC15
 ((
uöt32_t
)0x00008000Ë

	)

4147 
	#CAN_FS1R_FSC16
 ((
uöt32_t
)0x00010000Ë

	)

4148 
	#CAN_FS1R_FSC17
 ((
uöt32_t
)0x00020000Ë

	)

4149 
	#CAN_FS1R_FSC18
 ((
uöt32_t
)0x00040000Ë

	)

4150 
	#CAN_FS1R_FSC19
 ((
uöt32_t
)0x00080000Ë

	)

4151 
	#CAN_FS1R_FSC20
 ((
uöt32_t
)0x00100000Ë

	)

4152 
	#CAN_FS1R_FSC21
 ((
uöt32_t
)0x00200000Ë

	)

4153 
	#CAN_FS1R_FSC22
 ((
uöt32_t
)0x00400000Ë

	)

4154 
	#CAN_FS1R_FSC23
 ((
uöt32_t
)0x00800000Ë

	)

4155 
	#CAN_FS1R_FSC24
 ((
uöt32_t
)0x01000000Ë

	)

4156 
	#CAN_FS1R_FSC25
 ((
uöt32_t
)0x02000000Ë

	)

4157 
	#CAN_FS1R_FSC26
 ((
uöt32_t
)0x04000000Ë

	)

4158 
	#CAN_FS1R_FSC27
 ((
uöt32_t
)0x08000000Ë

	)

4161 
	#CAN_FFA1R_FFA
 ((
uöt32_t
)0x00003FFFË

	)

4162 
	#CAN_FFA1R_FFA0
 ((
uöt32_t
)0x00000001Ë

	)

4163 
	#CAN_FFA1R_FFA1
 ((
uöt32_t
)0x00000002Ë

	)

4164 
	#CAN_FFA1R_FFA2
 ((
uöt32_t
)0x00000004Ë

	)

4165 
	#CAN_FFA1R_FFA3
 ((
uöt32_t
)0x00000008Ë

	)

4166 
	#CAN_FFA1R_FFA4
 ((
uöt32_t
)0x00000010Ë

	)

4167 
	#CAN_FFA1R_FFA5
 ((
uöt32_t
)0x00000020Ë

	)

4168 
	#CAN_FFA1R_FFA6
 ((
uöt32_t
)0x00000040Ë

	)

4169 
	#CAN_FFA1R_FFA7
 ((
uöt32_t
)0x00000080Ë

	)

4170 
	#CAN_FFA1R_FFA8
 ((
uöt32_t
)0x00000100Ë

	)

4171 
	#CAN_FFA1R_FFA9
 ((
uöt32_t
)0x00000200Ë

	)

4172 
	#CAN_FFA1R_FFA10
 ((
uöt32_t
)0x00000400Ë

	)

4173 
	#CAN_FFA1R_FFA11
 ((
uöt32_t
)0x00000800Ë

	)

4174 
	#CAN_FFA1R_FFA12
 ((
uöt32_t
)0x00001000Ë

	)

4175 
	#CAN_FFA1R_FFA13
 ((
uöt32_t
)0x00002000Ë

	)

4176 
	#CAN_FFA1_FFA14
 ((
uöt32_t
)0x00004000Ë

	)

4177 
	#CAN_FFA1_FFA15
 ((
uöt32_t
)0x00008000Ë

	)

4178 
	#CAN_FFA1_FFA16
 ((
uöt32_t
)0x00010000Ë

	)

4179 
	#CAN_FFA1_FFA17
 ((
uöt32_t
)0x00020000Ë

	)

4180 
	#CAN_FFA1_FFA18
 ((
uöt32_t
)0x00040000Ë

	)

4181 
	#CAN_FFA1_FFA19
 ((
uöt32_t
)0x00080000Ë

	)

4182 
	#CAN_FFA1_FFA20
 ((
uöt32_t
)0x00100000Ë

	)

4183 
	#CAN_FFA1_FFA21
 ((
uöt32_t
)0x00200000Ë

	)

4184 
	#CAN_FFA1_FFA22
 ((
uöt32_t
)0x00400000Ë

	)

4185 
	#CAN_FFA1_FFA23
 ((
uöt32_t
)0x00800000Ë

	)

4186 
	#CAN_FFA1_FFA24
 ((
uöt32_t
)0x01000000Ë

	)

4187 
	#CAN_FFA1_FFA25
 ((
uöt32_t
)0x02000000Ë

	)

4188 
	#CAN_FFA1_FFA26
 ((
uöt32_t
)0x04000000Ë

	)

4189 
	#CAN_FFA1_FFA27
 ((
uöt32_t
)0x08000000Ë

	)

4192 
	#CAN_FA1R_FACT
 ((
uöt32_t
)0x00003FFFË

	)

4193 
	#CAN_FA1R_FACT0
 ((
uöt32_t
)0x00000001Ë

	)

4194 
	#CAN_FA1R_FACT1
 ((
uöt32_t
)0x00000002Ë

	)

4195 
	#CAN_FA1R_FACT2
 ((
uöt32_t
)0x00000004Ë

	)

4196 
	#CAN_FA1R_FACT3
 ((
uöt32_t
)0x00000008Ë

	)

4197 
	#CAN_FA1R_FACT4
 ((
uöt32_t
)0x00000010Ë

	)

4198 
	#CAN_FA1R_FACT5
 ((
uöt32_t
)0x00000020Ë

	)

4199 
	#CAN_FA1R_FACT6
 ((
uöt32_t
)0x00000040Ë

	)

4200 
	#CAN_FA1R_FACT7
 ((
uöt32_t
)0x00000080Ë

	)

4201 
	#CAN_FA1R_FACT8
 ((
uöt32_t
)0x00000100Ë

	)

4202 
	#CAN_FA1R_FACT9
 ((
uöt32_t
)0x00000200Ë

	)

4203 
	#CAN_FA1R_FACT10
 ((
uöt32_t
)0x00000400Ë

	)

4204 
	#CAN_FA1R_FACT11
 ((
uöt32_t
)0x00000800Ë

	)

4205 
	#CAN_FA1R_FACT12
 ((
uöt32_t
)0x00001000Ë

	)

4206 
	#CAN_FA1R_FACT13
 ((
uöt32_t
)0x00002000Ë

	)

4207 
	#CAN_FA1R_FACT14
 ((
uöt32_t
)0x00004000Ë

	)

4208 
	#CAN_FA1R_FACT15
 ((
uöt32_t
)0x00008000Ë

	)

4209 
	#CAN_FA1R_FACT16
 ((
uöt32_t
)0x00010000Ë

	)

4210 
	#CAN_FA1R_FACT17
 ((
uöt32_t
)0x00020000Ë

	)

4211 
	#CAN_FA1R_FACT18
 ((
uöt32_t
)0x00040000Ë

	)

4212 
	#CAN_FA1R_FACT19
 ((
uöt32_t
)0x00080000Ë

	)

4213 
	#CAN_FA1R_FACT20
 ((
uöt32_t
)0x00100000Ë

	)

4214 
	#CAN_FA1R_FACT21
 ((
uöt32_t
)0x00200000Ë

	)

4215 
	#CAN_FA1R_FACT22
 ((
uöt32_t
)0x00400000Ë

	)

4216 
	#CAN_FA1R_FACT23
 ((
uöt32_t
)0x00800000Ë

	)

4217 
	#CAN_FA1R_FACT24
 ((
uöt32_t
)0x01000000Ë

	)

4218 
	#CAN_FA1R_FACT25
 ((
uöt32_t
)0x02000000Ë

	)

4219 
	#CAN_FA1R_FACT26
 ((
uöt32_t
)0x04000000Ë

	)

4220 
	#CAN_FA1R_FACT27
 ((
uöt32_t
)0x08000000Ë

	)

4223 
	#CAN_F0R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

4224 
	#CAN_F0R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

4225 
	#CAN_F0R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

4226 
	#CAN_F0R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

4227 
	#CAN_F0R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

4228 
	#CAN_F0R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

4229 
	#CAN_F0R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

4230 
	#CAN_F0R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

4231 
	#CAN_F0R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

4232 
	#CAN_F0R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

4233 
	#CAN_F0R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

4234 
	#CAN_F0R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

4235 
	#CAN_F0R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

4236 
	#CAN_F0R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

4237 
	#CAN_F0R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

4238 
	#CAN_F0R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

4239 
	#CAN_F0R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

4240 
	#CAN_F0R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

4241 
	#CAN_F0R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

4242 
	#CAN_F0R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

4243 
	#CAN_F0R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

4244 
	#CAN_F0R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

4245 
	#CAN_F0R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

4246 
	#CAN_F0R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

4247 
	#CAN_F0R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

4248 
	#CAN_F0R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

4249 
	#CAN_F0R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

4250 
	#CAN_F0R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

4251 
	#CAN_F0R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

4252 
	#CAN_F0R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

4253 
	#CAN_F0R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

4254 
	#CAN_F0R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

4257 
	#CAN_F1R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

4258 
	#CAN_F1R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

4259 
	#CAN_F1R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

4260 
	#CAN_F1R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

4261 
	#CAN_F1R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

4262 
	#CAN_F1R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

4263 
	#CAN_F1R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

4264 
	#CAN_F1R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

4265 
	#CAN_F1R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

4266 
	#CAN_F1R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

4267 
	#CAN_F1R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

4268 
	#CAN_F1R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

4269 
	#CAN_F1R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

4270 
	#CAN_F1R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

4271 
	#CAN_F1R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

4272 
	#CAN_F1R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

4273 
	#CAN_F1R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

4274 
	#CAN_F1R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

4275 
	#CAN_F1R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

4276 
	#CAN_F1R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

4277 
	#CAN_F1R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

4278 
	#CAN_F1R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

4279 
	#CAN_F1R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

4280 
	#CAN_F1R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

4281 
	#CAN_F1R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

4282 
	#CAN_F1R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

4283 
	#CAN_F1R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

4284 
	#CAN_F1R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

4285 
	#CAN_F1R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

4286 
	#CAN_F1R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

4287 
	#CAN_F1R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

4288 
	#CAN_F1R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

4291 
	#CAN_F2R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

4292 
	#CAN_F2R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

4293 
	#CAN_F2R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

4294 
	#CAN_F2R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

4295 
	#CAN_F2R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

4296 
	#CAN_F2R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

4297 
	#CAN_F2R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

4298 
	#CAN_F2R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

4299 
	#CAN_F2R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

4300 
	#CAN_F2R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

4301 
	#CAN_F2R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

4302 
	#CAN_F2R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

4303 
	#CAN_F2R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

4304 
	#CAN_F2R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

4305 
	#CAN_F2R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

4306 
	#CAN_F2R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

4307 
	#CAN_F2R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

4308 
	#CAN_F2R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

4309 
	#CAN_F2R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

4310 
	#CAN_F2R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

4311 
	#CAN_F2R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

4312 
	#CAN_F2R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

4313 
	#CAN_F2R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

4314 
	#CAN_F2R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

4315 
	#CAN_F2R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

4316 
	#CAN_F2R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

4317 
	#CAN_F2R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

4318 
	#CAN_F2R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

4319 
	#CAN_F2R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

4320 
	#CAN_F2R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

4321 
	#CAN_F2R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

4322 
	#CAN_F2R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

4325 
	#CAN_F3R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

4326 
	#CAN_F3R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

4327 
	#CAN_F3R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

4328 
	#CAN_F3R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

4329 
	#CAN_F3R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

4330 
	#CAN_F3R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

4331 
	#CAN_F3R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

4332 
	#CAN_F3R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

4333 
	#CAN_F3R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

4334 
	#CAN_F3R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

4335 
	#CAN_F3R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

4336 
	#CAN_F3R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

4337 
	#CAN_F3R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

4338 
	#CAN_F3R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

4339 
	#CAN_F3R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

4340 
	#CAN_F3R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

4341 
	#CAN_F3R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

4342 
	#CAN_F3R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

4343 
	#CAN_F3R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

4344 
	#CAN_F3R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

4345 
	#CAN_F3R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

4346 
	#CAN_F3R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

4347 
	#CAN_F3R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

4348 
	#CAN_F3R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

4349 
	#CAN_F3R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

4350 
	#CAN_F3R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

4351 
	#CAN_F3R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

4352 
	#CAN_F3R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

4353 
	#CAN_F3R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

4354 
	#CAN_F3R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

4355 
	#CAN_F3R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

4356 
	#CAN_F3R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

4359 
	#CAN_F4R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

4360 
	#CAN_F4R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

4361 
	#CAN_F4R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

4362 
	#CAN_F4R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

4363 
	#CAN_F4R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

4364 
	#CAN_F4R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

4365 
	#CAN_F4R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

4366 
	#CAN_F4R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

4367 
	#CAN_F4R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

4368 
	#CAN_F4R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

4369 
	#CAN_F4R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

4370 
	#CAN_F4R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

4371 
	#CAN_F4R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

4372 
	#CAN_F4R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

4373 
	#CAN_F4R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

4374 
	#CAN_F4R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

4375 
	#CAN_F4R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

4376 
	#CAN_F4R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

4377 
	#CAN_F4R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

4378 
	#CAN_F4R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

4379 
	#CAN_F4R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

4380 
	#CAN_F4R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

4381 
	#CAN_F4R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

4382 
	#CAN_F4R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

4383 
	#CAN_F4R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

4384 
	#CAN_F4R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

4385 
	#CAN_F4R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

4386 
	#CAN_F4R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

4387 
	#CAN_F4R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

4388 
	#CAN_F4R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

4389 
	#CAN_F4R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

4390 
	#CAN_F4R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

4393 
	#CAN_F5R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

4394 
	#CAN_F5R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

4395 
	#CAN_F5R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

4396 
	#CAN_F5R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

4397 
	#CAN_F5R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

4398 
	#CAN_F5R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

4399 
	#CAN_F5R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

4400 
	#CAN_F5R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

4401 
	#CAN_F5R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

4402 
	#CAN_F5R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

4403 
	#CAN_F5R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

4404 
	#CAN_F5R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

4405 
	#CAN_F5R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

4406 
	#CAN_F5R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

4407 
	#CAN_F5R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

4408 
	#CAN_F5R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

4409 
	#CAN_F5R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

4410 
	#CAN_F5R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

4411 
	#CAN_F5R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

4412 
	#CAN_F5R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

4413 
	#CAN_F5R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

4414 
	#CAN_F5R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

4415 
	#CAN_F5R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

4416 
	#CAN_F5R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

4417 
	#CAN_F5R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

4418 
	#CAN_F5R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

4419 
	#CAN_F5R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

4420 
	#CAN_F5R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

4421 
	#CAN_F5R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

4422 
	#CAN_F5R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

4423 
	#CAN_F5R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

4424 
	#CAN_F5R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

4427 
	#CAN_F6R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

4428 
	#CAN_F6R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

4429 
	#CAN_F6R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

4430 
	#CAN_F6R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

4431 
	#CAN_F6R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

4432 
	#CAN_F6R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

4433 
	#CAN_F6R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

4434 
	#CAN_F6R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

4435 
	#CAN_F6R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

4436 
	#CAN_F6R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

4437 
	#CAN_F6R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

4438 
	#CAN_F6R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

4439 
	#CAN_F6R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

4440 
	#CAN_F6R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

4441 
	#CAN_F6R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

4442 
	#CAN_F6R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

4443 
	#CAN_F6R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

4444 
	#CAN_F6R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

4445 
	#CAN_F6R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

4446 
	#CAN_F6R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

4447 
	#CAN_F6R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

4448 
	#CAN_F6R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

4449 
	#CAN_F6R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

4450 
	#CAN_F6R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

4451 
	#CAN_F6R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

4452 
	#CAN_F6R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

4453 
	#CAN_F6R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

4454 
	#CAN_F6R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

4455 
	#CAN_F6R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

4456 
	#CAN_F6R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

4457 
	#CAN_F6R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

4458 
	#CAN_F6R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

4461 
	#CAN_F7R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

4462 
	#CAN_F7R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

4463 
	#CAN_F7R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

4464 
	#CAN_F7R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

4465 
	#CAN_F7R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

4466 
	#CAN_F7R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

4467 
	#CAN_F7R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

4468 
	#CAN_F7R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

4469 
	#CAN_F7R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

4470 
	#CAN_F7R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

4471 
	#CAN_F7R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

4472 
	#CAN_F7R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

4473 
	#CAN_F7R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

4474 
	#CAN_F7R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

4475 
	#CAN_F7R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

4476 
	#CAN_F7R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

4477 
	#CAN_F7R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

4478 
	#CAN_F7R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

4479 
	#CAN_F7R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

4480 
	#CAN_F7R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

4481 
	#CAN_F7R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

4482 
	#CAN_F7R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

4483 
	#CAN_F7R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

4484 
	#CAN_F7R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

4485 
	#CAN_F7R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

4486 
	#CAN_F7R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

4487 
	#CAN_F7R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

4488 
	#CAN_F7R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

4489 
	#CAN_F7R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

4490 
	#CAN_F7R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

4491 
	#CAN_F7R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

4492 
	#CAN_F7R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

4495 
	#CAN_F8R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

4496 
	#CAN_F8R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

4497 
	#CAN_F8R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

4498 
	#CAN_F8R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

4499 
	#CAN_F8R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

4500 
	#CAN_F8R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

4501 
	#CAN_F8R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

4502 
	#CAN_F8R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

4503 
	#CAN_F8R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

4504 
	#CAN_F8R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

4505 
	#CAN_F8R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

4506 
	#CAN_F8R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

4507 
	#CAN_F8R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

4508 
	#CAN_F8R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

4509 
	#CAN_F8R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

4510 
	#CAN_F8R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

4511 
	#CAN_F8R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

4512 
	#CAN_F8R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

4513 
	#CAN_F8R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

4514 
	#CAN_F8R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

4515 
	#CAN_F8R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

4516 
	#CAN_F8R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

4517 
	#CAN_F8R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

4518 
	#CAN_F8R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

4519 
	#CAN_F8R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

4520 
	#CAN_F8R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

4521 
	#CAN_F8R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

4522 
	#CAN_F8R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

4523 
	#CAN_F8R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

4524 
	#CAN_F8R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

4525 
	#CAN_F8R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

4526 
	#CAN_F8R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

4529 
	#CAN_F9R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

4530 
	#CAN_F9R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

4531 
	#CAN_F9R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

4532 
	#CAN_F9R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

4533 
	#CAN_F9R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

4534 
	#CAN_F9R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

4535 
	#CAN_F9R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

4536 
	#CAN_F9R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

4537 
	#CAN_F9R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

4538 
	#CAN_F9R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

4539 
	#CAN_F9R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

4540 
	#CAN_F9R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

4541 
	#CAN_F9R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

4542 
	#CAN_F9R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

4543 
	#CAN_F9R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

4544 
	#CAN_F9R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

4545 
	#CAN_F9R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

4546 
	#CAN_F9R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

4547 
	#CAN_F9R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

4548 
	#CAN_F9R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

4549 
	#CAN_F9R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

4550 
	#CAN_F9R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

4551 
	#CAN_F9R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

4552 
	#CAN_F9R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

4553 
	#CAN_F9R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

4554 
	#CAN_F9R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

4555 
	#CAN_F9R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

4556 
	#CAN_F9R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

4557 
	#CAN_F9R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

4558 
	#CAN_F9R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

4559 
	#CAN_F9R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

4560 
	#CAN_F9R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

4563 
	#CAN_F10R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

4564 
	#CAN_F10R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

4565 
	#CAN_F10R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

4566 
	#CAN_F10R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

4567 
	#CAN_F10R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

4568 
	#CAN_F10R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

4569 
	#CAN_F10R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

4570 
	#CAN_F10R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

4571 
	#CAN_F10R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

4572 
	#CAN_F10R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

4573 
	#CAN_F10R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

4574 
	#CAN_F10R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

4575 
	#CAN_F10R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

4576 
	#CAN_F10R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

4577 
	#CAN_F10R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

4578 
	#CAN_F10R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

4579 
	#CAN_F10R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

4580 
	#CAN_F10R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

4581 
	#CAN_F10R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

4582 
	#CAN_F10R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

4583 
	#CAN_F10R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

4584 
	#CAN_F10R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

4585 
	#CAN_F10R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

4586 
	#CAN_F10R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

4587 
	#CAN_F10R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

4588 
	#CAN_F10R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

4589 
	#CAN_F10R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

4590 
	#CAN_F10R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

4591 
	#CAN_F10R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

4592 
	#CAN_F10R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

4593 
	#CAN_F10R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

4594 
	#CAN_F10R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

4597 
	#CAN_F11R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

4598 
	#CAN_F11R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

4599 
	#CAN_F11R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

4600 
	#CAN_F11R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

4601 
	#CAN_F11R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

4602 
	#CAN_F11R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

4603 
	#CAN_F11R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

4604 
	#CAN_F11R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

4605 
	#CAN_F11R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

4606 
	#CAN_F11R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

4607 
	#CAN_F11R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

4608 
	#CAN_F11R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

4609 
	#CAN_F11R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

4610 
	#CAN_F11R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

4611 
	#CAN_F11R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

4612 
	#CAN_F11R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

4613 
	#CAN_F11R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

4614 
	#CAN_F11R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

4615 
	#CAN_F11R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

4616 
	#CAN_F11R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

4617 
	#CAN_F11R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

4618 
	#CAN_F11R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

4619 
	#CAN_F11R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

4620 
	#CAN_F11R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

4621 
	#CAN_F11R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

4622 
	#CAN_F11R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

4623 
	#CAN_F11R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

4624 
	#CAN_F11R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

4625 
	#CAN_F11R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

4626 
	#CAN_F11R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

4627 
	#CAN_F11R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

4628 
	#CAN_F11R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

4631 
	#CAN_F12R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

4632 
	#CAN_F12R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

4633 
	#CAN_F12R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

4634 
	#CAN_F12R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

4635 
	#CAN_F12R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

4636 
	#CAN_F12R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

4637 
	#CAN_F12R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

4638 
	#CAN_F12R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

4639 
	#CAN_F12R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

4640 
	#CAN_F12R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

4641 
	#CAN_F12R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

4642 
	#CAN_F12R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

4643 
	#CAN_F12R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

4644 
	#CAN_F12R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

4645 
	#CAN_F12R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

4646 
	#CAN_F12R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

4647 
	#CAN_F12R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

4648 
	#CAN_F12R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

4649 
	#CAN_F12R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

4650 
	#CAN_F12R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

4651 
	#CAN_F12R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

4652 
	#CAN_F12R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

4653 
	#CAN_F12R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

4654 
	#CAN_F12R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

4655 
	#CAN_F12R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

4656 
	#CAN_F12R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

4657 
	#CAN_F12R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

4658 
	#CAN_F12R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

4659 
	#CAN_F12R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

4660 
	#CAN_F12R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

4661 
	#CAN_F12R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

4662 
	#CAN_F12R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

4665 
	#CAN_F13R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

4666 
	#CAN_F13R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

4667 
	#CAN_F13R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

4668 
	#CAN_F13R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

4669 
	#CAN_F13R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

4670 
	#CAN_F13R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

4671 
	#CAN_F13R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

4672 
	#CAN_F13R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

4673 
	#CAN_F13R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

4674 
	#CAN_F13R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

4675 
	#CAN_F13R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

4676 
	#CAN_F13R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

4677 
	#CAN_F13R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

4678 
	#CAN_F13R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

4679 
	#CAN_F13R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

4680 
	#CAN_F13R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

4681 
	#CAN_F13R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

4682 
	#CAN_F13R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

4683 
	#CAN_F13R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

4684 
	#CAN_F13R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

4685 
	#CAN_F13R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

4686 
	#CAN_F13R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

4687 
	#CAN_F13R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

4688 
	#CAN_F13R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

4689 
	#CAN_F13R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

4690 
	#CAN_F13R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

4691 
	#CAN_F13R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

4692 
	#CAN_F13R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

4693 
	#CAN_F13R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

4694 
	#CAN_F13R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

4695 
	#CAN_F13R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

4696 
	#CAN_F13R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

4699 
	#CAN_F14R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

4700 
	#CAN_F14R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

4701 
	#CAN_F14R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

4702 
	#CAN_F14R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

4703 
	#CAN_F14R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

4704 
	#CAN_F14R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

4705 
	#CAN_F14R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

4706 
	#CAN_F14R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

4707 
	#CAN_F14R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

4708 
	#CAN_F14R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

4709 
	#CAN_F14R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

4710 
	#CAN_F14R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

4711 
	#CAN_F14R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

4712 
	#CAN_F14R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

4713 
	#CAN_F14R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

4714 
	#CAN_F14R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

4715 
	#CAN_F14R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

4716 
	#CAN_F14R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

4717 
	#CAN_F14R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

4718 
	#CAN_F14R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

4719 
	#CAN_F14R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

4720 
	#CAN_F14R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

4721 
	#CAN_F14R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

4722 
	#CAN_F14R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

4723 
	#CAN_F14R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

4724 
	#CAN_F14R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

4725 
	#CAN_F14R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

4726 
	#CAN_F14R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

4727 
	#CAN_F14R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

4728 
	#CAN_F14R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

4729 
	#CAN_F14R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

4730 
	#CAN_F14R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

4733 
	#CAN_F15R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

4734 
	#CAN_F15R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

4735 
	#CAN_F15R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

4736 
	#CAN_F15R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

4737 
	#CAN_F15R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

4738 
	#CAN_F15R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

4739 
	#CAN_F15R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

4740 
	#CAN_F15R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

4741 
	#CAN_F15R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

4742 
	#CAN_F15R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

4743 
	#CAN_F15R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

4744 
	#CAN_F15R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

4745 
	#CAN_F15R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

4746 
	#CAN_F15R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

4747 
	#CAN_F15R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

4748 
	#CAN_F15R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

4749 
	#CAN_F15R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

4750 
	#CAN_F15R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

4751 
	#CAN_F15R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

4752 
	#CAN_F15R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

4753 
	#CAN_F15R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

4754 
	#CAN_F15R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

4755 
	#CAN_F15R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

4756 
	#CAN_F15R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

4757 
	#CAN_F15R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

4758 
	#CAN_F15R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

4759 
	#CAN_F15R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

4760 
	#CAN_F15R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

4761 
	#CAN_F15R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

4762 
	#CAN_F15R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

4763 
	#CAN_F15R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

4764 
	#CAN_F15R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

4767 
	#CAN_F16R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

4768 
	#CAN_F16R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

4769 
	#CAN_F16R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

4770 
	#CAN_F16R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

4771 
	#CAN_F16R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

4772 
	#CAN_F16R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

4773 
	#CAN_F16R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

4774 
	#CAN_F16R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

4775 
	#CAN_F16R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

4776 
	#CAN_F16R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

4777 
	#CAN_F16R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

4778 
	#CAN_F16R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

4779 
	#CAN_F16R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

4780 
	#CAN_F16R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

4781 
	#CAN_F16R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

4782 
	#CAN_F16R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

4783 
	#CAN_F16R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

4784 
	#CAN_F16R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

4785 
	#CAN_F16R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

4786 
	#CAN_F16R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

4787 
	#CAN_F16R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

4788 
	#CAN_F16R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

4789 
	#CAN_F16R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

4790 
	#CAN_F16R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

4791 
	#CAN_F16R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

4792 
	#CAN_F16R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

4793 
	#CAN_F16R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

4794 
	#CAN_F16R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

4795 
	#CAN_F16R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

4796 
	#CAN_F16R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

4797 
	#CAN_F16R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

4798 
	#CAN_F16R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

4801 
	#CAN_F17R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

4802 
	#CAN_F17R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

4803 
	#CAN_F17R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

4804 
	#CAN_F17R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

4805 
	#CAN_F17R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

4806 
	#CAN_F17R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

4807 
	#CAN_F17R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

4808 
	#CAN_F17R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

4809 
	#CAN_F17R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

4810 
	#CAN_F17R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

4811 
	#CAN_F17R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

4812 
	#CAN_F17R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

4813 
	#CAN_F17R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

4814 
	#CAN_F17R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

4815 
	#CAN_F17R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

4816 
	#CAN_F17R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

4817 
	#CAN_F17R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

4818 
	#CAN_F17R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

4819 
	#CAN_F17R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

4820 
	#CAN_F17R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

4821 
	#CAN_F17R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

4822 
	#CAN_F17R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

4823 
	#CAN_F17R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

4824 
	#CAN_F17R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

4825 
	#CAN_F17R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

4826 
	#CAN_F17R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

4827 
	#CAN_F17R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

4828 
	#CAN_F17R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

4829 
	#CAN_F17R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

4830 
	#CAN_F17R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

4831 
	#CAN_F17R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

4832 
	#CAN_F17R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

4835 
	#CAN_F18R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

4836 
	#CAN_F18R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

4837 
	#CAN_F18R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

4838 
	#CAN_F18R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

4839 
	#CAN_F18R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

4840 
	#CAN_F18R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

4841 
	#CAN_F18R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

4842 
	#CAN_F18R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

4843 
	#CAN_F18R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

4844 
	#CAN_F18R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

4845 
	#CAN_F18R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

4846 
	#CAN_F18R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

4847 
	#CAN_F18R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

4848 
	#CAN_F18R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

4849 
	#CAN_F18R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

4850 
	#CAN_F18R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

4851 
	#CAN_F18R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

4852 
	#CAN_F18R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

4853 
	#CAN_F18R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

4854 
	#CAN_F18R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

4855 
	#CAN_F18R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

4856 
	#CAN_F18R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

4857 
	#CAN_F18R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

4858 
	#CAN_F18R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

4859 
	#CAN_F18R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

4860 
	#CAN_F18R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

4861 
	#CAN_F18R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

4862 
	#CAN_F18R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

4863 
	#CAN_F18R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

4864 
	#CAN_F18R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

4865 
	#CAN_F18R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

4866 
	#CAN_F18R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

4869 
	#CAN_F19R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

4870 
	#CAN_F19R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

4871 
	#CAN_F19R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

4872 
	#CAN_F19R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

4873 
	#CAN_F19R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

4874 
	#CAN_F19R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

4875 
	#CAN_F19R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

4876 
	#CAN_F19R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

4877 
	#CAN_F19R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

4878 
	#CAN_F19R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

4879 
	#CAN_F19R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

4880 
	#CAN_F19R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

4881 
	#CAN_F19R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

4882 
	#CAN_F19R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

4883 
	#CAN_F19R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

4884 
	#CAN_F19R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

4885 
	#CAN_F19R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

4886 
	#CAN_F19R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

4887 
	#CAN_F19R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

4888 
	#CAN_F19R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

4889 
	#CAN_F19R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

4890 
	#CAN_F19R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

4891 
	#CAN_F19R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

4892 
	#CAN_F19R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

4893 
	#CAN_F19R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

4894 
	#CAN_F19R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

4895 
	#CAN_F19R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

4896 
	#CAN_F19R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

4897 
	#CAN_F19R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

4898 
	#CAN_F19R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

4899 
	#CAN_F19R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

4900 
	#CAN_F19R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

4903 
	#CAN_F20R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

4904 
	#CAN_F20R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

4905 
	#CAN_F20R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

4906 
	#CAN_F20R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

4907 
	#CAN_F20R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

4908 
	#CAN_F20R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

4909 
	#CAN_F20R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

4910 
	#CAN_F20R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

4911 
	#CAN_F20R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

4912 
	#CAN_F20R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

4913 
	#CAN_F20R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

4914 
	#CAN_F20R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

4915 
	#CAN_F20R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

4916 
	#CAN_F20R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

4917 
	#CAN_F20R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

4918 
	#CAN_F20R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

4919 
	#CAN_F20R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

4920 
	#CAN_F20R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

4921 
	#CAN_F20R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

4922 
	#CAN_F20R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

4923 
	#CAN_F20R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

4924 
	#CAN_F20R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

4925 
	#CAN_F20R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

4926 
	#CAN_F20R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

4927 
	#CAN_F20R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

4928 
	#CAN_F20R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

4929 
	#CAN_F20R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

4930 
	#CAN_F20R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

4931 
	#CAN_F20R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

4932 
	#CAN_F20R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

4933 
	#CAN_F20R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

4934 
	#CAN_F20R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

4937 
	#CAN_F21R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

4938 
	#CAN_F21R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

4939 
	#CAN_F21R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

4940 
	#CAN_F21R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

4941 
	#CAN_F21R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

4942 
	#CAN_F21R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

4943 
	#CAN_F21R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

4944 
	#CAN_F21R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

4945 
	#CAN_F21R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

4946 
	#CAN_F21R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

4947 
	#CAN_F21R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

4948 
	#CAN_F21R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

4949 
	#CAN_F21R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

4950 
	#CAN_F21R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

4951 
	#CAN_F21R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

4952 
	#CAN_F21R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

4953 
	#CAN_F21R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

4954 
	#CAN_F21R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

4955 
	#CAN_F21R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

4956 
	#CAN_F21R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

4957 
	#CAN_F21R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

4958 
	#CAN_F21R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

4959 
	#CAN_F21R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

4960 
	#CAN_F21R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

4961 
	#CAN_F21R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

4962 
	#CAN_F21R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

4963 
	#CAN_F21R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

4964 
	#CAN_F21R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

4965 
	#CAN_F21R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

4966 
	#CAN_F21R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

4967 
	#CAN_F21R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

4968 
	#CAN_F21R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

4971 
	#CAN_F22R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

4972 
	#CAN_F22R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

4973 
	#CAN_F22R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

4974 
	#CAN_F22R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

4975 
	#CAN_F22R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

4976 
	#CAN_F22R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

4977 
	#CAN_F22R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

4978 
	#CAN_F22R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

4979 
	#CAN_F22R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

4980 
	#CAN_F22R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

4981 
	#CAN_F22R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

4982 
	#CAN_F22R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

4983 
	#CAN_F22R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

4984 
	#CAN_F22R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

4985 
	#CAN_F22R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

4986 
	#CAN_F22R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

4987 
	#CAN_F22R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

4988 
	#CAN_F22R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

4989 
	#CAN_F22R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

4990 
	#CAN_F22R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

4991 
	#CAN_F22R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

4992 
	#CAN_F22R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

4993 
	#CAN_F22R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

4994 
	#CAN_F22R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

4995 
	#CAN_F22R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

4996 
	#CAN_F22R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

4997 
	#CAN_F22R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

4998 
	#CAN_F22R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

4999 
	#CAN_F22R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5000 
	#CAN_F22R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5001 
	#CAN_F22R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5002 
	#CAN_F22R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5005 
	#CAN_F23R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5006 
	#CAN_F23R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5007 
	#CAN_F23R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5008 
	#CAN_F23R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5009 
	#CAN_F23R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5010 
	#CAN_F23R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5011 
	#CAN_F23R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5012 
	#CAN_F23R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5013 
	#CAN_F23R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5014 
	#CAN_F23R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5015 
	#CAN_F23R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5016 
	#CAN_F23R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5017 
	#CAN_F23R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5018 
	#CAN_F23R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5019 
	#CAN_F23R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5020 
	#CAN_F23R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5021 
	#CAN_F23R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5022 
	#CAN_F23R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5023 
	#CAN_F23R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5024 
	#CAN_F23R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5025 
	#CAN_F23R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5026 
	#CAN_F23R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5027 
	#CAN_F23R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5028 
	#CAN_F23R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5029 
	#CAN_F23R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5030 
	#CAN_F23R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5031 
	#CAN_F23R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5032 
	#CAN_F23R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5033 
	#CAN_F23R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5034 
	#CAN_F23R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5035 
	#CAN_F23R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5036 
	#CAN_F23R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5039 
	#CAN_F24R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5040 
	#CAN_F24R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5041 
	#CAN_F24R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5042 
	#CAN_F24R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5043 
	#CAN_F24R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5044 
	#CAN_F24R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5045 
	#CAN_F24R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5046 
	#CAN_F24R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5047 
	#CAN_F24R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5048 
	#CAN_F24R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5049 
	#CAN_F24R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5050 
	#CAN_F24R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5051 
	#CAN_F24R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5052 
	#CAN_F24R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5053 
	#CAN_F24R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5054 
	#CAN_F24R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5055 
	#CAN_F24R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5056 
	#CAN_F24R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5057 
	#CAN_F24R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5058 
	#CAN_F24R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5059 
	#CAN_F24R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5060 
	#CAN_F24R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5061 
	#CAN_F24R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5062 
	#CAN_F24R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5063 
	#CAN_F24R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5064 
	#CAN_F24R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5065 
	#CAN_F24R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5066 
	#CAN_F24R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5067 
	#CAN_F24R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5068 
	#CAN_F24R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5069 
	#CAN_F24R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5070 
	#CAN_F24R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5073 
	#CAN_F25R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5074 
	#CAN_F25R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5075 
	#CAN_F25R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5076 
	#CAN_F25R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5077 
	#CAN_F25R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5078 
	#CAN_F25R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5079 
	#CAN_F25R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5080 
	#CAN_F25R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5081 
	#CAN_F25R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5082 
	#CAN_F25R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5083 
	#CAN_F25R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5084 
	#CAN_F25R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5085 
	#CAN_F25R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5086 
	#CAN_F25R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5087 
	#CAN_F25R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5088 
	#CAN_F25R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5089 
	#CAN_F25R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5090 
	#CAN_F25R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5091 
	#CAN_F25R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5092 
	#CAN_F25R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5093 
	#CAN_F25R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5094 
	#CAN_F25R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5095 
	#CAN_F25R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5096 
	#CAN_F25R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5097 
	#CAN_F25R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5098 
	#CAN_F25R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5099 
	#CAN_F25R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5100 
	#CAN_F25R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5101 
	#CAN_F25R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5102 
	#CAN_F25R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5103 
	#CAN_F25R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5104 
	#CAN_F25R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5107 
	#CAN_F26R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5108 
	#CAN_F26R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5109 
	#CAN_F26R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5110 
	#CAN_F26R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5111 
	#CAN_F26R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5112 
	#CAN_F26R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5113 
	#CAN_F26R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5114 
	#CAN_F26R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5115 
	#CAN_F26R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5116 
	#CAN_F26R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5117 
	#CAN_F26R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5118 
	#CAN_F26R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5119 
	#CAN_F26R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5120 
	#CAN_F26R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5121 
	#CAN_F26R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5122 
	#CAN_F26R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5123 
	#CAN_F26R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5124 
	#CAN_F26R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5125 
	#CAN_F26R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5126 
	#CAN_F26R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5127 
	#CAN_F26R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5128 
	#CAN_F26R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5129 
	#CAN_F26R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5130 
	#CAN_F26R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5131 
	#CAN_F26R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5132 
	#CAN_F26R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5133 
	#CAN_F26R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5134 
	#CAN_F26R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5135 
	#CAN_F26R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5136 
	#CAN_F26R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5137 
	#CAN_F26R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5138 
	#CAN_F26R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5141 
	#CAN_F27R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5142 
	#CAN_F27R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5143 
	#CAN_F27R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5144 
	#CAN_F27R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5145 
	#CAN_F27R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5146 
	#CAN_F27R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5147 
	#CAN_F27R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5148 
	#CAN_F27R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5149 
	#CAN_F27R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5150 
	#CAN_F27R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5151 
	#CAN_F27R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5152 
	#CAN_F27R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5153 
	#CAN_F27R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5154 
	#CAN_F27R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5155 
	#CAN_F27R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5156 
	#CAN_F27R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5157 
	#CAN_F27R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5158 
	#CAN_F27R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5159 
	#CAN_F27R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5160 
	#CAN_F27R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5161 
	#CAN_F27R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5162 
	#CAN_F27R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5163 
	#CAN_F27R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5164 
	#CAN_F27R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5165 
	#CAN_F27R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5166 
	#CAN_F27R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5167 
	#CAN_F27R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5168 
	#CAN_F27R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5169 
	#CAN_F27R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5170 
	#CAN_F27R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5171 
	#CAN_F27R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5172 
	#CAN_F27R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5175 
	#CAN_F0R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5176 
	#CAN_F0R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5177 
	#CAN_F0R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5178 
	#CAN_F0R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5179 
	#CAN_F0R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5180 
	#CAN_F0R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5181 
	#CAN_F0R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5182 
	#CAN_F0R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5183 
	#CAN_F0R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5184 
	#CAN_F0R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5185 
	#CAN_F0R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5186 
	#CAN_F0R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5187 
	#CAN_F0R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5188 
	#CAN_F0R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5189 
	#CAN_F0R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5190 
	#CAN_F0R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5191 
	#CAN_F0R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5192 
	#CAN_F0R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5193 
	#CAN_F0R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5194 
	#CAN_F0R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5195 
	#CAN_F0R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5196 
	#CAN_F0R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5197 
	#CAN_F0R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5198 
	#CAN_F0R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5199 
	#CAN_F0R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5200 
	#CAN_F0R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5201 
	#CAN_F0R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5202 
	#CAN_F0R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5203 
	#CAN_F0R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5204 
	#CAN_F0R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5205 
	#CAN_F0R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5206 
	#CAN_F0R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5209 
	#CAN_F1R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5210 
	#CAN_F1R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5211 
	#CAN_F1R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5212 
	#CAN_F1R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5213 
	#CAN_F1R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5214 
	#CAN_F1R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5215 
	#CAN_F1R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5216 
	#CAN_F1R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5217 
	#CAN_F1R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5218 
	#CAN_F1R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5219 
	#CAN_F1R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5220 
	#CAN_F1R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5221 
	#CAN_F1R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5222 
	#CAN_F1R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5223 
	#CAN_F1R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5224 
	#CAN_F1R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5225 
	#CAN_F1R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5226 
	#CAN_F1R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5227 
	#CAN_F1R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5228 
	#CAN_F1R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5229 
	#CAN_F1R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5230 
	#CAN_F1R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5231 
	#CAN_F1R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5232 
	#CAN_F1R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5233 
	#CAN_F1R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5234 
	#CAN_F1R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5235 
	#CAN_F1R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5236 
	#CAN_F1R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5237 
	#CAN_F1R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5238 
	#CAN_F1R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5239 
	#CAN_F1R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5240 
	#CAN_F1R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5243 
	#CAN_F2R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5244 
	#CAN_F2R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5245 
	#CAN_F2R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5246 
	#CAN_F2R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5247 
	#CAN_F2R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5248 
	#CAN_F2R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5249 
	#CAN_F2R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5250 
	#CAN_F2R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5251 
	#CAN_F2R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5252 
	#CAN_F2R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5253 
	#CAN_F2R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5254 
	#CAN_F2R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5255 
	#CAN_F2R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5256 
	#CAN_F2R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5257 
	#CAN_F2R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5258 
	#CAN_F2R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5259 
	#CAN_F2R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5260 
	#CAN_F2R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5261 
	#CAN_F2R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5262 
	#CAN_F2R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5263 
	#CAN_F2R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5264 
	#CAN_F2R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5265 
	#CAN_F2R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5266 
	#CAN_F2R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5267 
	#CAN_F2R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5268 
	#CAN_F2R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5269 
	#CAN_F2R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5270 
	#CAN_F2R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5271 
	#CAN_F2R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5272 
	#CAN_F2R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5273 
	#CAN_F2R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5274 
	#CAN_F2R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5277 
	#CAN_F3R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5278 
	#CAN_F3R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5279 
	#CAN_F3R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5280 
	#CAN_F3R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5281 
	#CAN_F3R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5282 
	#CAN_F3R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5283 
	#CAN_F3R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5284 
	#CAN_F3R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5285 
	#CAN_F3R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5286 
	#CAN_F3R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5287 
	#CAN_F3R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5288 
	#CAN_F3R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5289 
	#CAN_F3R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5290 
	#CAN_F3R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5291 
	#CAN_F3R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5292 
	#CAN_F3R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5293 
	#CAN_F3R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5294 
	#CAN_F3R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5295 
	#CAN_F3R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5296 
	#CAN_F3R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5297 
	#CAN_F3R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5298 
	#CAN_F3R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5299 
	#CAN_F3R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5300 
	#CAN_F3R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5301 
	#CAN_F3R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5302 
	#CAN_F3R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5303 
	#CAN_F3R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5304 
	#CAN_F3R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5305 
	#CAN_F3R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5306 
	#CAN_F3R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5307 
	#CAN_F3R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5308 
	#CAN_F3R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5311 
	#CAN_F4R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5312 
	#CAN_F4R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5313 
	#CAN_F4R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5314 
	#CAN_F4R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5315 
	#CAN_F4R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5316 
	#CAN_F4R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5317 
	#CAN_F4R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5318 
	#CAN_F4R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5319 
	#CAN_F4R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5320 
	#CAN_F4R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5321 
	#CAN_F4R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5322 
	#CAN_F4R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5323 
	#CAN_F4R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5324 
	#CAN_F4R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5325 
	#CAN_F4R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5326 
	#CAN_F4R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5327 
	#CAN_F4R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5328 
	#CAN_F4R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5329 
	#CAN_F4R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5330 
	#CAN_F4R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5331 
	#CAN_F4R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5332 
	#CAN_F4R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5333 
	#CAN_F4R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5334 
	#CAN_F4R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5335 
	#CAN_F4R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5336 
	#CAN_F4R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5337 
	#CAN_F4R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5338 
	#CAN_F4R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5339 
	#CAN_F4R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5340 
	#CAN_F4R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5341 
	#CAN_F4R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5342 
	#CAN_F4R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5345 
	#CAN_F5R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5346 
	#CAN_F5R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5347 
	#CAN_F5R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5348 
	#CAN_F5R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5349 
	#CAN_F5R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5350 
	#CAN_F5R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5351 
	#CAN_F5R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5352 
	#CAN_F5R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5353 
	#CAN_F5R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5354 
	#CAN_F5R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5355 
	#CAN_F5R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5356 
	#CAN_F5R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5357 
	#CAN_F5R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5358 
	#CAN_F5R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5359 
	#CAN_F5R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5360 
	#CAN_F5R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5361 
	#CAN_F5R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5362 
	#CAN_F5R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5363 
	#CAN_F5R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5364 
	#CAN_F5R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5365 
	#CAN_F5R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5366 
	#CAN_F5R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5367 
	#CAN_F5R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5368 
	#CAN_F5R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5369 
	#CAN_F5R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5370 
	#CAN_F5R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5371 
	#CAN_F5R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5372 
	#CAN_F5R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5373 
	#CAN_F5R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5374 
	#CAN_F5R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5375 
	#CAN_F5R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5376 
	#CAN_F5R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5379 
	#CAN_F6R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5380 
	#CAN_F6R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5381 
	#CAN_F6R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5382 
	#CAN_F6R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5383 
	#CAN_F6R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5384 
	#CAN_F6R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5385 
	#CAN_F6R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5386 
	#CAN_F6R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5387 
	#CAN_F6R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5388 
	#CAN_F6R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5389 
	#CAN_F6R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5390 
	#CAN_F6R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5391 
	#CAN_F6R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5392 
	#CAN_F6R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5393 
	#CAN_F6R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5394 
	#CAN_F6R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5395 
	#CAN_F6R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5396 
	#CAN_F6R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5397 
	#CAN_F6R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5398 
	#CAN_F6R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5399 
	#CAN_F6R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5400 
	#CAN_F6R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5401 
	#CAN_F6R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5402 
	#CAN_F6R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5403 
	#CAN_F6R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5404 
	#CAN_F6R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5405 
	#CAN_F6R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5406 
	#CAN_F6R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5407 
	#CAN_F6R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5408 
	#CAN_F6R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5409 
	#CAN_F6R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5410 
	#CAN_F6R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5413 
	#CAN_F7R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5414 
	#CAN_F7R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5415 
	#CAN_F7R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5416 
	#CAN_F7R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5417 
	#CAN_F7R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5418 
	#CAN_F7R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5419 
	#CAN_F7R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5420 
	#CAN_F7R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5421 
	#CAN_F7R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5422 
	#CAN_F7R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5423 
	#CAN_F7R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5424 
	#CAN_F7R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5425 
	#CAN_F7R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5426 
	#CAN_F7R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5427 
	#CAN_F7R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5428 
	#CAN_F7R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5429 
	#CAN_F7R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5430 
	#CAN_F7R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5431 
	#CAN_F7R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5432 
	#CAN_F7R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5433 
	#CAN_F7R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5434 
	#CAN_F7R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5435 
	#CAN_F7R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5436 
	#CAN_F7R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5437 
	#CAN_F7R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5438 
	#CAN_F7R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5439 
	#CAN_F7R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5440 
	#CAN_F7R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5441 
	#CAN_F7R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5442 
	#CAN_F7R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5443 
	#CAN_F7R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5444 
	#CAN_F7R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5447 
	#CAN_F8R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5448 
	#CAN_F8R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5449 
	#CAN_F8R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5450 
	#CAN_F8R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5451 
	#CAN_F8R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5452 
	#CAN_F8R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5453 
	#CAN_F8R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5454 
	#CAN_F8R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5455 
	#CAN_F8R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5456 
	#CAN_F8R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5457 
	#CAN_F8R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5458 
	#CAN_F8R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5459 
	#CAN_F8R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5460 
	#CAN_F8R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5461 
	#CAN_F8R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5462 
	#CAN_F8R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5463 
	#CAN_F8R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5464 
	#CAN_F8R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5465 
	#CAN_F8R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5466 
	#CAN_F8R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5467 
	#CAN_F8R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5468 
	#CAN_F8R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5469 
	#CAN_F8R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5470 
	#CAN_F8R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5471 
	#CAN_F8R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5472 
	#CAN_F8R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5473 
	#CAN_F8R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5474 
	#CAN_F8R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5475 
	#CAN_F8R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5476 
	#CAN_F8R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5477 
	#CAN_F8R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5478 
	#CAN_F8R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5481 
	#CAN_F9R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5482 
	#CAN_F9R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5483 
	#CAN_F9R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5484 
	#CAN_F9R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5485 
	#CAN_F9R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5486 
	#CAN_F9R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5487 
	#CAN_F9R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5488 
	#CAN_F9R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5489 
	#CAN_F9R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5490 
	#CAN_F9R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5491 
	#CAN_F9R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5492 
	#CAN_F9R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5493 
	#CAN_F9R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5494 
	#CAN_F9R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5495 
	#CAN_F9R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5496 
	#CAN_F9R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5497 
	#CAN_F9R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5498 
	#CAN_F9R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5499 
	#CAN_F9R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5500 
	#CAN_F9R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5501 
	#CAN_F9R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5502 
	#CAN_F9R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5503 
	#CAN_F9R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5504 
	#CAN_F9R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5505 
	#CAN_F9R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5506 
	#CAN_F9R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5507 
	#CAN_F9R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5508 
	#CAN_F9R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5509 
	#CAN_F9R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5510 
	#CAN_F9R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5511 
	#CAN_F9R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5512 
	#CAN_F9R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5515 
	#CAN_F10R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5516 
	#CAN_F10R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5517 
	#CAN_F10R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5518 
	#CAN_F10R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5519 
	#CAN_F10R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5520 
	#CAN_F10R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5521 
	#CAN_F10R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5522 
	#CAN_F10R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5523 
	#CAN_F10R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5524 
	#CAN_F10R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5525 
	#CAN_F10R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5526 
	#CAN_F10R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5527 
	#CAN_F10R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5528 
	#CAN_F10R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5529 
	#CAN_F10R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5530 
	#CAN_F10R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5531 
	#CAN_F10R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5532 
	#CAN_F10R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5533 
	#CAN_F10R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5534 
	#CAN_F10R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5535 
	#CAN_F10R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5536 
	#CAN_F10R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5537 
	#CAN_F10R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5538 
	#CAN_F10R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5539 
	#CAN_F10R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5540 
	#CAN_F10R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5541 
	#CAN_F10R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5542 
	#CAN_F10R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5543 
	#CAN_F10R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5544 
	#CAN_F10R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5545 
	#CAN_F10R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5546 
	#CAN_F10R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5549 
	#CAN_F11R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5550 
	#CAN_F11R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5551 
	#CAN_F11R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5552 
	#CAN_F11R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5553 
	#CAN_F11R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5554 
	#CAN_F11R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5555 
	#CAN_F11R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5556 
	#CAN_F11R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5557 
	#CAN_F11R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5558 
	#CAN_F11R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5559 
	#CAN_F11R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5560 
	#CAN_F11R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5561 
	#CAN_F11R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5562 
	#CAN_F11R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5563 
	#CAN_F11R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5564 
	#CAN_F11R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5565 
	#CAN_F11R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5566 
	#CAN_F11R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5567 
	#CAN_F11R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5568 
	#CAN_F11R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5569 
	#CAN_F11R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5570 
	#CAN_F11R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5571 
	#CAN_F11R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5572 
	#CAN_F11R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5573 
	#CAN_F11R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5574 
	#CAN_F11R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5575 
	#CAN_F11R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5576 
	#CAN_F11R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5577 
	#CAN_F11R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5578 
	#CAN_F11R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5579 
	#CAN_F11R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5580 
	#CAN_F11R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5583 
	#CAN_F12R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5584 
	#CAN_F12R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5585 
	#CAN_F12R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5586 
	#CAN_F12R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5587 
	#CAN_F12R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5588 
	#CAN_F12R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5589 
	#CAN_F12R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5590 
	#CAN_F12R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5591 
	#CAN_F12R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5592 
	#CAN_F12R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5593 
	#CAN_F12R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5594 
	#CAN_F12R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5595 
	#CAN_F12R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5596 
	#CAN_F12R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5597 
	#CAN_F12R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5598 
	#CAN_F12R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5599 
	#CAN_F12R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5600 
	#CAN_F12R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5601 
	#CAN_F12R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5602 
	#CAN_F12R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5603 
	#CAN_F12R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5604 
	#CAN_F12R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5605 
	#CAN_F12R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5606 
	#CAN_F12R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5607 
	#CAN_F12R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5608 
	#CAN_F12R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5609 
	#CAN_F12R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5610 
	#CAN_F12R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5611 
	#CAN_F12R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5612 
	#CAN_F12R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5613 
	#CAN_F12R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5614 
	#CAN_F12R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5617 
	#CAN_F13R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5618 
	#CAN_F13R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5619 
	#CAN_F13R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5620 
	#CAN_F13R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5621 
	#CAN_F13R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5622 
	#CAN_F13R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5623 
	#CAN_F13R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5624 
	#CAN_F13R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5625 
	#CAN_F13R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5626 
	#CAN_F13R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5627 
	#CAN_F13R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5628 
	#CAN_F13R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5629 
	#CAN_F13R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5630 
	#CAN_F13R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5631 
	#CAN_F13R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5632 
	#CAN_F13R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5633 
	#CAN_F13R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5634 
	#CAN_F13R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5635 
	#CAN_F13R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5636 
	#CAN_F13R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5637 
	#CAN_F13R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5638 
	#CAN_F13R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5639 
	#CAN_F13R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5640 
	#CAN_F13R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5641 
	#CAN_F13R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5642 
	#CAN_F13R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5643 
	#CAN_F13R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5644 
	#CAN_F13R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5645 
	#CAN_F13R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5646 
	#CAN_F13R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5647 
	#CAN_F13R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5648 
	#CAN_F13R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5651 
	#CAN_F14R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5652 
	#CAN_F14R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5653 
	#CAN_F14R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5654 
	#CAN_F14R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5655 
	#CAN_F14R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5656 
	#CAN_F14R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5657 
	#CAN_F14R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5658 
	#CAN_F14R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5659 
	#CAN_F14R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5660 
	#CAN_F14R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5661 
	#CAN_F14R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5662 
	#CAN_F14R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5663 
	#CAN_F14R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5664 
	#CAN_F14R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5665 
	#CAN_F14R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5666 
	#CAN_F14R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5667 
	#CAN_F14R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5668 
	#CAN_F14R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5669 
	#CAN_F14R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5670 
	#CAN_F14R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5671 
	#CAN_F14R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5672 
	#CAN_F14R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5673 
	#CAN_F14R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5674 
	#CAN_F14R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5675 
	#CAN_F14R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5676 
	#CAN_F14R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5677 
	#CAN_F14R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5678 
	#CAN_F14R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5679 
	#CAN_F14R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5680 
	#CAN_F14R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5681 
	#CAN_F14R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5682 
	#CAN_F14R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5685 
	#CAN_F15R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5686 
	#CAN_F15R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5687 
	#CAN_F15R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5688 
	#CAN_F15R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5689 
	#CAN_F15R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5690 
	#CAN_F15R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5691 
	#CAN_F15R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5692 
	#CAN_F15R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5693 
	#CAN_F15R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5694 
	#CAN_F15R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5695 
	#CAN_F15R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5696 
	#CAN_F15R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5697 
	#CAN_F15R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5698 
	#CAN_F15R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5699 
	#CAN_F15R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5700 
	#CAN_F15R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5701 
	#CAN_F15R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5702 
	#CAN_F15R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5703 
	#CAN_F15R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5704 
	#CAN_F15R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5705 
	#CAN_F15R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5706 
	#CAN_F15R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5707 
	#CAN_F15R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5708 
	#CAN_F15R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5709 
	#CAN_F15R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5710 
	#CAN_F15R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5711 
	#CAN_F15R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5712 
	#CAN_F15R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5713 
	#CAN_F15R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5714 
	#CAN_F15R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5715 
	#CAN_F15R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5716 
	#CAN_F15R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5719 
	#CAN_F16R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5720 
	#CAN_F16R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5721 
	#CAN_F16R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5722 
	#CAN_F16R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5723 
	#CAN_F16R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5724 
	#CAN_F16R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5725 
	#CAN_F16R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5726 
	#CAN_F16R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5727 
	#CAN_F16R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5728 
	#CAN_F16R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5729 
	#CAN_F16R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5730 
	#CAN_F16R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5731 
	#CAN_F16R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5732 
	#CAN_F16R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5733 
	#CAN_F16R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5734 
	#CAN_F16R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5735 
	#CAN_F16R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5736 
	#CAN_F16R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5737 
	#CAN_F16R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5738 
	#CAN_F16R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5739 
	#CAN_F16R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5740 
	#CAN_F16R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5741 
	#CAN_F16R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5742 
	#CAN_F16R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5743 
	#CAN_F16R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5744 
	#CAN_F16R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5745 
	#CAN_F16R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5746 
	#CAN_F16R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5747 
	#CAN_F16R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5748 
	#CAN_F16R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5749 
	#CAN_F16R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5750 
	#CAN_F16R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5753 
	#CAN_F17R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5754 
	#CAN_F17R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5755 
	#CAN_F17R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5756 
	#CAN_F17R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5757 
	#CAN_F17R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5758 
	#CAN_F17R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5759 
	#CAN_F17R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5760 
	#CAN_F17R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5761 
	#CAN_F17R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5762 
	#CAN_F17R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5763 
	#CAN_F17R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5764 
	#CAN_F17R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5765 
	#CAN_F17R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5766 
	#CAN_F17R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5767 
	#CAN_F17R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5768 
	#CAN_F17R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5769 
	#CAN_F17R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5770 
	#CAN_F17R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5771 
	#CAN_F17R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5772 
	#CAN_F17R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5773 
	#CAN_F17R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5774 
	#CAN_F17R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5775 
	#CAN_F17R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5776 
	#CAN_F17R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5777 
	#CAN_F17R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5778 
	#CAN_F17R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5779 
	#CAN_F17R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5780 
	#CAN_F17R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5781 
	#CAN_F17R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5782 
	#CAN_F17R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5783 
	#CAN_F17R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5784 
	#CAN_F17R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5787 
	#CAN_F18R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5788 
	#CAN_F18R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5789 
	#CAN_F18R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5790 
	#CAN_F18R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5791 
	#CAN_F18R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5792 
	#CAN_F18R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5793 
	#CAN_F18R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5794 
	#CAN_F18R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5795 
	#CAN_F18R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5796 
	#CAN_F18R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5797 
	#CAN_F18R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5798 
	#CAN_F18R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5799 
	#CAN_F18R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5800 
	#CAN_F18R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5801 
	#CAN_F18R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5802 
	#CAN_F18R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5803 
	#CAN_F18R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5804 
	#CAN_F18R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5805 
	#CAN_F18R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5806 
	#CAN_F18R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5807 
	#CAN_F18R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5808 
	#CAN_F18R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5809 
	#CAN_F18R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5810 
	#CAN_F18R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5811 
	#CAN_F18R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5812 
	#CAN_F18R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5813 
	#CAN_F18R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5814 
	#CAN_F18R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5815 
	#CAN_F18R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5816 
	#CAN_F18R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5817 
	#CAN_F18R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5818 
	#CAN_F18R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5821 
	#CAN_F19R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5822 
	#CAN_F19R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5823 
	#CAN_F19R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5824 
	#CAN_F19R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5825 
	#CAN_F19R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5826 
	#CAN_F19R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5827 
	#CAN_F19R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5828 
	#CAN_F19R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5829 
	#CAN_F19R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5830 
	#CAN_F19R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5831 
	#CAN_F19R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5832 
	#CAN_F19R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5833 
	#CAN_F19R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5834 
	#CAN_F19R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5835 
	#CAN_F19R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5836 
	#CAN_F19R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5837 
	#CAN_F19R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5838 
	#CAN_F19R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5839 
	#CAN_F19R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5840 
	#CAN_F19R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5841 
	#CAN_F19R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5842 
	#CAN_F19R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5843 
	#CAN_F19R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5844 
	#CAN_F19R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5845 
	#CAN_F19R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5846 
	#CAN_F19R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5847 
	#CAN_F19R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5848 
	#CAN_F19R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5849 
	#CAN_F19R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5850 
	#CAN_F19R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5851 
	#CAN_F19R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5852 
	#CAN_F19R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5855 
	#CAN_F20R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5856 
	#CAN_F20R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5857 
	#CAN_F20R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5858 
	#CAN_F20R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5859 
	#CAN_F20R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5860 
	#CAN_F20R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5861 
	#CAN_F20R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5862 
	#CAN_F20R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5863 
	#CAN_F20R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5864 
	#CAN_F20R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5865 
	#CAN_F20R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5866 
	#CAN_F20R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5867 
	#CAN_F20R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5868 
	#CAN_F20R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5869 
	#CAN_F20R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5870 
	#CAN_F20R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5871 
	#CAN_F20R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5872 
	#CAN_F20R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5873 
	#CAN_F20R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5874 
	#CAN_F20R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5875 
	#CAN_F20R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5876 
	#CAN_F20R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5877 
	#CAN_F20R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5878 
	#CAN_F20R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5879 
	#CAN_F20R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5880 
	#CAN_F20R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5881 
	#CAN_F20R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5882 
	#CAN_F20R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5883 
	#CAN_F20R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5884 
	#CAN_F20R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5885 
	#CAN_F20R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5886 
	#CAN_F20R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5889 
	#CAN_F21R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5890 
	#CAN_F21R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5891 
	#CAN_F21R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5892 
	#CAN_F21R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5893 
	#CAN_F21R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5894 
	#CAN_F21R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5895 
	#CAN_F21R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5896 
	#CAN_F21R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5897 
	#CAN_F21R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5898 
	#CAN_F21R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5899 
	#CAN_F21R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5900 
	#CAN_F21R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5901 
	#CAN_F21R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5902 
	#CAN_F21R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5903 
	#CAN_F21R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5904 
	#CAN_F21R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5905 
	#CAN_F21R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5906 
	#CAN_F21R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5907 
	#CAN_F21R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5908 
	#CAN_F21R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5909 
	#CAN_F21R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5910 
	#CAN_F21R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5911 
	#CAN_F21R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5912 
	#CAN_F21R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5913 
	#CAN_F21R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5914 
	#CAN_F21R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5915 
	#CAN_F21R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5916 
	#CAN_F21R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5917 
	#CAN_F21R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5918 
	#CAN_F21R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5919 
	#CAN_F21R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5920 
	#CAN_F21R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5923 
	#CAN_F22R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5924 
	#CAN_F22R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5925 
	#CAN_F22R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5926 
	#CAN_F22R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5927 
	#CAN_F22R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5928 
	#CAN_F22R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5929 
	#CAN_F22R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5930 
	#CAN_F22R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5931 
	#CAN_F22R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5932 
	#CAN_F22R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5933 
	#CAN_F22R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5934 
	#CAN_F22R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5935 
	#CAN_F22R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5936 
	#CAN_F22R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5937 
	#CAN_F22R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5938 
	#CAN_F22R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5939 
	#CAN_F22R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5940 
	#CAN_F22R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5941 
	#CAN_F22R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5942 
	#CAN_F22R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5943 
	#CAN_F22R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5944 
	#CAN_F22R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5945 
	#CAN_F22R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5946 
	#CAN_F22R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5947 
	#CAN_F22R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5948 
	#CAN_F22R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5949 
	#CAN_F22R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5950 
	#CAN_F22R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5951 
	#CAN_F22R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5952 
	#CAN_F22R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5953 
	#CAN_F22R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5954 
	#CAN_F22R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5957 
	#CAN_F23R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5958 
	#CAN_F23R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5959 
	#CAN_F23R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5960 
	#CAN_F23R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5961 
	#CAN_F23R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5962 
	#CAN_F23R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5963 
	#CAN_F23R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5964 
	#CAN_F23R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5965 
	#CAN_F23R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

5966 
	#CAN_F23R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

5967 
	#CAN_F23R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

5968 
	#CAN_F23R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

5969 
	#CAN_F23R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

5970 
	#CAN_F23R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

5971 
	#CAN_F23R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

5972 
	#CAN_F23R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

5973 
	#CAN_F23R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

5974 
	#CAN_F23R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

5975 
	#CAN_F23R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

5976 
	#CAN_F23R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

5977 
	#CAN_F23R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

5978 
	#CAN_F23R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

5979 
	#CAN_F23R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

5980 
	#CAN_F23R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

5981 
	#CAN_F23R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

5982 
	#CAN_F23R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

5983 
	#CAN_F23R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

5984 
	#CAN_F23R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

5985 
	#CAN_F23R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

5986 
	#CAN_F23R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

5987 
	#CAN_F23R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

5988 
	#CAN_F23R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

5991 
	#CAN_F24R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

5992 
	#CAN_F24R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

5993 
	#CAN_F24R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

5994 
	#CAN_F24R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

5995 
	#CAN_F24R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

5996 
	#CAN_F24R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

5997 
	#CAN_F24R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

5998 
	#CAN_F24R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

5999 
	#CAN_F24R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6000 
	#CAN_F24R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6001 
	#CAN_F24R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6002 
	#CAN_F24R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6003 
	#CAN_F24R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6004 
	#CAN_F24R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6005 
	#CAN_F24R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6006 
	#CAN_F24R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6007 
	#CAN_F24R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6008 
	#CAN_F24R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6009 
	#CAN_F24R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6010 
	#CAN_F24R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6011 
	#CAN_F24R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6012 
	#CAN_F24R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6013 
	#CAN_F24R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6014 
	#CAN_F24R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6015 
	#CAN_F24R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6016 
	#CAN_F24R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6017 
	#CAN_F24R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6018 
	#CAN_F24R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6019 
	#CAN_F24R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6020 
	#CAN_F24R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6021 
	#CAN_F24R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6022 
	#CAN_F24R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6025 
	#CAN_F25R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6026 
	#CAN_F25R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6027 
	#CAN_F25R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6028 
	#CAN_F25R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6029 
	#CAN_F25R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6030 
	#CAN_F25R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6031 
	#CAN_F25R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6032 
	#CAN_F25R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6033 
	#CAN_F25R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6034 
	#CAN_F25R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6035 
	#CAN_F25R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6036 
	#CAN_F25R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6037 
	#CAN_F25R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6038 
	#CAN_F25R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6039 
	#CAN_F25R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6040 
	#CAN_F25R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6041 
	#CAN_F25R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6042 
	#CAN_F25R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6043 
	#CAN_F25R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6044 
	#CAN_F25R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6045 
	#CAN_F25R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6046 
	#CAN_F25R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6047 
	#CAN_F25R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6048 
	#CAN_F25R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6049 
	#CAN_F25R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6050 
	#CAN_F25R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6051 
	#CAN_F25R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6052 
	#CAN_F25R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6053 
	#CAN_F25R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6054 
	#CAN_F25R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6055 
	#CAN_F25R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6056 
	#CAN_F25R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6059 
	#CAN_F26R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6060 
	#CAN_F26R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6061 
	#CAN_F26R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6062 
	#CAN_F26R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6063 
	#CAN_F26R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6064 
	#CAN_F26R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6065 
	#CAN_F26R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6066 
	#CAN_F26R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6067 
	#CAN_F26R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6068 
	#CAN_F26R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6069 
	#CAN_F26R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6070 
	#CAN_F26R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6071 
	#CAN_F26R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6072 
	#CAN_F26R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6073 
	#CAN_F26R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6074 
	#CAN_F26R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6075 
	#CAN_F26R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6076 
	#CAN_F26R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6077 
	#CAN_F26R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6078 
	#CAN_F26R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6079 
	#CAN_F26R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6080 
	#CAN_F26R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6081 
	#CAN_F26R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6082 
	#CAN_F26R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6083 
	#CAN_F26R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6084 
	#CAN_F26R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6085 
	#CAN_F26R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6086 
	#CAN_F26R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6087 
	#CAN_F26R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6088 
	#CAN_F26R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6089 
	#CAN_F26R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6090 
	#CAN_F26R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6093 
	#CAN_F27R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

6094 
	#CAN_F27R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

6095 
	#CAN_F27R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

6096 
	#CAN_F27R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

6097 
	#CAN_F27R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

6098 
	#CAN_F27R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

6099 
	#CAN_F27R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

6100 
	#CAN_F27R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

6101 
	#CAN_F27R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

6102 
	#CAN_F27R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

6103 
	#CAN_F27R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

6104 
	#CAN_F27R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

6105 
	#CAN_F27R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

6106 
	#CAN_F27R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

6107 
	#CAN_F27R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

6108 
	#CAN_F27R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

6109 
	#CAN_F27R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

6110 
	#CAN_F27R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

6111 
	#CAN_F27R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

6112 
	#CAN_F27R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

6113 
	#CAN_F27R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

6114 
	#CAN_F27R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

6115 
	#CAN_F27R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

6116 
	#CAN_F27R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

6117 
	#CAN_F27R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

6118 
	#CAN_F27R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

6119 
	#CAN_F27R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

6120 
	#CAN_F27R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

6121 
	#CAN_F27R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

6122 
	#CAN_F27R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

6123 
	#CAN_F27R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

6124 
	#CAN_F27R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

6133 
	#SPI_CR1_CPHA
 ((
uöt32_t
)0x00000001Ë

	)

6134 
	#SPI_CR1_CPOL
 ((
uöt32_t
)0x00000002Ë

	)

6135 
	#SPI_CR1_MSTR
 ((
uöt32_t
)0x00000004Ë

	)

6137 
	#SPI_CR1_BR
 ((
uöt32_t
)0x00000038Ë

	)

6138 
	#SPI_CR1_BR_0
 ((
uöt32_t
)0x00000008Ë

	)

6139 
	#SPI_CR1_BR_1
 ((
uöt32_t
)0x00000010Ë

	)

6140 
	#SPI_CR1_BR_2
 ((
uöt32_t
)0x00000020Ë

	)

6142 
	#SPI_CR1_SPE
 ((
uöt32_t
)0x00000040Ë

	)

6143 
	#SPI_CR1_LSBFIRST
 ((
uöt32_t
)0x00000080Ë

	)

6144 
	#SPI_CR1_SSI
 ((
uöt32_t
)0x00000100Ë

	)

6145 
	#SPI_CR1_SSM
 ((
uöt32_t
)0x00000200Ë

	)

6146 
	#SPI_CR1_RXONLY
 ((
uöt32_t
)0x00000400Ë

	)

6147 
	#SPI_CR1_DFF
 ((
uöt32_t
)0x00000800Ë

	)

6148 
	#SPI_CR1_CRCNEXT
 ((
uöt32_t
)0x00001000Ë

	)

6149 
	#SPI_CR1_CRCEN
 ((
uöt32_t
)0x00002000Ë

	)

6150 
	#SPI_CR1_BIDIOE
 ((
uöt32_t
)0x00004000Ë

	)

6151 
	#SPI_CR1_BIDIMODE
 ((
uöt32_t
)0x00008000Ë

	)

6154 
	#SPI_CR2_RXDMAEN
 ((
uöt32_t
)0x00000001Ë

	)

6155 
	#SPI_CR2_TXDMAEN
 ((
uöt32_t
)0x00000002Ë

	)

6156 
	#SPI_CR2_SSOE
 ((
uöt32_t
)0x00000004Ë

	)

6157 
	#SPI_CR2_ERRIE
 ((
uöt32_t
)0x00000020Ë

	)

6158 
	#SPI_CR2_RXNEIE
 ((
uöt32_t
)0x00000040Ë

	)

6159 
	#SPI_CR2_TXEIE
 ((
uöt32_t
)0x00000080Ë

	)

6162 
	#SPI_SR_RXNE
 ((
uöt32_t
)0x00000001Ë

	)

6163 
	#SPI_SR_TXE
 ((
uöt32_t
)0x00000002Ë

	)

6164 
	#SPI_SR_CHSIDE
 ((
uöt32_t
)0x00000004Ë

	)

6165 
	#SPI_SR_UDR
 ((
uöt32_t
)0x00000008Ë

	)

6166 
	#SPI_SR_CRCERR
 ((
uöt32_t
)0x00000010Ë

	)

6167 
	#SPI_SR_MODF
 ((
uöt32_t
)0x00000020Ë

	)

6168 
	#SPI_SR_OVR
 ((
uöt32_t
)0x00000040Ë

	)

6169 
	#SPI_SR_BSY
 ((
uöt32_t
)0x00000080Ë

	)

6172 
	#SPI_DR_DR
 ((
uöt32_t
)0x0000FFFFË

	)

6175 
	#SPI_CRCPR_CRCPOLY
 ((
uöt32_t
)0x0000FFFFË

	)

6178 
	#SPI_RXCRCR_RXCRC
 ((
uöt32_t
)0x0000FFFFË

	)

6181 
	#SPI_TXCRCR_TXCRC
 ((
uöt32_t
)0x0000FFFFË

	)

6184 
	#SPI_I2SCFGR_CHLEN
 ((
uöt32_t
)0x00000001Ë

	)

6186 
	#SPI_I2SCFGR_DATLEN
 ((
uöt32_t
)0x00000006Ë

	)

6187 
	#SPI_I2SCFGR_DATLEN_0
 ((
uöt32_t
)0x00000002Ë

	)

6188 
	#SPI_I2SCFGR_DATLEN_1
 ((
uöt32_t
)0x00000004Ë

	)

6190 
	#SPI_I2SCFGR_CKPOL
 ((
uöt32_t
)0x00000008Ë

	)

6192 
	#SPI_I2SCFGR_I2SSTD
 ((
uöt32_t
)0x00000030Ë

	)

6193 
	#SPI_I2SCFGR_I2SSTD_0
 ((
uöt32_t
)0x00000010Ë

	)

6194 
	#SPI_I2SCFGR_I2SSTD_1
 ((
uöt32_t
)0x00000020Ë

	)

6196 
	#SPI_I2SCFGR_PCMSYNC
 ((
uöt32_t
)0x00000080Ë

	)

6198 
	#SPI_I2SCFGR_I2SCFG
 ((
uöt32_t
)0x00000300Ë

	)

6199 
	#SPI_I2SCFGR_I2SCFG_0
 ((
uöt32_t
)0x00000100Ë

	)

6200 
	#SPI_I2SCFGR_I2SCFG_1
 ((
uöt32_t
)0x00000200Ë

	)

6202 
	#SPI_I2SCFGR_I2SE
 ((
uöt32_t
)0x00000400Ë

	)

6203 
	#SPI_I2SCFGR_I2SMOD
 ((
uöt32_t
)0x00000800Ë

	)

6206 
	#SPI_I2SPR_I2SDIV
 ((
uöt32_t
)0x000000FFË

	)

6207 
	#SPI_I2SPR_ODD
 ((
uöt32_t
)0x00000100Ë

	)

6208 
	#SPI_I2SPR_MCKOE
 ((
uöt32_t
)0x00000200Ë

	)

6217 
	#I2C_CR1_PE
 ((
uöt32_t
)0x00000001Ë

	)

6218 
	#I2C_CR1_SMBUS
 ((
uöt32_t
)0x00000002Ë

	)

6219 
	#I2C_CR1_SMBTYPE
 ((
uöt32_t
)0x00000008Ë

	)

6220 
	#I2C_CR1_ENARP
 ((
uöt32_t
)0x00000010Ë

	)

6221 
	#I2C_CR1_ENPEC
 ((
uöt32_t
)0x00000020Ë

	)

6222 
	#I2C_CR1_ENGC
 ((
uöt32_t
)0x00000040Ë

	)

6223 
	#I2C_CR1_NOSTRETCH
 ((
uöt32_t
)0x00000080Ë

	)

6224 
	#I2C_CR1_START
 ((
uöt32_t
)0x00000100Ë

	)

6225 
	#I2C_CR1_STOP
 ((
uöt32_t
)0x00000200Ë

	)

6226 
	#I2C_CR1_ACK
 ((
uöt32_t
)0x00000400Ë

	)

6227 
	#I2C_CR1_POS
 ((
uöt32_t
)0x00000800Ë

	)

6228 
	#I2C_CR1_PEC
 ((
uöt32_t
)0x00001000Ë

	)

6229 
	#I2C_CR1_ALERT
 ((
uöt32_t
)0x00002000Ë

	)

6230 
	#I2C_CR1_SWRST
 ((
uöt32_t
)0x00008000Ë

	)

6233 
	#I2C_CR2_FREQ
 ((
uöt32_t
)0x0000003FË

	)

6234 
	#I2C_CR2_FREQ_0
 ((
uöt32_t
)0x00000001Ë

	)

6235 
	#I2C_CR2_FREQ_1
 ((
uöt32_t
)0x00000002Ë

	)

6236 
	#I2C_CR2_FREQ_2
 ((
uöt32_t
)0x00000004Ë

	)

6237 
	#I2C_CR2_FREQ_3
 ((
uöt32_t
)0x00000008Ë

	)

6238 
	#I2C_CR2_FREQ_4
 ((
uöt32_t
)0x00000010Ë

	)

6239 
	#I2C_CR2_FREQ_5
 ((
uöt32_t
)0x00000020Ë

	)

6241 
	#I2C_CR2_ITERREN
 ((
uöt32_t
)0x00000100Ë

	)

6242 
	#I2C_CR2_ITEVTEN
 ((
uöt32_t
)0x00000200Ë

	)

6243 
	#I2C_CR2_ITBUFEN
 ((
uöt32_t
)0x00000400Ë

	)

6244 
	#I2C_CR2_DMAEN
 ((
uöt32_t
)0x00000800Ë

	)

6245 
	#I2C_CR2_LAST
 ((
uöt32_t
)0x00001000Ë

	)

6248 
	#I2C_OAR1_ADD1_7
 ((
uöt32_t
)0x000000FEË

	)

6249 
	#I2C_OAR1_ADD8_9
 ((
uöt32_t
)0x00000300Ë

	)

6251 
	#I2C_OAR1_ADD0
 ((
uöt32_t
)0x00000001Ë

	)

6252 
	#I2C_OAR1_ADD1
 ((
uöt32_t
)0x00000002Ë

	)

6253 
	#I2C_OAR1_ADD2
 ((
uöt32_t
)0x00000004Ë

	)

6254 
	#I2C_OAR1_ADD3
 ((
uöt32_t
)0x00000008Ë

	)

6255 
	#I2C_OAR1_ADD4
 ((
uöt32_t
)0x00000010Ë

	)

6256 
	#I2C_OAR1_ADD5
 ((
uöt32_t
)0x00000020Ë

	)

6257 
	#I2C_OAR1_ADD6
 ((
uöt32_t
)0x00000040Ë

	)

6258 
	#I2C_OAR1_ADD7
 ((
uöt32_t
)0x00000080Ë

	)

6259 
	#I2C_OAR1_ADD8
 ((
uöt32_t
)0x00000100Ë

	)

6260 
	#I2C_OAR1_ADD9
 ((
uöt32_t
)0x00000200Ë

	)

6262 
	#I2C_OAR1_ADDMODE
 ((
uöt32_t
)0x00008000Ë

	)

6265 
	#I2C_OAR2_ENDUAL
 ((
uöt32_t
)0x00000001Ë

	)

6266 
	#I2C_OAR2_ADD2
 ((
uöt32_t
)0x000000FEË

	)

6269 
	#I2C_SR1_SB
 ((
uöt32_t
)0x00000001Ë

	)

6270 
	#I2C_SR1_ADDR
 ((
uöt32_t
)0x00000002Ë

	)

6271 
	#I2C_SR1_BTF
 ((
uöt32_t
)0x00000004Ë

	)

6272 
	#I2C_SR1_ADD10
 ((
uöt32_t
)0x00000008Ë

	)

6273 
	#I2C_SR1_STOPF
 ((
uöt32_t
)0x00000010Ë

	)

6274 
	#I2C_SR1_RXNE
 ((
uöt32_t
)0x00000040Ë

	)

6275 
	#I2C_SR1_TXE
 ((
uöt32_t
)0x00000080Ë

	)

6276 
	#I2C_SR1_BERR
 ((
uöt32_t
)0x00000100Ë

	)

6277 
	#I2C_SR1_ARLO
 ((
uöt32_t
)0x00000200Ë

	)

6278 
	#I2C_SR1_AF
 ((
uöt32_t
)0x00000400Ë

	)

6279 
	#I2C_SR1_OVR
 ((
uöt32_t
)0x00000800Ë

	)

6280 
	#I2C_SR1_PECERR
 ((
uöt32_t
)0x00001000Ë

	)

6281 
	#I2C_SR1_TIMEOUT
 ((
uöt32_t
)0x00004000Ë

	)

6282 
	#I2C_SR1_SMBALERT
 ((
uöt32_t
)0x00008000Ë

	)

6285 
	#I2C_SR2_MSL
 ((
uöt32_t
)0x00000001Ë

	)

6286 
	#I2C_SR2_BUSY
 ((
uöt32_t
)0x00000002Ë

	)

6287 
	#I2C_SR2_TRA
 ((
uöt32_t
)0x00000004Ë

	)

6288 
	#I2C_SR2_GENCALL
 ((
uöt32_t
)0x00000010Ë

	)

6289 
	#I2C_SR2_SMBDEFAULT
 ((
uöt32_t
)0x00000020Ë

	)

6290 
	#I2C_SR2_SMBHOST
 ((
uöt32_t
)0x00000040Ë

	)

6291 
	#I2C_SR2_DUALF
 ((
uöt32_t
)0x00000080Ë

	)

6292 
	#I2C_SR2_PEC
 ((
uöt32_t
)0x0000FF00Ë

	)

6295 
	#I2C_CCR_CCR
 ((
uöt32_t
)0x00000FFFË

	)

6296 
	#I2C_CCR_DUTY
 ((
uöt32_t
)0x00004000Ë

	)

6297 
	#I2C_CCR_FS
 ((
uöt32_t
)0x00008000Ë

	)

6300 
	#I2C_TRISE_TRISE
 ((
uöt32_t
)0x0000003FË

	)

6309 
	#USART_SR_PE
 ((
uöt32_t
)0x00000001Ë

	)

6310 
	#USART_SR_FE
 ((
uöt32_t
)0x00000002Ë

	)

6311 
	#USART_SR_NE
 ((
uöt32_t
)0x00000004Ë

	)

6312 
	#USART_SR_ORE
 ((
uöt32_t
)0x00000008Ë

	)

6313 
	#USART_SR_IDLE
 ((
uöt32_t
)0x00000010Ë

	)

6314 
	#USART_SR_RXNE
 ((
uöt32_t
)0x00000020Ë

	)

6315 
	#USART_SR_TC
 ((
uöt32_t
)0x00000040Ë

	)

6316 
	#USART_SR_TXE
 ((
uöt32_t
)0x00000080Ë

	)

6317 
	#USART_SR_LBD
 ((
uöt32_t
)0x00000100Ë

	)

6318 
	#USART_SR_CTS
 ((
uöt32_t
)0x00000200Ë

	)

6321 
	#USART_DR_DR
 ((
uöt32_t
)0x000001FFË

	)

6324 
	#USART_BRR_DIV_Fø˘i⁄
 ((
uöt32_t
)0x0000000FË

	)

6325 
	#USART_BRR_DIV_M™tisß
 ((
uöt32_t
)0x0000FFF0Ë

	)

6328 
	#USART_CR1_SBK
 ((
uöt32_t
)0x00000001Ë

	)

6329 
	#USART_CR1_RWU
 ((
uöt32_t
)0x00000002Ë

	)

6330 
	#USART_CR1_RE
 ((
uöt32_t
)0x00000004Ë

	)

6331 
	#USART_CR1_TE
 ((
uöt32_t
)0x00000008Ë

	)

6332 
	#USART_CR1_IDLEIE
 ((
uöt32_t
)0x00000010Ë

	)

6333 
	#USART_CR1_RXNEIE
 ((
uöt32_t
)0x00000020Ë

	)

6334 
	#USART_CR1_TCIE
 ((
uöt32_t
)0x00000040Ë

	)

6335 
	#USART_CR1_TXEIE
 ((
uöt32_t
)0x00000080Ë

	)

6336 
	#USART_CR1_PEIE
 ((
uöt32_t
)0x00000100Ë

	)

6337 
	#USART_CR1_PS
 ((
uöt32_t
)0x00000200Ë

	)

6338 
	#USART_CR1_PCE
 ((
uöt32_t
)0x00000400Ë

	)

6339 
	#USART_CR1_WAKE
 ((
uöt32_t
)0x00000800Ë

	)

6340 
	#USART_CR1_M
 ((
uöt32_t
)0x00001000Ë

	)

6341 
	#USART_CR1_UE
 ((
uöt32_t
)0x00002000Ë

	)

6344 
	#USART_CR2_ADD
 ((
uöt32_t
)0x0000000FË

	)

6345 
	#USART_CR2_LBDL
 ((
uöt32_t
)0x00000020Ë

	)

6346 
	#USART_CR2_LBDIE
 ((
uöt32_t
)0x00000040Ë

	)

6347 
	#USART_CR2_LBCL
 ((
uöt32_t
)0x00000100Ë

	)

6348 
	#USART_CR2_CPHA
 ((
uöt32_t
)0x00000200Ë

	)

6349 
	#USART_CR2_CPOL
 ((
uöt32_t
)0x00000400Ë

	)

6350 
	#USART_CR2_CLKEN
 ((
uöt32_t
)0x00000800Ë

	)

6352 
	#USART_CR2_STOP
 ((
uöt32_t
)0x00003000Ë

	)

6353 
	#USART_CR2_STOP_0
 ((
uöt32_t
)0x00001000Ë

	)

6354 
	#USART_CR2_STOP_1
 ((
uöt32_t
)0x00002000Ë

	)

6356 
	#USART_CR2_LINEN
 ((
uöt32_t
)0x00004000Ë

	)

6359 
	#USART_CR3_EIE
 ((
uöt32_t
)0x00000001Ë

	)

6360 
	#USART_CR3_IREN
 ((
uöt32_t
)0x00000002Ë

	)

6361 
	#USART_CR3_IRLP
 ((
uöt32_t
)0x00000004Ë

	)

6362 
	#USART_CR3_HDSEL
 ((
uöt32_t
)0x00000008Ë

	)

6363 
	#USART_CR3_NACK
 ((
uöt32_t
)0x00000010Ë

	)

6364 
	#USART_CR3_SCEN
 ((
uöt32_t
)0x00000020Ë

	)

6365 
	#USART_CR3_DMAR
 ((
uöt32_t
)0x00000040Ë

	)

6366 
	#USART_CR3_DMAT
 ((
uöt32_t
)0x00000080Ë

	)

6367 
	#USART_CR3_RTSE
 ((
uöt32_t
)0x00000100Ë

	)

6368 
	#USART_CR3_CTSE
 ((
uöt32_t
)0x00000200Ë

	)

6369 
	#USART_CR3_CTSIE
 ((
uöt32_t
)0x00000400Ë

	)

6372 
	#USART_GTPR_PSC
 ((
uöt32_t
)0x000000FFË

	)

6373 
	#USART_GTPR_PSC_0
 ((
uöt32_t
)0x00000001Ë

	)

6374 
	#USART_GTPR_PSC_1
 ((
uöt32_t
)0x00000002Ë

	)

6375 
	#USART_GTPR_PSC_2
 ((
uöt32_t
)0x00000004Ë

	)

6376 
	#USART_GTPR_PSC_3
 ((
uöt32_t
)0x00000008Ë

	)

6377 
	#USART_GTPR_PSC_4
 ((
uöt32_t
)0x00000010Ë

	)

6378 
	#USART_GTPR_PSC_5
 ((
uöt32_t
)0x00000020Ë

	)

6379 
	#USART_GTPR_PSC_6
 ((
uöt32_t
)0x00000040Ë

	)

6380 
	#USART_GTPR_PSC_7
 ((
uöt32_t
)0x00000080Ë

	)

6382 
	#USART_GTPR_GT
 ((
uöt32_t
)0x0000FF00Ë

	)

6391 
	#DBGMCU_IDCODE_DEV_ID
 ((
uöt32_t
)0x00000FFFË

	)

6393 
	#DBGMCU_IDCODE_REV_ID
 ((
uöt32_t
)0xFFFF0000Ë

	)

6394 
	#DBGMCU_IDCODE_REV_ID_0
 ((
uöt32_t
)0x00010000Ë

	)

6395 
	#DBGMCU_IDCODE_REV_ID_1
 ((
uöt32_t
)0x00020000Ë

	)

6396 
	#DBGMCU_IDCODE_REV_ID_2
 ((
uöt32_t
)0x00040000Ë

	)

6397 
	#DBGMCU_IDCODE_REV_ID_3
 ((
uöt32_t
)0x00080000Ë

	)

6398 
	#DBGMCU_IDCODE_REV_ID_4
 ((
uöt32_t
)0x00100000Ë

	)

6399 
	#DBGMCU_IDCODE_REV_ID_5
 ((
uöt32_t
)0x00200000Ë

	)

6400 
	#DBGMCU_IDCODE_REV_ID_6
 ((
uöt32_t
)0x00400000Ë

	)

6401 
	#DBGMCU_IDCODE_REV_ID_7
 ((
uöt32_t
)0x00800000Ë

	)

6402 
	#DBGMCU_IDCODE_REV_ID_8
 ((
uöt32_t
)0x01000000Ë

	)

6403 
	#DBGMCU_IDCODE_REV_ID_9
 ((
uöt32_t
)0x02000000Ë

	)

6404 
	#DBGMCU_IDCODE_REV_ID_10
 ((
uöt32_t
)0x04000000Ë

	)

6405 
	#DBGMCU_IDCODE_REV_ID_11
 ((
uöt32_t
)0x08000000Ë

	)

6406 
	#DBGMCU_IDCODE_REV_ID_12
 ((
uöt32_t
)0x10000000Ë

	)

6407 
	#DBGMCU_IDCODE_REV_ID_13
 ((
uöt32_t
)0x20000000Ë

	)

6408 
	#DBGMCU_IDCODE_REV_ID_14
 ((
uöt32_t
)0x40000000Ë

	)

6409 
	#DBGMCU_IDCODE_REV_ID_15
 ((
uöt32_t
)0x80000000Ë

	)

6412 
	#DBGMCU_CR_DBG_SLEEP
 ((
uöt32_t
)0x00000001Ë

	)

6413 
	#DBGMCU_CR_DBG_STOP
 ((
uöt32_t
)0x00000002Ë

	)

6414 
	#DBGMCU_CR_DBG_STANDBY
 ((
uöt32_t
)0x00000004Ë

	)

6415 
	#DBGMCU_CR_TRACE_IOEN
 ((
uöt32_t
)0x00000020Ë

	)

6417 
	#DBGMCU_CR_TRACE_MODE
 ((
uöt32_t
)0x000000C0Ë

	)

6418 
	#DBGMCU_CR_TRACE_MODE_0
 ((
uöt32_t
)0x00000040Ë

	)

6419 
	#DBGMCU_CR_TRACE_MODE_1
 ((
uöt32_t
)0x00000080Ë

	)

6421 
	#DBGMCU_CR_DBG_IWDG_STOP
 ((
uöt32_t
)0x00000100Ë

	)

6422 
	#DBGMCU_CR_DBG_WWDG_STOP
 ((
uöt32_t
)0x00000200Ë

	)

6423 
	#DBGMCU_CR_DBG_TIM1_STOP
 ((
uöt32_t
)0x00000400Ë

	)

6424 
	#DBGMCU_CR_DBG_TIM2_STOP
 ((
uöt32_t
)0x00000800Ë

	)

6425 
	#DBGMCU_CR_DBG_TIM3_STOP
 ((
uöt32_t
)0x00001000Ë

	)

6426 
	#DBGMCU_CR_DBG_TIM4_STOP
 ((
uöt32_t
)0x00002000Ë

	)

6427 
	#DBGMCU_CR_DBG_CAN1_STOP
 ((
uöt32_t
)0x00004000Ë

	)

6428 
	#DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00008000Ë

	)

6429 
	#DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00010000Ë

	)

6430 
	#DBGMCU_CR_DBG_TIM5_STOP
 ((
uöt32_t
)0x00040000Ë

	)

6431 
	#DBGMCU_CR_DBG_TIM6_STOP
 ((
uöt32_t
)0x00080000Ë

	)

6432 
	#DBGMCU_CR_DBG_TIM7_STOP
 ((
uöt32_t
)0x00100000Ë

	)

6433 
	#DBGMCU_CR_DBG_CAN2_STOP
 ((
uöt32_t
)0x00200000Ë

	)

6434 
	#DBGMCU_CR_DBG_TIM9_STOP
 ((
uöt32_t
)0x10000000Ë

	)

6435 
	#DBGMCU_CR_DBG_TIM10_STOP
 ((
uöt32_t
)0x20000000Ë

	)

6436 
	#DBGMCU_CR_DBG_TIM11_STOP
 ((
uöt32_t
)0x40000000Ë

	)

6444 
	#FLASH_ACR_LATENCY
 ((
uöt32_t
)0x00000007Ë

	)

6445 
	#FLASH_ACR_LATENCY_0
 ((
uöt32_t
)0x00000001Ë

	)

6446 
	#FLASH_ACR_LATENCY_1
 ((
uöt32_t
)0x00000002Ë

	)

6447 
	#FLASH_ACR_LATENCY_2
 ((
uöt32_t
)0x00000004Ë

	)

6449 
	#FLASH_ACR_HLFCYA
 ((
uöt32_t
)0x00000008Ë

	)

6450 
	#FLASH_ACR_PRFTBE
 ((
uöt32_t
)0x00000010Ë

	)

6451 
	#FLASH_ACR_PRFTBS
 ((
uöt32_t
)0x00000020Ë

	)

6454 
	#FLASH_KEYR_FKEYR
 ((
uöt32_t
)0xFFFFFFFFË

	)

6456 
	#RDP_KEY
 ((
uöt32_t
)0x000000A5Ë

	)

6457 
	#FLASH_KEY1
 ((
uöt32_t
)0x45670123Ë

	)

6458 
	#FLASH_KEY2
 ((
uöt32_t
)0xCDEF89ABË

	)

6461 
	#FLASH_OPTKEYR_OPTKEYR
 ((
uöt32_t
)0xFFFFFFFFË

	)

6463 
	#FLASH_OPTKEY1
 
FLASH_KEY1


	)

6464 
	#FLASH_OPTKEY2
 
FLASH_KEY2


	)

6467 
	#FLASH_SR_BSY
 ((
uöt32_t
)0x00000001Ë

	)

6468 
	#FLASH_SR_PGERR
 ((
uöt32_t
)0x00000004Ë

	)

6469 
	#FLASH_SR_WRPRTERR
 ((
uöt32_t
)0x00000010Ë

	)

6470 
	#FLASH_SR_EOP
 ((
uöt32_t
)0x00000020Ë

	)

6473 
	#FLASH_CR_PG
 ((
uöt32_t
)0x00000001Ë

	)

6474 
	#FLASH_CR_PER
 ((
uöt32_t
)0x00000002Ë

	)

6475 
	#FLASH_CR_MER
 ((
uöt32_t
)0x00000004Ë

	)

6476 
	#FLASH_CR_OPTPG
 ((
uöt32_t
)0x00000010Ë

	)

6477 
	#FLASH_CR_OPTER
 ((
uöt32_t
)0x00000020Ë

	)

6478 
	#FLASH_CR_STRT
 ((
uöt32_t
)0x00000040Ë

	)

6479 
	#FLASH_CR_LOCK
 ((
uöt32_t
)0x00000080Ë

	)

6480 
	#FLASH_CR_OPTWRE
 ((
uöt32_t
)0x00000200Ë

	)

6481 
	#FLASH_CR_ERRIE
 ((
uöt32_t
)0x00000400Ë

	)

6482 
	#FLASH_CR_EOPIE
 ((
uöt32_t
)0x00001000Ë

	)

6485 
	#FLASH_AR_FAR
 ((
uöt32_t
)0xFFFFFFFFË

	)

6488 
	#FLASH_OBR_OPTERR
 ((
uöt32_t
)0x00000001Ë

	)

6489 
	#FLASH_OBR_RDPRT
 ((
uöt32_t
)0x00000002Ë

	)

6491 
	#FLASH_OBR_IWDG_SW
 ((
uöt32_t
)0x00000004Ë

	)

6492 
	#FLASH_OBR_nRST_STOP
 ((
uöt32_t
)0x00000008Ë

	)

6493 
	#FLASH_OBR_nRST_STDBY
 ((
uöt32_t
)0x00000010Ë

	)

6494 
	#FLASH_OBR_USER
 ((
uöt32_t
)0x0000001CË

	)

6495 
	#FLASH_OBR_DATA0
 ((
uöt32_t
)0x0003FC00Ë

	)

6496 
	#FLASH_OBR_DATA1
 ((
uöt32_t
)0x03FC0000Ë

	)

6499 
	#FLASH_WRPR_WRP
 ((
uöt32_t
)0xFFFFFFFFË

	)

6504 
	#FLASH_RDP_RDP
 ((
uöt32_t
)0x000000FFË

	)

6505 
	#FLASH_RDP_nRDP
 ((
uöt32_t
)0x0000FF00Ë

	)

6508 
	#FLASH_USER_USER
 ((
uöt32_t
)0x00FF0000Ë

	)

6509 
	#FLASH_USER_nUSER
 ((
uöt32_t
)0xFF000000Ë

	)

6512 
	#FLASH_DATA0_DATA0
 ((
uöt32_t
)0x000000FFË

	)

6513 
	#FLASH_DATA0_nDATA0
 ((
uöt32_t
)0x0000FF00Ë

	)

6516 
	#FLASH_DATA1_DATA1
 ((
uöt32_t
)0x00FF0000Ë

	)

6517 
	#FLASH_DATA1_nDATA1
 ((
uöt32_t
)0xFF000000Ë

	)

6520 
	#FLASH_WRP0_WRP0
 ((
uöt32_t
)0x000000FFË

	)

6521 
	#FLASH_WRP0_nWRP0
 ((
uöt32_t
)0x0000FF00Ë

	)

6524 
	#FLASH_WRP1_WRP1
 ((
uöt32_t
)0x00FF0000Ë

	)

6525 
	#FLASH_WRP1_nWRP1
 ((
uöt32_t
)0xFF000000Ë

	)

6528 
	#FLASH_WRP2_WRP2
 ((
uöt32_t
)0x000000FFË

	)

6529 
	#FLASH_WRP2_nWRP2
 ((
uöt32_t
)0x0000FF00Ë

	)

6532 
	#FLASH_WRP3_WRP3
 ((
uöt32_t
)0x00FF0000Ë

	)

6533 
	#FLASH_WRP3_nWRP3
 ((
uöt32_t
)0xFF000000Ë

	)

6543 
	#USB_OTG_GOTGCTL_SRQSCS
 ((
uöt32_t
)0x00000001Ë

	)

6544 
	#USB_OTG_GOTGCTL_SRQ
 ((
uöt32_t
)0x00000002Ë

	)

6545 
	#USB_OTG_GOTGCTL_HNGSCS
 ((
uöt32_t
)0x00000100Ë

	)

6546 
	#USB_OTG_GOTGCTL_HNPRQ
 ((
uöt32_t
)0x00000200Ë

	)

6547 
	#USB_OTG_GOTGCTL_HSHNPEN
 ((
uöt32_t
)0x00000400Ë

	)

6548 
	#USB_OTG_GOTGCTL_DHNPEN
 ((
uöt32_t
)0x00000800Ë

	)

6549 
	#USB_OTG_GOTGCTL_CIDSTS
 ((
uöt32_t
)0x00010000Ë

	)

6550 
	#USB_OTG_GOTGCTL_DBCT
 ((
uöt32_t
)0x00020000Ë

	)

6551 
	#USB_OTG_GOTGCTL_ASVLD
 ((
uöt32_t
)0x00040000Ë

	)

6552 
	#USB_OTG_GOTGCTL_BSVLD
 ((
uöt32_t
)0x00080000Ë

	)

6556 
	#USB_OTG_HCFG_FSLSPCS
 ((
uöt32_t
)0x00000003Ë

	)

6557 
	#USB_OTG_HCFG_FSLSPCS_0
 ((
uöt32_t
)0x00000001Ë

	)

6558 
	#USB_OTG_HCFG_FSLSPCS_1
 ((
uöt32_t
)0x00000002Ë

	)

6559 
	#USB_OTG_HCFG_FSLSS
 ((
uöt32_t
)0x00000004Ë

	)

6563 
	#USB_OTG_DCFG_DSPD
 ((
uöt32_t
)0x00000003Ë

	)

6564 
	#USB_OTG_DCFG_DSPD_0
 ((
uöt32_t
)0x00000001Ë

	)

6565 
	#USB_OTG_DCFG_DSPD_1
 ((
uöt32_t
)0x00000002Ë

	)

6566 
	#USB_OTG_DCFG_NZLSOHSK
 ((
uöt32_t
)0x00000004Ë

	)

6568 
	#USB_OTG_DCFG_DAD
 ((
uöt32_t
)0x000007F0Ë

	)

6569 
	#USB_OTG_DCFG_DAD_0
 ((
uöt32_t
)0x00000010Ë

	)

6570 
	#USB_OTG_DCFG_DAD_1
 ((
uöt32_t
)0x00000020Ë

	)

6571 
	#USB_OTG_DCFG_DAD_2
 ((
uöt32_t
)0x00000040Ë

	)

6572 
	#USB_OTG_DCFG_DAD_3
 ((
uöt32_t
)0x00000080Ë

	)

6573 
	#USB_OTG_DCFG_DAD_4
 ((
uöt32_t
)0x00000100Ë

	)

6574 
	#USB_OTG_DCFG_DAD_5
 ((
uöt32_t
)0x00000200Ë

	)

6575 
	#USB_OTG_DCFG_DAD_6
 ((
uöt32_t
)0x00000400Ë

	)

6577 
	#USB_OTG_DCFG_PFIVL
 ((
uöt32_t
)0x00001800Ë

	)

6578 
	#USB_OTG_DCFG_PFIVL_0
 ((
uöt32_t
)0x00000800Ë

	)

6579 
	#USB_OTG_DCFG_PFIVL_1
 ((
uöt32_t
)0x00001000Ë

	)

6581 
	#USB_OTG_DCFG_PERSCHIVL
 ((
uöt32_t
)0x03000000Ë

	)

6582 
	#USB_OTG_DCFG_PERSCHIVL_0
 ((
uöt32_t
)0x01000000Ë

	)

6583 
	#USB_OTG_DCFG_PERSCHIVL_1
 ((
uöt32_t
)0x02000000Ë

	)

6586 
	#USB_OTG_PCGCR_STPPCLK
 ((
uöt32_t
)0x00000001Ë

	)

6587 
	#USB_OTG_PCGCR_GATEHCLK
 ((
uöt32_t
)0x00000002Ë

	)

6588 
	#USB_OTG_PCGCR_PHYSUSP
 ((
uöt32_t
)0x00000010Ë

	)

6591 
	#USB_OTG_GOTGINT_SEDET
 ((
uöt32_t
)0x00000004Ë

	)

6592 
	#USB_OTG_GOTGINT_SRSSCHG
 ((
uöt32_t
)0x00000100Ë

	)

6593 
	#USB_OTG_GOTGINT_HNSSCHG
 ((
uöt32_t
)0x00000200Ë

	)

6594 
	#USB_OTG_GOTGINT_HNGDET
 ((
uöt32_t
)0x00020000Ë

	)

6595 
	#USB_OTG_GOTGINT_ADTOCHG
 ((
uöt32_t
)0x00040000Ë

	)

6596 
	#USB_OTG_GOTGINT_DBCDNE
 ((
uöt32_t
)0x00080000Ë

	)

6599 
	#USB_OTG_DCTL_RWUSIG
 ((
uöt32_t
)0x00000001Ë

	)

6600 
	#USB_OTG_DCTL_SDIS
 ((
uöt32_t
)0x00000002Ë

	)

6601 
	#USB_OTG_DCTL_GINSTS
 ((
uöt32_t
)0x00000004Ë

	)

6602 
	#USB_OTG_DCTL_GONSTS
 ((
uöt32_t
)0x00000008Ë

	)

6604 
	#USB_OTG_DCTL_TCTL
 ((
uöt32_t
)0x00000070Ë

	)

6605 
	#USB_OTG_DCTL_TCTL_0
 ((
uöt32_t
)0x00000010Ë

	)

6606 
	#USB_OTG_DCTL_TCTL_1
 ((
uöt32_t
)0x00000020Ë

	)

6607 
	#USB_OTG_DCTL_TCTL_2
 ((
uöt32_t
)0x00000040Ë

	)

6608 
	#USB_OTG_DCTL_SGINAK
 ((
uöt32_t
)0x00000080Ë

	)

6609 
	#USB_OTG_DCTL_CGINAK
 ((
uöt32_t
)0x00000100Ë

	)

6610 
	#USB_OTG_DCTL_SGONAK
 ((
uöt32_t
)0x00000200Ë

	)

6611 
	#USB_OTG_DCTL_CGONAK
 ((
uöt32_t
)0x00000400Ë

	)

6612 
	#USB_OTG_DCTL_POPRGDNE
 ((
uöt32_t
)0x00000800Ë

	)

6615 
	#USB_OTG_HFIR_FRIVL
 ((
uöt32_t
)0x0000FFFFË

	)

6618 
	#USB_OTG_HFNUM_FRNUM
 ((
uöt32_t
)0x0000FFFFË

	)

6619 
	#USB_OTG_HFNUM_FTREM
 ((
uöt32_t
)0xFFFF0000Ë

	)

6622 
	#USB_OTG_DSTS_SUSPSTS
 ((
uöt32_t
)0x00000001Ë

	)

6624 
	#USB_OTG_DSTS_ENUMSPD
 ((
uöt32_t
)0x00000006Ë

	)

6625 
	#USB_OTG_DSTS_ENUMSPD_0
 ((
uöt32_t
)0x00000002Ë

	)

6626 
	#USB_OTG_DSTS_ENUMSPD_1
 ((
uöt32_t
)0x00000004Ë

	)

6627 
	#USB_OTG_DSTS_EERR
 ((
uöt32_t
)0x00000008Ë

	)

6628 
	#USB_OTG_DSTS_FNSOF
 ((
uöt32_t
)0x003FFF00Ë

	)

6631 
	#USB_OTG_GAHBCFG_GINT
 ((
uöt32_t
)0x00000001Ë

	)

6633 
	#USB_OTG_GAHBCFG_HBSTLEN
 ((
uöt32_t
)0x0000001EË

	)

6634 
	#USB_OTG_GAHBCFG_HBSTLEN_0
 ((
uöt32_t
)0x00000002Ë

	)

6635 
	#USB_OTG_GAHBCFG_HBSTLEN_1
 ((
uöt32_t
)0x00000004Ë

	)

6636 
	#USB_OTG_GAHBCFG_HBSTLEN_2
 ((
uöt32_t
)0x00000008Ë

	)

6637 
	#USB_OTG_GAHBCFG_HBSTLEN_3
 ((
uöt32_t
)0x00000010Ë

	)

6638 
	#USB_OTG_GAHBCFG_DMAEN
 ((
uöt32_t
)0x00000020Ë

	)

6639 
	#USB_OTG_GAHBCFG_TXFELVL
 ((
uöt32_t
)0x00000080Ë

	)

6640 
	#USB_OTG_GAHBCFG_PTXFELVL
 ((
uöt32_t
)0x00000100Ë

	)

6644 
	#USB_OTG_GUSBCFG_TOCAL
 ((
uöt32_t
)0x00000007Ë

	)

6645 
	#USB_OTG_GUSBCFG_TOCAL_0
 ((
uöt32_t
)0x00000001Ë

	)

6646 
	#USB_OTG_GUSBCFG_TOCAL_1
 ((
uöt32_t
)0x00000002Ë

	)

6647 
	#USB_OTG_GUSBCFG_TOCAL_2
 ((
uöt32_t
)0x00000004Ë

	)

6648 
	#USB_OTG_GUSBCFG_PHYSEL
 ((
uöt32_t
)0x00000040Ë

	)

6649 
	#USB_OTG_GUSBCFG_SRPCAP
 ((
uöt32_t
)0x00000100Ë

	)

6650 
	#USB_OTG_GUSBCFG_HNPCAP
 ((
uöt32_t
)0x00000200Ë

	)

6652 
	#USB_OTG_GUSBCFG_TRDT
 ((
uöt32_t
)0x00003C00Ë

	)

6653 
	#USB_OTG_GUSBCFG_TRDT_0
 ((
uöt32_t
)0x00000400Ë

	)

6654 
	#USB_OTG_GUSBCFG_TRDT_1
 ((
uöt32_t
)0x00000800Ë

	)

6655 
	#USB_OTG_GUSBCFG_TRDT_2
 ((
uöt32_t
)0x00001000Ë

	)

6656 
	#USB_OTG_GUSBCFG_TRDT_3
 ((
uöt32_t
)0x00002000Ë

	)

6657 
	#USB_OTG_GUSBCFG_PHYLPCS
 ((
uöt32_t
)0x00008000Ë

	)

6658 
	#USB_OTG_GUSBCFG_ULPIFSLS
 ((
uöt32_t
)0x00020000Ë

	)

6659 
	#USB_OTG_GUSBCFG_ULPIAR
 ((
uöt32_t
)0x00040000Ë

	)

6660 
	#USB_OTG_GUSBCFG_ULPICSM
 ((
uöt32_t
)0x00080000Ë

	)

6661 
	#USB_OTG_GUSBCFG_ULPIEVBUSD
 ((
uöt32_t
)0x00100000Ë

	)

6662 
	#USB_OTG_GUSBCFG_ULPIEVBUSI
 ((
uöt32_t
)0x00200000Ë

	)

6663 
	#USB_OTG_GUSBCFG_TSDPS
 ((
uöt32_t
)0x00400000Ë

	)

6664 
	#USB_OTG_GUSBCFG_PCCI
 ((
uöt32_t
)0x00800000Ë

	)

6665 
	#USB_OTG_GUSBCFG_PTCI
 ((
uöt32_t
)0x01000000Ë

	)

6666 
	#USB_OTG_GUSBCFG_ULPIIPD
 ((
uöt32_t
)0x02000000Ë

	)

6667 
	#USB_OTG_GUSBCFG_FHMOD
 ((
uöt32_t
)0x20000000Ë

	)

6668 
	#USB_OTG_GUSBCFG_FDMOD
 ((
uöt32_t
)0x40000000Ë

	)

6669 
	#USB_OTG_GUSBCFG_CTXPKT
 ((
uöt32_t
)0x80000000Ë

	)

6672 
	#USB_OTG_GRSTCTL_CSRST
 ((
uöt32_t
)0x00000001Ë

	)

6673 
	#USB_OTG_GRSTCTL_HSRST
 ((
uöt32_t
)0x00000002Ë

	)

6674 
	#USB_OTG_GRSTCTL_FCRST
 ((
uöt32_t
)0x00000004Ë

	)

6675 
	#USB_OTG_GRSTCTL_RXFFLSH
 ((
uöt32_t
)0x00000010Ë

	)

6676 
	#USB_OTG_GRSTCTL_TXFFLSH
 ((
uöt32_t
)0x00000020Ë

	)

6678 
	#USB_OTG_GRSTCTL_TXFNUM
 ((
uöt32_t
)0x000007C0Ë

	)

6679 
	#USB_OTG_GRSTCTL_TXFNUM_0
 ((
uöt32_t
)0x00000040Ë

	)

6680 
	#USB_OTG_GRSTCTL_TXFNUM_1
 ((
uöt32_t
)0x00000080Ë

	)

6681 
	#USB_OTG_GRSTCTL_TXFNUM_2
 ((
uöt32_t
)0x00000100Ë

	)

6682 
	#USB_OTG_GRSTCTL_TXFNUM_3
 ((
uöt32_t
)0x00000200Ë

	)

6683 
	#USB_OTG_GRSTCTL_TXFNUM_4
 ((
uöt32_t
)0x00000400Ë

	)

6684 
	#USB_OTG_GRSTCTL_DMAREQ
 ((
uöt32_t
)0x40000000Ë

	)

6685 
	#USB_OTG_GRSTCTL_AHBIDL
 ((
uöt32_t
)0x80000000Ë

	)

6688 
	#USB_OTG_DIEPMSK_XFRCM
 ((
uöt32_t
)0x00000001Ë

	)

6689 
	#USB_OTG_DIEPMSK_EPDM
 ((
uöt32_t
)0x00000002Ë

	)

6690 
	#USB_OTG_DIEPMSK_TOM
 ((
uöt32_t
)0x00000008Ë

	)

6691 
	#USB_OTG_DIEPMSK_ITTXFEMSK
 ((
uöt32_t
)0x00000010Ë

	)

6692 
	#USB_OTG_DIEPMSK_INEPNMM
 ((
uöt32_t
)0x00000020Ë

	)

6693 
	#USB_OTG_DIEPMSK_INEPNEM
 ((
uöt32_t
)0x00000040Ë

	)

6694 
	#USB_OTG_DIEPMSK_TXFURM
 ((
uöt32_t
)0x00000100Ë

	)

6695 
	#USB_OTG_DIEPMSK_BIM
 ((
uöt32_t
)0x00000200Ë

	)

6698 
	#USB_OTG_HPTXSTS_PTXFSAVL
 ((
uöt32_t
)0x0000FFFFË

	)

6700 
	#USB_OTG_HPTXSTS_PTXQSAV
 ((
uöt32_t
)0x00FF0000Ë

	)

6701 
	#USB_OTG_HPTXSTS_PTXQSAV_0
 ((
uöt32_t
)0x00010000Ë

	)

6702 
	#USB_OTG_HPTXSTS_PTXQSAV_1
 ((
uöt32_t
)0x00020000Ë

	)

6703 
	#USB_OTG_HPTXSTS_PTXQSAV_2
 ((
uöt32_t
)0x00040000Ë

	)

6704 
	#USB_OTG_HPTXSTS_PTXQSAV_3
 ((
uöt32_t
)0x00080000Ë

	)

6705 
	#USB_OTG_HPTXSTS_PTXQSAV_4
 ((
uöt32_t
)0x00100000Ë

	)

6706 
	#USB_OTG_HPTXSTS_PTXQSAV_5
 ((
uöt32_t
)0x00200000Ë

	)

6707 
	#USB_OTG_HPTXSTS_PTXQSAV_6
 ((
uöt32_t
)0x00400000Ë

	)

6708 
	#USB_OTG_HPTXSTS_PTXQSAV_7
 ((
uöt32_t
)0x00800000Ë

	)

6710 
	#USB_OTG_HPTXSTS_PTXQTOP
 ((
uöt32_t
)0xFF000000Ë

	)

6711 
	#USB_OTG_HPTXSTS_PTXQTOP_0
 ((
uöt32_t
)0x01000000Ë

	)

6712 
	#USB_OTG_HPTXSTS_PTXQTOP_1
 ((
uöt32_t
)0x02000000Ë

	)

6713 
	#USB_OTG_HPTXSTS_PTXQTOP_2
 ((
uöt32_t
)0x04000000Ë

	)

6714 
	#USB_OTG_HPTXSTS_PTXQTOP_3
 ((
uöt32_t
)0x08000000Ë

	)

6715 
	#USB_OTG_HPTXSTS_PTXQTOP_4
 ((
uöt32_t
)0x10000000Ë

	)

6716 
	#USB_OTG_HPTXSTS_PTXQTOP_5
 ((
uöt32_t
)0x20000000Ë

	)

6717 
	#USB_OTG_HPTXSTS_PTXQTOP_6
 ((
uöt32_t
)0x40000000Ë

	)

6718 
	#USB_OTG_HPTXSTS_PTXQTOP_7
 ((
uöt32_t
)0x80000000Ë

	)

6721 
	#USB_OTG_HAINT_HAINT
 ((
uöt32_t
)0x0000FFFFË

	)

6724 
	#USB_OTG_DOEPMSK_XFRCM
 ((
uöt32_t
)0x00000001Ë

	)

6725 
	#USB_OTG_DOEPMSK_EPDM
 ((
uöt32_t
)0x00000002Ë

	)

6726 
	#USB_OTG_DOEPMSK_STUPM
 ((
uöt32_t
)0x00000008Ë

	)

6727 
	#USB_OTG_DOEPMSK_OTEPDM
 ((
uöt32_t
)0x00000010Ë

	)

6728 
	#USB_OTG_DOEPMSK_B2BSTUP
 ((
uöt32_t
)0x00000040Ë

	)

6729 
	#USB_OTG_DOEPMSK_OPEM
 ((
uöt32_t
)0x00000100Ë

	)

6730 
	#USB_OTG_DOEPMSK_BOIM
 ((
uöt32_t
)0x00000200Ë

	)

6733 
	#USB_OTG_GINTSTS_CMOD
 ((
uöt32_t
)0x00000001Ë

	)

6734 
	#USB_OTG_GINTSTS_MMIS
 ((
uöt32_t
)0x00000002Ë

	)

6735 
	#USB_OTG_GINTSTS_OTGINT
 ((
uöt32_t
)0x00000004Ë

	)

6736 
	#USB_OTG_GINTSTS_SOF
 ((
uöt32_t
)0x00000008Ë

	)

6737 
	#USB_OTG_GINTSTS_RXFLVL
 ((
uöt32_t
)0x00000010Ë

	)

6738 
	#USB_OTG_GINTSTS_NPTXFE
 ((
uöt32_t
)0x00000020Ë

	)

6739 
	#USB_OTG_GINTSTS_GINAKEFF
 ((
uöt32_t
)0x00000040Ë

	)

6740 
	#USB_OTG_GINTSTS_BOUTNAKEFF
 ((
uöt32_t
)0x00000080Ë

	)

6741 
	#USB_OTG_GINTSTS_ESUSP
 ((
uöt32_t
)0x00000400Ë

	)

6742 
	#USB_OTG_GINTSTS_USBSUSP
 ((
uöt32_t
)0x00000800Ë

	)

6743 
	#USB_OTG_GINTSTS_USBRST
 ((
uöt32_t
)0x00001000Ë

	)

6744 
	#USB_OTG_GINTSTS_ENUMDNE
 ((
uöt32_t
)0x00002000Ë

	)

6745 
	#USB_OTG_GINTSTS_ISOODRP
 ((
uöt32_t
)0x00004000Ë

	)

6746 
	#USB_OTG_GINTSTS_EOPF
 ((
uöt32_t
)0x00008000Ë

	)

6747 
	#USB_OTG_GINTSTS_IEPINT
 ((
uöt32_t
)0x00040000Ë

	)

6748 
	#USB_OTG_GINTSTS_OEPINT
 ((
uöt32_t
)0x00080000Ë

	)

6749 
	#USB_OTG_GINTSTS_IISOIXFR
 ((
uöt32_t
)0x00100000Ë

	)

6750 
	#USB_OTG_GINTSTS_PXFR_INCOMPISOOUT
 ((
uöt32_t
)0x00200000Ë

	)

6751 
	#USB_OTG_GINTSTS_DATAFSUSP
 ((
uöt32_t
)0x00400000Ë

	)

6752 
	#USB_OTG_GINTSTS_HPRTINT
 ((
uöt32_t
)0x01000000Ë

	)

6753 
	#USB_OTG_GINTSTS_HCINT
 ((
uöt32_t
)0x02000000Ë

	)

6754 
	#USB_OTG_GINTSTS_PTXFE
 ((
uöt32_t
)0x04000000Ë

	)

6755 
	#USB_OTG_GINTSTS_CIDSCHG
 ((
uöt32_t
)0x10000000Ë

	)

6756 
	#USB_OTG_GINTSTS_DISCINT
 ((
uöt32_t
)0x20000000Ë

	)

6757 
	#USB_OTG_GINTSTS_SRQINT
 ((
uöt32_t
)0x40000000Ë

	)

6758 
	#USB_OTG_GINTSTS_WKUINT
 ((
uöt32_t
)0x80000000Ë

	)

6761 
	#USB_OTG_GINTMSK_MMISM
 ((
uöt32_t
)0x00000002Ë

	)

6762 
	#USB_OTG_GINTMSK_OTGINT
 ((
uöt32_t
)0x00000004Ë

	)

6763 
	#USB_OTG_GINTMSK_SOFM
 ((
uöt32_t
)0x00000008Ë

	)

6764 
	#USB_OTG_GINTMSK_RXFLVLM
 ((
uöt32_t
)0x00000010Ë

	)

6765 
	#USB_OTG_GINTMSK_NPTXFEM
 ((
uöt32_t
)0x00000020Ë

	)

6766 
	#USB_OTG_GINTMSK_GINAKEFFM
 ((
uöt32_t
)0x00000040Ë

	)

6767 
	#USB_OTG_GINTMSK_GONAKEFFM
 ((
uöt32_t
)0x00000080Ë

	)

6768 
	#USB_OTG_GINTMSK_ESUSPM
 ((
uöt32_t
)0x00000400Ë

	)

6769 
	#USB_OTG_GINTMSK_USBSUSPM
 ((
uöt32_t
)0x00000800Ë

	)

6770 
	#USB_OTG_GINTMSK_USBRST
 ((
uöt32_t
)0x00001000Ë

	)

6771 
	#USB_OTG_GINTMSK_ENUMDNEM
 ((
uöt32_t
)0x00002000Ë

	)

6772 
	#USB_OTG_GINTMSK_ISOODRPM
 ((
uöt32_t
)0x00004000Ë

	)

6773 
	#USB_OTG_GINTMSK_EOPFM
 ((
uöt32_t
)0x00008000Ë

	)

6774 
	#USB_OTG_GINTMSK_EPMISM
 ((
uöt32_t
)0x00020000Ë

	)

6775 
	#USB_OTG_GINTMSK_IEPINT
 ((
uöt32_t
)0x00040000Ë

	)

6776 
	#USB_OTG_GINTMSK_OEPINT
 ((
uöt32_t
)0x00080000Ë

	)

6777 
	#USB_OTG_GINTMSK_IISOIXFRM
 ((
uöt32_t
)0x00100000Ë

	)

6778 
	#USB_OTG_GINTMSK_PXFRM_IISOOXFRM
 ((
uöt32_t
)0x00200000Ë

	)

6779 
	#USB_OTG_GINTMSK_FSUSPM
 ((
uöt32_t
)0x00400000Ë

	)

6780 
	#USB_OTG_GINTMSK_PRTIM
 ((
uöt32_t
)0x01000000Ë

	)

6781 
	#USB_OTG_GINTMSK_HCIM
 ((
uöt32_t
)0x02000000Ë

	)

6782 
	#USB_OTG_GINTMSK_PTXFEM
 ((
uöt32_t
)0x04000000Ë

	)

6783 
	#USB_OTG_GINTMSK_CIDSCHGM
 ((
uöt32_t
)0x10000000Ë

	)

6784 
	#USB_OTG_GINTMSK_DISCINT
 ((
uöt32_t
)0x20000000Ë

	)

6785 
	#USB_OTG_GINTMSK_SRQIM
 ((
uöt32_t
)0x40000000Ë

	)

6786 
	#USB_OTG_GINTMSK_WUIM
 ((
uöt32_t
)0x80000000Ë

	)

6789 
	#USB_OTG_DAINT_IEPINT
 ((
uöt32_t
)0x0000FFFFË

	)

6790 
	#USB_OTG_DAINT_OEPINT
 ((
uöt32_t
)0xFFFF0000Ë

	)

6793 
	#USB_OTG_HAINTMSK_HAINTM
 ((
uöt32_t
)0x0000FFFFË

	)

6796 
	#USB_OTG_GRXSTSP_EPNUM
 ((
uöt32_t
)0x0000000FË

	)

6797 
	#USB_OTG_GRXSTSP_BCNT
 ((
uöt32_t
)0x00007FF0Ë

	)

6798 
	#USB_OTG_GRXSTSP_DPID
 ((
uöt32_t
)0x00018000Ë

	)

6799 
	#USB_OTG_GRXSTSP_PKTSTS
 ((
uöt32_t
)0x001E0000Ë

	)

6802 
	#USB_OTG_DAINTMSK_IEPM
 ((
uöt32_t
)0x0000FFFFË

	)

6803 
	#USB_OTG_DAINTMSK_OEPM
 ((
uöt32_t
)0xFFFF0000Ë

	)

6806 
	#USB_OTG_CHNUM
 ((
uöt32_t
)0x0000000FË

	)

6807 
	#USB_OTG_CHNUM_0
 ((
uöt32_t
)0x00000001Ë

	)

6808 
	#USB_OTG_CHNUM_1
 ((
uöt32_t
)0x00000002Ë

	)

6809 
	#USB_OTG_CHNUM_2
 ((
uöt32_t
)0x00000004Ë

	)

6810 
	#USB_OTG_CHNUM_3
 ((
uöt32_t
)0x00000008Ë

	)

6811 
	#USB_OTG_BCNT
 ((
uöt32_t
)0x00007FF0Ë

	)

6813 
	#USB_OTG_DPID
 ((
uöt32_t
)0x00018000Ë

	)

6814 
	#USB_OTG_DPID_0
 ((
uöt32_t
)0x00008000Ë

	)

6815 
	#USB_OTG_DPID_1
 ((
uöt32_t
)0x00010000Ë

	)

6817 
	#USB_OTG_PKTSTS
 ((
uöt32_t
)0x001E0000Ë

	)

6818 
	#USB_OTG_PKTSTS_0
 ((
uöt32_t
)0x00020000Ë

	)

6819 
	#USB_OTG_PKTSTS_1
 ((
uöt32_t
)0x00040000Ë

	)

6820 
	#USB_OTG_PKTSTS_2
 ((
uöt32_t
)0x00080000Ë

	)

6821 
	#USB_OTG_PKTSTS_3
 ((
uöt32_t
)0x00100000Ë

	)

6823 
	#USB_OTG_EPNUM
 ((
uöt32_t
)0x0000000FË

	)

6824 
	#USB_OTG_EPNUM_0
 ((
uöt32_t
)0x00000001Ë

	)

6825 
	#USB_OTG_EPNUM_1
 ((
uöt32_t
)0x00000002Ë

	)

6826 
	#USB_OTG_EPNUM_2
 ((
uöt32_t
)0x00000004Ë

	)

6827 
	#USB_OTG_EPNUM_3
 ((
uöt32_t
)0x00000008Ë

	)

6829 
	#USB_OTG_FRMNUM
 ((
uöt32_t
)0x01E00000Ë

	)

6830 
	#USB_OTG_FRMNUM_0
 ((
uöt32_t
)0x00200000Ë

	)

6831 
	#USB_OTG_FRMNUM_1
 ((
uöt32_t
)0x00400000Ë

	)

6832 
	#USB_OTG_FRMNUM_2
 ((
uöt32_t
)0x00800000Ë

	)

6833 
	#USB_OTG_FRMNUM_3
 ((
uöt32_t
)0x01000000Ë

	)

6836 
	#USB_OTG_CHNUM
 ((
uöt32_t
)0x0000000FË

	)

6837 
	#USB_OTG_CHNUM_0
 ((
uöt32_t
)0x00000001Ë

	)

6838 
	#USB_OTG_CHNUM_1
 ((
uöt32_t
)0x00000002Ë

	)

6839 
	#USB_OTG_CHNUM_2
 ((
uöt32_t
)0x00000004Ë

	)

6840 
	#USB_OTG_CHNUM_3
 ((
uöt32_t
)0x00000008Ë

	)

6841 
	#USB_OTG_BCNT
 ((
uöt32_t
)0x00007FF0Ë

	)

6843 
	#USB_OTG_DPID
 ((
uöt32_t
)0x00018000Ë

	)

6844 
	#USB_OTG_DPID_0
 ((
uöt32_t
)0x00008000Ë

	)

6845 
	#USB_OTG_DPID_1
 ((
uöt32_t
)0x00010000Ë

	)

6847 
	#USB_OTG_PKTSTS
 ((
uöt32_t
)0x001E0000Ë

	)

6848 
	#USB_OTG_PKTSTS_0
 ((
uöt32_t
)0x00020000Ë

	)

6849 
	#USB_OTG_PKTSTS_1
 ((
uöt32_t
)0x00040000Ë

	)

6850 
	#USB_OTG_PKTSTS_2
 ((
uöt32_t
)0x00080000Ë

	)

6851 
	#USB_OTG_PKTSTS_3
 ((
uöt32_t
)0x00100000Ë

	)

6853 
	#USB_OTG_EPNUM
 ((
uöt32_t
)0x0000000FË

	)

6854 
	#USB_OTG_EPNUM_0
 ((
uöt32_t
)0x00000001Ë

	)

6855 
	#USB_OTG_EPNUM_1
 ((
uöt32_t
)0x00000002Ë

	)

6856 
	#USB_OTG_EPNUM_2
 ((
uöt32_t
)0x00000004Ë

	)

6857 
	#USB_OTG_EPNUM_3
 ((
uöt32_t
)0x00000008Ë

	)

6859 
	#USB_OTG_FRMNUM
 ((
uöt32_t
)0x01E00000Ë

	)

6860 
	#USB_OTG_FRMNUM_0
 ((
uöt32_t
)0x00200000Ë

	)

6861 
	#USB_OTG_FRMNUM_1
 ((
uöt32_t
)0x00400000Ë

	)

6862 
	#USB_OTG_FRMNUM_2
 ((
uöt32_t
)0x00800000Ë

	)

6863 
	#USB_OTG_FRMNUM_3
 ((
uöt32_t
)0x01000000Ë

	)

6866 
	#USB_OTG_GRXFSIZ_RXFD
 ((
uöt32_t
)0x0000FFFFË

	)

6869 
	#USB_OTG_DVBUSDIS_VBUSDT
 ((
uöt32_t
)0x0000FFFFË

	)

6872 
	#USB_OTG_NPTXFSA
 ((
uöt32_t
)0x0000FFFFË

	)

6873 
	#USB_OTG_NPTXFD
 ((
uöt32_t
)0xFFFF0000Ë

	)

6874 
	#USB_OTG_TX0FSA
 ((
uöt32_t
)0x0000FFFFË

	)

6875 
	#USB_OTG_TX0FD
 ((
uöt32_t
)0xFFFF0000Ë

	)

6878 
	#USB_OTG_DVBUSPULSE_DVBUSP
 ((
uöt32_t
)0x00000FFFË

	)

6881 
	#USB_OTG_GNPTXSTS_NPTXFSAV
 ((
uöt32_t
)0x0000FFFFË

	)

6883 
	#USB_OTG_GNPTXSTS_NPTQXSAV
 ((
uöt32_t
)0x00FF0000Ë

	)

6884 
	#USB_OTG_GNPTXSTS_NPTQXSAV_0
 ((
uöt32_t
)0x00010000Ë

	)

6885 
	#USB_OTG_GNPTXSTS_NPTQXSAV_1
 ((
uöt32_t
)0x00020000Ë

	)

6886 
	#USB_OTG_GNPTXSTS_NPTQXSAV_2
 ((
uöt32_t
)0x00040000Ë

	)

6887 
	#USB_OTG_GNPTXSTS_NPTQXSAV_3
 ((
uöt32_t
)0x00080000Ë

	)

6888 
	#USB_OTG_GNPTXSTS_NPTQXSAV_4
 ((
uöt32_t
)0x00100000Ë

	)

6889 
	#USB_OTG_GNPTXSTS_NPTQXSAV_5
 ((
uöt32_t
)0x00200000Ë

	)

6890 
	#USB_OTG_GNPTXSTS_NPTQXSAV_6
 ((
uöt32_t
)0x00400000Ë

	)

6891 
	#USB_OTG_GNPTXSTS_NPTQXSAV_7
 ((
uöt32_t
)0x00800000Ë

	)

6893 
	#USB_OTG_GNPTXSTS_NPTXQTOP
 ((
uöt32_t
)0x7F000000Ë

	)

6894 
	#USB_OTG_GNPTXSTS_NPTXQTOP_0
 ((
uöt32_t
)0x01000000Ë

	)

6895 
	#USB_OTG_GNPTXSTS_NPTXQTOP_1
 ((
uöt32_t
)0x02000000Ë

	)

6896 
	#USB_OTG_GNPTXSTS_NPTXQTOP_2
 ((
uöt32_t
)0x04000000Ë

	)

6897 
	#USB_OTG_GNPTXSTS_NPTXQTOP_3
 ((
uöt32_t
)0x08000000Ë

	)

6898 
	#USB_OTG_GNPTXSTS_NPTXQTOP_4
 ((
uöt32_t
)0x10000000Ë

	)

6899 
	#USB_OTG_GNPTXSTS_NPTXQTOP_5
 ((
uöt32_t
)0x20000000Ë

	)

6900 
	#USB_OTG_GNPTXSTS_NPTXQTOP_6
 ((
uöt32_t
)0x40000000Ë

	)

6903 
	#USB_OTG_DTHRCTL_NONISOTHREN
 ((
uöt32_t
)0x00000001Ë

	)

6904 
	#USB_OTG_DTHRCTL_ISOTHREN
 ((
uöt32_t
)0x00000002Ë

	)

6906 
	#USB_OTG_DTHRCTL_TXTHRLEN
 ((
uöt32_t
)0x000007FCË

	)

6907 
	#USB_OTG_DTHRCTL_TXTHRLEN_0
 ((
uöt32_t
)0x00000004Ë

	)

6908 
	#USB_OTG_DTHRCTL_TXTHRLEN_1
 ((
uöt32_t
)0x00000008Ë

	)

6909 
	#USB_OTG_DTHRCTL_TXTHRLEN_2
 ((
uöt32_t
)0x00000010Ë

	)

6910 
	#USB_OTG_DTHRCTL_TXTHRLEN_3
 ((
uöt32_t
)0x00000020Ë

	)

6911 
	#USB_OTG_DTHRCTL_TXTHRLEN_4
 ((
uöt32_t
)0x00000040Ë

	)

6912 
	#USB_OTG_DTHRCTL_TXTHRLEN_5
 ((
uöt32_t
)0x00000080Ë

	)

6913 
	#USB_OTG_DTHRCTL_TXTHRLEN_6
 ((
uöt32_t
)0x00000100Ë

	)

6914 
	#USB_OTG_DTHRCTL_TXTHRLEN_7
 ((
uöt32_t
)0x00000200Ë

	)

6915 
	#USB_OTG_DTHRCTL_TXTHRLEN_8
 ((
uöt32_t
)0x00000400Ë

	)

6916 
	#USB_OTG_DTHRCTL_RXTHREN
 ((
uöt32_t
)0x00010000Ë

	)

6918 
	#USB_OTG_DTHRCTL_RXTHRLEN
 ((
uöt32_t
)0x03FE0000Ë

	)

6919 
	#USB_OTG_DTHRCTL_RXTHRLEN_0
 ((
uöt32_t
)0x00020000Ë

	)

6920 
	#USB_OTG_DTHRCTL_RXTHRLEN_1
 ((
uöt32_t
)0x00040000Ë

	)

6921 
	#USB_OTG_DTHRCTL_RXTHRLEN_2
 ((
uöt32_t
)0x00080000Ë

	)

6922 
	#USB_OTG_DTHRCTL_RXTHRLEN_3
 ((
uöt32_t
)0x00100000Ë

	)

6923 
	#USB_OTG_DTHRCTL_RXTHRLEN_4
 ((
uöt32_t
)0x00200000Ë

	)

6924 
	#USB_OTG_DTHRCTL_RXTHRLEN_5
 ((
uöt32_t
)0x00400000Ë

	)

6925 
	#USB_OTG_DTHRCTL_RXTHRLEN_6
 ((
uöt32_t
)0x00800000Ë

	)

6926 
	#USB_OTG_DTHRCTL_RXTHRLEN_7
 ((
uöt32_t
)0x01000000Ë

	)

6927 
	#USB_OTG_DTHRCTL_RXTHRLEN_8
 ((
uöt32_t
)0x02000000Ë

	)

6928 
	#USB_OTG_DTHRCTL_ARPEN
 ((
uöt32_t
)0x08000000Ë

	)

6931 
	#USB_OTG_DIEPEMPMSK_INEPTXFEM
 ((
uöt32_t
)0x0000FFFFË

	)

6934 
	#USB_OTG_DEACHINT_IEP1INT
 ((
uöt32_t
)0x00000002Ë

	)

6935 
	#USB_OTG_DEACHINT_OEP1INT
 ((
uöt32_t
)0x00020000Ë

	)

6938 
	#USB_OTG_GCCFG_PWRDWN
 ((
uöt32_t
)0x00010000Ë

	)

6939 
	#USB_OTG_GCCFG_VBUSASEN
 ((
uöt32_t
)0x00040000Ë

	)

6940 
	#USB_OTG_GCCFG_VBUSBSEN
 ((
uöt32_t
)0x00080000Ë

	)

6941 
	#USB_OTG_GCCFG_SOFOUTEN
 ((
uöt32_t
)0x00100000Ë

	)

6944 
	#USB_OTG_DEACHINTMSK_IEP1INTM
 ((
uöt32_t
)0x00000002Ë

	)

6945 
	#USB_OTG_DEACHINTMSK_OEP1INTM
 ((
uöt32_t
)0x00020000Ë

	)

6948 
	#USB_OTG_CID_PRODUCT_ID
 ((
uöt32_t
)0xFFFFFFFFË

	)

6951 
	#USB_OTG_DIEPEACHMSK1_XFRCM
 ((
uöt32_t
)0x00000001Ë

	)

6952 
	#USB_OTG_DIEPEACHMSK1_EPDM
 ((
uöt32_t
)0x00000002Ë

	)

6953 
	#USB_OTG_DIEPEACHMSK1_TOM
 ((
uöt32_t
)0x00000008Ë

	)

6954 
	#USB_OTG_DIEPEACHMSK1_ITTXFEMSK
 ((
uöt32_t
)0x00000010Ë

	)

6955 
	#USB_OTG_DIEPEACHMSK1_INEPNMM
 ((
uöt32_t
)0x00000020Ë

	)

6956 
	#USB_OTG_DIEPEACHMSK1_INEPNEM
 ((
uöt32_t
)0x00000040Ë

	)

6957 
	#USB_OTG_DIEPEACHMSK1_TXFURM
 ((
uöt32_t
)0x00000100Ë

	)

6958 
	#USB_OTG_DIEPEACHMSK1_BIM
 ((
uöt32_t
)0x00000200Ë

	)

6959 
	#USB_OTG_DIEPEACHMSK1_NAKM
 ((
uöt32_t
)0x00002000Ë

	)

6962 
	#USB_OTG_HPRT_PCSTS
 ((
uöt32_t
)0x00000001Ë

	)

6963 
	#USB_OTG_HPRT_PCDET
 ((
uöt32_t
)0x00000002Ë

	)

6964 
	#USB_OTG_HPRT_PENA
 ((
uöt32_t
)0x00000004Ë

	)

6965 
	#USB_OTG_HPRT_PENCHNG
 ((
uöt32_t
)0x00000008Ë

	)

6966 
	#USB_OTG_HPRT_POCA
 ((
uöt32_t
)0x00000010Ë

	)

6967 
	#USB_OTG_HPRT_POCCHNG
 ((
uöt32_t
)0x00000020Ë

	)

6968 
	#USB_OTG_HPRT_PRES
 ((
uöt32_t
)0x00000040Ë

	)

6969 
	#USB_OTG_HPRT_PSUSP
 ((
uöt32_t
)0x00000080Ë

	)

6970 
	#USB_OTG_HPRT_PRST
 ((
uöt32_t
)0x00000100Ë

	)

6972 
	#USB_OTG_HPRT_PLSTS
 ((
uöt32_t
)0x00000C00Ë

	)

6973 
	#USB_OTG_HPRT_PLSTS_0
 ((
uöt32_t
)0x00000400Ë

	)

6974 
	#USB_OTG_HPRT_PLSTS_1
 ((
uöt32_t
)0x00000800Ë

	)

6975 
	#USB_OTG_HPRT_PPWR
 ((
uöt32_t
)0x00001000Ë

	)

6977 
	#USB_OTG_HPRT_PTCTL
 ((
uöt32_t
)0x0001E000Ë

	)

6978 
	#USB_OTG_HPRT_PTCTL_0
 ((
uöt32_t
)0x00002000Ë

	)

6979 
	#USB_OTG_HPRT_PTCTL_1
 ((
uöt32_t
)0x00004000Ë

	)

6980 
	#USB_OTG_HPRT_PTCTL_2
 ((
uöt32_t
)0x00008000Ë

	)

6981 
	#USB_OTG_HPRT_PTCTL_3
 ((
uöt32_t
)0x00010000Ë

	)

6983 
	#USB_OTG_HPRT_PSPD
 ((
uöt32_t
)0x00060000Ë

	)

6984 
	#USB_OTG_HPRT_PSPD_0
 ((
uöt32_t
)0x00020000Ë

	)

6985 
	#USB_OTG_HPRT_PSPD_1
 ((
uöt32_t
)0x00040000Ë

	)

6988 
	#USB_OTG_DOEPEACHMSK1_XFRCM
 ((
uöt32_t
)0x00000001Ë

	)

6989 
	#USB_OTG_DOEPEACHMSK1_EPDM
 ((
uöt32_t
)0x00000002Ë

	)

6990 
	#USB_OTG_DOEPEACHMSK1_TOM
 ((
uöt32_t
)0x00000008Ë

	)

6991 
	#USB_OTG_DOEPEACHMSK1_ITTXFEMSK
 ((
uöt32_t
)0x00000010Ë

	)

6992 
	#USB_OTG_DOEPEACHMSK1_INEPNMM
 ((
uöt32_t
)0x00000020Ë

	)

6993 
	#USB_OTG_DOEPEACHMSK1_INEPNEM
 ((
uöt32_t
)0x00000040Ë

	)

6994 
	#USB_OTG_DOEPEACHMSK1_TXFURM
 ((
uöt32_t
)0x00000100Ë

	)

6995 
	#USB_OTG_DOEPEACHMSK1_BIM
 ((
uöt32_t
)0x00000200Ë

	)

6996 
	#USB_OTG_DOEPEACHMSK1_BERRM
 ((
uöt32_t
)0x00001000Ë

	)

6997 
	#USB_OTG_DOEPEACHMSK1_NAKM
 ((
uöt32_t
)0x00002000Ë

	)

6998 
	#USB_OTG_DOEPEACHMSK1_NYETM
 ((
uöt32_t
)0x00004000Ë

	)

7001 
	#USB_OTG_HPTXFSIZ_PTXSA
 ((
uöt32_t
)0x0000FFFFË

	)

7002 
	#USB_OTG_HPTXFSIZ_PTXFD
 ((
uöt32_t
)0xFFFF0000Ë

	)

7005 
	#USB_OTG_DIEPCTL_MPSIZ
 ((
uöt32_t
)0x000007FFË

	)

7006 
	#USB_OTG_DIEPCTL_USBAEP
 ((
uöt32_t
)0x00008000Ë

	)

7007 
	#USB_OTG_DIEPCTL_EONUM_DPID
 ((
uöt32_t
)0x00010000Ë

	)

7008 
	#USB_OTG_DIEPCTL_NAKSTS
 ((
uöt32_t
)0x00020000Ë

	)

7010 
	#USB_OTG_DIEPCTL_EPTYP
 ((
uöt32_t
)0x000C0000Ë

	)

7011 
	#USB_OTG_DIEPCTL_EPTYP_0
 ((
uöt32_t
)0x00040000Ë

	)

7012 
	#USB_OTG_DIEPCTL_EPTYP_1
 ((
uöt32_t
)0x00080000Ë

	)

7013 
	#USB_OTG_DIEPCTL_STALL
 ((
uöt32_t
)0x00200000Ë

	)

7015 
	#USB_OTG_DIEPCTL_TXFNUM
 ((
uöt32_t
)0x03C00000Ë

	)

7016 
	#USB_OTG_DIEPCTL_TXFNUM_0
 ((
uöt32_t
)0x00400000Ë

	)

7017 
	#USB_OTG_DIEPCTL_TXFNUM_1
 ((
uöt32_t
)0x00800000Ë

	)

7018 
	#USB_OTG_DIEPCTL_TXFNUM_2
 ((
uöt32_t
)0x01000000Ë

	)

7019 
	#USB_OTG_DIEPCTL_TXFNUM_3
 ((
uöt32_t
)0x02000000Ë

	)

7020 
	#USB_OTG_DIEPCTL_CNAK
 ((
uöt32_t
)0x04000000Ë

	)

7021 
	#USB_OTG_DIEPCTL_SNAK
 ((
uöt32_t
)0x08000000Ë

	)

7022 
	#USB_OTG_DIEPCTL_SD0PID_SEVNFRM
 ((
uöt32_t
)0x10000000Ë

	)

7023 
	#USB_OTG_DIEPCTL_SODDFRM
 ((
uöt32_t
)0x20000000Ë

	)

7024 
	#USB_OTG_DIEPCTL_EPDIS
 ((
uöt32_t
)0x40000000Ë

	)

7025 
	#USB_OTG_DIEPCTL_EPENA
 ((
uöt32_t
)0x80000000Ë

	)

7028 
	#USB_OTG_HCCHAR_MPSIZ
 ((
uöt32_t
)0x000007FFË

	)

7030 
	#USB_OTG_HCCHAR_EPNUM
 ((
uöt32_t
)0x00007800Ë

	)

7031 
	#USB_OTG_HCCHAR_EPNUM_0
 ((
uöt32_t
)0x00000800Ë

	)

7032 
	#USB_OTG_HCCHAR_EPNUM_1
 ((
uöt32_t
)0x00001000Ë

	)

7033 
	#USB_OTG_HCCHAR_EPNUM_2
 ((
uöt32_t
)0x00002000Ë

	)

7034 
	#USB_OTG_HCCHAR_EPNUM_3
 ((
uöt32_t
)0x00004000Ë

	)

7035 
	#USB_OTG_HCCHAR_EPDIR
 ((
uöt32_t
)0x00008000Ë

	)

7036 
	#USB_OTG_HCCHAR_LSDEV
 ((
uöt32_t
)0x00020000Ë

	)

7038 
	#USB_OTG_HCCHAR_EPTYP
 ((
uöt32_t
)0x000C0000Ë

	)

7039 
	#USB_OTG_HCCHAR_EPTYP_0
 ((
uöt32_t
)0x00040000Ë

	)

7040 
	#USB_OTG_HCCHAR_EPTYP_1
 ((
uöt32_t
)0x00080000Ë

	)

7042 
	#USB_OTG_HCCHAR_MC
 ((
uöt32_t
)0x00300000Ë

	)

7043 
	#USB_OTG_HCCHAR_MC_0
 ((
uöt32_t
)0x00100000Ë

	)

7044 
	#USB_OTG_HCCHAR_MC_1
 ((
uöt32_t
)0x00200000Ë

	)

7046 
	#USB_OTG_HCCHAR_DAD
 ((
uöt32_t
)0x1FC00000Ë

	)

7047 
	#USB_OTG_HCCHAR_DAD_0
 ((
uöt32_t
)0x00400000Ë

	)

7048 
	#USB_OTG_HCCHAR_DAD_1
 ((
uöt32_t
)0x00800000Ë

	)

7049 
	#USB_OTG_HCCHAR_DAD_2
 ((
uöt32_t
)0x01000000Ë

	)

7050 
	#USB_OTG_HCCHAR_DAD_3
 ((
uöt32_t
)0x02000000Ë

	)

7051 
	#USB_OTG_HCCHAR_DAD_4
 ((
uöt32_t
)0x04000000Ë

	)

7052 
	#USB_OTG_HCCHAR_DAD_5
 ((
uöt32_t
)0x08000000Ë

	)

7053 
	#USB_OTG_HCCHAR_DAD_6
 ((
uöt32_t
)0x10000000Ë

	)

7054 
	#USB_OTG_HCCHAR_ODDFRM
 ((
uöt32_t
)0x20000000Ë

	)

7055 
	#USB_OTG_HCCHAR_CHDIS
 ((
uöt32_t
)0x40000000Ë

	)

7056 
	#USB_OTG_HCCHAR_CHENA
 ((
uöt32_t
)0x80000000Ë

	)

7060 
	#USB_OTG_HCSPLT_PRTADDR
 ((
uöt32_t
)0x0000007FË

	)

7061 
	#USB_OTG_HCSPLT_PRTADDR_0
 ((
uöt32_t
)0x00000001Ë

	)

7062 
	#USB_OTG_HCSPLT_PRTADDR_1
 ((
uöt32_t
)0x00000002Ë

	)

7063 
	#USB_OTG_HCSPLT_PRTADDR_2
 ((
uöt32_t
)0x00000004Ë

	)

7064 
	#USB_OTG_HCSPLT_PRTADDR_3
 ((
uöt32_t
)0x00000008Ë

	)

7065 
	#USB_OTG_HCSPLT_PRTADDR_4
 ((
uöt32_t
)0x00000010Ë

	)

7066 
	#USB_OTG_HCSPLT_PRTADDR_5
 ((
uöt32_t
)0x00000020Ë

	)

7067 
	#USB_OTG_HCSPLT_PRTADDR_6
 ((
uöt32_t
)0x00000040Ë

	)

7069 
	#USB_OTG_HCSPLT_HUBADDR
 ((
uöt32_t
)0x00003F80Ë

	)

7070 
	#USB_OTG_HCSPLT_HUBADDR_0
 ((
uöt32_t
)0x00000080Ë

	)

7071 
	#USB_OTG_HCSPLT_HUBADDR_1
 ((
uöt32_t
)0x00000100Ë

	)

7072 
	#USB_OTG_HCSPLT_HUBADDR_2
 ((
uöt32_t
)0x00000200Ë

	)

7073 
	#USB_OTG_HCSPLT_HUBADDR_3
 ((
uöt32_t
)0x00000400Ë

	)

7074 
	#USB_OTG_HCSPLT_HUBADDR_4
 ((
uöt32_t
)0x00000800Ë

	)

7075 
	#USB_OTG_HCSPLT_HUBADDR_5
 ((
uöt32_t
)0x00001000Ë

	)

7076 
	#USB_OTG_HCSPLT_HUBADDR_6
 ((
uöt32_t
)0x00002000Ë

	)

7078 
	#USB_OTG_HCSPLT_XACTPOS
 ((
uöt32_t
)0x0000C000Ë

	)

7079 
	#USB_OTG_HCSPLT_XACTPOS_0
 ((
uöt32_t
)0x00004000Ë

	)

7080 
	#USB_OTG_HCSPLT_XACTPOS_1
 ((
uöt32_t
)0x00008000Ë

	)

7081 
	#USB_OTG_HCSPLT_COMPLSPLT
 ((
uöt32_t
)0x00010000Ë

	)

7082 
	#USB_OTG_HCSPLT_SPLITEN
 ((
uöt32_t
)0x80000000Ë

	)

7085 
	#USB_OTG_HCINT_XFRC
 ((
uöt32_t
)0x00000001Ë

	)

7086 
	#USB_OTG_HCINT_CHH
 ((
uöt32_t
)0x00000002Ë

	)

7087 
	#USB_OTG_HCINT_AHBERR
 ((
uöt32_t
)0x00000004Ë

	)

7088 
	#USB_OTG_HCINT_STALL
 ((
uöt32_t
)0x00000008Ë

	)

7089 
	#USB_OTG_HCINT_NAK
 ((
uöt32_t
)0x00000010Ë

	)

7090 
	#USB_OTG_HCINT_ACK
 ((
uöt32_t
)0x00000020Ë

	)

7091 
	#USB_OTG_HCINT_NYET
 ((
uöt32_t
)0x00000040Ë

	)

7092 
	#USB_OTG_HCINT_TXERR
 ((
uöt32_t
)0x00000080Ë

	)

7093 
	#USB_OTG_HCINT_BBERR
 ((
uöt32_t
)0x00000100Ë

	)

7094 
	#USB_OTG_HCINT_FRMOR
 ((
uöt32_t
)0x00000200Ë

	)

7095 
	#USB_OTG_HCINT_DTERR
 ((
uöt32_t
)0x00000400Ë

	)

7098 
	#USB_OTG_DIEPINT_XFRC
 ((
uöt32_t
)0x00000001Ë

	)

7099 
	#USB_OTG_DIEPINT_EPDISD
 ((
uöt32_t
)0x00000002Ë

	)

7100 
	#USB_OTG_DIEPINT_TOC
 ((
uöt32_t
)0x00000008Ë

	)

7101 
	#USB_OTG_DIEPINT_ITTXFE
 ((
uöt32_t
)0x00000010Ë

	)

7102 
	#USB_OTG_DIEPINT_INEPNE
 ((
uöt32_t
)0x00000040Ë

	)

7103 
	#USB_OTG_DIEPINT_TXFE
 ((
uöt32_t
)0x00000080Ë

	)

7104 
	#USB_OTG_DIEPINT_TXFIFOUDRN
 ((
uöt32_t
)0x00000100Ë

	)

7105 
	#USB_OTG_DIEPINT_BNA
 ((
uöt32_t
)0x00000200Ë

	)

7106 
	#USB_OTG_DIEPINT_PKTDRPSTS
 ((
uöt32_t
)0x00000800Ë

	)

7107 
	#USB_OTG_DIEPINT_BERR
 ((
uöt32_t
)0x00001000Ë

	)

7108 
	#USB_OTG_DIEPINT_NAK
 ((
uöt32_t
)0x00002000Ë

	)

7111 
	#USB_OTG_HCINTMSK_XFRCM
 ((
uöt32_t
)0x00000001Ë

	)

7112 
	#USB_OTG_HCINTMSK_CHHM
 ((
uöt32_t
)0x00000002Ë

	)

7113 
	#USB_OTG_HCINTMSK_AHBERR
 ((
uöt32_t
)0x00000004Ë

	)

7114 
	#USB_OTG_HCINTMSK_STALLM
 ((
uöt32_t
)0x00000008Ë

	)

7115 
	#USB_OTG_HCINTMSK_NAKM
 ((
uöt32_t
)0x00000010Ë

	)

7116 
	#USB_OTG_HCINTMSK_ACKM
 ((
uöt32_t
)0x00000020Ë

	)

7117 
	#USB_OTG_HCINTMSK_NYET
 ((
uöt32_t
)0x00000040Ë

	)

7118 
	#USB_OTG_HCINTMSK_TXERRM
 ((
uöt32_t
)0x00000080Ë

	)

7119 
	#USB_OTG_HCINTMSK_BBERRM
 ((
uöt32_t
)0x00000100Ë

	)

7120 
	#USB_OTG_HCINTMSK_FRMORM
 ((
uöt32_t
)0x00000200Ë

	)

7121 
	#USB_OTG_HCINTMSK_DTERRM
 ((
uöt32_t
)0x00000400Ë

	)

7124 
	#USB_OTG_DIEPTSIZ_XFRSIZ
 ((
uöt32_t
)0x0007FFFFË

	)

7125 
	#USB_OTG_DIEPTSIZ_PKTCNT
 ((
uöt32_t
)0x1FF80000Ë

	)

7126 
	#USB_OTG_DIEPTSIZ_MULCNT
 ((
uöt32_t
)0x60000000Ë

	)

7129 
	#USB_OTG_HCTSIZ_XFRSIZ
 ((
uöt32_t
)0x0007FFFFË

	)

7130 
	#USB_OTG_HCTSIZ_PKTCNT
 ((
uöt32_t
)0x1FF80000Ë

	)

7131 
	#USB_OTG_HCTSIZ_DOPING
 ((
uöt32_t
)0x80000000Ë

	)

7132 
	#USB_OTG_HCTSIZ_DPID
 ((
uöt32_t
)0x60000000Ë

	)

7133 
	#USB_OTG_HCTSIZ_DPID_0
 ((
uöt32_t
)0x20000000Ë

	)

7134 
	#USB_OTG_HCTSIZ_DPID_1
 ((
uöt32_t
)0x40000000Ë

	)

7137 
	#USB_OTG_DIEPDMA_DMAADDR
 ((
uöt32_t
)0xFFFFFFFFË

	)

7140 
	#USB_OTG_HCDMA_DMAADDR
 ((
uöt32_t
)0xFFFFFFFFË

	)

7143 
	#USB_OTG_DTXFSTS_INEPTFSAV
 ((
uöt32_t
)0x0000FFFFË

	)

7146 
	#USB_OTG_DIEPTXF_INEPTXSA
 ((
uöt32_t
)0x0000FFFFË

	)

7147 
	#USB_OTG_DIEPTXF_INEPTXFD
 ((
uöt32_t
)0xFFFF0000Ë

	)

7150 
	#USB_OTG_DOEPCTL_MPSIZ
 ((
uöt32_t
)0x000007FFË

	)

7151 
	#USB_OTG_DOEPCTL_USBAEP
 ((
uöt32_t
)0x00008000Ë

	)

7152 
	#USB_OTG_DOEPCTL_NAKSTS
 ((
uöt32_t
)0x00020000Ë

	)

7153 
	#USB_OTG_DOEPCTL_SD0PID_SEVNFRM
 ((
uöt32_t
)0x10000000Ë

	)

7154 
	#USB_OTG_DOEPCTL_SODDFRM
 ((
uöt32_t
)0x20000000Ë

	)

7155 
	#USB_OTG_DOEPCTL_EPTYP
 ((
uöt32_t
)0x000C0000Ë

	)

7156 
	#USB_OTG_DOEPCTL_EPTYP_0
 ((
uöt32_t
)0x00040000Ë

	)

7157 
	#USB_OTG_DOEPCTL_EPTYP_1
 ((
uöt32_t
)0x00080000Ë

	)

7158 
	#USB_OTG_DOEPCTL_SNPM
 ((
uöt32_t
)0x00100000Ë

	)

7159 
	#USB_OTG_DOEPCTL_STALL
 ((
uöt32_t
)0x00200000Ë

	)

7160 
	#USB_OTG_DOEPCTL_CNAK
 ((
uöt32_t
)0x04000000Ë

	)

7161 
	#USB_OTG_DOEPCTL_SNAK
 ((
uöt32_t
)0x08000000Ë

	)

7162 
	#USB_OTG_DOEPCTL_EPDIS
 ((
uöt32_t
)0x40000000Ë

	)

7163 
	#USB_OTG_DOEPCTL_EPENA
 ((
uöt32_t
)0x80000000Ë

	)

7166 
	#USB_OTG_DOEPINT_XFRC
 ((
uöt32_t
)0x00000001Ë

	)

7167 
	#USB_OTG_DOEPINT_EPDISD
 ((
uöt32_t
)0x00000002Ë

	)

7168 
	#USB_OTG_DOEPINT_STUP
 ((
uöt32_t
)0x00000008Ë

	)

7169 
	#USB_OTG_DOEPINT_OTEPDIS
 ((
uöt32_t
)0x00000010Ë

	)

7170 
	#USB_OTG_DOEPINT_B2BSTUP
 ((
uöt32_t
)0x00000040Ë

	)

7171 
	#USB_OTG_DOEPINT_NYET
 ((
uöt32_t
)0x00004000Ë

	)

7174 
	#USB_OTG_DOEPTSIZ_XFRSIZ
 ((
uöt32_t
)0x0007FFFFË

	)

7175 
	#USB_OTG_DOEPTSIZ_PKTCNT
 ((
uöt32_t
)0x1FF80000Ë

	)

7177 
	#USB_OTG_DOEPTSIZ_STUPCNT
 ((
uöt32_t
)0x60000000Ë

	)

7178 
	#USB_OTG_DOEPTSIZ_STUPCNT_0
 ((
uöt32_t
)0x20000000Ë

	)

7179 
	#USB_OTG_DOEPTSIZ_STUPCNT_1
 ((
uöt32_t
)0x40000000Ë

	)

7182 
	#USB_OTG_PCGCCTL_STOPCLK
 ((
uöt32_t
)0x00000001Ë

	)

7183 
	#USB_OTG_PCGCCTL_GATECLK
 ((
uöt32_t
)0x00000002Ë

	)

7184 
	#USB_OTG_PCGCCTL_PHYSUSP
 ((
uöt32_t
)0x00000010Ë

	)

7199 
	#IS_ADC_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
ADC1
) || \

7200 ((
INSTANCE
Ë=
ADC2
))

	)

7202 
	#IS_ADC_COMMON_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
ADC12_COMMON
)

	)

7204 
	#IS_ADC_MULTIMODE_MASTER_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
ADC1
)

	)

7206 
	#IS_ADC_DMA_CAPABILITY_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
ADC1
)

	)

7209 
	#IS_CAN_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
CAN1
) || \

7210 ((
INSTANCE
Ë=
CAN2
))

	)

7213 
	#IS_CRC_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
CRC
)

	)

7216 
	#IS_DAC_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
DAC
)

	)

7219 
	#IS_DMA_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
DMA1_Ch™√l1
) || \

7220 ((
INSTANCE
Ë=
DMA1_Ch™√l2
) || \

7221 ((
INSTANCE
Ë=
DMA1_Ch™√l3
) || \

7222 ((
INSTANCE
Ë=
DMA1_Ch™√l4
) || \

7223 ((
INSTANCE
Ë=
DMA1_Ch™√l5
) || \

7224 ((
INSTANCE
Ë=
DMA1_Ch™√l6
) || \

7225 ((
INSTANCE
Ë=
DMA1_Ch™√l7
) || \

7226 ((
INSTANCE
Ë=
DMA2_Ch™√l1
) || \

7227 ((
INSTANCE
Ë=
DMA2_Ch™√l2
) || \

7228 ((
INSTANCE
Ë=
DMA2_Ch™√l3
) || \

7229 ((
INSTANCE
Ë=
DMA2_Ch™√l4
) || \

7230 ((
INSTANCE
Ë=
DMA2_Ch™√l5
))

	)

7233 
	#IS_GPIO_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
GPIOA
) || \

7234 ((
INSTANCE
Ë=
GPIOB
) || \

7235 ((
INSTANCE
Ë=
GPIOC
) || \

7236 ((
INSTANCE
Ë=
GPIOD
) || \

7237 ((
INSTANCE
Ë=
GPIOE
))

	)

7240 
	#IS_GPIO_AF_INSTANCE
(
INSTANCE
Ë
	`IS_GPIO_ALL_INSTANCE
(INSTANCE)

	)

7243 
	#IS_GPIO_LOCK_INSTANCE
(
INSTANCE
Ë
	`IS_GPIO_ALL_INSTANCE
(INSTANCE)

	)

7246 
	#IS_I2C_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
I2C1
) || \

7247 ((
INSTANCE
Ë=
I2C2
))

	)

7250 
	#IS_I2S_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
SPI2
) || \

7251 ((
INSTANCE
Ë=
SPI3
))

	)

7254 
	#IS_IWDG_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
IWDG
)

	)

7257 
	#IS_SPI_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
SPI1
) || \

7258 ((
INSTANCE
Ë=
SPI2
) || \

7259 ((
INSTANCE
Ë=
SPI3
))

	)

7263 
	#IS_TIM_INSTANCE
(
INSTANCE
)\

7264 (((
INSTANCE
Ë=
TIM1
) || \

7265 ((
INSTANCE
Ë=
TIM2
) || \

7266 ((
INSTANCE
Ë=
TIM3
) || \

7267 ((
INSTANCE
Ë=
TIM4
) || \

7268 ((
INSTANCE
Ë=
TIM5
) || \

7269 ((
INSTANCE
Ë=
TIM6
) || \

7270 ((
INSTANCE
Ë=
TIM7
))

	)

7272 
	#IS_TIM_CC1_INSTANCE
(
INSTANCE
)\

7273 (((
INSTANCE
Ë=
TIM1
) || \

7274 ((
INSTANCE
Ë=
TIM2
) || \

7275 ((
INSTANCE
Ë=
TIM3
) || \

7276 ((
INSTANCE
Ë=
TIM4
) || \

7277 ((
INSTANCE
Ë=
TIM5
))

	)

7279 
	#IS_TIM_CC2_INSTANCE
(
INSTANCE
)\

7280 (((
INSTANCE
Ë=
TIM1
) || \

7281 ((
INSTANCE
Ë=
TIM2
) || \

7282 ((
INSTANCE
Ë=
TIM3
) || \

7283 ((
INSTANCE
Ë=
TIM4
) || \

7284 ((
INSTANCE
Ë=
TIM5
))

	)

7286 
	#IS_TIM_CC3_INSTANCE
(
INSTANCE
)\

7287 (((
INSTANCE
Ë=
TIM1
) || \

7288 ((
INSTANCE
Ë=
TIM2
) || \

7289 ((
INSTANCE
Ë=
TIM3
) || \

7290 ((
INSTANCE
Ë=
TIM4
) || \

7291 ((
INSTANCE
Ë=
TIM5
))

	)

7293 
	#IS_TIM_CC4_INSTANCE
(
INSTANCE
)\

7294 (((
INSTANCE
Ë=
TIM1
) || \

7295 ((
INSTANCE
Ë=
TIM2
) || \

7296 ((
INSTANCE
Ë=
TIM3
) || \

7297 ((
INSTANCE
Ë=
TIM4
) || \

7298 ((
INSTANCE
Ë=
TIM5
))

	)

7300 
	#IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE
(
INSTANCE
)\

7301 (((
INSTANCE
Ë=
TIM1
) || \

7302 ((
INSTANCE
Ë=
TIM2
) || \

7303 ((
INSTANCE
Ë=
TIM3
) || \

7304 ((
INSTANCE
Ë=
TIM4
) || \

7305 ((
INSTANCE
Ë=
TIM5
))

	)

7307 
	#IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE
(
INSTANCE
)\

7308 (((
INSTANCE
Ë=
TIM1
) || \

7309 ((
INSTANCE
Ë=
TIM2
) || \

7310 ((
INSTANCE
Ë=
TIM3
) || \

7311 ((
INSTANCE
Ë=
TIM4
) || \

7312 ((
INSTANCE
Ë=
TIM5
))

	)

7314 
	#IS_TIM_CLOCKSOURCE_TIX_INSTANCE
(
INSTANCE
)\

7315 (((
INSTANCE
Ë=
TIM1
) || \

7316 ((
INSTANCE
Ë=
TIM2
) || \

7317 ((
INSTANCE
Ë=
TIM3
) || \

7318 ((
INSTANCE
Ë=
TIM4
) || \

7319 ((
INSTANCE
Ë=
TIM5
))

	)

7321 
	#IS_TIM_CLOCKSOURCE_ITRX_INSTANCE
(
INSTANCE
)\

7322 (((
INSTANCE
Ë=
TIM1
) || \

7323 ((
INSTANCE
Ë=
TIM2
) || \

7324 ((
INSTANCE
Ë=
TIM3
) || \

7325 ((
INSTANCE
Ë=
TIM4
) || \

7326 ((
INSTANCE
Ë=
TIM5
))

	)

7328 
	#IS_TIM_OCXREF_CLEAR_INSTANCE
(
INSTANCE
)\

7329 (((
INSTANCE
Ë=
TIM1
) || \

7330 ((
INSTANCE
Ë=
TIM2
) || \

7331 ((
INSTANCE
Ë=
TIM3
) || \

7332 ((
INSTANCE
Ë=
TIM4
) || \

7333 ((
INSTANCE
Ë=
TIM5
))

	)

7335 
	#IS_TIM_ENCODER_INTERFACE_INSTANCE
(
INSTANCE
)\

7336 (((
INSTANCE
Ë=
TIM1
) || \

7337 ((
INSTANCE
Ë=
TIM2
) || \

7338 ((
INSTANCE
Ë=
TIM3
) || \

7339 ((
INSTANCE
Ë=
TIM4
) || \

7340 ((
INSTANCE
Ë=
TIM5
))

	)

7342 
	#IS_TIM_XOR_INSTANCE
(
INSTANCE
)\

7343 (((
INSTANCE
Ë=
TIM1
) || \

7344 ((
INSTANCE
Ë=
TIM2
) || \

7345 ((
INSTANCE
Ë=
TIM3
) || \

7346 ((
INSTANCE
Ë=
TIM4
) || \

7347 ((
INSTANCE
Ë=
TIM5
))

	)

7349 
	#IS_TIM_MASTER_INSTANCE
(
INSTANCE
)\

7350 (((
INSTANCE
Ë=
TIM1
) || \

7351 ((
INSTANCE
Ë=
TIM2
) || \

7352 ((
INSTANCE
Ë=
TIM3
) || \

7353 ((
INSTANCE
Ë=
TIM4
) || \

7354 ((
INSTANCE
Ë=
TIM5
) || \

7355 ((
INSTANCE
Ë=
TIM6
) || \

7356 ((
INSTANCE
Ë=
TIM7
))

	)

7358 
	#IS_TIM_SLAVE_INSTANCE
(
INSTANCE
)\

7359 (((
INSTANCE
Ë=
TIM1
) || \

7360 ((
INSTANCE
Ë=
TIM2
) || \

7361 ((
INSTANCE
Ë=
TIM3
) || \

7362 ((
INSTANCE
Ë=
TIM4
) || \

7363 ((
INSTANCE
Ë=
TIM5
))

	)

7365 
	#IS_TIM_DMABURST_INSTANCE
(
INSTANCE
)\

7366 (((
INSTANCE
Ë=
TIM1
) || \

7367 ((
INSTANCE
Ë=
TIM2
) || \

7368 ((
INSTANCE
Ë=
TIM3
) || \

7369 ((
INSTANCE
Ë=
TIM4
) || \

7370 ((
INSTANCE
Ë=
TIM5
))

	)

7372 
	#IS_TIM_BREAK_INSTANCE
(
INSTANCE
)\

7373 ((
INSTANCE
Ë=
TIM1
)

	)

7375 
	#IS_TIM_CCX_INSTANCE
(
INSTANCE
, 
CHANNEL
) \

7376 ((((
INSTANCE
Ë=
TIM1
) && \

7377 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

7378 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

7379 ((
CHANNEL
Ë=
TIM_CHANNEL_3
) || \

7380 ((
CHANNEL
Ë=
TIM_CHANNEL_4
))) \

7382 (((
INSTANCE
Ë=
TIM2
) && \

7383 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

7384 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

7385 ((
CHANNEL
Ë=
TIM_CHANNEL_3
) || \

7386 ((
CHANNEL
Ë=
TIM_CHANNEL_4
))) \

7388 (((
INSTANCE
Ë=
TIM3
) && \

7389 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

7390 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

7391 ((
CHANNEL
Ë=
TIM_CHANNEL_3
) || \

7392 ((
CHANNEL
Ë=
TIM_CHANNEL_4
))) \

7394 (((
INSTANCE
Ë=
TIM4
) && \

7395 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

7396 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

7397 ((
CHANNEL
Ë=
TIM_CHANNEL_3
) || \

7398 ((
CHANNEL
Ë=
TIM_CHANNEL_4
))) \

7400 (((
INSTANCE
Ë=
TIM5
) && \

7401 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

7402 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

7403 ((
CHANNEL
Ë=
TIM_CHANNEL_3
) || \

7404 ((
CHANNEL
Ë=
TIM_CHANNEL_4
))))

	)

7406 
	#IS_TIM_CCXN_INSTANCE
(
INSTANCE
, 
CHANNEL
) \

7407 (((
INSTANCE
Ë=
TIM1
) && \

7408 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

7409 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

7410 ((
CHANNEL
Ë=
TIM_CHANNEL_3
)))

	)

7412 
	#IS_TIM_COUNTER_MODE_SELECT_INSTANCE
(
INSTANCE
)\

7413 (((
INSTANCE
Ë=
TIM1
) || \

7414 ((
INSTANCE
Ë=
TIM2
) || \

7415 ((
INSTANCE
Ë=
TIM3
) || \

7416 ((
INSTANCE
Ë=
TIM4
) || \

7417 ((
INSTANCE
Ë=
TIM5
))

	)

7419 
	#IS_TIM_REPETITION_COUNTER_INSTANCE
(
INSTANCE
)\

7420 ((
INSTANCE
Ë=
TIM1
)

	)

7422 
	#IS_TIM_CLOCK_DIVISION_INSTANCE
(
INSTANCE
)\

7423 (((
INSTANCE
Ë=
TIM1
) || \

7424 ((
INSTANCE
Ë=
TIM2
) || \

7425 ((
INSTANCE
Ë=
TIM3
) || \

7426 ((
INSTANCE
Ë=
TIM4
) || \

7427 ((
INSTANCE
Ë=
TIM5
))

	)

7429 
	#IS_TIM_DMA_INSTANCE
(
INSTANCE
)\

7430 (((
INSTANCE
Ë=
TIM1
) || \

7431 ((
INSTANCE
Ë=
TIM2
) || \

7432 ((
INSTANCE
Ë=
TIM3
) || \

7433 ((
INSTANCE
Ë=
TIM4
) || \

7434 ((
INSTANCE
Ë=
TIM5
) || \

7435 ((
INSTANCE
Ë=
TIM6
) || \

7436 ((
INSTANCE
Ë=
TIM7
))

	)

7438 
	#IS_TIM_DMA_CC_INSTANCE
(
INSTANCE
)\

7439 (((
INSTANCE
Ë=
TIM1
) || \

7440 ((
INSTANCE
Ë=
TIM2
) || \

7441 ((
INSTANCE
Ë=
TIM3
) || \

7442 ((
INSTANCE
Ë=
TIM4
) || \

7443 ((
INSTANCE
Ë=
TIM5
))

	)

7445 
	#IS_TIM_COMMUTATION_EVENT_INSTANCE
(
INSTANCE
)\

7446 ((
INSTANCE
Ë=
TIM1
)

	)

7452 
	#IS_USART_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

7453 ((
INSTANCE
Ë=
USART2
) || \

7454 ((
INSTANCE
Ë=
USART3
))

	)

7457 
	#IS_UART_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

7458 ((
INSTANCE
Ë=
USART2
) || \

7459 ((
INSTANCE
Ë=
USART3
) || \

7460 ((
INSTANCE
Ë=
UART4
) || \

7461 ((
INSTANCE
Ë=
UART5
))

	)

7464 
	#IS_UART_HALFDUPLEX_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

7465 ((
INSTANCE
Ë=
USART2
) || \

7466 ((
INSTANCE
Ë=
USART3
) || \

7467 ((
INSTANCE
Ë=
UART4
) || \

7468 ((
INSTANCE
Ë=
UART5
))

	)

7471 
	#IS_UART_LIN_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

7472 ((
INSTANCE
Ë=
USART2
) || \

7473 ((
INSTANCE
Ë=
USART3
) || \

7474 ((
INSTANCE
Ë=
UART4
) || \

7475 ((
INSTANCE
Ë=
UART5
))

	)

7478 
	#IS_UART_HWFLOW_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

7479 ((
INSTANCE
Ë=
USART2
) || \

7480 ((
INSTANCE
Ë=
USART3
))

	)

7483 
	#IS_SMARTCARD_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

7484 ((
INSTANCE
Ë=
USART2
) || \

7485 ((
INSTANCE
Ë=
USART3
))

	)

7488 
	#IS_IRDA_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

7489 ((
INSTANCE
Ë=
USART2
) || \

7490 ((
INSTANCE
Ë=
USART3
) || \

7491 ((
INSTANCE
Ë=
UART4
) || \

7492 ((
INSTANCE
Ë=
UART5
))

	)

7495 
	#IS_UART_MULTIPROCESSOR_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

7496 ((
INSTANCE
Ë=
USART2
) || \

7497 ((
INSTANCE
Ë=
USART3
) || \

7498 ((
INSTANCE
Ë=
UART4
) || \

7499 ((
INSTANCE
Ë=
UART5
))

	)

7502 
	#IS_UART_DMA_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

7503 ((
INSTANCE
Ë=
USART2
) || \

7504 ((
INSTANCE
Ë=
USART3
) || \

7505 ((
INSTANCE
Ë=
UART4
))

	)

7508 
	#IS_RTC_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
RTC
)

	)

7511 
	#IS_WWDG_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
WWDG
)

	)

7515 
	#IS_USB_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
USB_OTG_FS
)

	)

7531 
	#ADC1_IRQn
 
ADC1_2_IRQn


	)

7532 
	#USB_LP_IRQn
 
CAN1_RX0_IRQn


	)

7533 
	#USB_LP_CAN1_RX0_IRQn
 
CAN1_RX0_IRQn


	)

7534 
	#USB_HP_CAN1_TX_IRQn
 
CAN1_TX_IRQn


	)

7535 
	#USB_HP_IRQn
 
CAN1_TX_IRQn


	)

7536 
	#DMA2_Ch™√l4_5_IRQn
 
DMA2_Ch™√l4_IRQn


	)

7537 
	#USBWakeUp_IRQn
 
OTG_FS_WKUP_IRQn


	)

7538 
	#CEC_IRQn
 
OTG_FS_WKUP_IRQn


	)

7539 
	#TIM1_BRK_TIM15_IRQn
 
TIM1_BRK_IRQn


	)

7540 
	#TIM1_BRK_TIM9_IRQn
 
TIM1_BRK_IRQn


	)

7541 
	#TIM9_IRQn
 
TIM1_BRK_IRQn


	)

7542 
	#TIM1_TRG_COM_TIM11_IRQn
 
TIM1_TRG_COM_IRQn


	)

7543 
	#TIM1_TRG_COM_TIM17_IRQn
 
TIM1_TRG_COM_IRQn


	)

7544 
	#TIM11_IRQn
 
TIM1_TRG_COM_IRQn


	)

7545 
	#TIM10_IRQn
 
TIM1_UP_IRQn


	)

7546 
	#TIM1_UP_TIM16_IRQn
 
TIM1_UP_IRQn


	)

7547 
	#TIM1_UP_TIM10_IRQn
 
TIM1_UP_IRQn


	)

7548 
	#TIM6_DAC_IRQn
 
TIM6_IRQn


	)

7552 
	#ADC1_IRQH™dÀr
 
ADC1_2_IRQH™dÀr


	)

7553 
	#USB_LP_IRQH™dÀr
 
CAN1_RX0_IRQH™dÀr


	)

7554 
	#USB_LP_CAN1_RX0_IRQH™dÀr
 
CAN1_RX0_IRQH™dÀr


	)

7555 
	#USB_HP_CAN1_TX_IRQH™dÀr
 
CAN1_TX_IRQH™dÀr


	)

7556 
	#USB_HP_IRQH™dÀr
 
CAN1_TX_IRQH™dÀr


	)

7557 
	#DMA2_Ch™√l4_5_IRQH™dÀr
 
DMA2_Ch™√l4_IRQH™dÀr


	)

7558 
	#USBWakeUp_IRQH™dÀr
 
OTG_FS_WKUP_IRQH™dÀr


	)

7559 
	#CEC_IRQH™dÀr
 
OTG_FS_WKUP_IRQH™dÀr


	)

7560 
	#TIM1_BRK_TIM15_IRQH™dÀr
 
TIM1_BRK_IRQH™dÀr


	)

7561 
	#TIM1_BRK_TIM9_IRQH™dÀr
 
TIM1_BRK_IRQH™dÀr


	)

7562 
	#TIM9_IRQH™dÀr
 
TIM1_BRK_IRQH™dÀr


	)

7563 
	#TIM1_TRG_COM_TIM11_IRQH™dÀr
 
TIM1_TRG_COM_IRQH™dÀr


	)

7564 
	#TIM1_TRG_COM_TIM17_IRQH™dÀr
 
TIM1_TRG_COM_IRQH™dÀr


	)

7565 
	#TIM11_IRQH™dÀr
 
TIM1_TRG_COM_IRQH™dÀr


	)

7566 
	#TIM10_IRQH™dÀr
 
TIM1_UP_IRQH™dÀr


	)

7567 
	#TIM1_UP_TIM16_IRQH™dÀr
 
TIM1_UP_IRQH™dÀr


	)

7568 
	#TIM1_UP_TIM10_IRQH™dÀr
 
TIM1_UP_IRQH™dÀr


	)

7569 
	#TIM6_DAC_IRQH™dÀr
 
TIM6_IRQH™dÀr


	)

7581 #ifde‡
__˝lu•lus


	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\cmsis\inc\stm32f1xx.h

56 #i‚de‡
__STM32F1XX_H


57 
	#__STM32F1XX_H


	)

59 #ifde‡
__˝lu•lus


70 #i‡!
deföed
 (
STM32F1
)

71 
	#STM32F1


	)

78 #i‡!
deföed
 (
STM32F100xB
Ë&& !deföed (
STM32F100xE
Ë&& !deföed (
STM32F101x6
) && \

79 !
deföed
 (
STM32F101xB
Ë&& !deföed (
STM32F101xE
Ë&& !deföed (
STM32F101xG
Ë&& !deföed (
STM32F102x6
Ë&& !deföed (
STM32F102xB
Ë&& !deföed (
STM32F103x6
) && \

80 !
deföed
 (
STM32F103xB
Ë&& !deföed (
STM32F103xE
Ë&& !deföed (
STM32F103xG
Ë&& !deföed (
STM32F105xC
Ë&& !
	$deföed
 (
STM32F107xC
)

101 #i‡!
	`deföed
 (
USE_HAL_DRIVER
)

113 
	#__STM32F1_CMSIS_VERSION_MAIN
 (0x04Ë

	)

114 
	#__STM32F1_CMSIS_VERSION_SUB1
 (0x00Ë

	)

115 
	#__STM32F1_CMSIS_VERSION_SUB2
 (0x02Ë

	)

116 
	#__STM32F1_CMSIS_VERSION_RC
 (0x00Ë

	)

117 
	#__STM32F1_CMSIS_VERSION
 ((
__STM32F1_CMSIS_VERSION_MAIN
 << 24)\

118 |(
__STM32F1_CMSIS_VERSION_SUB1
 << 16)\

119 |(
__STM32F1_CMSIS_VERSION_SUB2
 << 8 )\

120 |(
__STM32F1_CMSIS_VERSION_RC
))

	)

130 #i‡
	`deföed
(
STM32F100xB
)

131 
	~"°m32f100xb.h
"

132 #ñi‡
	`deföed
(
STM32F100xE
)

133 
	~"°m32f100xe.h
"

134 #ñi‡
	`deföed
(
STM32F101x6
)

135 
	~"°m32f101x6.h
"

136 #ñi‡
	`deföed
(
STM32F101xB
)

137 
	~"°m32f101xb.h
"

138 #ñi‡
	`deföed
(
STM32F101xE
)

139 
	~"°m32f101xe.h
"

140 #ñi‡
	`deföed
(
STM32F101xG
)

141 
	~"°m32f101xg.h
"

142 #ñi‡
	`deföed
(
STM32F102x6
)

143 
	~"°m32f102x6.h
"

144 #ñi‡
	`deföed
(
STM32F102xB
)

145 
	~"°m32f102xb.h
"

146 #ñi‡
	`deföed
(
STM32F103x6
)

147 
	~"°m32f103x6.h
"

148 #ñi‡
	`deföed
(
STM32F103xB
)

149 
	~"°m32f103xb.h
"

150 #ñi‡
	`deföed
(
STM32F103xE
)

151 
	~"°m32f103xe.h
"

152 #ñi‡
	`deföed
(
STM32F103xG
)

153 
	~"°m32f103xg.h
"

154 #ñi‡
	`deföed
(
STM32F105xC
)

155 
	~"°m32f105xc.h
"

156 #ñi‡
	`deföed
(
STM32F107xC
)

157 
	~"°m32f107xc.h
"

171 
RESET
 = 0,

172 
SET
 = !
RESET


173 } 
	tFœgSètus
, 
	tITSètus
;

177 
DISABLE
 = 0,

178 
ENABLE
 = !
DISABLE


179 } 
	tFun˘i⁄ÆSèã
;

180 
	#IS_FUNCTIONAL_STATE
(
STATE
Ë(((STATEË=
DISABLE
Ë|| ((STATEË=
ENABLE
))

	)

184 
ERROR
 = 0,

185 
SUCCESS
 = !
ERROR


186 } 
	tEº‹Sètus
;

196 
	#SET_BIT
(
REG
, 
BIT
Ë((REGË|(BIT))

	)

198 
	#CLEAR_BIT
(
REG
, 
BIT
Ë((REGË&~(BIT))

	)

200 
	#READ_BIT
(
REG
, 
BIT
Ë((REGË& (BIT))

	)

202 
	#CLEAR_REG
(
REG
Ë((REGË(0x0))

	)

204 
	#WRITE_REG
(
REG
, 
VAL
Ë((REGË(VAL))

	)

206 
	#READ_REG
(
REG
Ë((REG))

	)

208 
	#MODIFY_REG
(
REG
, 
CLEARMASK
, 
SETMASK
Ë
	`WRITE_REG
((REG), (((
	`READ_REG
(REG)Ë& (~(CLEARMASK))Ë| (SETMASK)))

	)

210 
	#POSITION_VAL
(
VAL
Ë(
	`__CLZ
(
	`__RBIT
(VAL)))

	)

217 #i‡
	`deföed
 (
USE_HAL_DRIVER
)

218 
	~"°m32f1xx_hÆ.h
"

222 #ifde‡
__˝lu•lus


223 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\cmsis\inc\system_stm32f1xx.h

49 #i‚de‡
__SYSTEM_STM32F10X_H


50 
	#__SYSTEM_STM32F10X_H


	)

52 #ifde‡
__˝lu•lus


69 
uöt32_t
 
Sy°emC‹eClock
;

95 
Sy°emInô
();

96 
Sy°emC‹eClockUpd©e
();

101 #ifde‡
__˝lu•lus


	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\inc\ADC.h

1 #i‚de‡
__ADC_h


2 
	#__ADC_h


	)

4 
	~"GlobÆObje˘s.h
"

6 
	~"FªeRTOS.h
"

7 
	~"queue.h
"

8 
	~"èsk.h
"

9 
	~"£mphr.h
"

11 
	~"°m32f1xx_hÆ.h
"

13 
	#ADC_QUEUE_LEN
 2

	)

16 #i‚de‡
ADC_Ródî_PRIORITY


17 
	#ADC_Ródî_PRIORITY
 ( 
tskIDLE_PRIORITY
 + 1 )

	)

19 #i‚de‡
A_EMA


20 
	#A_EMA
 0.3333

22 #i‚de‡
ADC_CHANNELS


	)

23 
	#ADC_CHANNELS
 10

25 #i‚de‡
ADC_READ_INTERVAL


	)

26 
	#ADC_READ_INTERVAL
 10

	)

32 
ADC_P¨amëîs
 * 
ADC_P¨ams
;

35 
xQueueH™dÀ
 
adc_queue
;

38 
ADC_InôProc
 (
ADC_P¨amëîs
 * 
∑øms
);

39 
ADC_ªad
 ();

40 
ADC_Ródî
–*
pvP¨amëîs
 );

41 
ADC_GëZîoLevñ
();

42 
ADC_SëDeÁu…P¨amëîs
 (
ADC_P¨amëîs
 * 
∑øms
);

43 
ADC_SèπCÆibøti⁄
 ();

44 
ADC_St›CÆibøti⁄
 ();

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\inc\Buttons.h

1 #i‚de‡
BUTTONS_H


2 
	#BUTTONS_H


	)

4 
	~"GlobÆObje˘s.h
"

5 
	~"°m32f1xx_hÆ.h
"

6 
	~"FªeRTOS.h
"

7 
	~"èsk.h
"

9 #i‚de‡
BTN_READ_INTERVAL


10 
	#BTN_READ_INTERVAL
 10

	)

13 
	#BUTTONS_COUNT
 32

	)

16 
	#KEY_UP
 64

	)

17 
	#KEY_DOWN
 128

	)

18 
	#KEY_RIGHT
 256

	)

19 
	#KEY_LEFT
 32

	)

20 
	#KEY_ENTER
 16

	)

21 
	#KEY_FIRE_RIGHT_UP
 1

	)

22 
	#KEY_FIRE_RIGHT_DOWN
 4

	)

23 
	#KEY_FIRE_LEFT_UP
 2

	)

24 
	#KEY_FIRE_LEFT_DOWN
 8

	)

32 
Buâ⁄sInô
();

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\inc\FreeRTOSConfig.h

1 #i‚de‡
FREERTOS_CONFIG_H


2 
	#FREERTOS_CONFIG_H


	)

16 
	#c⁄figUSE_PREEMPTION
 1

	)

17 
	#c⁄figUSE_IDLE_HOOK
 0

	)

18 
	#c⁄figUSE_TICK_HOOK
 0

	)

19 
	#c⁄figCPU_CLOCK_HZ
 ( ( Ë72000000 )

	)

20 
	#c⁄figTICK_RATE_HZ
 ( ( 
TickTy≥_t
 ) 1000 )

	)

21 
	#c⁄figMAX_PRIORITIES
 ( 5 )

	)

22 
	#c⁄figMINIMAL_STACK_SIZE
 ( ( Ë120 )

	)

23 
	#c⁄figTOTAL_HEAP_SIZE
 ( ( 
size_t
 ) ( 10 * 1024 ) )

	)

24 
	#c⁄figMAX_TASK_NAME_LEN
 ( 16 )

	)

25 
	#c⁄figUSE_TRACE_FACILITY
 1

	)

26 
	#c⁄figUSE_16_BIT_TICKS
 0

	)

27 
	#c⁄figIDLE_SHOULD_YIELD
 1

	)

30 
	#c⁄figUSE_CO_ROUTINES
 0

	)

31 
	#c⁄figMAX_CO_ROUTINE_PRIORITIES
 ( 2 )

	)

34 
	#c⁄figUSE_TIMERS
 0

	)

35 
	#c⁄figTIMER_TASK_PRIORITY
 (1)

	)

36 
	#c⁄figTIMER_QUEUE_LENGTH
 10

	)

37 
	#c⁄figTIMER_TASK_STACK_DEPTH
 (
c⁄figMINIMAL_STACK_SIZE
 * 2)

	)

39 
	#c⁄figUSE_MUTEXES
 1

	)

40 
	#c⁄figUSE_COUNTING_SEMAPHORES
 1

	)

41 
	#c⁄figUSE_ALTERNATIVE_API
 0

	)

42 
	#c⁄figCHECK_FOR_STACK_OVERFLOW
 0

	)

43 
	#c⁄figUSE_RECURSIVE_MUTEXES
 0

	)

44 
	#c⁄figQUEUE_REGISTRY_SIZE
 0

	)

45 
	#c⁄figGENERATE_RUN_TIME_STATS
 0

	)

50 
	#INCLUDE_vTaskPri‹ôySë
 1

	)

51 
	#INCLUDE_uxTaskPri‹ôyGë
 1

	)

52 
	#INCLUDE_vTaskDñëe
 1

	)

53 
	#INCLUDE_vTaskCÀ™UpResour˚s
 0

	)

54 
	#INCLUDE_vTaskSu•íd
 1

	)

55 
	#INCLUDE_vTaskDñayU¡û
 1

	)

56 
	#INCLUDE_vTaskDñay
 1

	)

60 
	#c⁄figKERNEL_INTERRUPT_PRIORITY
 255

	)

63 
	#c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 191

	)

70 
	#c⁄figLIBRARY_KERNEL_INTERRUPT_PRIORITY
 15

	)

75 
	#c⁄figCOM0_RX_BUFFER_LENGTH
 128

	)

76 
	#c⁄figCOM0_TX_BUFFER_LENGTH
 128

	)

77 
	#c⁄figCOM1_RX_BUFFER_LENGTH
 128

	)

78 
	#c⁄figCOM1_TX_BUFFER_LENGTH
 128

	)

81 
	#vP‹tSVCH™dÀr
 
SVC_H™dÀr


	)

82 
	#xP‹tPídSVH™dÀr
 
PídSV_H™dÀr


	)

83 
	#xP‹tSysTickH™dÀr
 
SysTick_H™dÀr


	)

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\inc\GlobalObjects.h

1 #i‚de‡
GLOBALOBJECTS_H_INCLUDED


2 
	#GLOBALOBJECTS_H_INCLUDED


	)

4 
	~"°m32f1xx_hÆ.h
"

9 
	#MAX_LCD_BRITNESS
 10

	)

10 
	#JOY_AXIS_COUNT
 8

	)

11 
	#LONG_CLICK_INTERVAL
 5

	)

12 
	#ENCODER_INTERVAL
 100

	)

15 
	#ADC_CHANNELS
 10

	)

16 
	#ADC_VIRT_CH
 2

	)

17 
	#ADC_READ_INTERVAL
 10

	)

18 
	#A_EMA
 0.3333

19 

	)

23 
uöt16_t
 
	mSˇÀFa˘‹
 [
ADC_CHANNELS
];

24 
öt8_t
 
	mTønsf‹m
 [
ADC_CHANNELS
];

25 
öt16_t
 
	mCÆibøti⁄
 [3][
ADC_CHANNELS
];

26 
öt8_t
 
	mDódZ⁄e
 [
ADC_CHANNELS
];

27 
öt16_t
 
	mTrimmîs
 [
ADC_CHANNELS
];

28 
	mSˇÀDividî
 [
ADC_CHANNELS
];

29 }
	tADC_P¨amëîs
;

31 
öt32_t
 
ADC_d©a
 [
ADC_CHANNELS
];

32 
öt32_t
 
ADC_d©a_ˇlibøãd
 [
ADC_CHANNELS
];

34 
	#BUTTONS_RESET_MASK
 0x0FFFFFFF

	)

35 
uöt32_t
 
Buâ⁄s
;

39 
uöt32_t
 
	mhódî
;

40 
uöt8_t
 
	mLCD_Brô√ss
;

41 
uöt8_t
 
	mLCD_MADCTL
;

42 
uöt8_t
 
	mLCD_S¸ìnRŸ©i⁄
;

43 
ADC_P¨amëîs
 
	mADC_P¨ams
;

44 
uöt8_t
 
	mCh™√ls_M≠pög
 [8];

45 
uöt8_t
 
	mBuâ⁄sM≠pög
 [32];

46 }
	tSaveDomaö
;

48 
SaveDomaö
 
P¨amëîs
;

49 * 
SaveP¨amëîsAddr
;

51 
	#ENCODER


	)

53 
öt16_t
 
EncodîVÆue
;

54 
öt8_t
 
EncodîDñè
;

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\inc\LCD.h

9 #i‚de‡
Lcd_h


10 
	#Lcd_h


	)

12 
	~"°m32f1xx_hÆ.h
"

14 
	#LCD_RESET_PIN
 
GPIO_PIN_6


	)

15 
	#LCD_CS_PIN
 
GPIO_PIN_7


	)

18 
	#LCD_TX_QUEUE_LEN
 3

	)

20 
	#NOP
 0x00

21 
	#SWRESET
 0x01

22 
	#BSTROFF
 0x02

23 
	#BSTRON
 0x03

24 
	#RDDIDIF
 0x04

25 
	#RDDST
 0x09

26 
	#SLEEPIN
 0x10

27 
	#SLEEPOUT
 0x11

28 
	#PTLON
 0x12

29 
	#NORON
 0x13

30 
	#INVOFF
 0x20

31 
	#INVON
 0x21

32 
	#DALO
 0x22

33 
	#DAL
 0x23

34 
	#SETCON
 0x25

35 
	#DISPOFF
 0x28

36 
	#DISPON
 0x29

37 
	#CASET
 0x2A

38 
	#PASET
 0x2B

39 
	#RAMWR
 0x2C

40 
	#RGBSET
 0x2D

41 
	#PTLAR
 0x30

42 
	#VSCRDEF
 0x33

43 
	#TEOFF
 0x34

44 
	#TEON
 0x35

45 
	#MADCTL
 0x36

46 
	#SEP
 0x37

47 
	#IDMOFF
 0x38

48 
	#IDMON
 0x39

49 
	#COLMOD
 0x3A

50 
	#SETVOP
 0xB0

51 
	#BRS
 0xB4

52 
	#TRS
 0xB6

53 
	#DISCTR
 0xB9

54 
	#DOR
 0xBA

55 
	#TCDFE
 0xBD

56 
	#TCVOPE
 0xBF

57 
	#EC
 0xC0

58 
	#SETMUL
 0xC2

59 
	#TCVOPAB
 0xC3

60 
	#TCVOPCD
 0xC4

61 
	#TCDF
 0xC5

62 
	#DF8COLOR
 0xC6

63 
	#SETBS
 0xC7

64 
	#RDTEMP
 0xC8

65 

	)

68 
	#WHITE
 0xFFF

	)

69 
	#BLACK
 0x000

	)

70 
	#RED
 0xF00

	)

71 
	#GREEN
 0x0F0

	)

72 
	#BLUE
 0x00F

	)

73 
	#CYAN
 0x0FF

	)

74 
	#MAGENTA
 0xF0F

	)

75 
	#YELLOW
 0xFF0

	)

76 
	#BROWN
 0xB22

	)

77 
	#ORANGE
 0xFA0

	)

78 
	#PINK
 0xF6A

	)

82 
	#SMALL
 0

	)

83 
	#MEDIUM
 1

	)

84 
	#LARGE
 2

	)

88 
	#NOFILL
 0

	)

89 
	#FILL
 1

	)

92 
	#MADCTL_DEFAULT
 0x00

	)

93 
	#MADCTL_MY
 0x80

	)

94 
	#MADCTL_MX
 0x40

	)

95 
	#MADCTL_V
 0x20

	)

96 
	#MADCTL_LAO
 0x10

	)

97 
	#MADCTL_RGB
 0x08

	)

100 
GPIO_Ty≥Def
* 
	mP‹t
;

101 
uöt32_t
 
	mPö
;

102 } 
	tPöTy≥
;

103 
PöTy≥
 
Re£tPö
;

104 vﬁ©ûê
uöt8_t
 
busy_Êag
;

105 vﬁ©ûê
öt8_t
 
S¸ìnDúe˘oö
;

107 
LCDFlushTxBuf„r
();

108 
LCDInô
(
öt8_t
 
S¸Dú
, 
uöt8_t
 
∑øms
);

109 
LCDSëMADCTL
 (
uöt8_t
 
vÆ
);

110 
LCDSëRŸ©i⁄
 (
uöt8_t
 
rŸ
);

111 
LCDCÀ¨S¸ìn
();

112 
LCDSëXY
(
x
, 
y
);

113 
LCDSëPixñ
(
x
, 
y
, 
cﬁ‹
);

114 
LCDSëLöe
(
x0
, 
y0
, 
x1
, 
y1
, 
cﬁ‹
);

115 
LCDSëRe˘
(
x0
, 
y0
, 
x1
, 
y1
, 
fûl
, 
cﬁ‹
);

116 
LCDSëCú˛e
(
x0
, 
y0
, 
ødius
, 
cﬁ‹
);

117 
LCDPutCh¨
(
c
, 
x
, 
y
, 
size
, 
fCﬁ‹
, 
bCﬁ‹
);

118 
LCDPutCh¨RŸ©e
(
c
, 
x
, 
y
, 
size
, 
fCﬁ‹
, 
bCﬁ‹
);

119 
LCDPutSå
(*
pSåög
, 
x
, 
y
, 
Size
, 
fCﬁ‹
, 
bCﬁ‹
);

120 
LCDPutSåROM
(c⁄° *
pSåög
, 
x
, 
y
, 
Size
, 
fCﬁ‹
, 
bCﬁ‹
);

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\inc\LcdFont.h

1 #i‚de‡
LcdF⁄t_h


2 
	#LcdF⁄t_h


	)

18 c⁄° 
	gFONT6x8
[97][8] = {

117 c⁄° 
	gFONT8x8
[97][8] = {

216 c⁄° 
	gFONT8x16
[97][16] = {

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\inc\Menu.h

1 #i‚de‡
Míu_h


2 
	#Míu_h


	)

5 
	#NO_EVENT
 0

	)

6 
	#INIT_EVENT
 1

	)

7 
	#DOWN_EVENT
 2

	)

8 
	#UP_EVENT
 3

	)

9 
	#SEL_EVENT
 4

	)

10 
	#EXIT_EVENT
 5

	)

11 (*
	gFUNC
)();

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\inc\PPMsig.h

1 #i‚de‡
PPM_h


2 
	#PPM_h


	)

4 
	~"°m32f105xc.h
"

5 
	~"GlobÆObje˘s.h
"

11 
	#PWM_ARR
 0xFFFF

	)

12 
	#PWM_PSC
 0x16

	)

13 
	#MIN_PWM_VAL
 0x0CCD

14 
	#PPM_PAUSE_VAL
 0x051F

15 
	#PPM_SYNC_PULSE
 0xFAE0

16 

	)

30 
	#SCALE_FACTOR
 
MIN_PWM_VAL
/2

	)

32 
	#PPM_CHANNELS
 8

	)

35 
PPMöô
 ();

36 
PPMupd©e
 (
öt32_t
 * 
¨
, 
SaveDomaö
* 
P¨ams
);

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\inc\encoder.h

1 #i‚de‡
ENCODER_H_INCLUDED


2 
	#ENCODER_H_INCLUDED


	)

5 
	~<°dlib.h
>

6 
	~"GlobÆObje˘s.h
"

7 
	~"°m32f1xx_hÆ.h
"

9 
	~"FªeRTOS.h
"

10 
	~"èsk.h
"

12 
	#ENC_ARR
 0xFF

	)

13 
	#ENC_MAX
 0x03e8

14 
	#PWM_PSC
 0x16

	)

15 
	#ENC_Task_PRIORITY
 ( 
tskIDLE_PRIORITY
 + 5 )

	)

17 #i‚de‡
LONG_CLICK_INTERVAL


18 
	#LONG_CLICK_INTERVAL
 100

	)

21 #i‚de‡
ENCODER


22 
öt16_t
 
EncodîVÆue
;

23 
öt8_t
 
EncodîDñè
;

24 
uöt8_t
 
EncodîSwôch
;

27 
EncodîInô
 ();

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\inc\flash.h

1 #i‚de‡
__FLASH_h


2 
	#__FLASH_h


	)

5 
	~"°m32f1xx_hÆ.h
"

7 
	#FLASH_KEY1
 ((
uöt32_t
)0x45670123)

	)

8 
	#FLASH_KEY2
 ((
uöt32_t
)0xCDEF89AB)

	)

10 
	#LAST_PAGE
 (
uöt32_t
Ë0x801FC00

	)

11 
	#PAGE_SIZE
 1024

	)

13 
Êash_u∆ock
();

14 
Êash_îa£_∑ge
(
uöt32_t
 
addªss
);

15 
WrôeFœsh
(* 
Src
, * 
D°
, 
Lí
);

16 * 
FödNextAddr
 (
Àn
);

17 * 
födLa°Block
 (
Àn
);

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\inc\mxconstants.h

10 
	#GREEN_LED_Pö
 
GPIO_PIN_8


	)

11 
	#GREEN_LED_GPIO_P‹t
 
GPIOC


	)

15 
	#ENCODER_RESETALL_MASK
 0xF0000000

	)

16 
	#ENCODER_RESUPDOWN_MASK
 0xC0000000

	)

17 
	#ENCODER_DOWN_MASK
 0x80000000

	)

18 
	#ENCODER_UP_MASK
 0x40000000

	)

19 
	#ENCODER_BUTTON_MASK
 0x20000000

	)

20 
	#ENCODER_LONGBTN_MASK
 0x10000000

	)

	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\inc\stm32f1xx_hal_conf.h

10 #i‚de‡
__STM32F1xx_HAL_CONF_H


11 
	#__STM32F1xx_HAL_CONF_H


	)

13 #ifde‡
__˝lu•lus


17 
	~"mxc⁄°™ts.h
"

26 
	#HAL_MODULE_ENABLED


	)

30 
	#HAL_CORTEX_MODULE_ENABLED


	)

35 
	#HAL_FLASH_MODULE_ENABLED


	)

36 
	#HAL_GPIO_MODULE_ENABLED


	)

44 
	#HAL_PCD_MODULE_ENABLED


	)

46 
	#HAL_PWR_MODULE_ENABLED


	)

47 
	#HAL_RCC_MODULE_ENABLED


	)

72 #i‡!
deföed
 (
HSE_VALUE
)

73 
	#HSE_VALUE
 ((
uöt32_t
)8000000Ë

	)

76 #i‡!
deföed
 (
HSE_STARTUP_TIMEOUT
)

77 
	#HSE_STARTUP_TIMEOUT
 ((
uöt32_t
)100Ë

	)

85 #i‡!
deföed
 (
HSI_VALUE
)

86 
	#HSI_VALUE
 ((
uöt32_t
)8000000Ë

	)

93 #i‡!
deföed
 (
LSE_VALUE
)

94 
	#LSE_VALUE
 ((
uöt32_t
)32768Ë

	)

97 #i‡!
deföed
 (
LSE_STARTUP_TIMEOUT
)

98 
	#LSE_STARTUP_TIMEOUT
 ((
uöt32_t
)5000Ë

	)

108 
	#VDD_VALUE
 ((
uöt32_t
)3300Ë

	)

109 
	#TICK_INT_PRIORITY
 ((
uöt32_t
)15Ë

	)

110 
	#USE_RTOS
 0

	)

111 
	#PREFETCH_ENABLE
 1

	)

125 
	#MAC_ADDR0
 2

	)

126 
	#MAC_ADDR1
 0

	)

127 
	#MAC_ADDR2
 0

	)

128 
	#MAC_ADDR3
 0

	)

129 
	#MAC_ADDR4
 0

	)

130 
	#MAC_ADDR5
 0

	)

133 
	#ETH_RX_BUF_SIZE
 
ETH_MAX_PACKET_SIZE


	)

134 
	#ETH_TX_BUF_SIZE
 
ETH_MAX_PACKET_SIZE


	)

135 
	#ETH_RXBUFNB
 ((
uöt32_t
)8Ë

	)

136 
	#ETH_TXBUFNB
 ((
uöt32_t
)4Ë

	)

141 
	#DP83848_PHY_ADDRESS
 0x01

	)

143 
	#PHY_RESET_DELAY
 ((
uöt32_t
)0x000000FF)

	)

145 
	#PHY_CONFIG_DELAY
 ((
uöt32_t
)0x00000FFF)

	)

147 
	#PHY_READ_TO
 ((
uöt32_t
)0x0000FFFF)

	)

148 
	#PHY_WRITE_TO
 ((
uöt32_t
)0x0000FFFF)

	)

152 
	#PHY_BCR
 ((
uöt16_t
)0x00Ë

	)

153 
	#PHY_BSR
 ((
uöt16_t
)0x01Ë

	)

155 
	#PHY_RESET
 ((
uöt16_t
)0x8000Ë

	)

156 
	#PHY_LOOPBACK
 ((
uöt16_t
)0x4000Ë

	)

157 
	#PHY_FULLDUPLEX_100M
 ((
uöt16_t
)0x2100Ë

	)

158 
	#PHY_HALFDUPLEX_100M
 ((
uöt16_t
)0x2000Ë

	)

159 
	#PHY_FULLDUPLEX_10M
 ((
uöt16_t
)0x0100Ë

	)

160 
	#PHY_HALFDUPLEX_10M
 ((
uöt16_t
)0x0000Ë

	)

161 
	#PHY_AUTONEGOTIATION
 ((
uöt16_t
)0x1000Ë

	)

162 
	#PHY_RESTART_AUTONEGOTIATION
 ((
uöt16_t
)0x0200Ë

	)

163 
	#PHY_POWERDOWN
 ((
uöt16_t
)0x0800Ë

	)

164 
	#PHY_ISOLATE
 ((
uöt16_t
)0x0400Ë

	)

166 
	#PHY_AUTONEGO_COMPLETE
 ((
uöt16_t
)0x0020Ë

	)

167 
	#PHY_LINKED_STATUS
 ((
uöt16_t
)0x0004Ë

	)

168 
	#PHY_JABBER_DETECTION
 ((
uöt16_t
)0x0002Ë

	)

172 
	#PHY_SR
 ((
uöt16_t
)0x10Ë

	)

173 
	#PHY_MICR
 ((
uöt16_t
)0x11Ë

	)

174 
	#PHY_MISR
 ((
uöt16_t
)0x12Ë

	)

176 
	#PHY_LINK_STATUS
 ((
uöt16_t
)0x0001Ë

	)

177 
	#PHY_SPEED_STATUS
 ((
uöt16_t
)0x0002Ë

	)

178 
	#PHY_DUPLEX_STATUS
 ((
uöt16_t
)0x0004Ë

	)

180 
	#PHY_MICR_INT_EN
 ((
uöt16_t
)0x0002Ë

	)

181 
	#PHY_MICR_INT_OE
 ((
uöt16_t
)0x0001Ë

	)

183 
	#PHY_MISR_LINK_INT_EN
 ((
uöt16_t
)0x0020Ë

	)

184 
	#PHY_LINK_INTERRUPT
 ((
uöt16_t
)0x2000Ë

	)

191 #ifde‡
HAL_RCC_MODULE_ENABLED


192 
	~"°m32f1xx_hÆ_rcc.h
"

195 #ifde‡
HAL_GPIO_MODULE_ENABLED


196 
	~"°m32f1xx_hÆ_gpio.h
"

199 #ifde‡
HAL_DMA_MODULE_ENABLED


200 
	~"°m32f1xx_hÆ_dma.h
"

203 #ifde‡
HAL_ETH_MODULE_ENABLED


204 
	~"°m32f1xx_hÆ_ëh.h
"

207 #ifde‡
HAL_CAN_MODULE_ENABLED


208 
	~"°m32f1xx_hÆ_ˇn.h
"

211 #ifde‡
HAL_CEC_MODULE_ENABLED


212 
	~"°m32f1xx_hÆ_˚c.h
"

215 #ifde‡
HAL_CORTEX_MODULE_ENABLED


216 
	~"°m32f1xx_hÆ_c‹ãx.h
"

219 #ifde‡
HAL_ADC_MODULE_ENABLED


220 
	~"°m32f1xx_hÆ_adc.h
"

223 #ifde‡
HAL_CRC_MODULE_ENABLED


224 
	~"°m32f1xx_hÆ_¸c.h
"

227 #ifde‡
HAL_DAC_MODULE_ENABLED


228 
	~"°m32f1xx_hÆ_dac.h
"

231 #ifde‡
HAL_FLASH_MODULE_ENABLED


232 
	~"°m32f1xx_hÆ_Êash.h
"

235 #ifde‡
HAL_SRAM_MODULE_ENABLED


236 
	~"°m32f1xx_hÆ_§am.h
"

239 #ifde‡
HAL_NOR_MODULE_ENABLED


240 
	~"°m32f1xx_hÆ_n‹.h
"

243 #ifde‡
HAL_I2C_MODULE_ENABLED


244 
	~"°m32f1xx_hÆ_i2c.h
"

247 #ifde‡
HAL_I2S_MODULE_ENABLED


248 
	~"°m32f1xx_hÆ_i2s.h
"

251 #ifde‡
HAL_IWDG_MODULE_ENABLED


252 
	~"°m32f1xx_hÆ_iwdg.h
"

255 #ifde‡
HAL_PWR_MODULE_ENABLED


256 
	~"°m32f1xx_hÆ_pwr.h
"

259 #ifde‡
HAL_RTC_MODULE_ENABLED


260 
	~"°m32f1xx_hÆ_πc.h
"

263 #ifde‡
HAL_PCCARD_MODULE_ENABLED


264 
	~"°m32f1xx_hÆ_pcˇrd.h
"

267 #ifde‡
HAL_SD_MODULE_ENABLED


268 
	~"°m32f1xx_hÆ_sd.h
"

271 #ifde‡
HAL_NAND_MODULE_ENABLED


272 
	~"°m32f1xx_hÆ_«nd.h
"

275 #ifde‡
HAL_SPI_MODULE_ENABLED


276 
	~"°m32f1xx_hÆ_•i.h
"

279 #ifde‡
HAL_TIM_MODULE_ENABLED


280 
	~"°m32f1xx_hÆ_tim.h
"

283 #ifde‡
HAL_UART_MODULE_ENABLED


284 
	~"°m32f1xx_hÆ_u¨t.h
"

287 #ifde‡
HAL_USART_MODULE_ENABLED


288 
	~"°m32f1xx_hÆ_ußπ.h
"

291 #ifde‡
HAL_IRDA_MODULE_ENABLED


292 
	~"°m32f1xx_hÆ_úda.h
"

295 #ifde‡
HAL_SMARTCARD_MODULE_ENABLED


296 
	~"°m32f1xx_hÆ_sm¨tˇrd.h
"

299 #ifde‡
HAL_WWDG_MODULE_ENABLED


300 
	~"°m32f1xx_hÆ_wwdg.h
"

303 #ifde‡
HAL_PCD_MODULE_ENABLED


304 
	~"°m32f1xx_hÆ_pcd.h
"

307 #ifde‡
HAL_HCD_MODULE_ENABLED


308 
	~"°m32f1xx_hÆ_hcd.h
"

313 #ifde‡ 
USE_FULL_ASSERT


322 
	#as£π_∑øm
(
ex¥
Ë(”x¥Ë? ()0 : 
	`as£π_Áûed
((
uöt8_t
 *)
__FILE__
, 
__LINE__
))

	)

324 
as£π_Áûed
(
uöt8_t
* 
fûe
, 
uöt32_t
 
löe
);

326 
	#as£π_∑øm
(
ex¥
Ë(()0)

	)

329 #ifde‡
__˝lu•lus


	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\inc\usb_device.h

10 #i‚de‡
__usb_devi˚_H


11 
	#__usb_devi˚_H


	)

12 #ifde‡
__˝lu•lus


17 
	~"°m32f1xx.h
"

18 
	~"°m32f1xx_hÆ.h
"

19 
	~"usbd_def.h
"

21 
	~"GlobÆObje˘s.h
"

23 
	~"FªeRTOS.h
"

24 
	~"queue.h
"

25 
	~"èsk.h
"

26 
	~"£mphr.h
"

30 
uöt16_t
 
buâ⁄s
;

31 
öt16_t
 
X
;

32 
öt16_t
 
Y
;

33 
öt16_t
 
Z
;

34 
öt16_t
 
RX
;

35 
öt16_t
 
RY
;

36 
öt16_t
 
RZ
;

37 
öt16_t
 
An7
;

38 
öt16_t
 
An8
;

40 }
	tgamïad_ªp‹t_t
;

43 
USBD_H™dÀTy≥Def
 
hUsbDevi˚FS
;

47 
USB_DEVICE_Inô
();

48 
OTG_FS_IRQH™dÀr
();

50 #ifde‡
__˝lu•lus


	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\inc\usbd_conf.h

34 #i‚de‡
__USBD_CONF__H__


35 
	#__USBD_CONF__H__


	)

36 #ifde‡
__˝lu•lus


40 
	~<°dio.h
>

41 
	~<°dlib.h
>

42 
	~<°rög.h
>

43 
	~"°m32f1xx.h
"

44 
	~"°m32f1xx_hÆ.h
"

45 
	~"usbd_def.h
"

61 
	#USBD_MAX_NUM_INTERFACES
 1

	)

63 
	#USBD_MAX_NUM_CONFIGURATION
 1

	)

65 
	#USBD_MAX_STR_DESC_SIZ
 512

	)

67 
	#USBD_SUPPORT_USER_STRING
 0

	)

69 
	#USBD_DEBUG_LEVEL
 0

	)

71 
	#USBD_SELF_POWERED
 0

	)

74 
	#DEVICE_FS
 0

	)

81 
	#USBD_mÆloc
 (
uöt32_t
 *)
USBD_°©ic_mÆloc


	)

82 
	#USBD_‰ì
 
USBD_°©ic_‰ì


	)

83 
	#USBD_mem£t


	)

84 
	#USBD_mem˝y


	)

86 
	#USBD_Dñay
 
HAL_Dñay


	)

90 *
USBD_°©ic_mÆloc
(
uöt32_t
 
size
);

91 
USBD_°©ic_‰ì
(*
p
);

94 #i‡(
USBD_DEBUG_LEVEL
 > 0)

95 
	#USBD_U§Log
(...Ë
	`¥ötf
(
__VA_ARGS__
);\

96 
	`¥ötf
("\n");

	)

98 
	#USBD_U§Log
(...)

	)

102 #i‡(
USBD_DEBUG_LEVEL
 > 1)

104 
	#USBD_EºLog
(...Ë
	`¥ötf
("ERROR: ") ;\

105 
	`¥ötf
(
__VA_ARGS__
);\

106 
	`¥ötf
("\n");

	)

108 
	#USBD_EºLog
(...)

	)

112 #i‡(
USBD_DEBUG_LEVEL
 > 2)

113 
	#USBD_DbgLog
(...Ë
	`¥ötf
("DEBUG : ") ;\

114 
	`¥ötf
(
__VA_ARGS__
);\

115 
	`¥ötf
("\n");

	)

117 
	#USBD_DbgLog
(...)

	)

157 #ifde‡
__˝lu•lus


	@C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\inc\usbd_desc.h

35 #i‚de‡
__USBD_DESC__H__


36 
	#__USBD_DESC__H__


	)

38 #ifde‡
__˝lu•lus


42 
	~"usbd_def.h
"

78 
USBD_Des¸ùt‹sTy≥Def
 
FS_Desc
;

90 #ifde‡
__˝lu•lus


	@C:\skuksenk\_Quadro\ARM\prj\lib\FreeRTOSV8.2.3\FreeRTOS\Source\list.c

71 
	~<°dlib.h
>

72 
	~"FªeRTOS.h
"

73 
	~"li°.h
"

79 
	$vLi°Inôüli£
–
Li°_t
 * c⁄° 
pxLi°
 )

84 
pxLi°
->
pxIndex
 = ( 
Li°Iãm_t
 * ) &–pxLi°->
xLi°End
 );

88 
pxLi°
->
xLi°End
.
xIãmVÆue
 = 
p‹tMAX_DELAY
;

92 
pxLi°
->
xLi°End
.
pxNext
 = ( 
Li°Iãm_t
 * ) &(ÖxList->xListEnd );

93 
pxLi°
->
xLi°End
.
pxPªvious
 = ( 
Li°Iãm_t
 * ) &(ÖxList->xListEnd );

95 
pxLi°
->
uxNumbîOfIãms
 = ( 
UBa£Ty≥_t
 ) 0U;

99 
	`li°SET_LIST_INTEGRITY_CHECK_1_VALUE
–
pxLi°
 );

100 
	`li°SET_LIST_INTEGRITY_CHECK_2_VALUE
–
pxLi°
 );

101 
	}
}

104 
	$vLi°Inôüli£Iãm
–
Li°Iãm_t
 * c⁄° 
pxIãm
 )

107 
pxIãm
->
pvC⁄èöî
 = 
NULL
;

111 
	`li°SET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 );

112 
	`li°SET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 );

113 
	}
}

116 
	$vLi°In£πEnd
–
Li°_t
 * c⁄° 
pxLi°
, 
Li°Iãm_t
 * c⁄° 
pxNewLi°Iãm
 )

118 
Li°Iãm_t
 * c⁄° 
pxIndex
 = 
pxLi°
->pxIndex;

123 
	`li°TEST_LIST_INTEGRITY
–
pxLi°
 );

124 
	`li°TEST_LIST_ITEM_INTEGRITY
–
pxNewLi°Iãm
 );

129 
pxNewLi°Iãm
->
pxNext
 = 
pxIndex
;

130 
pxNewLi°Iãm
->
pxPªvious
 = 
pxIndex
->pxPrevious;

133 
	`mtCOVERAGE_TEST_DELAY
();

135 
pxIndex
->
pxPªvious
->
pxNext
 = 
pxNewLi°Iãm
;

136 
pxIndex
->
pxPªvious
 = 
pxNewLi°Iãm
;

139 
pxNewLi°Iãm
->
pvC⁄èöî
 = ( * ) 
pxLi°
;

141 –
pxLi°
->
uxNumbîOfIãms
 )++;

142 
	}
}

145 
	$vLi°In£π
–
Li°_t
 * c⁄° 
pxLi°
, 
Li°Iãm_t
 * c⁄° 
pxNewLi°Iãm
 )

147 
Li°Iãm_t
 *
pxIãøt‹
;

148 c⁄° 
TickTy≥_t
 
xVÆueOfIn£πi⁄
 = 
pxNewLi°Iãm
->
xIãmVÆue
;

153 
	`li°TEST_LIST_INTEGRITY
–
pxLi°
 );

154 
	`li°TEST_LIST_ITEM_INTEGRITY
–
pxNewLi°Iãm
 );

164 if–
xVÆueOfIn£πi⁄
 =
p‹tMAX_DELAY
 )

166 
pxIãøt‹
 = 
pxLi°
->
xLi°End
.
pxPªvious
;

192  
pxIãøt‹
 = ( 
Li°Iãm_t
 * ) &–
pxLi°
->
xLi°End
 );ÖxIãøt‹->
pxNext
->
xIãmVÆue
 <
xVÆueOfIn£πi⁄
;ÖxIterator =ÖxIterator->pxNext )

199 
pxNewLi°Iãm
->
pxNext
 = 
pxIãøt‹
->pxNext;

200 
pxNewLi°Iãm
->
pxNext
->
pxPªvious
 =ÖxNewListItem;

201 
pxNewLi°Iãm
->
pxPªvious
 = 
pxIãøt‹
;

202 
pxIãøt‹
->
pxNext
 = 
pxNewLi°Iãm
;

206 
pxNewLi°Iãm
->
pvC⁄èöî
 = ( * ) 
pxLi°
;

208 –
pxLi°
->
uxNumbîOfIãms
 )++;

209 
	}
}

212 
UBa£Ty≥_t
 
	$uxLi°Remove
–
Li°Iãm_t
 * c⁄° 
pxIãmToRemove
 )

216 
Li°_t
 * c⁄° 
pxLi°
 = ( Li°_à* ) 
pxIãmToRemove
->
pvC⁄èöî
;

218 
pxIãmToRemove
->
pxNext
->
pxPªvious
 =ÖxItemToRemove->pxPrevious;

219 
pxIãmToRemove
->
pxPªvious
->
pxNext
 =ÖxItemToRemove->pxNext;

222 
	`mtCOVERAGE_TEST_DELAY
();

225 if–
pxLi°
->
pxIndex
 =
pxIãmToRemove
 )

227 
pxLi°
->
pxIndex
 = 
pxIãmToRemove
->
pxPªvious
;

231 
	`mtCOVERAGE_TEST_MARKER
();

234 
pxIãmToRemove
->
pvC⁄èöî
 = 
NULL
;

235 –
pxLi°
->
uxNumbîOfIãms
 )--;

237  
pxLi°
->
uxNumbîOfIãms
;

238 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\lib\FreeRTOSV8.2.3\FreeRTOS\Source\portable\GCC\ARM_CM3\port.c

75 
	~"FªeRTOS.h
"

76 
	~"èsk.h
"

81 #i‚de‡
c⁄figKERNEL_INTERRUPT_PRIORITY


82 
	#c⁄figKERNEL_INTERRUPT_PRIORITY
 255

	)

85 #i‚de‡
c⁄figSYSTICK_CLOCK_HZ


86 
	#c⁄figSYSTICK_CLOCK_HZ
 
c⁄figCPU_CLOCK_HZ


	)

88 
	#p‹tNVIC_SYSTICK_CLK_BIT
 ( 1UL << 2UL )

	)

92 
	#p‹tNVIC_SYSTICK_CLK_BIT
 ( 0 )

	)

96 
	#p‹tNVIC_SYSTICK_CTRL_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e010 ) )

	)

97 
	#p‹tNVIC_SYSTICK_LOAD_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e014 ) )

	)

98 
	#p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e018 ) )

	)

99 
	#p‹tNVIC_SYSPRI2_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ed20 ) )

	)

101 
	#p‹tNVIC_SYSTICK_INT_BIT
 ( 1UL << 1UL )

	)

102 
	#p‹tNVIC_SYSTICK_ENABLE_BIT
 ( 1UL << 0UL )

	)

103 
	#p‹tNVIC_SYSTICK_COUNT_FLAG_BIT
 ( 1UL << 16UL )

	)

104 
	#p‹tNVIC_PENDSVCLEAR_BIT
 ( 1UL << 27UL )

	)

105 
	#p‹tNVIC_PEND_SYSTICK_CLEAR_BIT
 ( 1UL << 25UL )

	)

107 
	#p‹tNVIC_PENDSV_PRI
 ( ( ( 
uöt32_t
 ) 
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 16UL )

	)

108 
	#p‹tNVIC_SYSTICK_PRI
 ( ( ( 
uöt32_t
 ) 
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 24UL )

	)

111 
	#p‹tFIRST_USER_INTERRUPT_NUMBER
 ( 16 )

	)

112 
	#p‹tNVIC_IP_REGISTERS_OFFSET_16
 ( 0xE000E3F0 )

	)

113 
	#p‹tAIRCR_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xE000ED0C ) )

	)

114 
	#p‹tMAX_8_BIT_VALUE
 ( ( 
uöt8_t
 ) 0xf‡)

	)

115 
	#p‹tTOP_BIT_OF_BYTE
 ( ( 
uöt8_t
 ) 0x80 )

	)

116 
	#p‹tMAX_PRIGROUP_BITS
 ( ( 
uöt8_t
 ) 7 )

	)

117 
	#p‹tPRIORITY_GROUP_MASK
 ( 0x07UL << 8UL )

	)

118 
	#p‹tPRIGROUP_SHIFT
 ( 8UL )

	)

121 
	#p‹tVECTACTIVE_MASK
 ( 0xFFUL )

	)

124 
	#p‹tINITIAL_XPSR
 ( 0x01000000UL )

	)

127 
	#p‹tMAX_24_BIT_NUMBER
 ( 0xffffffUL )

	)

132 
	#p‹tMISSED_COUNTS_FACTOR
 ( 45UL )

	)

137 #ifde‡
c⁄figTASK_RETURN_ADDRESS


138 
	#p‹tTASK_RETURN_ADDRESS
 
c⁄figTASK_RETURN_ADDRESS


	)

140 
	#p‹tTASK_RETURN_ADDRESS
 
¥vTaskExôEº‹


	)

145 
UBa£Ty≥_t
 
	guxCrôiˇlNe°ög
 = 0xaaaaaaaa;

152 
vP‹tSëupTimîI¡îru±
( );

157 
	$xP‹tPídSVH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 ));

158 
	`xP‹tSysTickH™dÀr
( );

159 
	$vP‹tSVCH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 ));

164 
	$¥vP‹tSèπFú°Task
–Ë
	`__©åibuã__
 (–
«ked
 ));

169 
	`¥vTaskExôEº‹
( );

176 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

177 
uöt32_t
 
ulTimîCou¡sF‹O√Tick
 = 0;

184 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

185 
uöt32_t
 
xMaximumPossibÀSuµªs£dTicks
 = 0;

192 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

193 
uöt32_t
 
ulSt›≥dTimîCom≥nßti⁄
 = 0;

201 #i‡–
c⁄figASSERT_DEFINED
 == 1 )

202 
uöt8_t
 
ucMaxSysCÆlPri‹ôy
 = 0;

203 
uöt32_t
 
ulMaxPRIGROUPVÆue
 = 0;

204 c⁄° vﬁ©ûê
uöt8_t
 * c⁄° 
pcI¡îru±Pri‹ôyRegi°îs
 = ( c⁄° vﬁ©ûêuöt8_à* c⁄° ) 
p‹tNVIC_IP_REGISTERS_OFFSET_16
;

212 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

216 
pxT›OfSèck
--;

217 *
pxT›OfSèck
 = 
p‹tINITIAL_XPSR
;

218 
pxT›OfSèck
--;

219 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

220 
pxT›OfSèck
--;

221 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tTASK_RETURN_ADDRESS
;

222 
pxT›OfSèck
 -= 5;

223 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

224 
pxT›OfSèck
 -= 8;

226  
pxT›OfSèck
;

227 
	}
}

230 
	$¥vTaskExôEº‹
( )

238 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 == ~0UL );

239 
	`p‹tDISABLE_INTERRUPTS
();

241 
	}
}

244 
	$vP‹tSVCH™dÀr
( )

246 
__asm
 volatile (

261 
	}
}

264 
	$¥vP‹tSèπFú°Task
( )

266 
__asm
 volatile(

278 
	}
}

284 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

288 
	`c⁄figASSERT
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 );

290 #if–
c⁄figASSERT_DEFINED
 == 1 )

292 vﬁ©ûê
uöt32_t
 
ulOrigöÆPri‹ôy
;

293 vﬁ©ûê
uöt8_t
 * c⁄° 
pucFú°U£rPri‹ôyRegi°î
 = ( vﬁ©ûêuöt8_à* c⁄° ) ( 
p‹tNVIC_IP_REGISTERS_OFFSET_16
 + 
p‹tFIRST_USER_INTERRUPT_NUMBER
 );

294 vﬁ©ûê
uöt8_t
 
ucMaxPri‹ôyVÆue
;

302 
ulOrigöÆPri‹ôy
 = *
pucFú°U£rPri‹ôyRegi°î
;

306 *
pucFú°U£rPri‹ôyRegi°î
 = 
p‹tMAX_8_BIT_VALUE
;

309 
ucMaxPri‹ôyVÆue
 = *
pucFú°U£rPri‹ôyRegi°î
;

312 
ucMaxSysCÆlPri‹ôy
 = 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 & 
ucMaxPri‹ôyVÆue
;

316 
ulMaxPRIGROUPVÆue
 = 
p‹tMAX_PRIGROUP_BITS
;

317  ( 
ucMaxPri‹ôyVÆue
 & 
p‹tTOP_BIT_OF_BYTE
 ) ==ÖortTOP_BIT_OF_BYTE )

319 
ulMaxPRIGROUPVÆue
--;

320 
ucMaxPri‹ôyVÆue
 <<–
uöt8_t
 ) 0x01;

325 
ulMaxPRIGROUPVÆue
 <<
p‹tPRIGROUP_SHIFT
;

326 
ulMaxPRIGROUPVÆue
 &
p‹tPRIORITY_GROUP_MASK
;

330 *
pucFú°U£rPri‹ôyRegi°î
 = 
ulOrigöÆPri‹ôy
;

335 
p‹tNVIC_SYSPRI2_REG
 |
p‹tNVIC_PENDSV_PRI
;

336 
p‹tNVIC_SYSPRI2_REG
 |
p‹tNVIC_SYSTICK_PRI
;

340 
	`vP‹tSëupTimîI¡îru±
();

343 
uxCrôiˇlNe°ög
 = 0;

346 
	`¥vP‹tSèπFú°Task
();

352 
	`¥vTaskExôEº‹
();

356 
	}
}

359 
	$vP‹tEndScheduÀr
( )

363 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 == 1000UL );

364 
	}
}

367 
	$vP‹tYõld
( )

370 
p‹tNVIC_INT_CTRL_REG
 = 
p‹tNVIC_PENDSVSET_BIT
;

374 
__asm
 volatile( "dsb" );

375 
__asm
 volatile( "isb" );

376 
	}
}

379 
	$vP‹tE¡îCrôiˇl
( )

381 
	`p‹tDISABLE_INTERRUPTS
();

382 
uxCrôiˇlNe°ög
++;

383 
__asm
 volatile( "dsb" );

384 
__asm
 volatile( "isb" );

391 if–
uxCrôiˇlNe°ög
 == 1 )

393 
	`c⁄figASSERT
––
p‹tNVIC_INT_CTRL_REG
 & 
p‹tVECTACTIVE_MASK
 ) == 0 );

395 
	}
}

398 
	$vP‹tExôCrôiˇl
( )

400 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 );

401 
uxCrôiˇlNe°ög
--;

402 if–
uxCrôiˇlNe°ög
 == 0 )

404 
	`p‹tENABLE_INTERRUPTS
();

406 
	}
}

409 
__©åibuã__
(–
«ked
 )Ë
uöt32_t
 
	$ulP‹tSëI¡îru±Mask
( )

411 
__asm
 volatile \

417 :: "i" ( 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ) : "r0", "r1" \

423 
	}
}

426 
__©åibuã__
(–
«ked
 )Ë
	$vP‹tCÀ¨I¡îru±Mask
–
uöt32_t
 
ulNewMaskVÆue
 )

428 
__asm
 volatile \

436 –Ë
ulNewMaskVÆue
;

437 
	}
}

440 
	$xP‹tPídSVH™dÀr
( )

444 
__asm
 volatile

472 ::"i"(
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
)

474 
	}
}

477 
	$xP‹tSysTickH™dÀr
( )

483 –Ë
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

486 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

490 
p‹tNVIC_INT_CTRL_REG
 = 
p‹tNVIC_PENDSVSET_BIT
;

493 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
( 0 );

494 
	}
}

497 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

499 
__©åibuã__
((
wók
)Ë
	$vP‹tSuµªssTicksAndSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 )

501 
uöt32_t
 
ulRñﬂdVÆue
, 
ulCom∂ëeTickPîiods
, 
ulCom∂ëedSysTickDe¸emíts
, 
ulSysTickCTRL
;

502 
TickTy≥_t
 
xModifübÀIdÀTime
;

505 if–
xEx≥˘edIdÀTime
 > 
xMaximumPossibÀSuµªs£dTicks
 )

507 
xEx≥˘edIdÀTime
 = 
xMaximumPossibÀSuµªs£dTicks
;

514 
p‹tNVIC_SYSTICK_CTRL_REG
 &~
p‹tNVIC_SYSTICK_ENABLE_BIT
;

519 
ulRñﬂdVÆue
 = 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 + ( 
ulTimîCou¡sF‹O√Tick
 * ( 
xEx≥˘edIdÀTime
 - 1UL ) );

520 if–
ulRñﬂdVÆue
 > 
ulSt›≥dTimîCom≥nßti⁄
 )

522 
ulRñﬂdVÆue
 -
ulSt›≥dTimîCom≥nßti⁄
;

527 
__asm
 volatile( "cpsid i" );

531 if–
	`eTaskC⁄fúmSÀïModeSètus
(Ë=
eAb‹tSÀï
 )

535 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
;

538 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

542 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulTimîCou¡sF‹O√Tick
 - 1UL;

546 
__asm
 volatile( "cpsie i" );

551 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulRñﬂdVÆue
;

555 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 = 0UL;

558 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

565 
xModifübÀIdÀTime
 = 
xEx≥˘edIdÀTime
;

566 
	`c⁄figPRE_SLEEP_PROCESSING
–
xModifübÀIdÀTime
 );

567 if–
xModifübÀIdÀTime
 > 0 )

569 
__asm
 volatile( "dsb" );

570 
__asm
 volatile( "wfi" );

571 
__asm
 volatile( "isb" );

573 
	`c⁄figPOST_SLEEP_PROCESSING
–
xEx≥˘edIdÀTime
 );

579 
ulSysTickCTRL
 = 
p‹tNVIC_SYSTICK_CTRL_REG
;

580 
p‹tNVIC_SYSTICK_CTRL_REG
 = ( 
ulSysTickCTRL
 & ~
p‹tNVIC_SYSTICK_ENABLE_BIT
 );

584 
__asm
 volatile( "cpsie i" );

586 if––
ulSysTickCTRL
 & 
p‹tNVIC_SYSTICK_COUNT_FLAG_BIT
 ) != 0 )

588 
uöt32_t
 
ulCÆcuœãdLﬂdVÆue
;

594 
ulCÆcuœãdLﬂdVÆue
 = ( 
ulTimîCou¡sF‹O√Tick
 - 1UL ) - ( 
ulRñﬂdVÆue
 - 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 );

599 if––
ulCÆcuœãdLﬂdVÆue
 < 
ulSt›≥dTimîCom≥nßti⁄
 ) || ( ulCÆcuœãdLﬂdVÆuê> 
ulTimîCou¡sF‹O√Tick
 ) )

601 
ulCÆcuœãdLﬂdVÆue
 = ( 
ulTimîCou¡sF‹O√Tick
 - 1UL );

604 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulCÆcuœãdLﬂdVÆue
;

611 
ulCom∂ëeTickPîiods
 = 
xEx≥˘edIdÀTime
 - 1UL;

619 
ulCom∂ëedSysTickDe¸emíts
 = ( 
xEx≥˘edIdÀTime
 * 
ulTimîCou¡sF‹O√Tick
 ) - 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
;

623 
ulCom∂ëeTickPîiods
 = 
ulCom∂ëedSysTickDe¸emíts
 / 
ulTimîCou¡sF‹O√Tick
;

627 
p‹tNVIC_SYSTICK_LOAD_REG
 = ( ( 
ulCom∂ëeTickPîiods
 + 1 ) * 
ulTimîCou¡sF‹O√Tick
 ) - 
ulCom∂ëedSysTickDe¸emíts
;

635 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 = 0UL;

636 
	`p‹tENTER_CRITICAL
();

638 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

639 
	`vTaskSãpTick
–
ulCom∂ëeTickPîiods
 );

640 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulTimîCou¡sF‹O√Tick
 - 1UL;

642 
	`p‹tEXIT_CRITICAL
();

644 
	}
}

653 
__©åibuã__
(–
wók
 )Ë
	$vP‹tSëupTimîI¡îru±
( )

656 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

658 
ulTimîCou¡sF‹O√Tick
 = ( 
c⁄figSYSTICK_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 );

659 
xMaximumPossibÀSuµªs£dTicks
 = 
p‹tMAX_24_BIT_NUMBER
 / 
ulTimîCou¡sF‹O√Tick
;

660 
ulSt›≥dTimîCom≥nßti⁄
 = 
p‹tMISSED_COUNTS_FACTOR
 / ( 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figSYSTICK_CLOCK_HZ
 );

665 
p‹tNVIC_SYSTICK_LOAD_REG
 = ( 
c⁄figSYSTICK_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL;

666 
p‹tNVIC_SYSTICK_CTRL_REG
 = ( 
p‹tNVIC_SYSTICK_CLK_BIT
 | 
p‹tNVIC_SYSTICK_INT_BIT
 | 
p‹tNVIC_SYSTICK_ENABLE_BIT
 );

667 
	}
}

670 #if–
c⁄figASSERT_DEFINED
 == 1 )

672 
	$vP‹tVÆid©eI¡îru±Pri‹ôy
( )

674 
uöt32_t
 
ulCuºítI¡îru±
;

675 
uöt8_t
 
ucCuºítPri‹ôy
;

678 
__asm
 vﬁ©ûe–"mr†%0, ip§" : "Ù"–
ulCuºítI¡îru±
 ) );

681 if–
ulCuºítI¡îru±
 >
p‹tFIRST_USER_INTERRUPT_NUMBER
 )

684 
ucCuºítPri‹ôy
 = 
pcI¡îru±Pri‹ôyRegi°îs
[ 
ulCuºítI¡îru±
 ];

709 
	`c⁄figASSERT
–
ucCuºítPri‹ôy
 >
ucMaxSysCÆlPri‹ôy
 );

725 
	`c⁄figASSERT
––
p‹tAIRCR_REG
 & 
p‹tPRIORITY_GROUP_MASK
 ) <
ulMaxPRIGROUPVÆue
 );

726 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\lib\FreeRTOSV8.2.3\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h

71 #i‚de‡
PORTMACRO_H


72 
	#PORTMACRO_H


	)

74 #ifde‡
__˝lu•lus


89 
	#p‹tCHAR
 

	)

90 
	#p‹tFLOAT
 

	)

91 
	#p‹tDOUBLE
 

	)

92 
	#p‹tLONG
 

	)

93 
	#p‹tSHORT
 

	)

94 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

95 
	#p‹tBASE_TYPE
 

	)

97 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

98 
	tBa£Ty≥_t
;

99 
	tUBa£Ty≥_t
;

101 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

102 
uöt16_t
 
	tTickTy≥_t
;

103 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

105 
uöt32_t
 
	tTickTy≥_t
;

106 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

110 
	#p‹tTICK_TYPE_IS_ATOMIC
 1

	)

115 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

116 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

117 
	#p‹tBYTE_ALIGNMENT
 8

	)

122 
vP‹tYõld
( );

123 
	#p‹tNVIC_INT_CTRL_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ed04 ) )

	)

124 
	#p‹tNVIC_PENDSVSET_BIT
 ( 1UL << 28UL )

	)

125 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

126 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed ) 
p‹tNVIC_INT_CTRL_REG
 = 
p‹tNVIC_PENDSVSET_BIT


	)

127 
	#p‹tYIELD_FROM_ISR
–
x
 ) 
	`p‹tEND_SWITCHING_ISR
–x )

	)

131 
vP‹tE¡îCrôiˇl
( );

132 
vP‹tExôCrôiˇl
( );

133 
uöt32_t
 
ulP‹tSëI¡îru±Mask
( );

134 
vP‹tCÀ¨I¡îru±Mask
–
uöt32_t
 
ulNewMaskVÆue
 );

135 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`ulP‹tSëI¡îru±Mask
()

	)

136 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`vP‹tCÀ¨I¡îru±Mask
(x)

	)

137 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`ulP‹tSëI¡îru±Mask
()

	)

138 
	#p‹tENABLE_INTERRUPTS
(Ë
	`vP‹tCÀ¨I¡îru±Mask
(0)

	)

139 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

140 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

146 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

147 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

151 #i‚de‡
p‹tSUPPRESS_TICKS_AND_SLEEP


152 
vP‹tSuµªssTicksAndSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 );

153 
	#p‹tSUPPRESS_TICKS_AND_SLEEP
–
xEx≥˘edIdÀTime
 ) 
	`vP‹tSuµªssTicksAndSÀï
–xEx≥˘edIdÀTimê)

	)

158 #i‚de‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION


159 
	#c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 1

	)

162 #i‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 1

165 
__©åibuã__
––
Æways_ölöe
 ) ) 
ölöe
 
uöt8_t
 
ucP‹tCou¡LódögZîos
–
uöt32_t
 
ulBôm≠
 )

167 
uöt8_t
 
	gucRëu∫
;

169 
__asm
 vﬁ©ûê–"˛z %0, %1" : "Ù" ( 
ucRëu∫
 ) : "r" ( 
ulBôm≠
 ) );

170  
	gucRëu∫
;

174 #if–
c⁄figMAX_PRIORITIES
 > 32 )

175 #îr‹ 
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 
ˇn
 
⁄ly
 
be
 
£t
 
to
 1 
whí
 
c⁄figMAX_PRIORITIES
 
is
 
Àss
 
th™
 
‹
 
equÆ
Åÿ32. 
It
 i†
vîy
 
øª
 
th©
 
a
 
sy°em
 
ªquúes
 
m‹e
Åh™ 10Åÿ15 
dif„ªn˚
 
¥i‹ôõs
 
as
 
èsks
Åh© 
sh¨e
á 
¥i‹ôy
 
wûl
 
time
 
¶i˚
.

179 
	#p‹tRECORD_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë|–1UL << ( uxPri‹ôy ) )

	)

180 
	#p‹tRESET_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë&~–1UL << ( uxPri‹ôy ) )

	)

184 
	#p‹tGET_HIGHEST_PRIORITY
–
uxT›Pri‹ôy
, 
uxRódyPri‹ôõs
 ) uxT›Pri‹ôy = ( 31 - 
	`ucP‹tCou¡LódögZîos
––uxRódyPri‹ôõ†ËË)

	)

190 #ifde‡
c⁄figASSERT


191 
vP‹tVÆid©eI¡îru±Pri‹ôy
( );

192 
	#p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
(Ë
	`vP‹tVÆid©eI¡îru±Pri‹ôy
()

	)

196 
	#p‹tNOP
()

	)

198 #ifde‡
__˝lu•lus


	@C:\skuksenk\_Quadro\ARM\prj\lib\FreeRTOSV8.2.3\FreeRTOS\Source\portable\MemMang\heap_5.c

112 
	~<°dlib.h
>

117 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

119 
	~"FªeRTOS.h
"

120 
	~"èsk.h
"

122 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


125 
	#hópMINIMUM_BLOCK_SIZE
 ( ( 
size_t
 ) ( 
xHópSåu˘Size
 << 1 ) )

	)

128 
	#hópBITS_PER_BYTE
 ( ( 
size_t
 ) 8 )

	)

132 
	sA_BLOCK_LINK


134 
A_BLOCK_LINK
 *
	mpxNextFªeBlock
;

135 
size_t
 
	mxBlockSize
;

136 } 
	tBlockLök_t
;

146 
¥vIn£πBlockI¡oFªeLi°
–
BlockLök_t
 *
pxBlockToIn£π
 );

152 c⁄° 
size_t
 
	gxHópSåu˘Size
 = ( –
BlockLök_t
 ) + ( ( size_àË–
p‹tBYTE_ALIGNMENT
 - 1 ) ) ) & ~––size_àË
p‹tBYTE_ALIGNMENT_MASK
 );

155 
BlockLök_t
 
	gxSèπ
, *
	gpxEnd
 = 
NULL
;

159 
size_t
 
	gxFªeByãsRemaöög
 = 0U;

160 
size_t
 
	gxMöimumEvîFªeByãsRemaöög
 = 0U;

166 
size_t
 
	gxBlockAŒoˇãdBô
 = 0;

170 *
	$pvP‹tMÆloc
–
size_t
 
xW™ãdSize
 )

172 
BlockLök_t
 *
pxBlock
, *
pxPªviousBlock
, *
pxNewBlockLök
;

173 *
pvRëu∫
 = 
NULL
;

177 
	`c⁄figASSERT
–
pxEnd
 );

179 
	`vTaskSu•ídAŒ
();

185 if––
xW™ãdSize
 & 
xBlockAŒoˇãdBô
 ) == 0 )

189 if–
xW™ãdSize
 > 0 )

191 
xW™ãdSize
 +
xHópSåu˘Size
;

195 if––
xW™ãdSize
 & 
p‹tBYTE_ALIGNMENT_MASK
 ) != 0x00 )

198 
xW™ãdSize
 +–
p‹tBYTE_ALIGNMENT
 - ( xW™ãdSizê& 
p‹tBYTE_ALIGNMENT_MASK
 ) );

202 
	`mtCOVERAGE_TEST_MARKER
();

207 
	`mtCOVERAGE_TEST_MARKER
();

210 if––
xW™ãdSize
 > 0 ) && ( xW™ãdSizê<
xFªeByãsRemaöög
 ) )

214 
pxPªviousBlock
 = &
xSèπ
;

215 
pxBlock
 = 
xSèπ
.
pxNextFªeBlock
;

216  ( 
pxBlock
->
xBlockSize
 < 
xW™ãdSize
 ) && (ÖxBlock->
pxNextFªeBlock
 !
NULL
 ) )

218 
pxPªviousBlock
 = 
pxBlock
;

219 
pxBlock
 =ÖxBlock->
pxNextFªeBlock
;

224 if–
pxBlock
 !
pxEnd
 )

228 
pvRëu∫
 = ( * ) ( ( ( 
uöt8_t
 * ) 
pxPªviousBlock
->
pxNextFªeBlock
 ) + 
xHópSåu˘Size
 );

232 
pxPªviousBlock
->
pxNextFªeBlock
 = 
pxBlock
->pxNextFreeBlock;

236 if––
pxBlock
->
xBlockSize
 - 
xW™ãdSize
 ) > 
hópMINIMUM_BLOCK_SIZE
 )

242 
pxNewBlockLök
 = ( * ) ( ( ( 
uöt8_t
 * ) 
pxBlock
 ) + 
xW™ãdSize
 );

246 
pxNewBlockLök
->
xBlockSize
 = 
pxBlock
->xBlockSizê- 
xW™ãdSize
;

247 
pxBlock
->
xBlockSize
 = 
xW™ãdSize
;

250 
	`¥vIn£πBlockI¡oFªeLi°
––
pxNewBlockLök
 ) );

254 
	`mtCOVERAGE_TEST_MARKER
();

257 
xFªeByãsRemaöög
 -
pxBlock
->
xBlockSize
;

259 if–
xFªeByãsRemaöög
 < 
xMöimumEvîFªeByãsRemaöög
 )

261 
xMöimumEvîFªeByãsRemaöög
 = 
xFªeByãsRemaöög
;

265 
	`mtCOVERAGE_TEST_MARKER
();

270 
pxBlock
->
xBlockSize
 |
xBlockAŒoˇãdBô
;

271 
pxBlock
->
pxNextFªeBlock
 = 
NULL
;

275 
	`mtCOVERAGE_TEST_MARKER
();

280 
	`mtCOVERAGE_TEST_MARKER
();

285 
	`mtCOVERAGE_TEST_MARKER
();

288 
	`åa˚MALLOC
–
pvRëu∫
, 
xW™ãdSize
 );

290 –Ë
	`xTaskResumeAŒ
();

292 #if–
c⁄figUSE_MALLOC_FAILED_HOOK
 == 1 )

294 if–
pvRëu∫
 =
NULL
 )

296 
	`vAµliˇti⁄MÆlocFaûedHook
( );

297 
	`vAµliˇti⁄MÆlocFaûedHook
();

301 
	`mtCOVERAGE_TEST_MARKER
();

306  
pvRëu∫
;

307 
	}
}

310 
	$vP‹tFªe
–*
pv
 )

312 
uöt8_t
 *
puc
 = ( uöt8_à* ) 
pv
;

313 
BlockLök_t
 *
pxLök
;

315 if–
pv
 !
NULL
 )

319 
puc
 -
xHópSåu˘Size
;

322 
pxLök
 = ( * ) 
puc
;

325 
	`c⁄figASSERT
––
pxLök
->
xBlockSize
 & 
xBlockAŒoˇãdBô
 ) != 0 );

326 
	`c⁄figASSERT
–
pxLök
->
pxNextFªeBlock
 =
NULL
 );

328 if––
pxLök
->
xBlockSize
 & 
xBlockAŒoˇãdBô
 ) != 0 )

330 if–
pxLök
->
pxNextFªeBlock
 =
NULL
 )

334 
pxLök
->
xBlockSize
 &~
xBlockAŒoˇãdBô
;

336 
	`vTaskSu•ídAŒ
();

339 
xFªeByãsRemaöög
 +
pxLök
->
xBlockSize
;

340 
	`åa˚FREE
–
pv
, 
pxLök
->
xBlockSize
 );

341 
	`¥vIn£πBlockI¡oFªeLi°
–––
BlockLök_t
 * ) 
pxLök
 ) );

343 –Ë
	`xTaskResumeAŒ
();

347 
	`mtCOVERAGE_TEST_MARKER
();

352 
	`mtCOVERAGE_TEST_MARKER
();

355 
	}
}

358 
size_t
 
	$xP‹tGëFªeHópSize
( )

360  
xFªeByãsRemaöög
;

361 
	}
}

364 
size_t
 
	$xP‹tGëMöimumEvîFªeHópSize
( )

366  
xMöimumEvîFªeByãsRemaöög
;

367 
	}
}

370 
	$¥vIn£πBlockI¡oFªeLi°
–
BlockLök_t
 *
pxBlockToIn£π
 )

372 
BlockLök_t
 *
pxIãøt‹
;

373 
uöt8_t
 *
puc
;

377  
pxIãøt‹
 = &
xSèπ
;ÖxIãøt‹->
pxNextFªeBlock
 < 
pxBlockToIn£π
;ÖxIterator =ÖxIterator->pxNextFreeBlock )

384 
puc
 = ( 
uöt8_t
 * ) 
pxIãøt‹
;

385 if––
puc
 + 
pxIãøt‹
->
xBlockSize
 ) =–
uöt8_t
 * ) 
pxBlockToIn£π
 )

387 
pxIãøt‹
->
xBlockSize
 +
pxBlockToIn£π
->xBlockSize;

388 
pxBlockToIn£π
 = 
pxIãøt‹
;

392 
	`mtCOVERAGE_TEST_MARKER
();

397 
puc
 = ( 
uöt8_t
 * ) 
pxBlockToIn£π
;

398 if––
puc
 + 
pxBlockToIn£π
->
xBlockSize
 ) =–
uöt8_t
 * ) 
pxIãøt‹
->
pxNextFªeBlock
 )

400 if–
pxIãøt‹
->
pxNextFªeBlock
 !
pxEnd
 )

403 
pxBlockToIn£π
->
xBlockSize
 +
pxIãøt‹
->
pxNextFªeBlock
->xBlockSize;

404 
pxBlockToIn£π
->
pxNextFªeBlock
 = 
pxIãøt‹
->pxNextFreeBlock->pxNextFreeBlock;

408 
pxBlockToIn£π
->
pxNextFªeBlock
 = 
pxEnd
;

413 
pxBlockToIn£π
->
pxNextFªeBlock
 = 
pxIãøt‹
->pxNextFreeBlock;

420 if–
pxIãøt‹
 !
pxBlockToIn£π
 )

422 
pxIãøt‹
->
pxNextFªeBlock
 = 
pxBlockToIn£π
;

426 
	`mtCOVERAGE_TEST_MARKER
();

428 
	}
}

431 
	$vP‹tDeföeHópRegi⁄s
–c⁄° 
HópRegi⁄_t
 * c⁄° 
pxHópRegi⁄s
 )

433 
BlockLök_t
 *
pxFú°FªeBlockInRegi⁄
 = 
NULL
, *
pxPªviousFªeBlock
;

434 
size_t
 
xAlig√dHóp
;

435 
size_t
 
xTŸÆRegi⁄Size
, 
xTŸÆHópSize
 = 0;

436 
Ba£Ty≥_t
 
xDeföedRegi⁄s
 = 0;

437 
size_t
 
xAddªss
;

438 c⁄° 
HópRegi⁄_t
 *
pxHópRegi⁄
;

441 
	`c⁄figASSERT
–
pxEnd
 =
NULL
 );

443 
pxHópRegi⁄
 = &–
pxHópRegi⁄s
[ 
xDeföedRegi⁄s
 ] );

445  
pxHópRegi⁄
->
xSizeInByãs
 > 0 )

447 
xTŸÆRegi⁄Size
 = 
pxHópRegi⁄
->
xSizeInByãs
;

450 
xAddªss
 = ( 
size_t
 ) 
pxHópRegi⁄
->
pucSèπAddªss
;

451 if––
xAddªss
 & 
p‹tBYTE_ALIGNMENT_MASK
 ) != 0 )

453 
xAddªss
 +–
p‹tBYTE_ALIGNMENT
 - 1 );

454 
xAddªss
 &~
p‹tBYTE_ALIGNMENT_MASK
;

457 
xTŸÆRegi⁄Size
 -
xAddªss
 - ( 
size_t
 ) 
pxHópRegi⁄
->
pucSèπAddªss
;

460 
xAlig√dHóp
 = 
xAddªss
;

463 if–
xDeföedRegi⁄s
 == 0 )

467 
xSèπ
.
pxNextFªeBlock
 = ( 
BlockLök_t
 * ) 
xAlig√dHóp
;

468 
xSèπ
.
xBlockSize
 = ( 
size_t
 ) 0;

474 
	`c⁄figASSERT
–
pxEnd
 !
NULL
 );

477 
	`c⁄figASSERT
–
xAddªss
 > ( 
size_t
 ) 
pxEnd
 );

482 
pxPªviousFªeBlock
 = 
pxEnd
;

486 
xAddªss
 = 
xAlig√dHóp
 + 
xTŸÆRegi⁄Size
;

487 
xAddªss
 -
xHópSåu˘Size
;

488 
xAddªss
 &~
p‹tBYTE_ALIGNMENT_MASK
;

489 
pxEnd
 = ( 
BlockLök_t
 * ) 
xAddªss
;

490 
pxEnd
->
xBlockSize
 = 0;

491 
pxEnd
->
pxNextFªeBlock
 = 
NULL
;

496 
pxFú°FªeBlockInRegi⁄
 = ( 
BlockLök_t
 * ) 
xAlig√dHóp
;

497 
pxFú°FªeBlockInRegi⁄
->
xBlockSize
 = 
xAddªss
 - ( 
size_t
 )ÖxFirstFreeBlockInRegion;

498 
pxFú°FªeBlockInRegi⁄
->
pxNextFªeBlock
 = 
pxEnd
;

502 if–
pxPªviousFªeBlock
 !
NULL
 )

504 
pxPªviousFªeBlock
->
pxNextFªeBlock
 = 
pxFú°FªeBlockInRegi⁄
;

507 
xTŸÆHópSize
 +
pxFú°FªeBlockInRegi⁄
->
xBlockSize
;

510 
xDeföedRegi⁄s
++;

511 
pxHópRegi⁄
 = &–
pxHópRegi⁄s
[ 
xDeföedRegi⁄s
 ] );

514 
xMöimumEvîFªeByãsRemaöög
 = 
xTŸÆHópSize
;

515 
xFªeByãsRemaöög
 = 
xTŸÆHópSize
;

518 
	`c⁄figASSERT
–
xTŸÆHópSize
 );

521 
xBlockAŒoˇãdBô
 = ( ( 
size_t
 ) 1 ) << ( ( –size_àË* 
hópBITS_PER_BYTE
 ) - 1 );

522 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\lib\FreeRTOSV8.2.3\FreeRTOS\Source\queue.c

70 
	~<°dlib.h
>

71 
	~<°rög.h
>

76 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

78 
	~"FªeRTOS.h
"

79 
	~"èsk.h
"

80 
	~"queue.h
"

82 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

83 
	~"¸outöe.h
"

90 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


94 
	#queueUNLOCKED
 ( ( 
Ba£Ty≥_t
 ) -1 )

	)

95 
	#queueLOCKED_UNMODIFIED
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

108 
	#pxMuãxHﬁdî
 
pcTaû


	)

109 
	#uxQueueTy≥
 
pcHód


	)

110 
	#queueQUEUE_IS_MUTEX
 
NULL


	)

114 
	#queueSEMAPHORE_QUEUE_ITEM_LENGTH
 ( ( 
UBa£Ty≥_t
 ) 0 )

	)

115 
	#queueMUTEX_GIVE_BLOCK_TIME
 ( ( 
TickTy≥_t
 ) 0U )

	)

117 #if–
c⁄figUSE_PREEMPTION
 == 0 )

120 
	#queueYIELD_IF_USING_PREEMPTION
()

	)

122 
	#queueYIELD_IF_USING_PREEMPTION
(Ë
	`p‹tYIELD_WITHIN_API
()

	)

130 
	sQueueDeföôi⁄


132 
öt8_t
 *
	mpcHód
;

133 
öt8_t
 *
	mpcTaû
;

134 
öt8_t
 *
	mpcWrôeTo
;

138 
öt8_t
 *
	mpcRódFrom
;

139 
UBa£Ty≥_t
 
	muxRecursiveCÆlCou¡
;

140 } 
	mu
;

142 
Li°_t
 
	mxTasksWaôögToSíd
;

143 
Li°_t
 
	mxTasksWaôögToRe˚ive
;

145 vﬁ©ûê
UBa£Ty≥_t
 
	muxMesßgesWaôög
;

146 
UBa£Ty≥_t
 
	muxLígth
;

147 
UBa£Ty≥_t
 
	muxIãmSize
;

149 vﬁ©ûê
Ba£Ty≥_t
 
	mxRxLock
;

150 vﬁ©ûê
Ba£Ty≥_t
 
	mxTxLock
;

152 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

153 
UBa£Ty≥_t
 
	muxQueueNumbî
;

154 
uöt8_t
 
	mucQueueTy≥
;

157 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

158 
QueueDeföôi⁄
 *
	mpxQueueSëC⁄èöî
;

161 } 
	txQUEUE
;

165 
xQUEUE
 
	tQueue_t
;

173 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

178 
	sQUEUE_REGISTRY_ITEM


180 c⁄° *
	mpcQueueName
;

181 
QueueH™dÀ_t
 
	mxH™dÀ
;

182 } 
	txQueueRegi°ryIãm
;

187 
xQueueRegi°ryIãm
 
	tQueueRegi°ryIãm_t
;

192 
PRIVILEGED_DATA
 
QueueRegi°ryIãm_t
 
	gxQueueRegi°ry
[ 
c⁄figQUEUE_REGISTRY_SIZE
 ];

204 
	$¥vU∆ockQueue
–
Queue_t
 * c⁄° 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

211 
Ba£Ty≥_t
 
	$¥vIsQueueEm±y
–c⁄° 
Queue_t
 *
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

218 
Ba£Ty≥_t
 
	$¥vIsQueueFuŒ
–c⁄° 
Queue_t
 *
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

224 
Ba£Ty≥_t
 
	$¥vC›yD©aToQueue
–
Queue_t
 * c⁄° 
pxQueue
, c⁄° *
pvIãmToQueue
, c⁄° 
Ba£Ty≥_t
 
xPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

229 
	$¥vC›yD©aFromQueue
–
Queue_t
 * c⁄° 
pxQueue
, * c⁄° 
pvBuf„r
 ) 
PRIVILEGED_FUNCTION
;

231 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

236 
Ba£Ty≥_t
 
	$¥vNŸifyQueueSëC⁄èöî
–c⁄° 
Queue_t
 * c⁄° 
pxQueue
, c⁄° 
Ba£Ty≥_t
 
xC›yPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

245 
	#¥vLockQueue
–
pxQueue
 ) \

246 
	`èskENTER_CRITICAL
(); \

248 if––
pxQueue
 )->
xRxLock
 =
queueUNLOCKED
 ) \

250 –
pxQueue
 )->
xRxLock
 = 
queueLOCKED_UNMODIFIED
; \

252 if––
pxQueue
 )->
xTxLock
 =
queueUNLOCKED
 ) \

254 –
pxQueue
 )->
xTxLock
 = 
queueLOCKED_UNMODIFIED
; \

256 
	}
} \

257 
	`èskEXIT_CRITICAL
()

	)

260 
Ba£Ty≥_t
 
	$xQueueGíîicRe£t
–
QueueH™dÀ_t
 
xQueue
, 
Ba£Ty≥_t
 
xNewQueue
 )

262 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

264 
	`c⁄figASSERT
–
pxQueue
 );

266 
	`èskENTER_CRITICAL
();

268 
pxQueue
->
pcTaû
 =ÖxQueue->
pcHód
 + (ÖxQueue->
uxLígth
 *ÖxQueue->
uxIãmSize
 );

269 
pxQueue
->
uxMesßgesWaôög
 = ( 
UBa£Ty≥_t
 ) 0U;

270 
pxQueue
->
pcWrôeTo
 =ÖxQueue->
pcHód
;

271 
pxQueue
->
u
.
pcRódFrom
 =ÖxQueue->
pcHód
 + ( (ÖxQueue->
uxLígth
 - ( 
UBa£Ty≥_t
 ) 1U ) *ÖxQueue->
uxIãmSize
 );

272 
pxQueue
->
xRxLock
 = 
queueUNLOCKED
;

273 
pxQueue
->
xTxLock
 = 
queueUNLOCKED
;

275 if–
xNewQueue
 =
pdFALSE
 )

282 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

284 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdTRUE
 )

286 
	`queueYIELD_IF_USING_PREEMPTION
();

290 
	`mtCOVERAGE_TEST_MARKER
();

295 
	`mtCOVERAGE_TEST_MARKER
();

301 
	`vLi°Inôüli£
–&–
pxQueue
->
xTasksWaôögToSíd
 ) );

302 
	`vLi°Inôüli£
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) );

305 
	`èskEXIT_CRITICAL
();

309  
pdPASS
;

310 
	}
}

313 
QueueH™dÀ_t
 
	$xQueueGíîicCª©e
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, c⁄° 
uöt8_t
 
ucQueueTy≥
 )

315 
Queue_t
 *
pxNewQueue
;

316 
size_t
 
xQueueSizeInByãs
;

317 
QueueH™dÀ_t
 
xRëu∫
 = 
NULL
;

321 –Ë
ucQueueTy≥
;

323 
	`c⁄figASSERT
–
uxQueueLígth
 > ( 
UBa£Ty≥_t
 ) 0 );

325 if–
uxIãmSize
 =–
UBa£Ty≥_t
 ) 0 )

328 
xQueueSizeInByãs
 = ( 
size_t
 ) 0;

334 
xQueueSizeInByãs
 = ( 
size_t
 ) ( 
uxQueueLígth
 * 
uxIãmSize
 ) + ( size_t ) 1;

338 
pxNewQueue
 = ( 
Queue_t
 * ) 
	`pvP‹tMÆloc
––Queue_àË+ 
xQueueSizeInByãs
 );

340 if–
pxNewQueue
 !
NULL
 )

342 if–
uxIãmSize
 =–
UBa£Ty≥_t
 ) 0 )

348 
pxNewQueue
->
pcHód
 = ( 
öt8_t
 * )ÖxNewQueue;

354 
pxNewQueue
->
pcHód
 = ( ( 
öt8_t
 * )ÖxNewQueuêË+ –
Queue_t
 );

359 
pxNewQueue
->
uxLígth
 = 
uxQueueLígth
;

360 
pxNewQueue
->
uxIãmSize
 = uxItemSize;

361 –Ë
	`xQueueGíîicRe£t
–
pxNewQueue
, 
pdTRUE
 );

363 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

365 
pxNewQueue
->
ucQueueTy≥
 = ucQueueType;

369 #if–
c⁄figUSE_QUEUE_SETS
 == 1 )

371 
pxNewQueue
->
pxQueueSëC⁄èöî
 = 
NULL
;

375 
	`åa˚QUEUE_CREATE
–
pxNewQueue
 );

376 
xRëu∫
 = 
pxNewQueue
;

380 
	`mtCOVERAGE_TEST_MARKER
();

383 
	`c⁄figASSERT
–
xRëu∫
 );

385  
xRëu∫
;

386 
	}
}

389 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

391 
QueueH™dÀ_t
 
	$xQueueCª©eMuãx
–c⁄° 
uöt8_t
 
ucQueueTy≥
 )

393 
Queue_t
 *
pxNewQueue
;

397 –Ë
ucQueueTy≥
;

400 
pxNewQueue
 = ( 
Queue_t
 * ) 
	`pvP‹tMÆloc
( ( Queue_t ) );

401 if–
pxNewQueue
 !
NULL
 )

404 
pxNewQueue
->
pxMuãxHﬁdî
 = 
NULL
;

405 
pxNewQueue
->
uxQueueTy≥
 = 
queueQUEUE_IS_MUTEX
;

409 
pxNewQueue
->
pcWrôeTo
 = 
NULL
;

410 
pxNewQueue
->
u
.
pcRódFrom
 = 
NULL
;

415 
pxNewQueue
->
uxMesßgesWaôög
 = ( 
UBa£Ty≥_t
 ) 0U;

416 
pxNewQueue
->
uxLígth
 = ( 
UBa£Ty≥_t
 ) 1U;

417 
pxNewQueue
->
uxIãmSize
 = ( 
UBa£Ty≥_t
 ) 0U;

418 
pxNewQueue
->
xRxLock
 = 
queueUNLOCKED
;

419 
pxNewQueue
->
xTxLock
 = 
queueUNLOCKED
;

421 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

423 
pxNewQueue
->
ucQueueTy≥
 = ucQueueType;

427 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

429 
pxNewQueue
->
pxQueueSëC⁄èöî
 = 
NULL
;

434 
	`vLi°Inôüli£
–&–
pxNewQueue
->
xTasksWaôögToSíd
 ) );

435 
	`vLi°Inôüli£
–&–
pxNewQueue
->
xTasksWaôögToRe˚ive
 ) );

437 
	`åa˚CREATE_MUTEX
–
pxNewQueue
 );

440 –Ë
	`xQueueGíîicSíd
–
pxNewQueue
, 
NULL
, ( 
TickTy≥_t
 ) 0U, 
queueSEND_TO_BACK
 );

444 
	`åa˚CREATE_MUTEX_FAILED
();

447  
pxNewQueue
;

448 
	}
}

453 #i‡––
c⁄figUSE_MUTEXES
 =1 ) && ( 
INCLUDE_xSem≠h‹eGëMuãxHﬁdî
 == 1 ) )

455 * 
	$xQueueGëMuãxHﬁdî
–
QueueH™dÀ_t
 
xSem≠h‹e
 )

457 *
pxRëu∫
;

464 
	`èskENTER_CRITICAL
();

466 if–––
Queue_t
 * ) 
xSem≠h‹e
 )->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

468 
pxRëu∫
 = ( * ) ( ( 
Queue_t
 * ) 
xSem≠h‹e
 )->
pxMuãxHﬁdî
;

472 
pxRëu∫
 = 
NULL
;

475 
	`èskEXIT_CRITICAL
();

477  
pxRëu∫
;

478 
	}
}

483 #i‡–
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 )

485 
Ba£Ty≥_t
 
	$xQueueGiveMuãxRecursive
–
QueueH™dÀ_t
 
xMuãx
 )

487 
Ba£Ty≥_t
 
xRëu∫
;

488 
Queue_t
 * c⁄° 
pxMuãx
 = ( Queue_à* ) 
xMuãx
;

490 
	`c⁄figASSERT
–
pxMuãx
 );

498 if–
pxMuãx
->
pxMuãxHﬁdî
 =–* ) 
	`xTaskGëCuºítTaskH™dÀ
() )

500 
	`åa˚GIVE_MUTEX_RECURSIVE
–
pxMuãx
 );

507 –
pxMuãx
->
u
.
uxRecursiveCÆlCou¡
 )--;

510 if–
pxMuãx
->
u
.
uxRecursiveCÆlCou¡
 =–
UBa£Ty≥_t
 ) 0 )

514 –Ë
	`xQueueGíîicSíd
–
pxMuãx
, 
NULL
, 
queueMUTEX_GIVE_BLOCK_TIME
, 
queueSEND_TO_BACK
 );

518 
	`mtCOVERAGE_TEST_MARKER
();

521 
xRëu∫
 = 
pdPASS
;

527 
xRëu∫
 = 
pdFAIL
;

529 
	`åa˚GIVE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 );

532  
xRëu∫
;

533 
	}
}

538 #i‡–
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 )

540 
Ba£Ty≥_t
 
	$xQueueTakeMuãxRecursive
–
QueueH™dÀ_t
 
xMuãx
, 
TickTy≥_t
 
xTicksToWaô
 )

542 
Ba£Ty≥_t
 
xRëu∫
;

543 
Queue_t
 * c⁄° 
pxMuãx
 = ( Queue_à* ) 
xMuãx
;

545 
	`c⁄figASSERT
–
pxMuãx
 );

550 
	`åa˚TAKE_MUTEX_RECURSIVE
–
pxMuãx
 );

552 if–
pxMuãx
->
pxMuãxHﬁdî
 =–* ) 
	`xTaskGëCuºítTaskH™dÀ
() )

554 –
pxMuãx
->
u
.
uxRecursiveCÆlCou¡
 )++;

555 
xRëu∫
 = 
pdPASS
;

559 
xRëu∫
 = 
	`xQueueGíîicRe˚ive
–
pxMuãx
, 
NULL
, 
xTicksToWaô
, 
pdFALSE
 );

564 if–
xRëu∫
 =
pdPASS
 )

566 –
pxMuãx
->
u
.
uxRecursiveCÆlCou¡
 )++;

570 
	`åa˚TAKE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 );

574  
xRëu∫
;

575 
	}
}

580 #i‡–
c⁄figUSE_COUNTING_SEMAPHORES
 == 1 )

582 
QueueH™dÀ_t
 
	$xQueueCª©eCou¡ögSem≠h‹e
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
, c⁄° UBa£Ty≥_à
uxInôülCou¡
 )

584 
QueueH™dÀ_t
 
xH™dÀ
;

586 
	`c⁄figASSERT
–
uxMaxCou¡
 != 0 );

587 
	`c⁄figASSERT
–
uxInôülCou¡
 <
uxMaxCou¡
 );

589 
xH™dÀ
 = 
	`xQueueGíîicCª©e
–
uxMaxCou¡
, 
queueSEMAPHORE_QUEUE_ITEM_LENGTH
, 
queueQUEUE_TYPE_COUNTING_SEMAPHORE
 );

591 if–
xH™dÀ
 !
NULL
 )

593 ––
Queue_t
 * ) 
xH™dÀ
 )->
uxMesßgesWaôög
 = 
uxInôülCou¡
;

595 
	`åa˚CREATE_COUNTING_SEMAPHORE
();

599 
	`åa˚CREATE_COUNTING_SEMAPHORE_FAILED
();

602 
	`c⁄figASSERT
–
xH™dÀ
 );

603  
xH™dÀ
;

604 
	}
}

609 
Ba£Ty≥_t
 
	$xQueueGíîicSíd
–
QueueH™dÀ_t
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xC›yPosôi⁄
 )

611 
Ba£Ty≥_t
 
xE¡ryTimeSë
 = 
pdFALSE
, 
xYõldRequúed
;

612 
TimeOut_t
 
xTimeOut
;

613 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

615 
	`c⁄figASSERT
–
pxQueue
 );

616 
	`c⁄figASSERT
–!––
pvIãmToQueue
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

617 
	`c⁄figASSERT
–!––
xC›yPosôi⁄
 =
queueOVERWRITE
 ) && ( 
pxQueue
->
uxLígth
 != 1 ) ) );

618 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

620 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

630 
	`èskENTER_CRITICAL
();

636 if––
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 ) || ( 
xC›yPosôi⁄
 =
queueOVERWRITE
 ) )

638 
	`åa˚QUEUE_SEND
–
pxQueue
 );

639 
xYõldRequúed
 = 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
xC›yPosôi⁄
 );

641 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

643 if–
pxQueue
->
pxQueueSëC⁄èöî
 !
NULL
 )

645 if–
	`¥vNŸifyQueueSëC⁄èöî
–
pxQueue
, 
xC›yPosôi⁄
 ) =
pdTRUE
 )

650 
	`queueYIELD_IF_USING_PREEMPTION
();

654 
	`mtCOVERAGE_TEST_MARKER
();

661 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

663 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdTRUE
 )

669 
	`queueYIELD_IF_USING_PREEMPTION
();

673 
	`mtCOVERAGE_TEST_MARKER
();

676 if–
xYõldRequúed
 !
pdFALSE
 )

682 
	`queueYIELD_IF_USING_PREEMPTION
();

686 
	`mtCOVERAGE_TEST_MARKER
();

694 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

696 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdTRUE
 )

702 
	`queueYIELD_IF_USING_PREEMPTION
();

706 
	`mtCOVERAGE_TEST_MARKER
();

709 if–
xYõldRequúed
 !
pdFALSE
 )

715 
	`queueYIELD_IF_USING_PREEMPTION
();

719 
	`mtCOVERAGE_TEST_MARKER
();

724 
	`èskEXIT_CRITICAL
();

725  
pdPASS
;

729 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

733 
	`èskEXIT_CRITICAL
();

737 
	`åa˚QUEUE_SEND_FAILED
–
pxQueue
 );

738  
îrQUEUE_FULL
;

740 if–
xE¡ryTimeSë
 =
pdFALSE
 )

744 
	`vTaskSëTimeOutSèã
–&
xTimeOut
 );

745 
xE¡ryTimeSë
 = 
pdTRUE
;

750 
	`mtCOVERAGE_TEST_MARKER
();

754 
	`èskEXIT_CRITICAL
();

759 
	`vTaskSu•ídAŒ
();

760 
	`¥vLockQueue
–
pxQueue
 );

763 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

765 if–
	`¥vIsQueueFuŒ
–
pxQueue
 ) !
pdFALSE
 )

767 
	`åa˚BLOCKING_ON_QUEUE_SEND
–
pxQueue
 );

768 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ), 
xTicksToWaô
 );

775 
	`¥vU∆ockQueue
–
pxQueue
 );

782 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

784 
	`p‹tYIELD_WITHIN_API
();

790 
	`¥vU∆ockQueue
–
pxQueue
 );

791 –Ë
	`xTaskResumeAŒ
();

797 
	`¥vU∆ockQueue
–
pxQueue
 );

798 –Ë
	`xTaskResumeAŒ
();

802 
	`åa˚QUEUE_SEND_FAILED
–
pxQueue
 );

803  
îrQUEUE_FULL
;

806 
	}
}

809 #i‡–
c⁄figUSE_ALTERNATIVE_API
 == 1 )

811 
Ba£Ty≥_t
 
	$xQueueA…GíîicSíd
–
QueueH™dÀ_t
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
, 
Ba£Ty≥_t
 
xC›yPosôi⁄
 )

813 
Ba£Ty≥_t
 
xE¡ryTimeSë
 = 
pdFALSE
;

814 
TimeOut_t
 
xTimeOut
;

815 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

817 
	`c⁄figASSERT
–
pxQueue
 );

818 
	`c⁄figASSERT
–!––
pvIãmToQueue
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

822 
	`èskENTER_CRITICAL
();

826 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

828 
	`åa˚QUEUE_SEND
–
pxQueue
 );

829 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
xC›yPosôi⁄
 );

833 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

835 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdTRUE
 )

839 
	`p‹tYIELD_WITHIN_API
();

843 
	`mtCOVERAGE_TEST_MARKER
();

848 
	`mtCOVERAGE_TEST_MARKER
();

851 
	`èskEXIT_CRITICAL
();

852  
pdPASS
;

856 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

858 
	`èskEXIT_CRITICAL
();

859  
îrQUEUE_FULL
;

861 if–
xE¡ryTimeSë
 =
pdFALSE
 )

863 
	`vTaskSëTimeOutSèã
–&
xTimeOut
 );

864 
xE¡ryTimeSë
 = 
pdTRUE
;

868 
	`èskEXIT_CRITICAL
();

870 
	`èskENTER_CRITICAL
();

872 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

874 if–
	`¥vIsQueueFuŒ
–
pxQueue
 ) !
pdFALSE
 )

876 
	`åa˚BLOCKING_ON_QUEUE_SEND
–
pxQueue
 );

877 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ), 
xTicksToWaô
 );

878 
	`p‹tYIELD_WITHIN_API
();

882 
	`mtCOVERAGE_TEST_MARKER
();

887 
	`èskEXIT_CRITICAL
();

888 
	`åa˚QUEUE_SEND_FAILED
–
pxQueue
 );

889  
îrQUEUE_FULL
;

892 
	`èskEXIT_CRITICAL
();

894 
	}
}

899 #i‡–
c⁄figUSE_ALTERNATIVE_API
 == 1 )

901 
Ba£Ty≥_t
 
	$xQueueA…GíîicRe˚ive
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
, 
Ba£Ty≥_t
 
xJu°Pìkög
 )

903 
Ba£Ty≥_t
 
xE¡ryTimeSë
 = 
pdFALSE
;

904 
TimeOut_t
 
xTimeOut
;

905 
öt8_t
 *
pcOrigöÆRódPosôi⁄
;

906 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

908 
	`c⁄figASSERT
–
pxQueue
 );

909 
	`c⁄figASSERT
–!––
pvBuf„r
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

913 
	`èskENTER_CRITICAL
();

915 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

918 
pcOrigöÆRódPosôi⁄
 = 
pxQueue
->
u
.
pcRódFrom
;

920 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

922 if–
xJu°Pìkög
 =
pdFALSE
 )

924 
	`åa˚QUEUE_RECEIVE
–
pxQueue
 );

927 --–
pxQueue
->
uxMesßgesWaôög
 );

929 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

931 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

935 
pxQueue
->
pxMuãxHﬁdî
 = ( 
öt8_t
 * ) 
	`xTaskGëCuºítTaskH™dÀ
();

939 
	`mtCOVERAGE_TEST_MARKER
();

944 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

946 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdTRUE
 )

948 
	`p‹tYIELD_WITHIN_API
();

952 
	`mtCOVERAGE_TEST_MARKER
();

958 
	`åa˚QUEUE_PEEK
–
pxQueue
 );

962 
pxQueue
->
u
.
pcRódFrom
 = 
pcOrigöÆRódPosôi⁄
;

966 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

970 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

973 
	`p‹tYIELD_WITHIN_API
();

977 
	`mtCOVERAGE_TEST_MARKER
();

982 
	`mtCOVERAGE_TEST_MARKER
();

986 
	`èskEXIT_CRITICAL
();

987  
pdPASS
;

991 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

993 
	`èskEXIT_CRITICAL
();

994 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

995  
îrQUEUE_EMPTY
;

997 if–
xE¡ryTimeSë
 =
pdFALSE
 )

999 
	`vTaskSëTimeOutSèã
–&
xTimeOut
 );

1000 
xE¡ryTimeSë
 = 
pdTRUE
;

1004 
	`èskEXIT_CRITICAL
();

1006 
	`èskENTER_CRITICAL
();

1008 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

1010 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

1012 
	`åa˚BLOCKING_ON_QUEUE_RECEIVE
–
pxQueue
 );

1014 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1016 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

1018 
	`èskENTER_CRITICAL
();

1020 
	`vTaskPri‹ôyInhîô
––* ) 
pxQueue
->
pxMuãxHﬁdî
 );

1022 
	`èskEXIT_CRITICAL
();

1026 
	`mtCOVERAGE_TEST_MARKER
();

1031 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
 );

1032 
	`p‹tYIELD_WITHIN_API
();

1036 
	`mtCOVERAGE_TEST_MARKER
();

1041 
	`èskEXIT_CRITICAL
();

1042 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

1043  
îrQUEUE_EMPTY
;

1046 
	`èskEXIT_CRITICAL
();

1048 
	}
}

1054 
Ba£Ty≥_t
 
	$xQueueGíîicSídFromISR
–
QueueH™dÀ_t
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
, c⁄° Ba£Ty≥_à
xC›yPosôi⁄
 )

1056 
Ba£Ty≥_t
 
xRëu∫
;

1057 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1058 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

1060 
	`c⁄figASSERT
–
pxQueue
 );

1061 
	`c⁄figASSERT
–!––
pvIãmToQueue
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

1062 
	`c⁄figASSERT
–!––
xC›yPosôi⁄
 =
queueOVERWRITE
 ) && ( 
pxQueue
->
uxLígth
 != 1 ) ) );

1078 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1085 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1087 if––
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 ) || ( 
xC›yPosôi⁄
 =
queueOVERWRITE
 ) )

1089 
	`åa˚QUEUE_SEND_FROM_ISR
–
pxQueue
 );

1096 –Ë
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
xC›yPosôi⁄
 );

1100 if–
pxQueue
->
xTxLock
 =
queueUNLOCKED
 )

1102 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

1104 if–
pxQueue
->
pxQueueSëC⁄èöî
 !
NULL
 )

1106 if–
	`¥vNŸifyQueueSëC⁄èöî
–
pxQueue
, 
xC›yPosôi⁄
 ) =
pdTRUE
 )

1111 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1113 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1117 
	`mtCOVERAGE_TEST_MARKER
();

1122 
	`mtCOVERAGE_TEST_MARKER
();

1127 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1129 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1133 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1135 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1139 
	`mtCOVERAGE_TEST_MARKER
();

1144 
	`mtCOVERAGE_TEST_MARKER
();

1149 
	`mtCOVERAGE_TEST_MARKER
();

1155 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1157 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1161 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1163 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1167 
	`mtCOVERAGE_TEST_MARKER
();

1172 
	`mtCOVERAGE_TEST_MARKER
();

1177 
	`mtCOVERAGE_TEST_MARKER
();

1186 ++–
pxQueue
->
xTxLock
 );

1189 
xRëu∫
 = 
pdPASS
;

1193 
	`åa˚QUEUE_SEND_FROM_ISR_FAILED
–
pxQueue
 );

1194 
xRëu∫
 = 
îrQUEUE_FULL
;

1197 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1199  
xRëu∫
;

1200 
	}
}

1203 
Ba£Ty≥_t
 
	$xQueueGiveFromISR
–
QueueH™dÀ_t
 
xQueue
, 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 )

1205 
Ba£Ty≥_t
 
xRëu∫
;

1206 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1207 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

1215 
	`c⁄figASSERT
–
pxQueue
 );

1219 
	`c⁄figASSERT
–
pxQueue
->
uxIãmSize
 == 0 );

1224 
	`c⁄figASSERT
–!––
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 ) && (ÖxQueue->
pxMuãxHﬁdî
 !
NULL
 ) ) );

1240 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1242 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1247 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

1249 
	`åa˚QUEUE_SEND_FROM_ISR
–
pxQueue
 );

1257 ++–
pxQueue
->
uxMesßgesWaôög
 );

1261 if–
pxQueue
->
xTxLock
 =
queueUNLOCKED
 )

1263 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

1265 if–
pxQueue
->
pxQueueSëC⁄èöî
 !
NULL
 )

1267 if–
	`¥vNŸifyQueueSëC⁄èöî
–
pxQueue
, 
queueSEND_TO_BACK
 ) =
pdTRUE
 )

1272 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1274 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1278 
	`mtCOVERAGE_TEST_MARKER
();

1283 
	`mtCOVERAGE_TEST_MARKER
();

1288 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1290 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1294 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1296 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1300 
	`mtCOVERAGE_TEST_MARKER
();

1305 
	`mtCOVERAGE_TEST_MARKER
();

1310 
	`mtCOVERAGE_TEST_MARKER
();

1316 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1318 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1322 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1324 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1328 
	`mtCOVERAGE_TEST_MARKER
();

1333 
	`mtCOVERAGE_TEST_MARKER
();

1338 
	`mtCOVERAGE_TEST_MARKER
();

1347 ++–
pxQueue
->
xTxLock
 );

1350 
xRëu∫
 = 
pdPASS
;

1354 
	`åa˚QUEUE_SEND_FROM_ISR_FAILED
–
pxQueue
 );

1355 
xRëu∫
 = 
îrQUEUE_FULL
;

1358 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1360  
xRëu∫
;

1361 
	}
}

1364 
Ba£Ty≥_t
 
	$xQueueGíîicRe˚ive
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xJu°Pìkög
 )

1366 
Ba£Ty≥_t
 
xE¡ryTimeSë
 = 
pdFALSE
;

1367 
TimeOut_t
 
xTimeOut
;

1368 
öt8_t
 *
pcOrigöÆRódPosôi⁄
;

1369 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

1371 
	`c⁄figASSERT
–
pxQueue
 );

1372 
	`c⁄figASSERT
–!––
pvBuf„r
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

1373 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

1375 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

1385 
	`èskENTER_CRITICAL
();

1389 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

1393 
pcOrigöÆRódPosôi⁄
 = 
pxQueue
->
u
.
pcRódFrom
;

1395 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

1397 if–
xJu°Pìkög
 =
pdFALSE
 )

1399 
	`åa˚QUEUE_RECEIVE
–
pxQueue
 );

1402 --–
pxQueue
->
uxMesßgesWaôög
 );

1404 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1406 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

1410 
pxQueue
->
pxMuãxHﬁdî
 = ( 
öt8_t
 * ) 
	`pvTaskIn¸emítMuãxHñdCou¡
();

1414 
	`mtCOVERAGE_TEST_MARKER
();

1419 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1421 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdTRUE
 )

1423 
	`queueYIELD_IF_USING_PREEMPTION
();

1427 
	`mtCOVERAGE_TEST_MARKER
();

1432 
	`mtCOVERAGE_TEST_MARKER
();

1437 
	`åa˚QUEUE_PEEK
–
pxQueue
 );

1441 
pxQueue
->
u
.
pcRódFrom
 = 
pcOrigöÆRódPosôi⁄
;

1445 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1447 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1450 
	`queueYIELD_IF_USING_PREEMPTION
();

1454 
	`mtCOVERAGE_TEST_MARKER
();

1459 
	`mtCOVERAGE_TEST_MARKER
();

1463 
	`èskEXIT_CRITICAL
();

1464  
pdPASS
;

1468 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

1472 
	`èskEXIT_CRITICAL
();

1473 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

1474  
îrQUEUE_EMPTY
;

1476 if–
xE¡ryTimeSë
 =
pdFALSE
 )

1480 
	`vTaskSëTimeOutSèã
–&
xTimeOut
 );

1481 
xE¡ryTimeSë
 = 
pdTRUE
;

1486 
	`mtCOVERAGE_TEST_MARKER
();

1490 
	`èskEXIT_CRITICAL
();

1495 
	`vTaskSu•ídAŒ
();

1496 
	`¥vLockQueue
–
pxQueue
 );

1499 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

1501 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

1503 
	`åa˚BLOCKING_ON_QUEUE_RECEIVE
–
pxQueue
 );

1505 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1507 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

1509 
	`èskENTER_CRITICAL
();

1511 
	`vTaskPri‹ôyInhîô
––* ) 
pxQueue
->
pxMuãxHﬁdî
 );

1513 
	`èskEXIT_CRITICAL
();

1517 
	`mtCOVERAGE_TEST_MARKER
();

1522 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
 );

1523 
	`¥vU∆ockQueue
–
pxQueue
 );

1524 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

1526 
	`p‹tYIELD_WITHIN_API
();

1530 
	`mtCOVERAGE_TEST_MARKER
();

1536 
	`¥vU∆ockQueue
–
pxQueue
 );

1537 –Ë
	`xTaskResumeAŒ
();

1542 
	`¥vU∆ockQueue
–
pxQueue
 );

1543 –Ë
	`xTaskResumeAŒ
();

1544 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

1545  
îrQUEUE_EMPTY
;

1548 
	}
}

1551 
Ba£Ty≥_t
 
	$xQueueRe˚iveFromISR
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 )

1553 
Ba£Ty≥_t
 
xRëu∫
;

1554 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1555 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

1557 
	`c⁄figASSERT
–
pxQueue
 );

1558 
	`c⁄figASSERT
–!––
pvBuf„r
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

1574 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1576 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1579 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

1581 
	`åa˚QUEUE_RECEIVE_FROM_ISR
–
pxQueue
 );

1583 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

1584 --–
pxQueue
->
uxMesßgesWaôög
 );

1590 if–
pxQueue
->
xRxLock
 =
queueUNLOCKED
 )

1592 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1594 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

1598 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1600 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1604 
	`mtCOVERAGE_TEST_MARKER
();

1609 
	`mtCOVERAGE_TEST_MARKER
();

1614 
	`mtCOVERAGE_TEST_MARKER
();

1621 ++–
pxQueue
->
xRxLock
 );

1624 
xRëu∫
 = 
pdPASS
;

1628 
xRëu∫
 = 
pdFAIL
;

1629 
	`åa˚QUEUE_RECEIVE_FROM_ISR_FAILED
–
pxQueue
 );

1632 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1634  
xRëu∫
;

1635 
	}
}

1638 
Ba£Ty≥_t
 
	$xQueuePìkFromISR
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
 )

1640 
Ba£Ty≥_t
 
xRëu∫
;

1641 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1642 
öt8_t
 *
pcOrigöÆRódPosôi⁄
;

1643 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

1645 
	`c⁄figASSERT
–
pxQueue
 );

1646 
	`c⁄figASSERT
–!––
pvBuf„r
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

1647 
	`c⁄figASSERT
–
pxQueue
->
uxIãmSize
 != 0 );

1663 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1665 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1668 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

1670 
	`åa˚QUEUE_PEEK_FROM_ISR
–
pxQueue
 );

1674 
pcOrigöÆRódPosôi⁄
 = 
pxQueue
->
u
.
pcRódFrom
;

1675 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

1676 
pxQueue
->
u
.
pcRódFrom
 = 
pcOrigöÆRódPosôi⁄
;

1678 
xRëu∫
 = 
pdPASS
;

1682 
xRëu∫
 = 
pdFAIL
;

1683 
	`åa˚QUEUE_PEEK_FROM_ISR_FAILED
–
pxQueue
 );

1686 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1688  
xRëu∫
;

1689 
	}
}

1692 
UBa£Ty≥_t
 
	$uxQueueMesßgesWaôög
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

1694 
UBa£Ty≥_t
 
uxRëu∫
;

1696 
	`c⁄figASSERT
–
xQueue
 );

1698 
	`èskENTER_CRITICAL
();

1700 
uxRëu∫
 = ( ( 
Queue_t
 * ) 
xQueue
 )->
uxMesßgesWaôög
;

1702 
	`èskEXIT_CRITICAL
();

1704  
uxRëu∫
;

1705 
	}
}

1708 
UBa£Ty≥_t
 
	$uxQueueS∑˚sAvaûabÀ
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

1710 
UBa£Ty≥_t
 
uxRëu∫
;

1711 
Queue_t
 *
pxQueue
;

1713 
pxQueue
 = ( 
Queue_t
 * ) 
xQueue
;

1714 
	`c⁄figASSERT
–
pxQueue
 );

1716 
	`èskENTER_CRITICAL
();

1718 
uxRëu∫
 = 
pxQueue
->
uxLígth
 -ÖxQueue->
uxMesßgesWaôög
;

1720 
	`èskEXIT_CRITICAL
();

1722  
uxRëu∫
;

1723 
	}
}

1726 
UBa£Ty≥_t
 
	$uxQueueMesßgesWaôögFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

1728 
UBa£Ty≥_t
 
uxRëu∫
;

1730 
	`c⁄figASSERT
–
xQueue
 );

1732 
uxRëu∫
 = ( ( 
Queue_t
 * ) 
xQueue
 )->
uxMesßgesWaôög
;

1734  
uxRëu∫
;

1735 
	}
}

1738 
	$vQueueDñëe
–
QueueH™dÀ_t
 
xQueue
 )

1740 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

1742 
	`c⁄figASSERT
–
pxQueue
 );

1744 
	`åa˚QUEUE_DELETE
–
pxQueue
 );

1745 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

1747 
	`vQueueUƒegi°îQueue
–
pxQueue
 );

1750 
	`vP‹tFªe
–
pxQueue
 );

1751 
	}
}

1754 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1756 
UBa£Ty≥_t
 
	$uxQueueGëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
 )

1758  ( ( 
Queue_t
 * ) 
xQueue
 )->
uxQueueNumbî
;

1759 
	}
}

1764 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1766 
	$vQueueSëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
, 
UBa£Ty≥_t
 
uxQueueNumbî
 )

1768 ––
Queue_t
 * ) 
xQueue
 )->
uxQueueNumbî
 = uxQueueNumber;

1769 
	}
}

1774 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1776 
uöt8_t
 
	$ucQueueGëQueueTy≥
–
QueueH™dÀ_t
 
xQueue
 )

1778  ( ( 
Queue_t
 * ) 
xQueue
 )->
ucQueueTy≥
;

1779 
	}
}

1784 
Ba£Ty≥_t
 
	$¥vC›yD©aToQueue
–
Queue_t
 * c⁄° 
pxQueue
, c⁄° *
pvIãmToQueue
, c⁄° 
Ba£Ty≥_t
 
xPosôi⁄
 )

1786 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

1788 if–
pxQueue
->
uxIãmSize
 =–
UBa£Ty≥_t
 ) 0 )

1790 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1792 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

1795 
xRëu∫
 = 
	`xTaskPri‹ôyDisöhîô
––* ) 
pxQueue
->
pxMuãxHﬁdî
 );

1796 
pxQueue
->
pxMuãxHﬁdî
 = 
NULL
;

1800 
	`mtCOVERAGE_TEST_MARKER
();

1805 if–
xPosôi⁄
 =
queueSEND_TO_BACK
 )

1807 –Ë
	`mem˝y
––* ) 
pxQueue
->
pcWrôeTo
, 
pvIãmToQueue
, ( 
size_t
 )ÖxQueue->
uxIãmSize
 );

1808 
pxQueue
->
pcWrôeTo
 +pxQueue->
uxIãmSize
;

1809 if–
pxQueue
->
pcWrôeTo
 >pxQueue->
pcTaû
 )

1811 
pxQueue
->
pcWrôeTo
 =ÖxQueue->
pcHód
;

1815 
	`mtCOVERAGE_TEST_MARKER
();

1820 –Ë
	`mem˝y
––* ) 
pxQueue
->
u
.
pcRódFrom
, 
pvIãmToQueue
, ( 
size_t
 )ÖxQueue->
uxIãmSize
 );

1821 
pxQueue
->
u
.
pcRódFrom
 -pxQueue->
uxIãmSize
;

1822 if–
pxQueue
->
u
.
pcRódFrom
 <ÖxQueue->
pcHód
 )

1824 
pxQueue
->
u
.
pcRódFrom
 = (ÖxQueue->
pcTaû
 -ÖxQueue->
uxIãmSize
 );

1828 
	`mtCOVERAGE_TEST_MARKER
();

1831 if–
xPosôi⁄
 =
queueOVERWRITE
 )

1833 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

1839 --–
pxQueue
->
uxMesßgesWaôög
 );

1843 
	`mtCOVERAGE_TEST_MARKER
();

1848 
	`mtCOVERAGE_TEST_MARKER
();

1852 ++–
pxQueue
->
uxMesßgesWaôög
 );

1854  
xRëu∫
;

1855 
	}
}

1858 
	$¥vC›yD©aFromQueue
–
Queue_t
 * c⁄° 
pxQueue
, * c⁄° 
pvBuf„r
 )

1860 if–
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0 )

1862 
pxQueue
->
u
.
pcRódFrom
 +pxQueue->
uxIãmSize
;

1863 if–
pxQueue
->
u
.
pcRódFrom
 >pxQueue->
pcTaû
 )

1865 
pxQueue
->
u
.
pcRódFrom
 =ÖxQueue->
pcHód
;

1869 
	`mtCOVERAGE_TEST_MARKER
();

1871 –Ë
	`mem˝y
––* ) 
pvBuf„r
, ( * ) 
pxQueue
->
u
.
pcRódFrom
, ( 
size_t
 )ÖxQueue->
uxIãmSize
 );

1873 
	}
}

1876 
	$¥vU∆ockQueue
–
Queue_t
 * c⁄° 
pxQueue
 )

1884 
	`èskENTER_CRITICAL
();

1887  
pxQueue
->
xTxLock
 > 
queueLOCKED_UNMODIFIED
 )

1891 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

1893 if–
pxQueue
->
pxQueueSëC⁄èöî
 !
NULL
 )

1895 if–
	`¥vNŸifyQueueSëC⁄èöî
–
pxQueue
, 
queueSEND_TO_BACK
 ) =
pdTRUE
 )

1900 
	`vTaskMis£dYõld
();

1904 
	`mtCOVERAGE_TEST_MARKER
();

1911 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1913 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1917 
	`vTaskMis£dYõld
();

1921 
	`mtCOVERAGE_TEST_MARKER
();

1934 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1936 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1940 
	`vTaskMis£dYõld
();

1944 
	`mtCOVERAGE_TEST_MARKER
();

1954 --–
pxQueue
->
xTxLock
 );

1957 
pxQueue
->
xTxLock
 = 
queueUNLOCKED
;

1959 
	`èskEXIT_CRITICAL
();

1962 
	`èskENTER_CRITICAL
();

1964  
pxQueue
->
xRxLock
 > 
queueLOCKED_UNMODIFIED
 )

1966 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1968 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

1970 
	`vTaskMis£dYõld
();

1974 
	`mtCOVERAGE_TEST_MARKER
();

1977 --–
pxQueue
->
xRxLock
 );

1985 
pxQueue
->
xRxLock
 = 
queueUNLOCKED
;

1987 
	`èskEXIT_CRITICAL
();

1988 
	}
}

1991 
Ba£Ty≥_t
 
	$¥vIsQueueEm±y
–c⁄° 
Queue_t
 *
pxQueue
 )

1993 
Ba£Ty≥_t
 
xRëu∫
;

1995 
	`èskENTER_CRITICAL
();

1997 if–
pxQueue
->
uxMesßgesWaôög
 =–
UBa£Ty≥_t
 ) 0 )

1999 
xRëu∫
 = 
pdTRUE
;

2003 
xRëu∫
 = 
pdFALSE
;

2006 
	`èskEXIT_CRITICAL
();

2008  
xRëu∫
;

2009 
	}
}

2012 
Ba£Ty≥_t
 
	$xQueueIsQueueEm±yFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

2014 
Ba£Ty≥_t
 
xRëu∫
;

2016 
	`c⁄figASSERT
–
xQueue
 );

2017 if–––
Queue_t
 * ) 
xQueue
 )->
uxMesßgesWaôög
 =–
UBa£Ty≥_t
 ) 0 )

2019 
xRëu∫
 = 
pdTRUE
;

2023 
xRëu∫
 = 
pdFALSE
;

2026  
xRëu∫
;

2027 
	}
}

2030 
Ba£Ty≥_t
 
	$¥vIsQueueFuŒ
–c⁄° 
Queue_t
 *
pxQueue
 )

2032 
Ba£Ty≥_t
 
xRëu∫
;

2034 
	`èskENTER_CRITICAL
();

2036 if–
pxQueue
->
uxMesßgesWaôög
 =pxQueue->
uxLígth
 )

2038 
xRëu∫
 = 
pdTRUE
;

2042 
xRëu∫
 = 
pdFALSE
;

2045 
	`èskEXIT_CRITICAL
();

2047  
xRëu∫
;

2048 
	}
}

2051 
Ba£Ty≥_t
 
	$xQueueIsQueueFuŒFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

2053 
Ba£Ty≥_t
 
xRëu∫
;

2055 
	`c⁄figASSERT
–
xQueue
 );

2056 if–––
Queue_t
 * ) 
xQueue
 )->
uxMesßgesWaôög
 =––Queue_à* ) xQueuê)->
uxLígth
 )

2058 
xRëu∫
 = 
pdTRUE
;

2062 
xRëu∫
 = 
pdFALSE
;

2065  
xRëu∫
;

2066 
	}
}

2069 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

2071 
Ba£Ty≥_t
 
	$xQueueCRSíd
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
 )

2073 
Ba£Ty≥_t
 
xRëu∫
;

2074 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

2079 
	`p‹tDISABLE_INTERRUPTS
();

2081 if–
	`¥vIsQueueFuŒ
–
pxQueue
 ) !
pdFALSE
 )

2085 if–
xTicksToWaô
 > ( 
TickTy≥_t
 ) 0 )

2089 
	`vCoRoutöeAddToDñayedLi°
–
xTicksToWaô
, &–
pxQueue
->
xTasksWaôögToSíd
 ) );

2090 
	`p‹tENABLE_INTERRUPTS
();

2091  
îrQUEUE_BLOCKED
;

2095 
	`p‹tENABLE_INTERRUPTS
();

2096  
îrQUEUE_FULL
;

2100 
	`p‹tENABLE_INTERRUPTS
();

2102 
	`p‹tDISABLE_INTERRUPTS
();

2104 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

2107 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
queueSEND_TO_BACK
 );

2108 
xRëu∫
 = 
pdPASS
;

2111 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

2117 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

2121 
xRëu∫
 = 
îrQUEUE_YIELD
;

2125 
	`mtCOVERAGE_TEST_MARKER
();

2130 
	`mtCOVERAGE_TEST_MARKER
();

2135 
xRëu∫
 = 
îrQUEUE_FULL
;

2138 
	`p‹tENABLE_INTERRUPTS
();

2140  
xRëu∫
;

2141 
	}
}

2146 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

2148 
Ba£Ty≥_t
 
	$xQueueCRRe˚ive
–
QueueH™dÀ_t
 
xQueue
, *
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
 )

2150 
Ba£Ty≥_t
 
xRëu∫
;

2151 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

2156 
	`p‹tDISABLE_INTERRUPTS
();

2158 if–
pxQueue
->
uxMesßgesWaôög
 =–
UBa£Ty≥_t
 ) 0 )

2162 if–
xTicksToWaô
 > ( 
TickTy≥_t
 ) 0 )

2166 
	`vCoRoutöeAddToDñayedLi°
–
xTicksToWaô
, &–
pxQueue
->
xTasksWaôögToRe˚ive
 ) );

2167 
	`p‹tENABLE_INTERRUPTS
();

2168  
îrQUEUE_BLOCKED
;

2172 
	`p‹tENABLE_INTERRUPTS
();

2173  
îrQUEUE_FULL
;

2178 
	`mtCOVERAGE_TEST_MARKER
();

2181 
	`p‹tENABLE_INTERRUPTS
();

2183 
	`p‹tDISABLE_INTERRUPTS
();

2185 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

2188 
pxQueue
->
u
.
pcRódFrom
 +pxQueue->
uxIãmSize
;

2189 if–
pxQueue
->
u
.
pcRódFrom
 >pxQueue->
pcTaû
 )

2191 
pxQueue
->
u
.
pcRódFrom
 =ÖxQueue->
pcHód
;

2195 
	`mtCOVERAGE_TEST_MARKER
();

2197 --–
pxQueue
->
uxMesßgesWaôög
 );

2198 –Ë
	`mem˝y
––* ) 
pvBuf„r
, ( * ) 
pxQueue
->
u
.
pcRódFrom
, ( ËpxQueue->
uxIãmSize
 );

2200 
xRëu∫
 = 
pdPASS
;

2203 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

2209 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

2211 
xRëu∫
 = 
îrQUEUE_YIELD
;

2215 
	`mtCOVERAGE_TEST_MARKER
();

2220 
	`mtCOVERAGE_TEST_MARKER
();

2225 
xRëu∫
 = 
pdFAIL
;

2228 
	`p‹tENABLE_INTERRUPTS
();

2230  
xRëu∫
;

2231 
	}
}

2236 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

2238 
Ba£Ty≥_t
 
	$xQueueCRSídFromISR
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pvIãmToQueue
, 
Ba£Ty≥_t
 
xCoRoutöePªviou¶yWokí
 )

2240 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

2244 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

2246 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
queueSEND_TO_BACK
 );

2250 if–
xCoRoutöePªviou¶yWokí
 =
pdFALSE
 )

2252 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

2254 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

2256  
pdTRUE
;

2260 
	`mtCOVERAGE_TEST_MARKER
();

2265 
	`mtCOVERAGE_TEST_MARKER
();

2270 
	`mtCOVERAGE_TEST_MARKER
();

2275 
	`mtCOVERAGE_TEST_MARKER
();

2278  
xCoRoutöePªviou¶yWokí
;

2279 
	}
}

2284 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

2286 
Ba£Ty≥_t
 
	$xQueueCRRe˚iveFromISR
–
QueueH™dÀ_t
 
xQueue
, *
pvBuf„r
, 
Ba£Ty≥_t
 *
pxCoRoutöeWokí
 )

2288 
Ba£Ty≥_t
 
xRëu∫
;

2289 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

2293 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

2296 
pxQueue
->
u
.
pcRódFrom
 +pxQueue->
uxIãmSize
;

2297 if–
pxQueue
->
u
.
pcRódFrom
 >pxQueue->
pcTaû
 )

2299 
pxQueue
->
u
.
pcRódFrom
 =ÖxQueue->
pcHód
;

2303 
	`mtCOVERAGE_TEST_MARKER
();

2305 --–
pxQueue
->
uxMesßgesWaôög
 );

2306 –Ë
	`mem˝y
––* ) 
pvBuf„r
, ( * ) 
pxQueue
->
u
.
pcRódFrom
, ( ËpxQueue->
uxIãmSize
 );

2308 if––*
pxCoRoutöeWokí
 ) =
pdFALSE
 )

2310 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

2312 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

2314 *
pxCoRoutöeWokí
 = 
pdTRUE
;

2318 
	`mtCOVERAGE_TEST_MARKER
();

2323 
	`mtCOVERAGE_TEST_MARKER
();

2328 
	`mtCOVERAGE_TEST_MARKER
();

2331 
xRëu∫
 = 
pdPASS
;

2335 
xRëu∫
 = 
pdFAIL
;

2338  
xRëu∫
;

2339 
	}
}

2344 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

2346 
	$vQueueAddToRegi°ry
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pcQueueName
 )

2348 
UBa£Ty≥_t
 
ux
;

2352  
ux
 = ( 
UBa£Ty≥_t
 ) 0U; ux < ( UBa£Ty≥_àË
c⁄figQUEUE_REGISTRY_SIZE
; ux++ )

2354 if–
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
 =
NULL
 )

2357 
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
 =ÖcQueueName;

2358 
xQueueRegi°ry
[ 
ux
 ].
xH™dÀ
 = 
xQueue
;

2360 
	`åa˚QUEUE_REGISTRY_ADD
–
xQueue
, 
pcQueueName
 );

2365 
	`mtCOVERAGE_TEST_MARKER
();

2368 
	}
}

2373 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

2375 
	$vQueueUƒegi°îQueue
–
QueueH™dÀ_t
 
xQueue
 )

2377 
UBa£Ty≥_t
 
ux
;

2381  
ux
 = ( 
UBa£Ty≥_t
 ) 0U; ux < ( UBa£Ty≥_àË
c⁄figQUEUE_REGISTRY_SIZE
; ux++ )

2383 if–
xQueueRegi°ry
[ 
ux
 ].
xH™dÀ
 =
xQueue
 )

2386 
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
 = 
NULL
;

2391 
	`mtCOVERAGE_TEST_MARKER
();

2395 
	}
}

2400 #i‡–
c⁄figUSE_TIMERS
 == 1 )

2402 
	$vQueueWaôF‹MesßgeRe°ri˘ed
–
QueueH™dÀ_t
 
xQueue
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xWaôIndeföôñy
 )

2404 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

2420 
	`¥vLockQueue
–
pxQueue
 );

2421 if–
pxQueue
->
uxMesßgesWaôög
 =–
UBa£Ty≥_t
 ) 0U )

2424 
	`vTaskPœ˚OnEvítLi°Re°ri˘ed
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
, 
xWaôIndeföôñy
 );

2428 
	`mtCOVERAGE_TEST_MARKER
();

2430 
	`¥vU∆ockQueue
–
pxQueue
 );

2431 
	}
}

2436 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2438 
QueueSëH™dÀ_t
 
	$xQueueCª©eSë
–c⁄° 
UBa£Ty≥_t
 
uxEvítQueueLígth
 )

2440 
QueueSëH™dÀ_t
 
pxQueue
;

2442 
pxQueue
 = 
	`xQueueGíîicCª©e
–
uxEvítQueueLígth
, –
Queue_t
 * ), 
queueQUEUE_TYPE_SET
 );

2444  
pxQueue
;

2445 
	}
}

2450 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2452 
Ba£Ty≥_t
 
	$xQueueAddToSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 )

2454 
Ba£Ty≥_t
 
xRëu∫
;

2456 
	`èskENTER_CRITICAL
();

2458 if–––
Queue_t
 * ) 
xQueueOrSem≠h‹e
 )->
pxQueueSëC⁄èöî
 !
NULL
 )

2461 
xRëu∫
 = 
pdFAIL
;

2463 if–––
Queue_t
 * ) 
xQueueOrSem≠h‹e
 )->
uxMesßgesWaôög
 !–
UBa£Ty≥_t
 ) 0 )

2467 
xRëu∫
 = 
pdFAIL
;

2471 ––
Queue_t
 * ) 
xQueueOrSem≠h‹e
 )->
pxQueueSëC⁄èöî
 = 
xQueueSë
;

2472 
xRëu∫
 = 
pdPASS
;

2475 
	`èskEXIT_CRITICAL
();

2477  
xRëu∫
;

2478 
	}
}

2483 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2485 
Ba£Ty≥_t
 
	$xQueueRemoveFromSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 )

2487 
Ba£Ty≥_t
 
xRëu∫
;

2488 
Queue_t
 * c⁄° 
pxQueueOrSem≠h‹e
 = ( Queue_à* ) 
xQueueOrSem≠h‹e
;

2490 if–
pxQueueOrSem≠h‹e
->
pxQueueSëC⁄èöî
 !
xQueueSë
 )

2493 
xRëu∫
 = 
pdFAIL
;

2495 if–
pxQueueOrSem≠h‹e
->
uxMesßgesWaôög
 !–
UBa£Ty≥_t
 ) 0 )

2500 
xRëu∫
 = 
pdFAIL
;

2504 
	`èskENTER_CRITICAL
();

2507 
pxQueueOrSem≠h‹e
->
pxQueueSëC⁄èöî
 = 
NULL
;

2509 
	`èskEXIT_CRITICAL
();

2510 
xRëu∫
 = 
pdPASS
;

2513  
xRëu∫
;

2514 
	}
}

2519 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2521 
QueueSëMembîH™dÀ_t
 
	$xQueueSñe˘FromSë
–
QueueSëH™dÀ_t
 
xQueueSë
, 
TickTy≥_t
 c⁄° 
xTicksToWaô
 )

2523 
QueueSëMembîH™dÀ_t
 
xRëu∫
 = 
NULL
;

2525 –Ë
	`xQueueGíîicRe˚ive
––
QueueH™dÀ_t
 ) 
xQueueSë
, &
xRëu∫
, 
xTicksToWaô
, 
pdFALSE
 );

2526  
xRëu∫
;

2527 
	}
}

2532 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2534 
QueueSëMembîH™dÀ_t
 
	$xQueueSñe˘FromSëFromISR
–
QueueSëH™dÀ_t
 
xQueueSë
 )

2536 
QueueSëMembîH™dÀ_t
 
xRëu∫
 = 
NULL
;

2538 –Ë
	`xQueueRe˚iveFromISR
––
QueueH™dÀ_t
 ) 
xQueueSë
, &
xRëu∫
, 
NULL
 );

2539  
xRëu∫
;

2540 
	}
}

2545 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2547 
Ba£Ty≥_t
 
	$¥vNŸifyQueueSëC⁄èöî
–c⁄° 
Queue_t
 * c⁄° 
pxQueue
, c⁄° 
Ba£Ty≥_t
 
xC›yPosôi⁄
 )

2549 
Queue_t
 *
pxQueueSëC⁄èöî
 = 
pxQueue
->pxQueueSetContainer;

2550 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

2554 
	`c⁄figASSERT
–
pxQueueSëC⁄èöî
 );

2555 
	`c⁄figASSERT
–
pxQueueSëC⁄èöî
->
uxMesßgesWaôög
 <ÖxQueueSëC⁄èöî->
uxLígth
 );

2557 if–
pxQueueSëC⁄èöî
->
uxMesßgesWaôög
 <ÖxQueueSëC⁄èöî->
uxLígth
 )

2559 
	`åa˚QUEUE_SEND
–
pxQueueSëC⁄èöî
 );

2562 
xRëu∫
 = 
	`¥vC›yD©aToQueue
–
pxQueueSëC⁄èöî
, &
pxQueue
, 
xC›yPosôi⁄
 );

2564 if–
pxQueueSëC⁄èöî
->
xTxLock
 =
queueUNLOCKED
 )

2566 if–
	`li°LIST_IS_EMPTY
–&–
pxQueueSëC⁄èöî
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

2568 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueueSëC⁄èöî
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

2571 
xRëu∫
 = 
pdTRUE
;

2575 
	`mtCOVERAGE_TEST_MARKER
();

2580 
	`mtCOVERAGE_TEST_MARKER
();

2585 –
pxQueueSëC⁄èöî
->
xTxLock
 )++;

2590 
	`mtCOVERAGE_TEST_MARKER
();

2593  
xRëu∫
;

2594 
	}
}

	@C:\skuksenk\_Quadro\ARM\prj\lib\FreeRTOSV8.2.3\FreeRTOS\Source\tasks.c

71 
	~<°dlib.h
>

72 
	~<°rög.h
>

77 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

80 
	~"FªeRTOS.h
"

81 
	~"èsk.h
"

82 
	~"timîs.h
"

83 
	~"SèckMa¸os.h
"

89 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


93 #i‡–
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 == 1 )

98 
	~<°dio.h
>

102 #if–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

103 #if–
INCLUDE_vTaskSu•íd
 != 1 )

104 #îr‹ 
INCLUDE_vTaskSu•íd
 
mu°
 
be
 
£t
 
to
 1 
c⁄figUSE_TICKLESS_IDLE
 
is
 
nŸ
 setÅo 0

111 
	#tskIDLE_STACK_SIZE
 
c⁄figMINIMAL_STACK_SIZE


	)

113 #if–
c⁄figUSE_PREEMPTION
 == 0 )

116 
	#èskYIELD_IF_USING_PREEMPTION
()

	)

118 
	#èskYIELD_IF_USING_PREEMPTION
(Ë
	`p‹tYIELD_WITHIN_API
()

	)

124 
	meNŸWaôögNŸifiˇti⁄
 = 0,

125 
	meWaôögNŸifiˇti⁄
,

126 
	meNŸifõd


127 } 
	teNŸifyVÆue
;

134 
	stskTaskC⁄åﬁBlock


136 vﬁ©ûê
SèckTy≥_t
 *
	mpxT›OfSèck
;

138 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

139 
xMPU_SETTINGS
 
	mxMPUSëtögs
;

140 
Ba£Ty≥_t
 
	mxUsögSètiˇŒyAŒoˇãdSèck
;

143 
Li°Iãm_t
 
	mxGíîicLi°Iãm
;

144 
Li°Iãm_t
 
	mxEvítLi°Iãm
;

145 
UBa£Ty≥_t
 
	muxPri‹ôy
;

146 
SèckTy≥_t
 *
	mpxSèck
;

147 
	mpcTaskName
[ 
c⁄figMAX_TASK_NAME_LEN
 ];

149 #i‡–
p‹tSTACK_GROWTH
 > 0 )

150 
SèckTy≥_t
 *
	mpxEndOfSèck
;

153 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

154 
UBa£Ty≥_t
 
	muxCrôiˇlNe°ög
;

157 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

158 
UBa£Ty≥_t
 
	muxTCBNumbî
;

159 
UBa£Ty≥_t
 
	muxTaskNumbî
;

162 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

163 
UBa£Ty≥_t
 
	muxBa£Pri‹ôy
;

164 
UBa£Ty≥_t
 
	muxMuãxesHñd
;

167 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

168 
TaskHookFun˘i⁄_t
 
	mpxTaskTag
;

171 #if–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 > 0 )

172 *
	mpvThªadLoˇlSt‹agePoöãrs
[ 
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 ];

175 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

176 
uöt32_t
 
	mulRunTimeCou¡î
;

179 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

187 
_ªít
 
	mxNewLib_ªít
;

190 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

191 vﬁ©ûê
uöt32_t
 
	mulNŸifõdVÆue
;

192 vﬁ©ûê
eNŸifyVÆue
 
	meNŸifySèã
;

195 } 
	ttskTCB
;

199 
tskTCB
 
	tTCB_t
;

205 #ifde‡
p‹tREMOVE_STATIC_QUALIFIER


206 

	)

212 
PRIVILEGED_DATA
 
TCB_t
 * vﬁ©ûê
	gpxCuºítTCB
 = 
NULL
;

215 
PRIVILEGED_DATA
 
Li°_t
 
	gpxRódyTasksLi°s
[ 
c⁄figMAX_PRIORITIES
 ];

216 
PRIVILEGED_DATA
 
Li°_t
 
	gxDñayedTaskLi°1
;

217 
PRIVILEGED_DATA
 
Li°_t
 
	gxDñayedTaskLi°2
;

218 
PRIVILEGED_DATA
 
Li°_t
 * vﬁ©ûê
	gpxDñayedTaskLi°
;

219 
PRIVILEGED_DATA
 
Li°_t
 * vﬁ©ûê
	gpxOvîÊowDñayedTaskLi°
;

220 
PRIVILEGED_DATA
 
Li°_t
 
	gxPídögRódyLi°
;

222 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

224 
PRIVILEGED_DATA
 
Li°_t
 
	gxTasksWaôögTîmö©i⁄
;

225 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
	guxTasksDñëed
 = ( UBaseType_t ) 0U;

229 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

231 
PRIVILEGED_DATA
 
Li°_t
 
	gxSu•ídedTaskLi°
;

235 #i‡–
INCLUDE_xTaskGëIdÀTaskH™dÀ
 == 1 )

237 
PRIVILEGED_DATA
 
TaskH™dÀ_t
 
	gxIdÀTaskH™dÀ
 = 
NULL
;

242 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
	guxCuºítNumbîOfTasks
 = ( UBaseType_t ) 0U;

243 
PRIVILEGED_DATA
 vﬁ©ûê
TickTy≥_t
 
	gxTickCou¡
 = ( TickType_t ) 0U;

244 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
	guxT›RódyPri‹ôy
 = 
tskIDLE_PRIORITY
;

245 
PRIVILEGED_DATA
 vﬁ©ûê
Ba£Ty≥_t
 
	gxScheduÀrRu¬ög
 = 
pdFALSE
;

246 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
	guxPídedTicks
 = ( UBaseType_t ) 0U;

247 
PRIVILEGED_DATA
 vﬁ©ûê
Ba£Ty≥_t
 
	gxYõldPídög
 = 
pdFALSE
;

248 
PRIVILEGED_DATA
 vﬁ©ûê
Ba£Ty≥_t
 
	gxNumOfOvîÊows
 = ( BaseType_t ) 0;

249 
PRIVILEGED_DATA
 
UBa£Ty≥_t
 
	guxTaskNumbî
 = ( UBaseType_t ) 0U;

250 
PRIVILEGED_DATA
 vﬁ©ûê
TickTy≥_t
 
	gxNextTaskUnblockTime
 = ( TickType_t ) 0U;

260 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
	guxScheduÀrSu•íded
 = ( UBa£Ty≥_àË
pdFALSE
;

262 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

264 
PRIVILEGED_DATA
 
uöt32_t
 
	gulTaskSwôchedInTime
 = 0UL;

265 
PRIVILEGED_DATA
 
uöt32_t
 
	gulTŸÆRunTime
 = 0UL;

277 
	#tskSTACK_FILL_BYTE
 ( 0xa5U )

	)

282 
	#tskBLOCKED_CHAR
 ( 'B' )

	)

283 
	#tskREADY_CHAR
 ( 'R' )

	)

284 
	#tskDELETED_CHAR
 ( 'D' )

	)

285 
	#tskSUSPENDED_CHAR
 ( 'S' )

	)

289 #i‡–
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 0 )

297 
	#èskRECORD_READY_PRIORITY
–
uxPri‹ôy
 ) \

299 if––
uxPri‹ôy
 ) > 
uxT›RódyPri‹ôy
 ) \

301 
uxT›RódyPri‹ôy
 = ( 
uxPri‹ôy
 ); \

303 }

	)

307 
	#èskSELECT_HIGHEST_PRIORITY_TASK
() \

310  
	`li°LIST_IS_EMPTY
–&–
pxRódyTasksLi°s
[ 
uxT›RódyPri‹ôy
 ] ) ) ) \

312 
	`c⁄figASSERT
–
uxT›RódyPri‹ôy
 ); \

313 --
uxT›RódyPri‹ôy
; \

318 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxCuºítTCB
, &–
pxRódyTasksLi°s
[ 
uxT›RódyPri‹ôy
 ] ) ); \

319 }

	)

326 
	#èskRESET_READY_PRIORITY
–
uxPri‹ôy
 )

	)

327 
	#p‹tRESET_READY_PRIORITY
–
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 )

	)

336 
	#èskRECORD_READY_PRIORITY
–
uxPri‹ôy
 ) 
	`p‹tRECORD_READY_PRIORITY
–uxPri‹ôy, 
uxT›RódyPri‹ôy
 )

	)

340 
	#èskSELECT_HIGHEST_PRIORITY_TASK
() \

342 
UBa£Ty≥_t
 
uxT›Pri‹ôy
; \

345 
	`p‹tGET_HIGHEST_PRIORITY
–
uxT›Pri‹ôy
, 
uxT›RódyPri‹ôy
 ); \

346 
	`c⁄figASSERT
–
	`li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
uxT›Pri‹ôy
 ] ) ) > 0 ); \

347 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxCuºítTCB
, &–
pxRódyTasksLi°s
[ 
uxT›Pri‹ôy
 ] ) ); \

348 }

	)

355 
	#èskRESET_READY_PRIORITY
–
uxPri‹ôy
 ) \

357 if–
	`li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ ( 
uxPri‹ôy
 ) ] ) ) =–
UBa£Ty≥_t
 ) 0 ) \

359 
	`p‹tRESET_READY_PRIORITY
––
uxPri‹ôy
 ), ( 
uxT›RódyPri‹ôy
 ) ); \

361 }

	)

369 
	#èskSWITCH_DELAYED_LISTS
() \

371 
Li°_t
 *
pxTemp
; \

374 
	`c⁄figASSERT
––
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) ) ); \

376 
pxTemp
 = 
pxDñayedTaskLi°
; \

377 
pxDñayedTaskLi°
 = 
pxOvîÊowDñayedTaskLi°
; \

378 
pxOvîÊowDñayedTaskLi°
 = 
pxTemp
; \

379 
xNumOfOvîÊows
++; \

380 
	`¥vRe£tNextTaskUnblockTime
(); \

381 }

	)

389 
	#¥vAddTaskToRódyLi°
–
pxTCB
 ) \

390 
	`åa˚MOVED_TASK_TO_READY_STATE
–
pxTCB
 ); \

391 
	`èskRECORD_READY_PRIORITY
––
pxTCB
 )->
uxPri‹ôy
 ); \

392 
	`vLi°In£πEnd
–&–
pxRódyTasksLi°s
[ ( 
pxTCB
 )->
uxPri‹ôy
 ] ), &––pxTCB )->
xGíîicLi°Iãm
 ) )

	)

401 
	#¥vGëTCBFromH™dÀ
–
pxH™dÀ
 ) ( ( (ÖxH™dÀ ) =
NULL
 ) ? ( 
TCB_t
 * ) 
pxCuºítTCB
 : ( TCB_à* ) (ÖxH™dÀ ) )

	)

411 #i‡
c⁄figUSE_16_BIT_TICKS
 == 1

412 
	#èskEVENT_LIST_ITEM_VALUE_IN_USE
 0x8000U

	)

414 
	#èskEVENT_LIST_ITEM_VALUE_IN_USE
 0x80000000UL

	)

418 #i‡
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 0

419 
vAµliˇti⁄SèckOvîÊowHook
–
TaskH™dÀ_t
 
xTask
, *
pcTaskName
 );

422 #i‡
c⁄figUSE_TICK_HOOK
 > 0

423 
vAµliˇti⁄TickHook
( );

432 
	$¥vInôüli£TCBV¨übÀs
–
TCB_t
 * c⁄° 
pxTCB
, c⁄° * c⁄° 
pcName
, 
UBa£Ty≥_t
 
uxPri‹ôy
, c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
xRegi⁄s
, c⁄° 
uöt16_t
 
usSèckDïth
 ) 
PRIVILEGED_FUNCTION
;

439 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

440 
Ba£Ty≥_t
 
	$¥vTaskIsTaskSu•íded
–c⁄° 
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

447 
	$¥vInôüli£TaskLi°s
–Ë
PRIVILEGED_FUNCTION
;

460 
	`p‹tTASK_FUNCTION_PROTO
–
¥vIdÀTask
, 
pvP¨amëîs
 );

469 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

471 
	$¥vDñëeTCB
–
TCB_t
 *
pxTCB
 ) 
PRIVILEGED_FUNCTION
;

480 
	$¥vCheckTasksWaôögTîmö©i⁄
–Ë
PRIVILEGED_FUNCTION
;

486 
	$¥vAddCuºítTaskToDñayedLi°
–c⁄° 
TickTy≥_t
 
xTimeToWake
 ) 
PRIVILEGED_FUNCTION
;

492 
TCB_t
 *
	$¥vAŒoˇãTCBAndSèck
–c⁄° 
uöt16_t
 
usSèckDïth
, 
SèckTy≥_t
 * c⁄° 
puxSèckBuf„r
 ) 
PRIVILEGED_FUNCTION
;

502 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

504 
UBa£Ty≥_t
 
	$¥vLi°TaskWôhöSögÀLi°
–
TaskSètus_t
 *
pxTaskSètusAºay
, 
Li°_t
 *
pxLi°
, 
eTaskSèã
 
eSèã
 ) 
PRIVILEGED_FUNCTION
;

513 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k
 == 1 ) )

515 
uöt16_t
 
	$¥vTaskCheckFªeSèckS∑˚
–c⁄° 
uöt8_t
 * 
pucSèckByã
 ) 
PRIVILEGED_FUNCTION
;

528 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

530 
TickTy≥_t
 
	$¥vGëEx≥˘edIdÀTime
–Ë
PRIVILEGED_FUNCTION
;

538 
	`¥vRe£tNextTaskUnblockTime
( );

540 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) && ( 
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 > 0 ) )

546 *
	`¥vWrôeNameToBuf„r
–*
pcBuf„r
, c⁄° *
pcTaskName
 );

551 
Ba£Ty≥_t
 
	$xTaskGíîicCª©e
–
TaskFun˘i⁄_t
 
pxTaskCode
, c⁄° * c⁄° 
pcName
, c⁄° 
uöt16_t
 
usSèckDïth
, * c⁄° 
pvP¨amëîs
, 
UBa£Ty≥_t
 
uxPri‹ôy
, 
TaskH™dÀ_t
 * c⁄° 
pxCª©edTask
, 
SèckTy≥_t
 * c⁄° 
puxSèckBuf„r
, c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
xRegi⁄s
 )

553 
Ba£Ty≥_t
 
xRëu∫
;

554 
TCB_t
 * 
pxNewTCB
;

555 
SèckTy≥_t
 *
pxT›OfSèck
;

557 
	`c⁄figASSERT
–
pxTaskCode
 );

558 
	`c⁄figASSERT
–––
uxPri‹ôy
 & ( 
UBa£Ty≥_t
 ) ( ~
p‹tPRIVILEGE_BIT
 ) ) < ( UBa£Ty≥_àË
c⁄figMAX_PRIORITIES
 ) );

562 
pxNewTCB
 = 
	`¥vAŒoˇãTCBAndSèck
–
usSèckDïth
, 
puxSèckBuf„r
 );

564 if–
pxNewTCB
 !
NULL
 )

566 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

568 
Ba£Ty≥_t
 
xRunPrivûeged
;

569 if––
uxPri‹ôy
 & 
p‹tPRIVILEGE_BIT
 ) != 0U )

571 
xRunPrivûeged
 = 
pdTRUE
;

575 
xRunPrivûeged
 = 
pdFALSE
;

577 
uxPri‹ôy
 &~
p‹tPRIVILEGE_BIT
;

579 if–
puxSèckBuf„r
 !
NULL
 )

584 
pxNewTCB
->
xUsögSètiˇŒyAŒoˇãdSèck
 = 
pdTRUE
;

590 
pxNewTCB
->
xUsögSètiˇŒyAŒoˇãdSèck
 = 
pdFALSE
;

598 #if–
p‹tSTACK_GROWTH
 < 0 )

600 
pxT›OfSèck
 = 
pxNewTCB
->
pxSèck
 + ( 
usSèckDïth
 - ( 
uöt16_t
 ) 1 );

601 
pxT›OfSèck
 = ( 
SèckTy≥_t
 * ) ( ( ( 
p‹tPOINTER_SIZE_TYPE
 )ÖxT›OfSèck ) & ( ~––p‹tPOINTER_SIZE_TYPE ) 
p‹tBYTE_ALIGNMENT_MASK
 ) ) );

604 
	`c⁄figASSERT
––––
p‹tPOINTER_SIZE_TYPE
 ) 
pxT›OfSèck
 & (Ö‹tPOINTER_SIZE_TYPE ) 
p‹tBYTE_ALIGNMENT_MASK
 ) == 0UL ) );

608 
pxT›OfSèck
 = 
pxNewTCB
->
pxSèck
;

611 
	`c⁄figASSERT
––––
p‹tPOINTER_SIZE_TYPE
 ) 
pxNewTCB
->
pxSèck
 & (Ö‹tPOINTER_SIZE_TYPE ) 
p‹tBYTE_ALIGNMENT_MASK
 ) == 0UL ) );

616 
pxNewTCB
->
pxEndOfSèck
 =ÖxNewTCB->
pxSèck
 + ( 
usSèckDïth
 - 1 );

621 
	`¥vInôüli£TCBV¨übÀs
–
pxNewTCB
, 
pcName
, 
uxPri‹ôy
, 
xRegi⁄s
, 
usSèckDïth
 );

627 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

629 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck, 
pxTaskCode
, 
pvP¨amëîs
, 
xRunPrivûeged
 );

633 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck, 
pxTaskCode
, 
pvP¨amëîs
 );

637 if––* ) 
pxCª©edTask
 !
NULL
 )

642 *
pxCª©edTask
 = ( 
TaskH™dÀ_t
 ) 
pxNewTCB
;

646 
	`mtCOVERAGE_TEST_MARKER
();

651 
	`èskENTER_CRITICAL
();

653 
uxCuºítNumbîOfTasks
++;

654 if–
pxCuºítTCB
 =
NULL
 )

658 
pxCuºítTCB
 = 
pxNewTCB
;

660 if–
uxCuºítNumbîOfTasks
 =–
UBa£Ty≥_t
 ) 1 )

665 
	`¥vInôüli£TaskLi°s
();

669 
	`mtCOVERAGE_TEST_MARKER
();

677 if–
xScheduÀrRu¬ög
 =
pdFALSE
 )

679 if–
pxCuºítTCB
->
uxPri‹ôy
 <= uxPriority )

681 
pxCuºítTCB
 = 
pxNewTCB
;

685 
	`mtCOVERAGE_TEST_MARKER
();

690 
	`mtCOVERAGE_TEST_MARKER
();

694 
uxTaskNumbî
++;

696 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

699 
pxNewTCB
->
uxTCBNumbî
 = 
uxTaskNumbî
;

702 
	`åa˚TASK_CREATE
–
pxNewTCB
 );

704 
	`¥vAddTaskToRódyLi°
–
pxNewTCB
 );

706 
xRëu∫
 = 
pdPASS
;

707 
	`p‹tSETUP_TCB
–
pxNewTCB
 );

709 
	`èskEXIT_CRITICAL
();

713 
xRëu∫
 = 
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
;

714 
	`åa˚TASK_CREATE_FAILED
();

717 if–
xRëu∫
 =
pdPASS
 )

719 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

723 if–
pxCuºítTCB
->
uxPri‹ôy
 < uxPriority )

725 
	`èskYIELD_IF_USING_PREEMPTION
();

729 
	`mtCOVERAGE_TEST_MARKER
();

734 
	`mtCOVERAGE_TEST_MARKER
();

738  
xRëu∫
;

739 
	}
}

742 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

744 
	$vTaskDñëe
–
TaskH™dÀ_t
 
xTaskToDñëe
 )

746 
TCB_t
 *
pxTCB
;

748 
	`èskENTER_CRITICAL
();

752 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToDñëe
 );

758 if–
	`uxLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

760 
	`èskRESET_READY_PRIORITY
–
pxTCB
->
uxPri‹ôy
 );

764 
	`mtCOVERAGE_TEST_MARKER
();

768 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

770 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

774 
	`mtCOVERAGE_TEST_MARKER
();

777 
	`vLi°In£πEnd
–&
xTasksWaôögTîmö©i⁄
, &–
pxTCB
->
xGíîicLi°Iãm
 ) );

782 ++
uxTasksDñëed
;

786 
uxTaskNumbî
++;

788 
	`åa˚TASK_DELETE
–
pxTCB
 );

790 
	`èskEXIT_CRITICAL
();

794 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

796 if–
pxTCB
 =
pxCuºítTCB
 )

798 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 == 0 );

805 
	`p‹tPRE_TASK_DELETE_HOOK
–
pxTCB
, &
xYõldPídög
 );

806 
	`p‹tYIELD_WITHIN_API
();

812 
	`èskENTER_CRITICAL
();

814 
	`¥vRe£tNextTaskUnblockTime
();

816 
	`èskEXIT_CRITICAL
();

819 
	}
}

824 #i‡–
INCLUDE_vTaskDñayU¡û
 == 1 )

826 
	$vTaskDñayU¡û
–
TickTy≥_t
 * c⁄° 
pxPªviousWakeTime
, c⁄° TickTy≥_à
xTimeIn¸emít
 )

828 
TickTy≥_t
 
xTimeToWake
;

829 
Ba£Ty≥_t
 
xAÃódyYõlded
, 
xShouldDñay
 = 
pdFALSE
;

831 
	`c⁄figASSERT
–
pxPªviousWakeTime
 );

832 
	`c⁄figASSERT
––
xTimeIn¸emít
 > 0U ) );

833 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 == 0 );

835 
	`vTaskSu•ídAŒ
();

839 c⁄° 
TickTy≥_t
 
xC⁄°TickCou¡
 = 
xTickCou¡
;

842 
xTimeToWake
 = *
pxPªviousWakeTime
 + 
xTimeIn¸emít
;

844 if–
xC⁄°TickCou¡
 < *
pxPªviousWakeTime
 )

851 if––
xTimeToWake
 < *
pxPªviousWakeTime
 ) && ( xTimeToWakê> 
xC⁄°TickCou¡
 ) )

853 
xShouldDñay
 = 
pdTRUE
;

857 
	`mtCOVERAGE_TEST_MARKER
();

865 if––
xTimeToWake
 < *
pxPªviousWakeTime
 ) || ( xTimeToWakê> 
xC⁄°TickCou¡
 ) )

867 
xShouldDñay
 = 
pdTRUE
;

871 
	`mtCOVERAGE_TEST_MARKER
();

876 *
pxPªviousWakeTime
 = 
xTimeToWake
;

878 if–
xShouldDñay
 !
pdFALSE
 )

880 
	`åa˚TASK_DELAY_UNTIL
();

884 if–
	`uxLi°Remove
–&–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

889 
	`p‹tRESET_READY_PRIORITY
–
pxCuºítTCB
->
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 );

893 
	`mtCOVERAGE_TEST_MARKER
();

896 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

900 
	`mtCOVERAGE_TEST_MARKER
();

903 
xAÃódyYõlded
 = 
	`xTaskResumeAŒ
();

907 if–
xAÃódyYõlded
 =
pdFALSE
 )

909 
	`p‹tYIELD_WITHIN_API
();

913 
	`mtCOVERAGE_TEST_MARKER
();

915 
	}
}

920 #i‡–
INCLUDE_vTaskDñay
 == 1 )

922 
	$vTaskDñay
–c⁄° 
TickTy≥_t
 
xTicksToDñay
 )

924 
TickTy≥_t
 
xTimeToWake
;

925 
Ba£Ty≥_t
 
xAÃódyYõlded
 = 
pdFALSE
;

929 if–
xTicksToDñay
 > ( 
TickTy≥_t
 ) 0U )

931 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 == 0 );

932 
	`vTaskSu•ídAŒ
();

934 
	`åa˚TASK_DELAY
();

946 
xTimeToWake
 = 
xTickCou¡
 + 
xTicksToDñay
;

951 if–
	`uxLi°Remove
–&–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

956 
	`p‹tRESET_READY_PRIORITY
–
pxCuºítTCB
->
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 );

960 
	`mtCOVERAGE_TEST_MARKER
();

962 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

964 
xAÃódyYõlded
 = 
	`xTaskResumeAŒ
();

968 
	`mtCOVERAGE_TEST_MARKER
();

973 if–
xAÃódyYõlded
 =
pdFALSE
 )

975 
	`p‹tYIELD_WITHIN_API
();

979 
	`mtCOVERAGE_TEST_MARKER
();

981 
	}
}

986 #i‡–
INCLUDE_eTaskGëSèã
 == 1 )

988 
eTaskSèã
 
	$eTaskGëSèã
–
TaskH™dÀ_t
 
xTask
 )

990 
eTaskSèã
 
eRëu∫
;

991 
Li°_t
 *
pxSèãLi°
;

992 c⁄° 
TCB_t
 * c⁄° 
pxTCB
 = ( TCB_à* ) 
xTask
;

994 
	`c⁄figASSERT
–
pxTCB
 );

996 if–
pxTCB
 =
pxCuºítTCB
 )

999 
eRëu∫
 = 
eRu¬ög
;

1003 
	`èskENTER_CRITICAL
();

1005 
pxSèãLi°
 = ( 
Li°_t
 * ) 
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

1007 
	`èskEXIT_CRITICAL
();

1009 if––
pxSèãLi°
 =
pxDñayedTaskLi°
 ) || (ÖxSèãLi° =
pxOvîÊowDñayedTaskLi°
 ) )

1013 
eRëu∫
 = 
eBlocked
;

1016 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1017 if–
pxSèãLi°
 =&
xSu•ídedTaskLi°
 )

1022 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) =
NULL
 )

1024 
eRëu∫
 = 
eSu•íded
;

1028 
eRëu∫
 = 
eBlocked
;

1033 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

1034 if–
pxSèãLi°
 =&
xTasksWaôögTîmö©i⁄
 )

1038 
eRëu∫
 = 
eDñëed
;

1046 
eRëu∫
 = 
eRódy
;

1050  
eRëu∫
;

1051 
	}
}

1056 #i‡–
INCLUDE_uxTaskPri‹ôyGë
 == 1 )

1058 
UBa£Ty≥_t
 
	$uxTaskPri‹ôyGë
–
TaskH™dÀ_t
 
xTask
 )

1060 
TCB_t
 *
pxTCB
;

1061 
UBa£Ty≥_t
 
uxRëu∫
;

1063 
	`èskENTER_CRITICAL
();

1067 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

1068 
uxRëu∫
 = 
pxTCB
->
uxPri‹ôy
;

1070 
	`èskEXIT_CRITICAL
();

1072  
uxRëu∫
;

1073 
	}
}

1078 #i‡–
INCLUDE_uxTaskPri‹ôyGë
 == 1 )

1080 
UBa£Ty≥_t
 
	$uxTaskPri‹ôyGëFromISR
–
TaskH™dÀ_t
 
xTask
 )

1082 
TCB_t
 *
pxTCB
;

1083 
UBa£Ty≥_t
 
uxRëu∫
, 
uxSavedI¡îru±Sèã
;

1101 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1103 
uxSavedI¡îru±Sèã
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1107 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

1108 
uxRëu∫
 = 
pxTCB
->
uxPri‹ôy
;

1110 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sèã
 );

1112  
uxRëu∫
;

1113 
	}
}

1118 #i‡–
INCLUDE_vTaskPri‹ôySë
 == 1 )

1120 
	$vTaskPri‹ôySë
–
TaskH™dÀ_t
 
xTask
, 
UBa£Ty≥_t
 
uxNewPri‹ôy
 )

1122 
TCB_t
 *
pxTCB
;

1123 
UBa£Ty≥_t
 
uxCuºítBa£Pri‹ôy
, 
uxPri‹ôyU£dOnE¡ry
;

1124 
Ba£Ty≥_t
 
xYõldRequúed
 = 
pdFALSE
;

1126 
	`c⁄figASSERT
––
uxNewPri‹ôy
 < 
c⁄figMAX_PRIORITIES
 ) );

1129 if–
uxNewPri‹ôy
 >–
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 )

1131 
uxNewPri‹ôy
 = ( 
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( UBaseType_t ) 1U;

1135 
	`mtCOVERAGE_TEST_MARKER
();

1138 
	`èskENTER_CRITICAL
();

1142 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

1144 
	`åa˚TASK_PRIORITY_SET
–
pxTCB
, 
uxNewPri‹ôy
 );

1146 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1148 
uxCuºítBa£Pri‹ôy
 = 
pxTCB
->
uxBa£Pri‹ôy
;

1152 
uxCuºítBa£Pri‹ôy
 = 
pxTCB
->
uxPri‹ôy
;

1156 if–
uxCuºítBa£Pri‹ôy
 !
uxNewPri‹ôy
 )

1160 if–
uxNewPri‹ôy
 > 
uxCuºítBa£Pri‹ôy
 )

1162 if–
pxTCB
 !
pxCuºítTCB
 )

1167 if–
uxNewPri‹ôy
 >
pxCuºítTCB
->
uxPri‹ôy
 )

1169 
xYõldRequúed
 = 
pdTRUE
;

1173 
	`mtCOVERAGE_TEST_MARKER
();

1183 if–
pxTCB
 =
pxCuºítTCB
 )

1188 
xYõldRequúed
 = 
pdTRUE
;

1200 
uxPri‹ôyU£dOnE¡ry
 = 
pxTCB
->
uxPri‹ôy
;

1202 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1206 if–
pxTCB
->
uxBa£Pri‹ôy
 =pxTCB->
uxPri‹ôy
 )

1208 
pxTCB
->
uxPri‹ôy
 = 
uxNewPri‹ôy
;

1212 
	`mtCOVERAGE_TEST_MARKER
();

1216 
pxTCB
->
uxBa£Pri‹ôy
 = 
uxNewPri‹ôy
;

1220 
pxTCB
->
uxPri‹ôy
 = 
uxNewPri‹ôy
;

1226 if––
	`li°GET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) & 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 ) == 0UL )

1228 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), ( ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àË
uxNewPri‹ôy
 ) );

1232 
	`mtCOVERAGE_TEST_MARKER
();

1239 if–
	`li°IS_CONTAINED_WITHIN
–&–
pxRódyTasksLi°s
[ 
uxPri‹ôyU£dOnE¡ry
 ] ), &–
pxTCB
->
xGíîicLi°Iãm
 ) ) !
pdFALSE
 )

1244 if–
	`uxLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

1249 
	`p‹tRESET_READY_PRIORITY
–
uxPri‹ôyU£dOnE¡ry
, 
uxT›RódyPri‹ôy
 );

1253 
	`mtCOVERAGE_TEST_MARKER
();

1255 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

1259 
	`mtCOVERAGE_TEST_MARKER
();

1262 if–
xYõldRequúed
 =
pdTRUE
 )

1264 
	`èskYIELD_IF_USING_PREEMPTION
();

1268 
	`mtCOVERAGE_TEST_MARKER
();

1273 –Ë
uxPri‹ôyU£dOnE¡ry
;

1276 
	`èskEXIT_CRITICAL
();

1277 
	}
}

1282 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1284 
	$vTaskSu•íd
–
TaskH™dÀ_t
 
xTaskToSu•íd
 )

1286 
TCB_t
 *
pxTCB
;

1288 
	`èskENTER_CRITICAL
();

1292 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToSu•íd
 );

1294 
	`åa˚TASK_SUSPEND
–
pxTCB
 );

1298 if–
	`uxLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

1300 
	`èskRESET_READY_PRIORITY
–
pxTCB
->
uxPri‹ôy
 );

1304 
	`mtCOVERAGE_TEST_MARKER
();

1308 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

1310 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

1314 
	`mtCOVERAGE_TEST_MARKER
();

1317 
	`vLi°In£πEnd
–&
xSu•ídedTaskLi°
, &–
pxTCB
->
xGíîicLi°Iãm
 ) );

1319 
	`èskEXIT_CRITICAL
();

1321 if–
pxTCB
 =
pxCuºítTCB
 )

1323 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

1326 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 == 0 );

1327 
	`p‹tYIELD_WITHIN_API
();

1334 if–
	`li°CURRENT_LIST_LENGTH
–&
xSu•ídedTaskLi°
 ) =
uxCuºítNumbîOfTasks
 )

1340 
pxCuºítTCB
 = 
NULL
;

1344 
	`vTaskSwôchC⁄ãxt
();

1350 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

1355 
	`èskENTER_CRITICAL
();

1357 
	`¥vRe£tNextTaskUnblockTime
();

1359 
	`èskEXIT_CRITICAL
();

1363 
	`mtCOVERAGE_TEST_MARKER
();

1366 
	}
}

1371 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1373 
Ba£Ty≥_t
 
	$¥vTaskIsTaskSu•íded
–c⁄° 
TaskH™dÀ_t
 
xTask
 )

1375 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

1376 c⁄° 
TCB_t
 * c⁄° 
pxTCB
 = ( TCB_à* ) 
xTask
;

1382 
	`c⁄figASSERT
–
xTask
 );

1385 if–
	`li°IS_CONTAINED_WITHIN
–&
xSu•ídedTaskLi°
, &–
pxTCB
->
xGíîicLi°Iãm
 ) ) !
pdFALSE
 )

1388 if–
	`li°IS_CONTAINED_WITHIN
–&
xPídögRódyLi°
, &–
pxTCB
->
xEvítLi°Iãm
 ) ) =
pdFALSE
 )

1392 if–
	`li°IS_CONTAINED_WITHIN
–
NULL
, &–
pxTCB
->
xEvítLi°Iãm
 ) ) !
pdFALSE
 )

1394 
xRëu∫
 = 
pdTRUE
;

1398 
	`mtCOVERAGE_TEST_MARKER
();

1403 
	`mtCOVERAGE_TEST_MARKER
();

1408 
	`mtCOVERAGE_TEST_MARKER
();

1411  
xRëu∫
;

1412 
	}
}

1417 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1419 
	$vTaskResume
–
TaskH™dÀ_t
 
xTaskToResume
 )

1421 
TCB_t
 * c⁄° 
pxTCB
 = ( TCB_à* ) 
xTaskToResume
;

1424 
	`c⁄figASSERT
–
xTaskToResume
 );

1428 if––
pxTCB
 !
NULL
 ) && (ÖxTCB !
pxCuºítTCB
 ) )

1430 
	`èskENTER_CRITICAL
();

1432 if–
	`¥vTaskIsTaskSu•íded
–
pxTCB
 ) =
pdTRUE
 )

1434 
	`åa˚TASK_RESUME
–
pxTCB
 );

1438 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

1439 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

1442 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

1447 
	`èskYIELD_IF_USING_PREEMPTION
();

1451 
	`mtCOVERAGE_TEST_MARKER
();

1456 
	`mtCOVERAGE_TEST_MARKER
();

1459 
	`èskEXIT_CRITICAL
();

1463 
	`mtCOVERAGE_TEST_MARKER
();

1465 
	}
}

1471 #i‡––
INCLUDE_xTaskResumeFromISR
 =1 ) && ( 
INCLUDE_vTaskSu•íd
 == 1 ) )

1473 
Ba£Ty≥_t
 
	$xTaskResumeFromISR
–
TaskH™dÀ_t
 
xTaskToResume
 )

1475 
Ba£Ty≥_t
 
xYõldRequúed
 = 
pdFALSE
;

1476 
TCB_t
 * c⁄° 
pxTCB
 = ( TCB_à* ) 
xTaskToResume
;

1477 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1479 
	`c⁄figASSERT
–
xTaskToResume
 );

1497 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1499 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1501 if–
	`¥vTaskIsTaskSu•íded
–
pxTCB
 ) =
pdTRUE
 )

1503 
	`åa˚TASK_RESUME_FROM_ISR
–
pxTCB
 );

1506 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

1510 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

1512 
xYõldRequúed
 = 
pdTRUE
;

1516 
	`mtCOVERAGE_TEST_MARKER
();

1519 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

1520 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

1527 
	`vLi°In£πEnd
–&–
xPídögRódyLi°
 ), &–
pxTCB
->
xEvítLi°Iãm
 ) );

1532 
	`mtCOVERAGE_TEST_MARKER
();

1535 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1537  
xYõldRequúed
;

1538 
	}
}

1543 
	$vTaskSèπScheduÀr
( )

1545 
Ba£Ty≥_t
 
xRëu∫
;

1548 #i‡–
INCLUDE_xTaskGëIdÀTaskH™dÀ
 == 1 )

1552 
xRëu∫
 = 
	`xTaskCª©e
–
¥vIdÀTask
, "IDLE", 
tskIDLE_STACK_SIZE
, ( * ) 
NULL
, ( 
tskIDLE_PRIORITY
 | 
p‹tPRIVILEGE_BIT
 ), &
xIdÀTaskH™dÀ
 );

1557 
xRëu∫
 = 
	`xTaskCª©e
–
¥vIdÀTask
, "IDLE", 
tskIDLE_STACK_SIZE
, ( * ) 
NULL
, ( 
tskIDLE_PRIORITY
 | 
p‹tPRIVILEGE_BIT
 ), NULL );

1561 #i‡–
c⁄figUSE_TIMERS
 == 1 )

1563 if–
xRëu∫
 =
pdPASS
 )

1565 
xRëu∫
 = 
	`xTimîCª©eTimîTask
();

1569 
	`mtCOVERAGE_TEST_MARKER
();

1574 if–
xRëu∫
 =
pdPASS
 )

1581 
	`p‹tDISABLE_INTERRUPTS
();

1583 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

1587 
_impuª_±r
 = &–
pxCuºítTCB
->
xNewLib_ªít
 );

1591 
xNextTaskUnblockTime
 = 
p‹tMAX_DELAY
;

1592 
xScheduÀrRu¬ög
 = 
pdTRUE
;

1593 
xTickCou¡
 = ( 
TickTy≥_t
 ) 0U;

1598 
	`p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
();

1602 if–
	`xP‹tSèπScheduÀr
(Ë!
pdFALSE
 )

1617 
	`c⁄figASSERT
–
xRëu∫
 );

1619 
	}
}

1622 
	$vTaskEndScheduÀr
( )

1627 
	`p‹tDISABLE_INTERRUPTS
();

1628 
xScheduÀrRu¬ög
 = 
pdFALSE
;

1629 
	`vP‹tEndScheduÀr
();

1630 
	}
}

1633 
	$vTaskSu•ídAŒ
( )

1639 ++
uxScheduÀrSu•íded
;

1640 
	}
}

1643 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

1645 
TickTy≥_t
 
	$¥vGëEx≥˘edIdÀTime
( )

1647 
TickTy≥_t
 
xRëu∫
;

1649 if–
pxCuºítTCB
->
uxPri‹ôy
 > 
tskIDLE_PRIORITY
 )

1651 
xRëu∫
 = 0;

1653 if–
	`li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
tskIDLE_PRIORITY
 ] ) ) > 1 )

1658 
xRëu∫
 = 0;

1662 
xRëu∫
 = 
xNextTaskUnblockTime
 - 
xTickCou¡
;

1665  
xRëu∫
;

1666 
	}
}

1671 
Ba£Ty≥_t
 
	$xTaskResumeAŒ
( )

1673 
TCB_t
 *
pxTCB
;

1674 
Ba£Ty≥_t
 
xAÃódyYõlded
 = 
pdFALSE
;

1678 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 );

1685 
	`èskENTER_CRITICAL
();

1687 --
uxScheduÀrSu•íded
;

1689 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

1691 if–
uxCuºítNumbîOfTasks
 > ( 
UBa£Ty≥_t
 ) 0U )

1695  
	`li°LIST_IS_EMPTY
–&
xPídögRódyLi°
 ) =
pdFALSE
 )

1697 
pxTCB
 = ( 
TCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
––&
xPídögRódyLi°
 ) );

1698 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

1699 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

1700 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

1704 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

1706 
xYõldPídög
 = 
pdTRUE
;

1710 
	`mtCOVERAGE_TEST_MARKER
();

1718 if–
uxPídedTicks
 > ( 
UBa£Ty≥_t
 ) 0U )

1720  
uxPídedTicks
 > ( 
UBa£Ty≥_t
 ) 0U )

1722 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

1724 
xYõldPídög
 = 
pdTRUE
;

1728 
	`mtCOVERAGE_TEST_MARKER
();

1730 --
uxPídedTicks
;

1735 
	`mtCOVERAGE_TEST_MARKER
();

1738 if–
xYõldPídög
 =
pdTRUE
 )

1740 #if–
c⁄figUSE_PREEMPTION
 != 0 )

1742 
xAÃódyYõlded
 = 
pdTRUE
;

1745 
	`èskYIELD_IF_USING_PREEMPTION
();

1749 
	`mtCOVERAGE_TEST_MARKER
();

1755 
	`mtCOVERAGE_TEST_MARKER
();

1758 
	`èskEXIT_CRITICAL
();

1760  
xAÃódyYõlded
;

1761 
	}
}

1764 
TickTy≥_t
 
	$xTaskGëTickCou¡
( )

1766 
TickTy≥_t
 
xTicks
;

1769 
	`p‹tTICK_TYPE_ENTER_CRITICAL
();

1771 
xTicks
 = 
xTickCou¡
;

1773 
	`p‹tTICK_TYPE_EXIT_CRITICAL
();

1775  
xTicks
;

1776 
	}
}

1779 
TickTy≥_t
 
	$xTaskGëTickCou¡FromISR
( )

1781 
TickTy≥_t
 
xRëu∫
;

1782 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1798 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1800 
uxSavedI¡îru±Sètus
 = 
	`p‹tTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR
();

1802 
xRëu∫
 = 
xTickCou¡
;

1804 
	`p‹tTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1806  
xRëu∫
;

1807 
	}
}

1810 
UBa£Ty≥_t
 
	$uxTaskGëNumbîOfTasks
( )

1814  
uxCuºítNumbîOfTasks
;

1815 
	}
}

1818 #i‡–
INCLUDE_pcTaskGëTaskName
 == 1 )

1820 *
	$pcTaskGëTaskName
–
TaskH™dÀ_t
 
xTaskToQuîy
 )

1822 
TCB_t
 *
pxTCB
;

1825 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToQuîy
 );

1826 
	`c⁄figASSERT
–
pxTCB
 );

1827  &–
pxTCB
->
pcTaskName
[ 0 ] );

1828 
	}
}

1833 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1835 
UBa£Ty≥_t
 
	$uxTaskGëSy°emSèã
–
TaskSètus_t
 * c⁄° 
pxTaskSètusAºay
, c⁄° 
UBa£Ty≥_t
 
uxAºaySize
, 
uöt32_t
 * c⁄° 
pulTŸÆRunTime
 )

1837 
UBa£Ty≥_t
 
uxTask
 = 0, 
uxQueue
 = 
c⁄figMAX_PRIORITIES
;

1839 
	`vTaskSu•ídAŒ
();

1842 if–
uxAºaySize
 >
uxCuºítNumbîOfTasks
 )

1848 
uxQueue
--;

1849 
uxTask
 +
	`¥vLi°TaskWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), &–
pxRódyTasksLi°s
[ 
uxQueue
 ] ), 
eRódy
 );

1851 }  
uxQueue
 > ( 
UBa£Ty≥_t
 ) 
tskIDLE_PRIORITY
 );

1855 
uxTask
 +
	`¥vLi°TaskWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), ( 
Li°_t
 * ) 
pxDñayedTaskLi°
, 
eBlocked
 );

1856 
uxTask
 +
	`¥vLi°TaskWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), ( 
Li°_t
 * ) 
pxOvîÊowDñayedTaskLi°
, 
eBlocked
 );

1858 #if–
INCLUDE_vTaskDñëe
 == 1 )

1862 
uxTask
 +
	`¥vLi°TaskWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), &
xTasksWaôögTîmö©i⁄
, 
eDñëed
 );

1866 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1870 
uxTask
 +
	`¥vLi°TaskWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), &
xSu•ídedTaskLi°
, 
eSu•íded
 );

1871 
	}
}

1874 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1)

1876 if–
	gpulTŸÆRunTime
 !
NULL
 )

1878 #ifde‡
p‹tALT_GET_RUN_TIME_COUNTER_VALUE


1879 
p‹tALT_GET_RUN_TIME_COUNTER_VALUE
––*
pulTŸÆRunTime
 ) );

1881 *
	gpulTŸÆRunTime
 = 
p‹tGET_RUN_TIME_COUNTER_VALUE
();

1887 if–
	gpulTŸÆRunTime
 !
NULL
 )

1889 *
pulTŸÆRunTime
 = 0;

1896 
mtCOVERAGE_TEST_MARKER
();

1899 –Ë
xTaskResumeAŒ
();

1901  
	guxTask
;

1907 #i‡–
INCLUDE_xTaskGëIdÀTaskH™dÀ
 == 1 )

1909 
TaskH™dÀ_t
 
	$xTaskGëIdÀTaskH™dÀ
( )

1913 
	`c⁄figASSERT
––
xIdÀTaskH™dÀ
 !
NULL
 ) );

1914  
xIdÀTaskH™dÀ
;

1915 
	}
}

1924 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

1926 
	$vTaskSãpTick
–c⁄° 
TickTy≥_t
 
xTicksToJump
 )

1931 
	`c⁄figASSERT
––
xTickCou¡
 + 
xTicksToJump
 ) <
xNextTaskUnblockTime
 );

1932 
xTickCou¡
 +
xTicksToJump
;

1933 
	`åa˚INCREASE_TICK_COUNT
–
xTicksToJump
 );

1934 
	}
}

1939 
Ba£Ty≥_t
 
	$xTaskIn¸emítTick
( )

1941 
TCB_t
 * 
pxTCB
;

1942 
TickTy≥_t
 
xIãmVÆue
;

1943 
Ba£Ty≥_t
 
xSwôchRequúed
 = 
pdFALSE
;

1948 
	`åa˚TASK_INCREMENT_TICK
–
xTickCou¡
 );

1949 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

1953 ++
xTickCou¡
;

1958 c⁄° 
TickTy≥_t
 
xC⁄°TickCou¡
 = 
xTickCou¡
;

1960 if–
xC⁄°TickCou¡
 =–
TickTy≥_t
 ) 0U )

1962 
	`èskSWITCH_DELAYED_LISTS
();

1966 
	`mtCOVERAGE_TEST_MARKER
();

1973 if–
xC⁄°TickCou¡
 >
xNextTaskUnblockTime
 )

1977 if–
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) !
pdFALSE
 )

1984 
xNextTaskUnblockTime
 = 
p‹tMAX_DELAY
;

1993 
pxTCB
 = ( 
TCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxDñayedTaskLi°
 );

1994 
xIãmVÆue
 = 
	`li°GET_LIST_ITEM_VALUE
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

1996 if–
xC⁄°TickCou¡
 < 
xIãmVÆue
 )

2003 
xNextTaskUnblockTime
 = 
xIãmVÆue
;

2008 
	`mtCOVERAGE_TEST_MARKER
();

2012 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

2016 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

2018 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

2022 
	`mtCOVERAGE_TEST_MARKER
();

2027 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

2031 #i‡–
c⁄figUSE_PREEMPTION
 == 1 )

2037 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

2039 
xSwôchRequúed
 = 
pdTRUE
;

2043 
	`mtCOVERAGE_TEST_MARKER
();

2055 #i‡––
c⁄figUSE_PREEMPTION
 =1 ) && ( 
c⁄figUSE_TIME_SLICING
 == 1 ) )

2057 if–
	`li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
pxCuºítTCB
->
uxPri‹ôy
 ] ) ) > ( 
UBa£Ty≥_t
 ) 1 )

2059 
xSwôchRequúed
 = 
pdTRUE
;

2063 
	`mtCOVERAGE_TEST_MARKER
();

2068 #i‡–
c⁄figUSE_TICK_HOOK
 == 1 )

2072 if–
uxPídedTicks
 =–
UBa£Ty≥_t
 ) 0U )

2074 
	`vAµliˇti⁄TickHook
();

2078 
	`mtCOVERAGE_TEST_MARKER
();

2085 ++
uxPídedTicks
;

2089 #i‡–
c⁄figUSE_TICK_HOOK
 == 1 )

2091 
	`vAµliˇti⁄TickHook
();

2096 #i‡–
c⁄figUSE_PREEMPTION
 == 1 )

2098 if–
xYõldPídög
 !
pdFALSE
 )

2100 
xSwôchRequúed
 = 
pdTRUE
;

2104 
	`mtCOVERAGE_TEST_MARKER
();

2109  
xSwôchRequúed
;

2110 
	}
}

2113 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

2115 
	$vTaskSëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
, 
TaskHookFun˘i⁄_t
 
pxHookFun˘i⁄
 )

2117 
TCB_t
 *
xTCB
;

2121 if–
xTask
 =
NULL
 )

2123 
xTCB
 = ( 
TCB_t
 * ) 
pxCuºítTCB
;

2127 
xTCB
 = ( 
TCB_t
 * ) 
xTask
;

2132 
	`èskENTER_CRITICAL
();

2133 
xTCB
->
pxTaskTag
 = 
pxHookFun˘i⁄
;

2134 
	`èskEXIT_CRITICAL
();

2135 
	}
}

2140 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

2142 
TaskHookFun˘i⁄_t
 
	$xTaskGëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
 )

2144 
TCB_t
 *
xTCB
;

2145 
TaskHookFun˘i⁄_t
 
xRëu∫
;

2148 if–
xTask
 =
NULL
 )

2150 
xTCB
 = ( 
TCB_t
 * ) 
pxCuºítTCB
;

2154 
xTCB
 = ( 
TCB_t
 * ) 
xTask
;

2159 
	`èskENTER_CRITICAL
();

2161 
xRëu∫
 = 
xTCB
->
pxTaskTag
;

2163 
	`èskEXIT_CRITICAL
();

2165  
xRëu∫
;

2166 
	}
}

2171 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

2173 
Ba£Ty≥_t
 
	$xTaskCÆlAµliˇti⁄TaskHook
–
TaskH™dÀ_t
 
xTask
, *
pvP¨amëî
 )

2175 
TCB_t
 *
xTCB
;

2176 
Ba£Ty≥_t
 
xRëu∫
;

2179 if–
xTask
 =
NULL
 )

2181 
xTCB
 = ( 
TCB_t
 * ) 
pxCuºítTCB
;

2185 
xTCB
 = ( 
TCB_t
 * ) 
xTask
;

2188 if–
xTCB
->
pxTaskTag
 !
NULL
 )

2190 
xRëu∫
 = 
xTCB
->
	`pxTaskTag
–
pvP¨amëî
 );

2194 
xRëu∫
 = 
pdFAIL
;

2197  
xRëu∫
;

2198 
	}
}

2203 
	$vTaskSwôchC⁄ãxt
( )

2205 if–
uxScheduÀrSu•íded
 !–
UBa£Ty≥_t
 ) 
pdFALSE
 )

2209 
xYõldPídög
 = 
pdTRUE
;

2213 
xYõldPídög
 = 
pdFALSE
;

2214 
	`åa˚TASK_SWITCHED_OUT
();

2216 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

2218 #ifde‡
p‹tALT_GET_RUN_TIME_COUNTER_VALUE


2219 
	`p‹tALT_GET_RUN_TIME_COUNTER_VALUE
–
ulTŸÆRunTime
 );

2221 
ulTŸÆRunTime
 = 
	`p‹tGET_RUN_TIME_COUNTER_VALUE
();

2231 if–
ulTŸÆRunTime
 > 
ulTaskSwôchedInTime
 )

2233 
pxCuºítTCB
->
ulRunTimeCou¡î
 +–
ulTŸÆRunTime
 - 
ulTaskSwôchedInTime
 );

2237 
	`mtCOVERAGE_TEST_MARKER
();

2239 
ulTaskSwôchedInTime
 = 
ulTŸÆRunTime
;

2244 
	`èskCHECK_FOR_STACK_OVERFLOW
();

2248 
	`èskSELECT_HIGHEST_PRIORITY_TASK
();

2249 
	`åa˚TASK_SWITCHED_IN
();

2251 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

2255 
_impuª_±r
 = &–
pxCuºítTCB
->
xNewLib_ªít
 );

2259 
	}
}

2262 
	$vTaskPœ˚OnEvítLi°
–
Li°_t
 * c⁄° 
pxEvítLi°
, c⁄° 
TickTy≥_t
 
xTicksToWaô
 )

2264 
TickTy≥_t
 
xTimeToWake
;

2266 
	`c⁄figASSERT
–
pxEvítLi°
 );

2275 
	`vLi°In£π
–
pxEvítLi°
, &–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

2280 if–
	`uxLi°Remove
–&–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

2284 
	`p‹tRESET_READY_PRIORITY
–
pxCuºítTCB
->
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 );

2288 
	`mtCOVERAGE_TEST_MARKER
();

2291 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

2293 if–
xTicksToWaô
 =
p‹tMAX_DELAY
 )

2298 
	`vLi°In£πEnd
–&
xSu•ídedTaskLi°
, &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

2305 
xTimeToWake
 = 
xTickCou¡
 + 
xTicksToWaô
;

2306 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

2314 
xTimeToWake
 = 
xTickCou¡
 + 
xTicksToWaô
;

2315 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

2318 
	}
}

2321 
	$vTaskPœ˚OnUn‹dîedEvítLi°
–
Li°_t
 * 
pxEvítLi°
, c⁄° 
TickTy≥_t
 
xIãmVÆue
, c⁄° TickTy≥_à
xTicksToWaô
 )

2323 
TickTy≥_t
 
xTimeToWake
;

2325 
	`c⁄figASSERT
–
pxEvítLi°
 );

2329 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 != 0 );

2334 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xEvítLi°Iãm
 ), 
xIãmVÆue
 | 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 );

2341 
	`vLi°In£πEnd
–
pxEvítLi°
, &–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

2346 if–
	`uxLi°Remove
–&–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

2350 
	`p‹tRESET_READY_PRIORITY
–
pxCuºítTCB
->
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 );

2354 
	`mtCOVERAGE_TEST_MARKER
();

2357 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

2359 if–
xTicksToWaô
 =
p‹tMAX_DELAY
 )

2364 
	`vLi°In£πEnd
–&
xSu•ídedTaskLi°
, &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

2371 
xTimeToWake
 = 
xTickCou¡
 + 
xTicksToWaô
;

2372 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

2380 
xTimeToWake
 = 
xTickCou¡
 + 
xTicksToWaô
;

2381 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

2384 
	}
}

2387 #i‡
c⁄figUSE_TIMERS
 == 1

2389 
	$vTaskPœ˚OnEvítLi°Re°ri˘ed
–
Li°_t
 * c⁄° 
pxEvítLi°
, c⁄° 
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xWaôIndeföôñy
 )

2391 
TickTy≥_t
 
xTimeToWake
;

2393 
	`c⁄figASSERT
–
pxEvítLi°
 );

2405 
	`vLi°In£πEnd
–
pxEvítLi°
, &–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

2411 if–
	`uxLi°Remove
–&–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

2415 
	`p‹tRESET_READY_PRIORITY
–
pxCuºítTCB
->
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 );

2419 
	`mtCOVERAGE_TEST_MARKER
();

2428 #if–
INCLUDE_vTaskSu•íd
 == 1 )

2430 if–
xWaôIndeföôñy
 =
pdTRUE
 )

2435 
	`vLi°In£πEnd
–&
xSu•ídedTaskLi°
, &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

2442 
xTimeToWake
 = 
xTickCou¡
 + 
xTicksToWaô
;

2443 
	`åa˚TASK_DELAY_UNTIL
();

2444 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

2451 
xTimeToWake
 = 
xTickCou¡
 + 
xTicksToWaô
;

2452 
	`åa˚TASK_DELAY_UNTIL
();

2453 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

2457 –Ë
xWaôIndeföôñy
;

2458 
	}
}

2465 
Ba£Ty≥_t
 
	$xTaskRemoveFromEvítLi°
–c⁄° 
Li°_t
 * c⁄° 
pxEvítLi°
 )

2467 
TCB_t
 *
pxUnblockedTCB
;

2468 
Ba£Ty≥_t
 
xRëu∫
;

2483 
pxUnblockedTCB
 = ( 
TCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxEvítLi°
 );

2484 
	`c⁄figASSERT
–
pxUnblockedTCB
 );

2485 –Ë
	`uxLi°Remove
–&–
pxUnblockedTCB
->
xEvítLi°Iãm
 ) );

2487 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

2489 –Ë
	`uxLi°Remove
–&–
pxUnblockedTCB
->
xGíîicLi°Iãm
 ) );

2490 
	`¥vAddTaskToRódyLi°
–
pxUnblockedTCB
 );

2496 
	`vLi°In£πEnd
–&–
xPídögRódyLi°
 ), &–
pxUnblockedTCB
->
xEvítLi°Iãm
 ) );

2499 if–
pxUnblockedTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

2504 
xRëu∫
 = 
pdTRUE
;

2508 
xYõldPídög
 = 
pdTRUE
;

2512 
xRëu∫
 = 
pdFALSE
;

2515 #if–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

2525 
	`¥vRe£tNextTaskUnblockTime
();

2529  
xRëu∫
;

2530 
	}
}

2533 
Ba£Ty≥_t
 
	$xTaskRemoveFromUn‹dîedEvítLi°
–
Li°Iãm_t
 * 
pxEvítLi°Iãm
, c⁄° 
TickTy≥_t
 
xIãmVÆue
 )

2535 
TCB_t
 *
pxUnblockedTCB
;

2536 
Ba£Ty≥_t
 
xRëu∫
;

2540 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 !
pdFALSE
 );

2543 
	`li°SET_LIST_ITEM_VALUE
–
pxEvítLi°Iãm
, 
xIãmVÆue
 | 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 );

2547 
pxUnblockedTCB
 = ( 
TCB_t
 * ) 
	`li°GET_LIST_ITEM_OWNER
–
pxEvítLi°Iãm
 );

2548 
	`c⁄figASSERT
–
pxUnblockedTCB
 );

2549 –Ë
	`uxLi°Remove
–
pxEvítLi°Iãm
 );

2554 –Ë
	`uxLi°Remove
–&–
pxUnblockedTCB
->
xGíîicLi°Iãm
 ) );

2555 
	`¥vAddTaskToRódyLi°
–
pxUnblockedTCB
 );

2557 if–
pxUnblockedTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

2563 
xRëu∫
 = 
pdTRUE
;

2567 
xYõldPídög
 = 
pdTRUE
;

2571 
xRëu∫
 = 
pdFALSE
;

2574  
xRëu∫
;

2575 
	}
}

2578 
	$vTaskSëTimeOutSèã
–
TimeOut_t
 * c⁄° 
pxTimeOut
 )

2580 
	`c⁄figASSERT
–
pxTimeOut
 );

2581 
pxTimeOut
->
xOvîÊowCou¡
 = 
xNumOfOvîÊows
;

2582 
pxTimeOut
->
xTimeOnE¡îög
 = 
xTickCou¡
;

2583 
	}
}

2586 
Ba£Ty≥_t
 
	$xTaskCheckF‹TimeOut
–
TimeOut_t
 * c⁄° 
pxTimeOut
, 
TickTy≥_t
 * c⁄° 
pxTicksToWaô
 )

2588 
Ba£Ty≥_t
 
xRëu∫
;

2590 
	`c⁄figASSERT
–
pxTimeOut
 );

2591 
	`c⁄figASSERT
–
pxTicksToWaô
 );

2593 
	`èskENTER_CRITICAL
();

2596 c⁄° 
TickTy≥_t
 
xC⁄°TickCou¡
 = 
xTickCou¡
;

2598 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

2602 if–*
pxTicksToWaô
 =
p‹tMAX_DELAY
 )

2604 
xRëu∫
 = 
pdFALSE
;

2609 if––
xNumOfOvîÊows
 !
pxTimeOut
->
xOvîÊowCou¡
 ) && ( 
xC⁄°TickCou¡
 >pxTimeOut->
xTimeOnE¡îög
 ) )

2615 
xRëu∫
 = 
pdTRUE
;

2617 if––
xC⁄°TickCou¡
 - 
pxTimeOut
->
xTimeOnE¡îög
 ) < *
pxTicksToWaô
 )

2620 *
pxTicksToWaô
 -–
xC⁄°TickCou¡
 - 
pxTimeOut
->
xTimeOnE¡îög
 );

2621 
	`vTaskSëTimeOutSèã
–
pxTimeOut
 );

2622 
xRëu∫
 = 
pdFALSE
;

2626 
xRëu∫
 = 
pdTRUE
;

2629 
	`èskEXIT_CRITICAL
();

2631  
xRëu∫
;

2632 
	}
}

2635 
	$vTaskMis£dYõld
( )

2637 
xYõldPídög
 = 
pdTRUE
;

2638 
	}
}

2641 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

2643 
UBa£Ty≥_t
 
	$uxTaskGëTaskNumbî
–
TaskH™dÀ_t
 
xTask
 )

2645 
UBa£Ty≥_t
 
uxRëu∫
;

2646 
TCB_t
 *
pxTCB
;

2648 if–
xTask
 !
NULL
 )

2650 
pxTCB
 = ( 
TCB_t
 * ) 
xTask
;

2651 
uxRëu∫
 = 
pxTCB
->
uxTaskNumbî
;

2655 
uxRëu∫
 = 0U;

2658  
uxRëu∫
;

2659 
	}
}

2664 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

2666 
	$vTaskSëTaskNumbî
–
TaskH™dÀ_t
 
xTask
, c⁄° 
UBa£Ty≥_t
 
uxH™dÀ
 )

2668 
TCB_t
 *
pxTCB
;

2670 if–
xTask
 !
NULL
 )

2672 
pxTCB
 = ( 
TCB_t
 * ) 
xTask
;

2673 
pxTCB
->
uxTaskNumbî
 = 
uxH™dÀ
;

2675 
	}
}

2690 
	$p‹tTASK_FUNCTION
–
¥vIdÀTask
, 
pvP¨amëîs
 )

2693 –Ë
pvP¨amëîs
;

2698 
	`¥vCheckTasksWaôögTîmö©i⁄
();

2700 #i‡–
c⁄figUSE_PREEMPTION
 == 0 )

2706 
	`èskYIELD
();

2710 #i‡––
c⁄figUSE_PREEMPTION
 =1 ) && ( 
c⁄figIDLE_SHOULD_YIELD
 == 1 ) )

2721 if–
	`li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
tskIDLE_PRIORITY
 ] ) ) > ( 
UBa£Ty≥_t
 ) 1 )

2723 
	`èskYIELD
();

2727 
	`mtCOVERAGE_TEST_MARKER
();

2732 #i‡–
c⁄figUSE_IDLE_HOOK
 == 1 )

2734 
	`vAµliˇti⁄IdÀHook
( );

2741 
	`vAµliˇti⁄IdÀHook
();

2749 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

2751 
TickTy≥_t
 
xEx≥˘edIdÀTime
;

2758 
xEx≥˘edIdÀTime
 = 
	`¥vGëEx≥˘edIdÀTime
();

2760 if–
xEx≥˘edIdÀTime
 >
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 )

2762 
	`vTaskSu•ídAŒ
();

2767 
	`c⁄figASSERT
–
xNextTaskUnblockTime
 >
xTickCou¡
 );

2768 
xEx≥˘edIdÀTime
 = 
	`¥vGëEx≥˘edIdÀTime
();

2770 if–
xEx≥˘edIdÀTime
 >
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 )

2772 
	`åa˚LOW_POWER_IDLE_BEGIN
();

2773 
	`p‹tSUPPRESS_TICKS_AND_SLEEP
–
xEx≥˘edIdÀTime
 );

2774 
	`åa˚LOW_POWER_IDLE_END
();

2778 
	`mtCOVERAGE_TEST_MARKER
();

2781 –Ë
	`xTaskResumeAŒ
();

2785 
	`mtCOVERAGE_TEST_MARKER
();

2790 
	}
}

2793 #if–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

2795 
eSÀïModeSètus
 
	$eTaskC⁄fúmSÀïModeSètus
( )

2798 c⁄° 
UBa£Ty≥_t
 
uxN⁄Aµliˇti⁄Tasks
 = 1;

2799 
eSÀïModeSètus
 
eRëu∫
 = 
eSènd¨dSÀï
;

2801 if–
	`li°CURRENT_LIST_LENGTH
–&
xPídögRódyLi°
 ) != 0 )

2804 
eRëu∫
 = 
eAb‹tSÀï
;

2806 if–
xYõldPídög
 !
pdFALSE
 )

2809 
eRëu∫
 = 
eAb‹tSÀï
;

2817 if–
	`li°CURRENT_LIST_LENGTH
–&
xSu•ídedTaskLi°
 ) =–
uxCuºítNumbîOfTasks
 - 
uxN⁄Aµliˇti⁄Tasks
 ) )

2819 
eRëu∫
 = 
eNoTasksWaôögTimeout
;

2823 
	`mtCOVERAGE_TEST_MARKER
();

2827  
eRëu∫
;

2828 
	}
}

2833 
	$¥vInôüli£TCBV¨übÀs
–
TCB_t
 * c⁄° 
pxTCB
, c⁄° * c⁄° 
pcName
, 
UBa£Ty≥_t
 
uxPri‹ôy
, c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
xRegi⁄s
, c⁄° 
uöt16_t
 
usSèckDïth
 )

2835 
UBa£Ty≥_t
 
x
;

2838  
x
 = ( 
UBa£Ty≥_t
 ) 0; x < ( UBa£Ty≥_àË
c⁄figMAX_TASK_NAME_LEN
; x++ )

2840 
pxTCB
->
pcTaskName
[ 
x
 ] = 
pcName
[ x ];

2845 if–
pcName
[ 
x
 ] == 0x00 )

2851 
	`mtCOVERAGE_TEST_MARKER
();

2857 
pxTCB
->
pcTaskName
[ 
c⁄figMAX_TASK_NAME_LEN
 - 1 ] = '\0';

2861 if–
uxPri‹ôy
 >–
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 )

2863 
uxPri‹ôy
 = ( 
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( UBaseType_t ) 1U;

2867 
	`mtCOVERAGE_TEST_MARKER
();

2870 
pxTCB
->
uxPri‹ôy
 = uxPriority;

2871 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

2873 
pxTCB
->
uxBa£Pri‹ôy
 = 
uxPri‹ôy
;

2874 
pxTCB
->
uxMuãxesHñd
 = 0;

2878 
	`vLi°Inôüli£Iãm
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

2879 
	`vLi°Inôüli£Iãm
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

2883 
	`li°SET_LIST_ITEM_OWNER
–&–
pxTCB
->
xGíîicLi°Iãm
 ),ÖxTCB );

2886 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àË
uxPri‹ôy
 );

2887 
	`li°SET_LIST_ITEM_OWNER
–&–
pxTCB
->
xEvítLi°Iãm
 ),ÖxTCB );

2889 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

2891 
pxTCB
->
uxCrôiˇlNe°ög
 = ( 
UBa£Ty≥_t
 ) 0U;

2895 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

2897 
pxTCB
->
pxTaskTag
 = 
NULL
;

2901 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

2903 
pxTCB
->
ulRunTimeCou¡î
 = 0UL;

2907 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

2909 
	`vP‹tSt‹eTaskMPUSëtögs
–&–
pxTCB
->
xMPUSëtögs
 ), 
xRegi⁄s
,ÖxTCB->
pxSèck
, 
usSèckDïth
 );

2913 –Ë
xRegi⁄s
;

2914 –Ë
usSèckDïth
;

2918 #if–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 != 0 )

2920  
x
 = 0; x < ( 
UBa£Ty≥_t
 ) 
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
; x++ )

2922 
pxTCB
->
pvThªadLoˇlSt‹agePoöãrs
[ 
x
 ] = 
NULL
;

2927 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

2929 
pxTCB
->
ulNŸifõdVÆue
 = 0;

2930 
pxTCB
->
eNŸifySèã
 = 
eNŸWaôögNŸifiˇti⁄
;

2934 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

2937 
	`_REENT_INIT_PTR
––&–
pxTCB
->
xNewLib_ªít
 ) ) );

2940 
	}
}

2943 #i‡–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 != 0 )

2945 
	$vTaskSëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToSë
, 
Ba£Ty≥_t
 
xIndex
, *
pvVÆue
 )

2947 
TCB_t
 *
pxTCB
;

2949 if–
xIndex
 < 
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 )

2951 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToSë
 );

2952 
pxTCB
->
pvThªadLoˇlSt‹agePoöãrs
[ 
xIndex
 ] = 
pvVÆue
;

2954 
	}
}

2959 #i‡–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 != 0 )

2961 *
	$pvTaskGëThªadLoˇlSt‹agePoöãr
–
TaskH™dÀ_t
 
xTaskToQuîy
, 
Ba£Ty≥_t
 
xIndex
 )

2963 *
pvRëu∫
 = 
NULL
;

2964 
TCB_t
 *
pxTCB
;

2966 if–
xIndex
 < 
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 )

2968 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToQuîy
 );

2969 
pvRëu∫
 = 
pxTCB
->
pvThªadLoˇlSt‹agePoöãrs
[ 
xIndex
 ];

2973 
pvRëu∫
 = 
NULL
;

2976  
pvRëu∫
;

2977 
	}
}

2982 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

2984 
	$vTaskAŒoˇãMPURegi⁄s
–
TaskH™dÀ_t
 
xTaskToModify
, c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
xRegi⁄s
 )

2986 
TCB_t
 *
pxTCB
;

2990 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToModify
 );

2992 
	`vP‹tSt‹eTaskMPUSëtögs
–&–
pxTCB
->
xMPUSëtögs
 ), 
xRegi⁄s
, 
NULL
, 0 );

2993 
	}
}

2998 
	$¥vInôüli£TaskLi°s
( )

3000 
UBa£Ty≥_t
 
uxPri‹ôy
;

3002  
uxPri‹ôy
 = ( 
UBa£Ty≥_t
 ) 0U; uxPri‹ôy < ( UBa£Ty≥_àË
c⁄figMAX_PRIORITIES
; uxPriority++ )

3004 
	`vLi°Inôüli£
–&–
pxRódyTasksLi°s
[ 
uxPri‹ôy
 ] ) );

3007 
	`vLi°Inôüli£
–&
xDñayedTaskLi°1
 );

3008 
	`vLi°Inôüli£
–&
xDñayedTaskLi°2
 );

3009 
	`vLi°Inôüli£
–&
xPídögRódyLi°
 );

3011 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

3013 
	`vLi°Inôüli£
–&
xTasksWaôögTîmö©i⁄
 );

3017 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

3019 
	`vLi°Inôüli£
–&
xSu•ídedTaskLi°
 );

3025 
pxDñayedTaskLi°
 = &
xDñayedTaskLi°1
;

3026 
pxOvîÊowDñayedTaskLi°
 = &
xDñayedTaskLi°2
;

3027 
	}
}

3030 
	$¥vCheckTasksWaôögTîmö©i⁄
( )

3032 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

3034 
Ba£Ty≥_t
 
xLi°IsEm±y
;

3038  
uxTasksDñëed
 > ( 
UBa£Ty≥_t
 ) 0U )

3040 
	`vTaskSu•ídAŒ
();

3042 
xLi°IsEm±y
 = 
	`li°LIST_IS_EMPTY
–&
xTasksWaôögTîmö©i⁄
 );

3044 –Ë
	`xTaskResumeAŒ
();

3046 if–
xLi°IsEm±y
 =
pdFALSE
 )

3048 
TCB_t
 *
pxTCB
;

3050 
	`èskENTER_CRITICAL
();

3052 
pxTCB
 = ( 
TCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
––&
xTasksWaôögTîmö©i⁄
 ) );

3053 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

3054 --
uxCuºítNumbîOfTasks
;

3055 --
uxTasksDñëed
;

3057 
	`èskEXIT_CRITICAL
();

3059 
	`¥vDñëeTCB
–
pxTCB
 );

3063 
	`mtCOVERAGE_TEST_MARKER
();

3068 
	}
}

3071 
	$¥vAddCuºítTaskToDñayedLi°
–c⁄° 
TickTy≥_t
 
xTimeToWake
 )

3074 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xGíîicLi°Iãm
 ), 
xTimeToWake
 );

3076 if–
xTimeToWake
 < 
xTickCou¡
 )

3079 
	`vLi°In£π
–
pxOvîÊowDñayedTaskLi°
, &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

3084 
	`vLi°In£π
–
pxDñayedTaskLi°
, &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

3089 if–
xTimeToWake
 < 
xNextTaskUnblockTime
 )

3091 
xNextTaskUnblockTime
 = 
xTimeToWake
;

3095 
	`mtCOVERAGE_TEST_MARKER
();

3098 
	}
}

3101 
TCB_t
 *
	$¥vAŒoˇãTCBAndSèck
–c⁄° 
uöt16_t
 
usSèckDïth
, 
SèckTy≥_t
 * c⁄° 
puxSèckBuf„r
 )

3103 
TCB_t
 *
pxNewTCB
;

3108 #if–
p‹tSTACK_GROWTH
 > 0 )

3112 
pxNewTCB
 = ( 
TCB_t
 * ) 
	`pvP‹tMÆloc
( ( TCB_t ) );

3114 if–
pxNewTCB
 !
NULL
 )

3119 
pxNewTCB
->
pxSèck
 = ( 
SèckTy≥_t
 * ) 
	`pvP‹tMÆlocAlig√d
––––
size_t
 ) 
usSèckDïth
 ) * –SèckTy≥_àË), 
puxSèckBuf„r
 );

3121 if–
pxNewTCB
->
pxSèck
 =
NULL
 )

3124 
	`vP‹tFªe
–
pxNewTCB
 );

3125 
pxNewTCB
 = 
NULL
;

3131 
SèckTy≥_t
 *
pxSèck
;

3134 
pxSèck
 = ( 
SèckTy≥_t
 * ) 
	`pvP‹tMÆlocAlig√d
––––
size_t
 ) 
usSèckDïth
 ) * –SèckTy≥_àË), 
puxSèckBuf„r
 );

3136 if–
pxSèck
 !
NULL
 )

3140 
pxNewTCB
 = ( 
TCB_t
 * ) 
	`pvP‹tMÆloc
( ( TCB_t ) );

3142 if–
pxNewTCB
 !
NULL
 )

3145 
pxNewTCB
->
pxSèck
 =ÖxStack;

3151 
	`vP‹tFªe
–
pxSèck
 );

3156 
pxNewTCB
 = 
NULL
;

3161 if–
pxNewTCB
 !
NULL
 )

3164 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 1 ) || ( 
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k
 == 1 ) )

3167 –Ë
	`mem£t
–
pxNewTCB
->
pxSèck
, ( Ë
tskSTACK_FILL_BYTE
, ( 
size_t
 ) 
usSèckDïth
 * –
SèckTy≥_t
 ) );

3172  
pxNewTCB
;

3173 
	}
}

3176 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

3178 
UBa£Ty≥_t
 
	$¥vLi°TaskWôhöSögÀLi°
–
TaskSètus_t
 *
pxTaskSètusAºay
, 
Li°_t
 *
pxLi°
, 
eTaskSèã
 
eSèã
 )

3180 vﬁ©ûê
TCB_t
 *
pxNextTCB
, *
pxFú°TCB
;

3181 
UBa£Ty≥_t
 
uxTask
 = 0;

3183 if–
	`li°CURRENT_LIST_LENGTH
–
pxLi°
 ) > ( 
UBa£Ty≥_t
 ) 0 )

3185 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxFú°TCB
, 
pxLi°
 );

3193 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxNextTCB
, 
pxLi°
 );

3195 
pxTaskSètusAºay
[ 
uxTask
 ].
xH™dÀ
 = ( 
TaskH™dÀ_t
 ) 
pxNextTCB
;

3196 
pxTaskSètusAºay
[ 
uxTask
 ].
pcTaskName
 = ( c⁄° * ) &–
pxNextTCB
->pcTaskName [ 0 ] );

3197 
pxTaskSètusAºay
[ 
uxTask
 ].
xTaskNumbî
 = 
pxNextTCB
->
uxTCBNumbî
;

3198 
pxTaskSètusAºay
[ 
uxTask
 ].
eCuºítSèã
 = 
eSèã
;

3199 
pxTaskSètusAºay
[ 
uxTask
 ].
uxCuºítPri‹ôy
 = 
pxNextTCB
->
uxPri‹ôy
;

3201 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

3206 if–
eSèã
 =
eSu•íded
 )

3208 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxNextTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

3210 
pxTaskSètusAºay
[ 
uxTask
 ].
eCuºítSèã
 = 
eBlocked
;

3216 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

3218 
pxTaskSètusAºay
[ 
uxTask
 ].
uxBa£Pri‹ôy
 = 
pxNextTCB
->uxBasePriority;

3222 
pxTaskSètusAºay
[ 
uxTask
 ].
uxBa£Pri‹ôy
 = 0;

3226 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

3228 
pxTaskSètusAºay
[ 
uxTask
 ].
ulRunTimeCou¡î
 = 
pxNextTCB
->ulRunTimeCounter;

3232 
pxTaskSètusAºay
[ 
uxTask
 ].
ulRunTimeCou¡î
 = 0;

3236 #i‡–
p‹tSTACK_GROWTH
 > 0 )

3238 
pxTaskSètusAºay
[ 
uxTask
 ].
usSèckHighW©îM¨k
 = 
	`¥vTaskCheckFªeSèckS∑˚
––
uöt8_t
 * ) 
pxNextTCB
->
pxEndOfSèck
 );

3242 
pxTaskSètusAºay
[ 
uxTask
 ].
usSèckHighW©îM¨k
 = 
	`¥vTaskCheckFªeSèckS∑˚
––
uöt8_t
 * ) 
pxNextTCB
->
pxSèck
 );

3246 
uxTask
++;

3248 }  
pxNextTCB
 !
pxFú°TCB
 );

3252 
	`mtCOVERAGE_TEST_MARKER
();

3255  
uxTask
;

3256 
	}
}

3261 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k
 == 1 ) )

3263 
uöt16_t
 
	$¥vTaskCheckFªeSèckS∑˚
–c⁄° 
uöt8_t
 * 
pucSèckByã
 )

3265 
uöt32_t
 
ulCou¡
 = 0U;

3267  *
pucSèckByã
 =–
uöt8_t
 ) 
tskSTACK_FILL_BYTE
 )

3269 
pucSèckByã
 -
p‹tSTACK_GROWTH
;

3270 
ulCou¡
++;

3273 
ulCou¡
 /–
uöt32_t
 ) –
SèckTy≥_t
 );

3275  ( 
uöt16_t
 ) 
ulCou¡
;

3276 
	}
}

3281 #i‡–
INCLUDE_uxTaskGëSèckHighW©îM¨k
 == 1 )

3283 
UBa£Ty≥_t
 
	$uxTaskGëSèckHighW©îM¨k
–
TaskH™dÀ_t
 
xTask
 )

3285 
TCB_t
 *
pxTCB
;

3286 
uöt8_t
 *
pucEndOfSèck
;

3287 
UBa£Ty≥_t
 
uxRëu∫
;

3289 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

3291 #i‡
p‹tSTACK_GROWTH
 < 0

3293 
pucEndOfSèck
 = ( 
uöt8_t
 * ) 
pxTCB
->
pxSèck
;

3297 
pucEndOfSèck
 = ( 
uöt8_t
 * ) 
pxTCB
->
pxEndOfSèck
;

3301 
uxRëu∫
 = ( 
UBa£Ty≥_t
 ) 
	`¥vTaskCheckFªeSèckS∑˚
–
pucEndOfSèck
 );

3303  
uxRëu∫
;

3304 
	}
}

3309 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

3311 
	$¥vDñëeTCB
–
TCB_t
 *
pxTCB
 )

3316 
	`p‹tCLEAN_UP_TCB
–
pxTCB
 );

3320 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

3322 
	`_ª˛aim_ªít
–&–
pxTCB
->
xNewLib_ªít
 ) );

3326 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

3330 if–
pxTCB
->
xUsögSètiˇŒyAŒoˇãdSèck
 =
pdFALSE
 )

3332 
	`vP‹tFªeAlig√d
–
pxTCB
->
pxSèck
 );

3337 
	`vP‹tFªeAlig√d
–
pxTCB
->
pxSèck
 );

3338 
	}
}

3341 
vP‹tFªe
–
pxTCB
 );

3347 
	$¥vRe£tNextTaskUnblockTime
( )

3349 
TCB_t
 *
pxTCB
;

3351 if–
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) !
pdFALSE
 )

3357 
xNextTaskUnblockTime
 = 
p‹tMAX_DELAY
;

3365 –
pxTCB
 ) = ( 
TCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxDñayedTaskLi°
 );

3366 
xNextTaskUnblockTime
 = 
	`li°GET_LIST_ITEM_VALUE
–&––
pxTCB
 )->
xGíîicLi°Iãm
 ) );

3368 
	}
}

3371 #i‡––
INCLUDE_xTaskGëCuºítTaskH™dÀ
 =1 ) || ( 
c⁄figUSE_MUTEXES
 == 1 ) )

3373 
TaskH™dÀ_t
 
	$xTaskGëCuºítTaskH™dÀ
( )

3375 
TaskH™dÀ_t
 
xRëu∫
;

3380 
xRëu∫
 = 
pxCuºítTCB
;

3382  
xRëu∫
;

3383 
	}
}

3388 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

3390 
Ba£Ty≥_t
 
	$xTaskGëScheduÀrSèã
( )

3392 
Ba£Ty≥_t
 
xRëu∫
;

3394 if–
xScheduÀrRu¬ög
 =
pdFALSE
 )

3396 
xRëu∫
 = 
èskSCHEDULER_NOT_STARTED
;

3400 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

3402 
xRëu∫
 = 
èskSCHEDULER_RUNNING
;

3406 
xRëu∫
 = 
èskSCHEDULER_SUSPENDED
;

3410  
xRëu∫
;

3411 
	}
}

3416 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

3418 
	$vTaskPri‹ôyInhîô
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
 )

3420 
TCB_t
 * c⁄° 
pxTCB
 = ( TCB_à* ) 
pxMuãxHﬁdî
;

3424 if–
pxMuãxHﬁdî
 !
NULL
 )

3429 if–
pxTCB
->
uxPri‹ôy
 < 
pxCuºítTCB
->uxPriority )

3434 if––
	`li°GET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) & 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 ) == 0UL )

3436 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àË
pxCuºítTCB
->
uxPri‹ôy
 );

3440 
	`mtCOVERAGE_TEST_MARKER
();

3445 if–
	`li°IS_CONTAINED_WITHIN
–&–
pxRódyTasksLi°s
[ 
pxTCB
->
uxPri‹ôy
 ] ), &–pxTCB->
xGíîicLi°Iãm
 ) ) !
pdFALSE
 )

3447 if–
	`uxLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

3449 
	`èskRESET_READY_PRIORITY
–
pxTCB
->
uxPri‹ôy
 );

3453 
	`mtCOVERAGE_TEST_MARKER
();

3457 
pxTCB
->
uxPri‹ôy
 = 
pxCuºítTCB
->uxPriority;

3458 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

3463 
pxTCB
->
uxPri‹ôy
 = 
pxCuºítTCB
->uxPriority;

3466 
	`åa˚TASK_PRIORITY_INHERIT
–
pxTCB
, 
pxCuºítTCB
->
uxPri‹ôy
 );

3470 
	`mtCOVERAGE_TEST_MARKER
();

3475 
	`mtCOVERAGE_TEST_MARKER
();

3477 
	}
}

3482 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

3484 
Ba£Ty≥_t
 
	$xTaskPri‹ôyDisöhîô
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
 )

3486 
TCB_t
 * c⁄° 
pxTCB
 = ( TCB_à* ) 
pxMuãxHﬁdî
;

3487 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

3489 if–
pxMuãxHﬁdî
 !
NULL
 )

3495 
	`c⁄figASSERT
–
pxTCB
 =
pxCuºítTCB
 );

3497 
	`c⁄figASSERT
–
pxTCB
->
uxMuãxesHñd
 );

3498 –
pxTCB
->
uxMuãxesHñd
 )--;

3502 if–
pxTCB
->
uxPri‹ôy
 !pxTCB->
uxBa£Pri‹ôy
 )

3505 if–
pxTCB
->
uxMuãxesHñd
 =–
UBa£Ty≥_t
 ) 0 )

3512 if–
	`uxLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

3514 
	`èskRESET_READY_PRIORITY
–
pxTCB
->
uxPri‹ôy
 );

3518 
	`mtCOVERAGE_TEST_MARKER
();

3523 
	`åa˚TASK_PRIORITY_DISINHERIT
–
pxTCB
,ÖxTCB->
uxBa£Pri‹ôy
 );

3524 
pxTCB
->
uxPri‹ôy
 =ÖxTCB->
uxBa£Pri‹ôy
;

3529 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àËpxTCB->
uxPri‹ôy
 );

3530 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

3540 
xRëu∫
 = 
pdTRUE
;

3544 
	`mtCOVERAGE_TEST_MARKER
();

3549 
	`mtCOVERAGE_TEST_MARKER
();

3554 
	`mtCOVERAGE_TEST_MARKER
();

3557  
xRëu∫
;

3558 
	}
}

3563 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

3565 
	$vTaskE¡îCrôiˇl
( )

3567 
	`p‹tDISABLE_INTERRUPTS
();

3569 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

3571 –
pxCuºítTCB
->
uxCrôiˇlNe°ög
 )++;

3579 if–
pxCuºítTCB
->
uxCrôiˇlNe°ög
 == 1 )

3581 
	`p‹tASSERT_IF_IN_ISR
();

3586 
	`mtCOVERAGE_TEST_MARKER
();

3588 
	}
}

3593 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

3595 
	$vTaskExôCrôiˇl
( )

3597 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

3599 if–
pxCuºítTCB
->
uxCrôiˇlNe°ög
 > 0U )

3601 –
pxCuºítTCB
->
uxCrôiˇlNe°ög
 )--;

3603 if–
pxCuºítTCB
->
uxCrôiˇlNe°ög
 == 0U )

3605 
	`p‹tENABLE_INTERRUPTS
();

3609 
	`mtCOVERAGE_TEST_MARKER
();

3614 
	`mtCOVERAGE_TEST_MARKER
();

3619 
	`mtCOVERAGE_TEST_MARKER
();

3621 
	}
}

3626 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) && ( 
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 > 0 ) )

3628 *
	$¥vWrôeNameToBuf„r
–*
pcBuf„r
, c⁄° *
pcTaskName
 )

3630 
size_t
 
x
;

3633 
	`°r˝y
–
pcBuf„r
, 
pcTaskName
 );

3637  
x
 = 
	`°æí
–
pcBuf„r
 ); x < ( 
size_t
 ) ( 
c⁄figMAX_TASK_NAME_LEN
 - 1 ); x++ )

3639 
pcBuf„r
[ 
x
 ] = ' ';

3643 
pcBuf„r
[ 
x
 ] = 0x00;

3646  &–
pcBuf„r
[ 
x
 ] );

3647 
	}
}

3652 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) && ( 
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 > 0 ) )

3654 
	$vTaskLi°
–* 
pcWrôeBuf„r
 )

3656 
TaskSètus_t
 *
pxTaskSètusAºay
;

3657 vﬁ©ûê
UBa£Ty≥_t
 
uxAºaySize
, 
x
;

3658 
cSètus
;

3686 *
pcWrôeBuf„r
 = 0x00;

3690 
uxAºaySize
 = 
uxCuºítNumbîOfTasks
;

3693 
pxTaskSètusAºay
 = 
	`pvP‹tMÆloc
–
uxCuºítNumbîOfTasks
 * –
TaskSètus_t
 ) );

3695 if–
pxTaskSètusAºay
 !
NULL
 )

3698 
uxAºaySize
 = 
	`uxTaskGëSy°emSèã
–
pxTaskSètusAºay
, uxAºaySize, 
NULL
 );

3701  
x
 = 0; x < 
uxAºaySize
; x++ )

3703  
pxTaskSètusAºay
[ 
x
 ].
eCuºítSèã
 )

3705 
eRódy
: 
cSètus
 = 
tskREADY_CHAR
;

3708 
eBlocked
: 
cSètus
 = 
tskBLOCKED_CHAR
;

3711 
eSu•íded
: 
cSètus
 = 
tskSUSPENDED_CHAR
;

3714 
eDñëed
: 
cSètus
 = 
tskDELETED_CHAR
;

3719 
cSètus
 = 0x00;

3725 
pcWrôeBuf„r
 = 
	`¥vWrôeNameToBuf„r
–pcWrôeBuf„r, 
pxTaskSètusAºay
[ 
x
 ].
pcTaskName
 );

3728 
	`•rötf
–
pcWrôeBuf„r
, "\t%c\t%u\t%u\t%u\r\n", 
cSètus
, ( Ë
pxTaskSètusAºay
[ 
x
 ].
uxCuºítPri‹ôy
, ( ËpxTaskSètusAºay[ x ].
usSèckHighW©îM¨k
, ( ËpxTaskSètusAºay[ x ].
xTaskNumbî
 );

3729 
pcWrôeBuf„r
 +
	`°æí
(ÖcWriteBuffer );

3733 
	`vP‹tFªe
–
pxTaskSètusAºay
 );

3737 
	`mtCOVERAGE_TEST_MARKER
();

3739 
	}
}

3744 #i‡––
c⁄figGENERATE_RUN_TIME_STATS
 =1 ) && ( 
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 > 0 ) )

3746 
	$vTaskGëRunTimeSèts
–*
pcWrôeBuf„r
 )

3748 
TaskSètus_t
 *
pxTaskSètusAºay
;

3749 vﬁ©ûê
UBa£Ty≥_t
 
uxAºaySize
, 
x
;

3750 
uöt32_t
 
ulTŸÆTime
, 
ulSètsAsPî˚¡age
;

3752 #if–
c⁄figUSE_TRACE_FACILITY
 != 1 )

3754 #îr‹ 
c⁄figUSE_TRACE_FACILITY
 
mu°
 
Æso
 
be
 
£t
 
to
 1 
ö
 
FªeRTOSC⁄fig
.
h
Åÿ
u£
 
	`vTaskGëRunTimeSèts
().

3784 *
pcWrôeBuf„r
 = 0x00;

3788 
uxAºaySize
 = 
uxCuºítNumbîOfTasks
;

3791 
pxTaskSètusAºay
 = 
	`pvP‹tMÆloc
–
uxCuºítNumbîOfTasks
 * –
TaskSètus_t
 ) );

3793 if–
pxTaskSètusAºay
 !
NULL
 )

3796 
uxAºaySize
 = 
	`uxTaskGëSy°emSèã
–
pxTaskSètusAºay
, uxAºaySize, &
ulTŸÆTime
 );

3799 
ulTŸÆTime
 /= 100UL;

3802 if–
ulTŸÆTime
 > 0 )

3805  
x
 = 0; x < 
uxAºaySize
; x++ )

3810 
ulSètsAsPî˚¡age
 = 
pxTaskSètusAºay
[ 
x
 ].
ulRunTimeCou¡î
 / 
ulTŸÆTime
;

3815 
pcWrôeBuf„r
 = 
	`¥vWrôeNameToBuf„r
–pcWrôeBuf„r, 
pxTaskSètusAºay
[ 
x
 ].
pcTaskName
 );

3817 if–
ulSètsAsPî˚¡age
 > 0UL )

3819 #ifde‡
p‹tLU_PRINTF_SPECIFIER_REQUIRED


3821 
	`•rötf
–
pcWrôeBuf„r
, "\t%lu\t\t%lu%%\r\n", 
pxTaskSètusAºay
[ 
x
 ].
ulRunTimeCou¡î
, 
ulSètsAsPî˚¡age
 );

3827 
	`•rötf
–
pcWrôeBuf„r
, "\t%u\t\t%u%%\r\n", ( Ë
pxTaskSètusAºay
[ 
x
 ].
ulRunTimeCou¡î
, ( Ë
ulSètsAsPî˚¡age
 );

3835 #ifde‡
p‹tLU_PRINTF_SPECIFIER_REQUIRED


3837 
	`•rötf
–
pcWrôeBuf„r
, "\t%lu\t\t<1%%\r\n", 
pxTaskSètusAºay
[ 
x
 ].
ulRunTimeCou¡î
 );

3843 
	`•rötf
–
pcWrôeBuf„r
, "\t%u\t\t<1%%\r\n", ( Ë
pxTaskSètusAºay
[ 
x
 ].
ulRunTimeCou¡î
 );

3848 
pcWrôeBuf„r
 +
	`°æí
(ÖcWriteBuffer );

3853 
	`mtCOVERAGE_TEST_MARKER
();

3857 
	`vP‹tFªe
–
pxTaskSètusAºay
 );

3861 
	`mtCOVERAGE_TEST_MARKER
();

3863 
	}
}

3868 
TickTy≥_t
 
	$uxTaskRe£tEvítIãmVÆue
( )

3870 
TickTy≥_t
 
uxRëu∫
;

3872 
uxRëu∫
 = 
	`li°GET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

3876 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xEvítLi°Iãm
 ), ( ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àËpxCuºítTCB->
uxPri‹ôy
 ) );

3878  
uxRëu∫
;

3879 
	}
}

3882 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

3884 *
	$pvTaskIn¸emítMuãxHñdCou¡
( )

3888 if–
pxCuºítTCB
 !
NULL
 )

3890 –
pxCuºítTCB
->
uxMuãxesHñd
 )++;

3893  
pxCuºítTCB
;

3894 
	}
}

3899 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

3901 
uöt32_t
 
	$ulTaskNŸifyTake
–
Ba£Ty≥_t
 
xCÀ¨Cou¡OnExô
, 
TickTy≥_t
 
xTicksToWaô
 )

3903 
TickTy≥_t
 
xTimeToWake
;

3904 
uöt32_t
 
ulRëu∫
;

3906 
	`èskENTER_CRITICAL
();

3909 if–
pxCuºítTCB
->
ulNŸifõdVÆue
 == 0UL )

3912 
pxCuºítTCB
->
eNŸifySèã
 = 
eWaôögNŸifiˇti⁄
;

3914 if–
xTicksToWaô
 > ( 
TickTy≥_t
 ) 0 )

3918 if–
	`uxLi°Remove
–&–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

3923 
	`p‹tRESET_READY_PRIORITY
–
pxCuºítTCB
->
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 );

3927 
	`mtCOVERAGE_TEST_MARKER
();

3930 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

3932 if–
xTicksToWaô
 =
p‹tMAX_DELAY
 )

3938 
	`vLi°In£πEnd
–&
xSu•ídedTaskLi°
, &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

3946 
xTimeToWake
 = 
xTickCou¡
 + 
xTicksToWaô
;

3947 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

3956 
xTimeToWake
 = 
xTickCou¡
 + 
xTicksToWaô
;

3957 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

3961 
	`åa˚TASK_NOTIFY_TAKE_BLOCK
();

3967 
	`p‹tYIELD_WITHIN_API
();

3971 
	`mtCOVERAGE_TEST_MARKER
();

3976 
	`mtCOVERAGE_TEST_MARKER
();

3979 
	`èskEXIT_CRITICAL
();

3981 
	`èskENTER_CRITICAL
();

3983 
	`åa˚TASK_NOTIFY_TAKE
();

3984 
ulRëu∫
 = 
pxCuºítTCB
->
ulNŸifõdVÆue
;

3986 if–
ulRëu∫
 != 0UL )

3988 if–
xCÀ¨Cou¡OnExô
 !
pdFALSE
 )

3990 
pxCuºítTCB
->
ulNŸifõdVÆue
 = 0UL;

3994 –
pxCuºítTCB
->
ulNŸifõdVÆue
 )--;

3999 
	`mtCOVERAGE_TEST_MARKER
();

4002 
pxCuºítTCB
->
eNŸifySèã
 = 
eNŸWaôögNŸifiˇti⁄
;

4004 
	`èskEXIT_CRITICAL
();

4006  
ulRëu∫
;

4007 
	}
}

4012 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

4014 
Ba£Ty≥_t
 
	$xTaskNŸifyWaô
–
uöt32_t
 
ulBôsToCÀ¨OnE¡ry
, uöt32_à
ulBôsToCÀ¨OnExô
, uöt32_à*
pulNŸifiˇti⁄VÆue
, 
TickTy≥_t
 
xTicksToWaô
 )

4016 
TickTy≥_t
 
xTimeToWake
;

4017 
Ba£Ty≥_t
 
xRëu∫
;

4019 
	`èskENTER_CRITICAL
();

4022 if–
pxCuºítTCB
->
eNŸifySèã
 !
eNŸifõd
 )

4027 
pxCuºítTCB
->
ulNŸifõdVÆue
 &~
ulBôsToCÀ¨OnE¡ry
;

4030 
pxCuºítTCB
->
eNŸifySèã
 = 
eWaôögNŸifiˇti⁄
;

4032 if–
xTicksToWaô
 > ( 
TickTy≥_t
 ) 0 )

4036 if–
	`uxLi°Remove
–&–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

4041 
	`p‹tRESET_READY_PRIORITY
–
pxCuºítTCB
->
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 );

4045 
	`mtCOVERAGE_TEST_MARKER
();

4048 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

4050 if–
xTicksToWaô
 =
p‹tMAX_DELAY
 )

4056 
	`vLi°In£πEnd
–&
xSu•ídedTaskLi°
, &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

4064 
xTimeToWake
 = 
xTickCou¡
 + 
xTicksToWaô
;

4065 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

4074 
xTimeToWake
 = 
xTickCou¡
 + 
xTicksToWaô
;

4075 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

4079 
	`åa˚TASK_NOTIFY_WAIT_BLOCK
();

4085 
	`p‹tYIELD_WITHIN_API
();

4089 
	`mtCOVERAGE_TEST_MARKER
();

4094 
	`mtCOVERAGE_TEST_MARKER
();

4097 
	`èskEXIT_CRITICAL
();

4099 
	`èskENTER_CRITICAL
();

4101 
	`åa˚TASK_NOTIFY_WAIT
();

4103 if–
pulNŸifiˇti⁄VÆue
 !
NULL
 )

4107 *
pulNŸifiˇti⁄VÆue
 = 
pxCuºítTCB
->
ulNŸifõdVÆue
;

4114 if–
pxCuºítTCB
->
eNŸifySèã
 =
eWaôögNŸifiˇti⁄
 )

4117 
xRëu∫
 = 
pdFALSE
;

4123 
pxCuºítTCB
->
ulNŸifõdVÆue
 &~
ulBôsToCÀ¨OnExô
;

4124 
xRëu∫
 = 
pdTRUE
;

4127 
pxCuºítTCB
->
eNŸifySèã
 = 
eNŸWaôögNŸifiˇti⁄
;

4129 
	`èskEXIT_CRITICAL
();

4131  
xRëu∫
;

4132 
	}
}

4137 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

4139 
Ba£Ty≥_t
 
	$xTaskGíîicNŸify
–
TaskH™dÀ_t
 
xTaskToNŸify
, 
uöt32_t
 
ulVÆue
, 
eNŸifyA˘i⁄
 
eA˘i⁄
, uöt32_à*
pulPªviousNŸifiˇti⁄VÆue
 )

4141 
TCB_t
 * 
pxTCB
;

4142 
eNŸifyVÆue
 
eOrigöÆNŸifySèã
;

4143 
Ba£Ty≥_t
 
xRëu∫
 = 
pdPASS
;

4145 
	`c⁄figASSERT
–
xTaskToNŸify
 );

4146 
pxTCB
 = ( 
TCB_t
 * ) 
xTaskToNŸify
;

4148 
	`èskENTER_CRITICAL
();

4150 if–
pulPªviousNŸifiˇti⁄VÆue
 !
NULL
 )

4152 *
pulPªviousNŸifiˇti⁄VÆue
 = 
pxTCB
->
ulNŸifõdVÆue
;

4155 
eOrigöÆNŸifySèã
 = 
pxTCB
->
eNŸifySèã
;

4157 
pxTCB
->
eNŸifySèã
 = 
eNŸifõd
;

4159  
eA˘i⁄
 )

4161 
eSëBôs
 :

4162 
pxTCB
->
ulNŸifõdVÆue
 |
ulVÆue
;

4165 
eIn¸emít
 :

4166 –
pxTCB
->
ulNŸifõdVÆue
 )++;

4169 
eSëVÆueWôhOvîwrôe
 :

4170 
pxTCB
->
ulNŸifõdVÆue
 = 
ulVÆue
;

4173 
eSëVÆueWôhoutOvîwrôe
 :

4174 if–
eOrigöÆNŸifySèã
 !
eNŸifõd
 )

4176 
pxTCB
->
ulNŸifõdVÆue
 = 
ulVÆue
;

4181 
xRëu∫
 = 
pdFAIL
;

4185 
eNoA˘i⁄
:

4191 
	`åa˚TASK_NOTIFY
();

4195 if–
eOrigöÆNŸifySèã
 =
eWaôögNŸifiˇti⁄
 )

4197 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

4198 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

4201 
	`c⁄figASSERT
–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) =
NULL
 );

4203 #if–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

4215 
	`¥vRe£tNextTaskUnblockTime
();

4219 if–
pxTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

4223 
	`èskYIELD_IF_USING_PREEMPTION
();

4227 
	`mtCOVERAGE_TEST_MARKER
();

4232 
	`mtCOVERAGE_TEST_MARKER
();

4235 
	`èskEXIT_CRITICAL
();

4237  
xRëu∫
;

4238 
	}
}

4243 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

4245 
Ba£Ty≥_t
 
	$xTaskGíîicNŸifyFromISR
–
TaskH™dÀ_t
 
xTaskToNŸify
, 
uöt32_t
 
ulVÆue
, 
eNŸifyA˘i⁄
 
eA˘i⁄
, uöt32_à*
pulPªviousNŸifiˇti⁄VÆue
, 
Ba£Ty≥_t
 *
pxHighîPri‹ôyTaskWokí
 )

4247 
TCB_t
 * 
pxTCB
;

4248 
eNŸifyVÆue
 
eOrigöÆNŸifySèã
;

4249 
Ba£Ty≥_t
 
xRëu∫
 = 
pdPASS
;

4250 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

4252 
	`c⁄figASSERT
–
xTaskToNŸify
 );

4270 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

4272 
pxTCB
 = ( 
TCB_t
 * ) 
xTaskToNŸify
;

4274 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

4276 if–
pulPªviousNŸifiˇti⁄VÆue
 !
NULL
 )

4278 *
pulPªviousNŸifiˇti⁄VÆue
 = 
pxTCB
->
ulNŸifõdVÆue
;

4281 
eOrigöÆNŸifySèã
 = 
pxTCB
->
eNŸifySèã
;

4282 
pxTCB
->
eNŸifySèã
 = 
eNŸifõd
;

4284  
eA˘i⁄
 )

4286 
eSëBôs
 :

4287 
pxTCB
->
ulNŸifõdVÆue
 |
ulVÆue
;

4290 
eIn¸emít
 :

4291 –
pxTCB
->
ulNŸifõdVÆue
 )++;

4294 
eSëVÆueWôhOvîwrôe
 :

4295 
pxTCB
->
ulNŸifõdVÆue
 = 
ulVÆue
;

4298 
eSëVÆueWôhoutOvîwrôe
 :

4299 if–
eOrigöÆNŸifySèã
 !
eNŸifõd
 )

4301 
pxTCB
->
ulNŸifõdVÆue
 = 
ulVÆue
;

4306 
xRëu∫
 = 
pdFAIL
;

4310 
eNoA˘i⁄
 :

4316 
	`åa˚TASK_NOTIFY_FROM_ISR
();

4320 if–
eOrigöÆNŸifySèã
 =
eWaôögNŸifiˇti⁄
 )

4323 
	`c⁄figASSERT
–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) =
NULL
 );

4325 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

4327 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

4328 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

4334 
	`vLi°In£πEnd
–&–
xPídögRódyLi°
 ), &–
pxTCB
->
xEvítLi°Iãm
 ) );

4337 if–
pxTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

4341 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

4343 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

4348 
	`mtCOVERAGE_TEST_MARKER
();

4352 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

4354  
xRëu∫
;

4355 
	}
}

4360 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

4362 
	$vTaskNŸifyGiveFromISR
–
TaskH™dÀ_t
 
xTaskToNŸify
, 
Ba£Ty≥_t
 *
pxHighîPri‹ôyTaskWokí
 )

4364 
TCB_t
 * 
pxTCB
;

4365 
eNŸifyVÆue
 
eOrigöÆNŸifySèã
;

4366 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

4368 
	`c⁄figASSERT
–
xTaskToNŸify
 );

4386 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

4388 
pxTCB
 = ( 
TCB_t
 * ) 
xTaskToNŸify
;

4390 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

4392 
eOrigöÆNŸifySèã
 = 
pxTCB
->
eNŸifySèã
;

4393 
pxTCB
->
eNŸifySèã
 = 
eNŸifõd
;

4397 –
pxTCB
->
ulNŸifõdVÆue
 )++;

4399 
	`åa˚TASK_NOTIFY_GIVE_FROM_ISR
();

4403 if–
eOrigöÆNŸifySèã
 =
eWaôögNŸifiˇti⁄
 )

4406 
	`c⁄figASSERT
–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) =
NULL
 );

4408 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

4410 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

4411 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

4417 
	`vLi°In£πEnd
–&–
xPídögRódyLi°
 ), &–
pxTCB
->
xEvítLi°Iãm
 ) );

4420 if–
pxTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

4424 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

4426 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

4431 
	`mtCOVERAGE_TEST_MARKER
();

4435 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

4436 
	}
}

4442 #if–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

4444 
Ba£Ty≥_t
 
	$xTaskNŸifySèãCÀ¨
–
TaskH™dÀ_t
 
xTask
 )

4446 
TCB_t
 *
pxTCB
;

4447 
Ba£Ty≥_t
 
xRëu∫
;

4449 
pxTCB
 = ( 
TCB_t
 * ) 
xTask
;

4453 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
(ÖxTCB );

4455 
	`èskENTER_CRITICAL
();

4457 if–
pxTCB
->
eNŸifySèã
 =
eNŸifõd
 )

4459 
pxTCB
->
eNŸifySèã
 = 
eNŸWaôögNŸifiˇti⁄
;

4460 
xRëu∫
 = 
pdPASS
;

4464 
xRëu∫
 = 
pdFAIL
;

4467 
	`èskEXIT_CRITICAL
();

4469  
xRëu∫
;

4470 
	}
}

4474 #ifde‡
FREERTOS_MODULE_TEST


4475 
	~"èsks_ã°_ac˚ss_fun˘i⁄s.h
"

	@
1
.
0
86
6160
C:\skuksenk\_Quadro\ARM\prj\MyLibs\MyLib.c
C:\skuksenk\_Quadro\ARM\prj\MyLibs\MyLib.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\GUI\inc\GUI.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\GUI\src\ADC_calibration_form.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\GUI\src\ADC_data_form.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\GUI\src\Buttons_Mapping.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\GUI\src\Calibration_Params_Form.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\GUI\src\GUI.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\GUI\src\LCD_params.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\GUI\src\Menu_form.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\GUI\src\Reset_Parameters_Form.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\GUI\src\Save_parameters_form.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\GUI\src\Trimmer_form.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Inc\Legacy\stm32_hal_legacy.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Inc\stm32f1xx_hal.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Inc\stm32f1xx_hal_cortex.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Inc\stm32f1xx_hal_def.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Inc\stm32f1xx_hal_dma_ex.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Inc\stm32f1xx_hal_flash.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Inc\stm32f1xx_hal_flash_ex.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Inc\stm32f1xx_hal_gpio.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Inc\stm32f1xx_hal_gpio_ex.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Inc\stm32f1xx_hal_pcd.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Inc\stm32f1xx_hal_pcd_ex.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Inc\stm32f1xx_hal_pwr.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Inc\stm32f1xx_hal_rcc.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Inc\stm32f1xx_hal_rcc_ex.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Inc\stm32f1xx_ll_usb.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Src\stm32f1xx_hal.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Src\stm32f1xx_hal_cortex.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Src\stm32f1xx_hal_flash.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Src\stm32f1xx_hal_flash_ex.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Src\stm32f1xx_hal_gpio.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Src\stm32f1xx_hal_pcd.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Src\stm32f1xx_hal_pcd_ex.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Src\stm32f1xx_hal_pwr.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Src\stm32f1xx_hal_rcc.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Src\stm32f1xx_hal_rcc_ex.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\HAL\Src\stm32f1xx_ll_usb.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\STM32F105RB_FLASH.ld
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\STM32_USB_Device_Library\Class\HID\Inc\usbd_hid.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\STM32_USB_Device_Library\Class\HID\Src\usbd_hid.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\STM32_USB_Device_Library\Core\Inc\usbd_core.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\STM32_USB_Device_Library\Core\Inc\usbd_ctlreq.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\STM32_USB_Device_Library\Core\Inc\usbd_def.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\STM32_USB_Device_Library\Core\Inc\usbd_ioreq.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\STM32_USB_Device_Library\Core\Src\usbd_core.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\STM32_USB_Device_Library\Core\Src\usbd_ctlreq.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\STM32_USB_Device_Library\Core\Src\usbd_ioreq.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\Src\ADC.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\Src\Buttons.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\Src\LCD.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\Src\PPMsig.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\Src\encoder.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\Src\flash.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\Src\main.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\Src\startup_stm32f105xc.S
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\Src\usb_device.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\Src\usbd_conf.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\Src\usbd_desc.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\cmsis\Src\system_stm32f1xx.c
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\cmsis\inc\core_cm3.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\cmsis\inc\stm32f105xc.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\cmsis\inc\stm32f1xx.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\cmsis\inc\system_stm32f1xx.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\inc\ADC.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\inc\Buttons.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\inc\FreeRTOSConfig.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\inc\GlobalObjects.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\inc\LCD.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\inc\LcdFont.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\inc\Menu.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\inc\PPMsig.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\inc\encoder.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\inc\flash.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\inc\mxconstants.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\inc\stm32f1xx_hal_conf.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\inc\usb_device.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\inc\usbd_conf.h
C:\skuksenk\_Quadro\ARM\prj\STM32F105_GamePad\inc\usbd_desc.h
C:\skuksenk\_Quadro\ARM\prj\lib\FreeRTOSV8.2.3\FreeRTOS\Source\list.c
C:\skuksenk\_Quadro\ARM\prj\lib\FreeRTOSV8.2.3\FreeRTOS\Source\portable\GCC\ARM_CM3\port.c
C:\skuksenk\_Quadro\ARM\prj\lib\FreeRTOSV8.2.3\FreeRTOS\Source\portable\GCC\ARM_CM3\portmacro.h
C:\skuksenk\_Quadro\ARM\prj\lib\FreeRTOSV8.2.3\FreeRTOS\Source\portable\MemMang\heap_5.c
C:\skuksenk\_Quadro\ARM\prj\lib\FreeRTOSV8.2.3\FreeRTOS\Source\queue.c
C:\skuksenk\_Quadro\ARM\prj\lib\FreeRTOSV8.2.3\FreeRTOS\Source\tasks.c
